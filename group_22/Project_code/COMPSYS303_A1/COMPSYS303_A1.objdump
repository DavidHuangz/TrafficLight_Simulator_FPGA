
COMPSYS303_A1.elf:     file format elf32-littlenios2
COMPSYS303_A1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000133b4 memsz 0x000133b4 flags r-x
    LOAD off    0x000143d4 vaddr 0x008133d4 paddr 0x008150d8 align 2**12
         filesz 0x00001d04 memsz 0x00001d04 flags rw-
    LOAD off    0x00016ddc vaddr 0x00816ddc paddr 0x00816ddc align 2**12
         filesz 0x00000000 memsz 0x000001e8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012a3c  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000754  00812c80  00812c80  00013c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d04  008133d4  008150d8  000143d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001e8  00816ddc  00816ddc  00016ddc  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00816fc4  00816fc4  000160d8  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01080000  01080000  000160d8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000160d8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001258  00000000  00000000  00016100  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002f789  00000000  00000000  00017358  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000bf51  00000000  00000000  00046ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e576  00000000  00000000  00052a32  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002b7c  00000000  00000000  00060fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004541  00000000  00000000  00063b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00019170  00000000  00000000  00068065  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  000811d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001b18  00000000  00000000  00081238  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00086c39  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00086c3c  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00086c3f  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00086c40  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00086c41  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00086c45  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00086c49  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00086c4d  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00086c56  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00086c5f  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000c  00000000  00000000  00086c68  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000003  00000000  00000000  00086c74  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006b318  00000000  00000000  00086c77  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00812c80 l    d  .rodata	00000000 .rodata
008133d4 l    d  .rwdata	00000000 .rwdata
00816ddc l    d  .bss	00000000 .bss
00816fc4 l    d  .sdram	00000000 .sdram
01080000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../COMPSYS303_A1_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00816e54 l     O .bss	00000018 camera_timer
00816e6c l     O .bss	00000018 timer
00816e84 l     O .bss	00000018 tlc_timer
00816ddc l     O .bss	00000004 mode
00816de0 l     O .bss	00000004 ModeChange
00816de4 l     O .bss	00000004 timerCount
008133d4 l     O .rwdata	00000018 timeout
008133ec l     O .rwdata	00000009 traffic_lights
00815088 l     O .rwdata	00000003 Button
00816de8 l     O .bss	00000004 flag
00816dec l     O .bss	00000004 CurrentState
00816df0 l     O .bss	00000004 pedestrianNS
00816df4 l     O .bss	00000004 pedestrianEW
00816df8 l     O .bss	00000004 pedestrianState
0081508c l     O .rwdata	00000004 buttonValue
00816dfc l     O .bss	00000004 PacketRecieved
00816e00 l     O .bss	00000004 RedLightFlag
00816e04 l     O .bss	00000004 timeCountMain
00816e08 l     O .bss	00000004 carEnter
00816e0c l     O .bss	00000004 carExit
00816e10 l     O .bss	00000004 timerStart
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fgetc.c
00000000 l    df *ABS*	00000000 findfp.c
00801470 l     F .text	00000008 __fp_unlock
00801484 l     F .text	0000019c __sinit.part.1
00801620 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
008133f8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
008031b0 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
00812e8e l     O .rodata	00000010 zeroes.4404
00805b74 l     F .text	000000bc __sbprintf
00812e9e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
00812faf l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00805e38 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00813c44 l     O .rwdata	00000020 lc_ctype_charset
00813c24 l     O .rwdata	00000020 lc_message_charset
00813c64 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0081314c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00809abc l     F .text	000000fc __sprint_r.part.0
00813280 l     O .rodata	00000010 blanks.4348
00813270 l     O .rodata	00000010 zeroes.4349
0080b048 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0080eb08 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080ec14 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080ec40 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080eeac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080ef8c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080f078 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0080f24c l     F .text	0000003c alt_get_errno
0080f288 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0080f4a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008150c8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0080f890 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080f9c4 l     F .text	00000034 alt_dev_reg
00813e44 l     O .rwdata	00001060 jtag_uart
00814ea4 l     O .rwdata	00000120 lcd
00814fc4 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080fcf0 l     F .text	0000020c altera_avalon_jtag_uart_irq
0080fefc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
008150d4 l     O .rwdata	00000004 colstart
00810534 l     F .text	000000b8 lcd_write_command
008105ec l     F .text	000000d8 lcd_write_data
008106c4 l     F .text	000000d0 lcd_clear_screen
00810794 l     F .text	000001ec lcd_repaint_screen
00810980 l     F .text	000000cc lcd_scroll_up
00810a4c l     F .text	000002ac lcd_handle_escape
008111d0 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00811410 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
008116c0 l     F .text	0000009c altera_avalon_uart_irq
0081175c l     F .text	000000e4 altera_avalon_uart_rxirq
00811840 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
008119dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00811bf4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00811e24 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008124d4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00816e50 g     O .bss	00000004 alt_instruction_exception_handler
008030c4 g     F .text	00000018 putchar
008090c8 g     F .text	00000074 _mprec_log10
00800f9c g     F .text	00000074 lcd_set_mode
008091b4 g     F .text	0000008c __any_on
00807d2c g     F .text	00000054 _isatty_r
00813158 g     O .rodata	00000028 __mprec_tinytens
0080f188 g     F .text	0000007c alt_main
008030dc g     F .text	000000c0 _puts_r
00816ec4 g     O .bss	00000100 alt_irq
00807e5c g     F .text	00000060 _lseek_r
008150d8 g       *ABS*	00000000 __flash_rwdata_start
008077c4 g     F .text	000000ac __sflags
0080d508 g     F .text	00000088 .hidden __eqdf2
00816fc4 g       *ABS*	00000000 __alt_heap_start
00803704 g     F .text	00000008 strtok_r
00800718 g     F .text	00000034 PedestrianReset
00803080 g     F .text	0000003c printf
0080b528 g     F .text	0000009c _wcrtomb_r
00803554 g     F .text	0000005c __sseek
008017c0 g     F .text	00000010 __sinit
0080b104 g     F .text	00000140 __swbuf_r
00816e14 g     O .bss	00000004 lcd
00807d80 g     F .text	0000007c _setlocale_r
00801628 g     F .text	00000068 __sfmoreglue
0080f228 g     F .text	00000024 __malloc_unlock
008080e8 g     F .text	0000015c memmove
008017a8 g     F .text	00000018 _cleanup
00808244 g     F .text	000000a8 _Balloc
00803668 g     F .text	0000009c __strtok_r
0080d590 g     F .text	000000dc .hidden __gtdf2
00812644 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800300 g     F .text	00000218 ChangeLED
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080221c g     F .text	0000005c _fstat_r
00816e1c g     O .bss	00000004 errno
00803414 g     F .text	00000014 __srget
008034d0 g     F .text	00000008 __seofread
00816e40 g     O .bss	00000004 alt_argv
0081d088 g       *ABS*	00000000 _gp
00812614 g     F .text	00000030 usleep
00800edc g     F .text	000000c0 handle_mode_button
008005b0 g     F .text	00000038 tlc_timer_isr
00813cc4 g     O .rwdata	00000180 alt_fd_list
008030bc g     F .text	00000008 _putchar_r
00811fc4 g     F .text	00000090 alt_find_dev
00807fa0 g     F .text	00000148 memcpy
00800c10 g     F .text	00000038 camera_timer_isr
00801478 g     F .text	0000000c _cleanup_r
0080e7f4 g     F .text	000000dc .hidden __floatsidf
00812598 g     F .text	0000007c alt_io_redirect
0080d66c g     F .text	000000f4 .hidden __ltdf2
00812c80 g       *ABS*	00000000 __DTOR_END__
0080319c g     F .text	00000014 puts
00812850 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0080996c g     F .text	00000074 __fpclassifyd
00809024 g     F .text	000000a4 __ratio
0080b02c g     F .text	0000001c __vfiprintf_internal
008005e8 g     F .text	00000130 pedestrian_tlc
008100f4 g     F .text	0000021c altera_avalon_jtag_uart_read
00803050 g     F .text	00000030 _printf_r
0080c2b8 g     F .text	00000064 .hidden __udivsi3
0080eee8 g     F .text	000000a4 isatty
008131a8 g     O .rodata	000000c8 __mprec_tens
00807dfc g     F .text	0000000c __locale_charset
008127c0 g     F .text	00000090 alt_icache_flush
00816e28 g     O .bss	00000004 __malloc_top_pad
008150a4 g     O .rwdata	00000004 __mb_cur_max
00807e2c g     F .text	0000000c _localeconv_r
00808650 g     F .text	0000003c __i2b
00807870 g     F .text	000004bc __sfvwrite_r
00803428 g     F .text	00000054 _sbrk_r
00800814 g     F .text	00000070 configurable_tlc
008093a8 g     F .text	00000060 _read_r
008150bc g     O .rwdata	00000004 alt_max_fd
008076c0 g     F .text	000000f0 _fclose_r
00801348 g     F .text	00000030 fflush
00816e24 g     O .bss	00000004 __malloc_max_sbrked_mem
0080ed2c g     F .text	00000180 alt_irq_register
00801378 g     F .text	00000070 _fgetc_r
0080c374 g     F .text	000008ac .hidden __adddf3
00808dcc g     F .text	0000010c __b2d
0080bc88 g     F .text	00000538 .hidden __umoddi3
0080f0b4 g     F .text	000000d4 lseek
00815090 g     O .rwdata	00000004 _global_impure_ptr
00809408 g     F .text	00000564 _realloc_r
00816fc4 g       *ABS*	00000000 __bss_end
008123e4 g     F .text	000000f0 alt_iic_isr_register
0080f788 g     F .text	00000108 alt_tick
0080b710 g     F .text	00000578 .hidden __udivdi3
0080b484 g     F .text	00000024 _fputwc_r
00813180 g     O .rodata	00000028 __mprec_bigtens
00808434 g     F .text	00000104 __s2b
0080e8d0 g     F .text	000000a8 .hidden __floatunsidf
00808b0c g     F .text	00000060 __mcmp
00811614 g     F .text	000000ac altera_avalon_uart_init
008017e0 g     F .text	00000018 __fp_lock_all
00812398 g     F .text	0000004c alt_ic_irq_enabled
0080f6ec g     F .text	0000009c alt_alarm_stop
00800c88 g     F .text	000001f0 camera_tlc
00803944 g     F .text	0000001c strtol
00816e38 g     O .bss	00000004 alt_irq_active
00801dbc g     F .text	00000444 _fseeko_r
01080000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
00813c9c g     O .rwdata	00000028 alt_dev_null
00811ddc g     F .text	00000048 alt_dcache_flush_all
00808538 g     F .text	00000068 __hi0bits
0080e774 g     F .text	00000080 .hidden __fixdfsi
008150d8 g       *ABS*	00000000 __ram_rwdata_end
008150b4 g     O .rwdata	00000008 alt_dev_list
0080f8cc g     F .text	000000f8 write
00809240 g     F .text	000000a0 _putc_r
00800290 g     F .text	00000070 Call_Timer
008133d4 g       *ABS*	00000000 __ram_rodata_end
0080ec7c g     F .text	000000b0 fstat
00801944 g     F .text	00000024 fprintf
0080d66c g     F .text	000000f4 .hidden __ledf2
00808884 g     F .text	00000140 __pow5mult
00809bd0 g     F .text	0000145c ___vfiprintf_internal_r
00816e34 g     O .bss	00000004 __nlocale_changed
0080c31c g     F .text	00000058 .hidden __umodsi3
00816fc4 g       *ABS*	00000000 end
00810cf8 g     F .text	000004d8 altera_avalon_lcd_16207_write
00802200 g     F .text	0000001c fseeko
008010c4 g     F .text	0000000c _atoi_r
00811c30 g     F .text	000001ac altera_avalon_uart_write
00801da0 g     F .text	0000001c fseek
0080fc30 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00812c80 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00811488 g     F .text	0000007c alt_avalon_timer_sc_init
00811564 g     F .text	00000060 altera_avalon_uart_write_fd
0080e978 g     F .text	00000064 .hidden __clzsi2
008115c4 g     F .text	00000050 altera_avalon_uart_close_fd
00810310 g     F .text	00000224 altera_avalon_jtag_uart_write
008017d0 g     F .text	00000004 __sfp_lock_acquire
00807ebc g     F .text	000000e4 memchr
00803960 g     F .text	000021f8 ___vfprintf_internal_r
00801a8c g     F .text	00000310 _free_r
00807e08 g     F .text	00000010 __locale_mb_cur_max
00812acc g     F .text	00000180 __call_exitprocs
008033a0 g     F .text	00000074 __srget_r
00816e30 g     O .bss	00000004 __mlocale_changed
00815098 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
00816e48 g     O .bss	00000004 _alt_tick_rate
008089c4 g     F .text	00000148 __lshift
00816e4c g     O .bss	00000004 _alt_nticks
0080f4dc g     F .text	000000fc read
0080fa30 g     F .text	0000009c alt_sys_init
00802ff0 g     F .text	00000060 _open_r
008129b4 g     F .text	00000118 __register_exitproc
0080868c g     F .text	000001f8 __multiply
0080ff9c g     F .text	00000068 altera_avalon_jtag_uart_close
008133d4 g       *ABS*	00000000 __ram_rwdata_start
00812c80 g       *ABS*	00000000 __ram_rodata_start
00816e9c g     O .bss	00000028 __malloc_current_mallinfo
00808ed8 g     F .text	0000014c __d2b
0080facc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0081215c g     F .text	000000a4 alt_get_fd
00812668 g     F .text	00000158 alt_busy_sleep
00805de4 g     F .text	00000054 _close_r
00803650 g     F .text	00000018 strtok
00812938 g     F .text	0000007c memcmp
0080fb8c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00816fc4 g       *ABS*	00000000 __alt_stack_base
0080fbdc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00802400 g     F .text	000000cc _fwrite_r
00805c90 g     F .text	00000154 __swsetup_r
0080cc20 g     F .text	000008e8 .hidden __divdf3
00801690 g     F .text	00000118 __sfp
0080913c g     F .text	00000078 __copybits
0081381c g     O .rwdata	00000408 __malloc_av_
008017dc g     F .text	00000004 __sinit_lock_release
0080d760 g     F .text	00000718 .hidden __muldf3
0080347c g     F .text	00000054 __sread
00812054 g     F .text	00000108 alt_find_file
00811e60 g     F .text	000000a4 alt_dev_llist_insert
0080f204 g     F .text	00000024 __malloc_lock
0080191c g     F .text	00000028 _fprintf_r
0080f63c g     F .text	000000b0 sbrk
008012ec g     F .text	0000005c _fflush_r
0080b25c g     F .text	000000c4 _calloc_r
00801904 g     F .text	00000018 fopen
00816ddc g       *ABS*	00000000 __bss_start
00802ec8 g     F .text	00000128 memset
00801010 g     F .text	000000a8 main
00816e44 g     O .bss	00000004 alt_envp
00816e20 g     O .bss	00000004 __malloc_max_total_mem
0080fb2c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080b244 g     F .text	00000018 __swbuf
0081127c g     F .text	00000134 altera_avalon_lcd_16207_init
008035b0 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
008077b0 g     F .text	00000014 fclose
0080370c g     F .text	00000238 _strtol_r
00806038 g     F .text	00001688 _dtoa_r
008026bc g     F .text	0000080c _malloc_r
0080b684 g     F .text	00000030 __ascii_wctomb
008150c0 g     O .rwdata	00000004 alt_errno
0080074c g     F .text	000000c8 NSEW_ped_isr
00802278 g     F .text	000000c4 _fwalk
008092e0 g     F .text	000000c8 putc
0080c1c0 g     F .text	00000084 .hidden __divsi3
00801968 g     F .text	00000124 _malloc_trim_r
00812c80 g       *ABS*	00000000 __CTOR_END__
008099e0 g     F .text	000000dc strcmp
00812c80 g       *ABS*	00000000 __flash_rodata_start
00812c80 g       *ABS*	00000000 __DTOR_LIST__
0080d508 g     F .text	00000088 .hidden __nedf2
0080f9f8 g     F .text	00000038 alt_irq_init
0080f5d8 g     F .text	00000064 alt_release_fd
008013e8 g     F .text	00000088 fgetc
00813290 g     O .rodata	00000100 .hidden __clz_tab
00816e2c g     O .bss	00000004 _PathLocale
008128ec g     F .text	00000014 atexit
00805c30 g     F .text	00000060 _write_r
00807e38 g     F .text	00000018 setlocale
00816e18 g     O .bss	00000004 Storeuart
00815094 g     O .rwdata	00000004 _impure_ptr
00816e3c g     O .bss	00000004 alt_argc
008010d0 g     F .text	0000021c __sflush_r
00811f64 g     F .text	00000060 _do_dtors
00807e24 g     F .text	00000008 __locale_cjk_lang
00801d9c g     F .text	00000004 _fseek_r
00800884 g     F .text	0000038c timeout_data_handler
008031cc g     F .text	000001d4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
00808d68 g     F .text	00000064 __ulp
008017f8 g     F .text	00000018 __fp_unlock_all
008113b0 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
008150ac g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00807e50 g     F .text	0000000c localeconv
00812234 g     F .text	00000050 alt_ic_isr_register
008024cc g     F .text	00000034 fwrite
008150d8 g       *ABS*	00000000 _edata
00811504 g     F .text	00000060 altera_avalon_uart_read_fd
00816fc4 g       *ABS*	00000000 _end
0080b320 g     F .text	00000164 __fputwc
00800244 g       *ABS*	00000000 __ram_exceptions_end
00810004 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0081230c g     F .text	0000008c alt_ic_irq_disable
008034d8 g     F .text	0000007c __swrite
0081509c g     O .rwdata	00000004 __malloc_trim_threshold
00807e18 g     F .text	0000000c __locale_msgcharset
00812900 g     F .text	00000038 exit
0080233c g     F .text	000000c4 _fwalk_reent
00808b6c g     F .text	000001fc __mdiff
00800518 g     F .text	00000098 simple_tlc
0080c244 g     F .text	00000074 .hidden __modsi3
008150a0 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
008017d4 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
008010b8 g     F .text	0000000c atoi
00812eae g     O .rodata	00000101 _ctype_
00800c48 g     F .text	00000040 timer_isr_function
00811988 g     F .text	00000054 altera_avalon_uart_close
00801810 g     F .text	000000f4 _fopen_r
00812c4c g     F .text	00000034 _exit
0080e9dc g     F .text	0000012c alt_alarm_start
00802500 g     F .text	000001bc __smakebuf_r
008035b8 g     F .text	00000098 strlen
0080f34c g     F .text	00000154 open
0080d590 g     F .text	000000dc .hidden __gedf2
008150a8 g     O .rwdata	00000004 __wctomb
00809bb8 g     F .text	00000018 __sprint_r
00812200 g     F .text	00000034 alt_icache_flush_all
008150c4 g     O .rwdata	00000004 alt_priority_mask
00812284 g     F .text	00000088 alt_ic_irq_enable
00805b58 g     F .text	0000001c __vfprintf_internal
00811a18 g     F .text	000001dc altera_avalon_uart_read
0080b6b4 g     F .text	0000005c _wctomb_r
0080de78 g     F .text	000008fc .hidden __subdf3
008085a0 g     F .text	000000b0 __lo0bits
008150cc g     O .rwdata	00000008 alt_alarm_list
00811f04 g     F .text	00000060 _do_ctors
0080b5c4 g     F .text	000000c0 wcrtomb
0080eb44 g     F .text	000000d0 close
00800e78 g     F .text	00000064 init_buttons_pio
0080eff4 g     F .text	00000084 alt_load
0080b4a8 g     F .text	00000080 fputwc
008017d8 g     F .text	00000004 __sinit_lock_acquire
00808314 g     F .text	00000120 __multadd
008082ec g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff780004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	109bb104 	addi	r2,r2,28356
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	109bb104 	addi	r2,r2,28356
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff78012c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff780120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a77217 	ldw	r2,-25144(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a77217 	ldw	r2,-25144(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff780248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6b42214 	ori	gp,gp,53384
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	109b7714 	ori	r2,r2,28124

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18dbf114 	ori	r3,r3,28612

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff780278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	080eff40 	call	80eff4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	080f1880 	call	80f188 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff78028c>

00800290 <Call_Timer>:
static volatile int timerStart = 0;

////////////////////////////////////////////////////////////////////////////// Helper_functions_Start //////////////////////////////////////////////////////////////////////////////

// Function to start the traffic lights timer
void Call_Timer(int* state) {
  800290:	defffc04 	addi	sp,sp,-16
  800294:	dfc00315 	stw	ra,12(sp)
  800298:	df000215 	stw	fp,8(sp)
  80029c:	df000204 	addi	fp,sp,8
  8002a0:	e13fff15 	stw	r4,-4(fp)
	void* timerContext = (void*) &timerCount;
  8002a4:	d0a75704 	addi	r2,gp,-25252
  8002a8:	e0bffe15 	stw	r2,-8(fp)
	alt_alarm_start(&tlc_timer, timeout[(*state)], tlc_timer_isr, timerContext);
  8002ac:	e0bfff17 	ldw	r2,-4(fp)
  8002b0:	10c00017 	ldw	r3,0(r2)
  8002b4:	00802074 	movhi	r2,129
  8002b8:	108cf504 	addi	r2,r2,13268
  8002bc:	18c7883a 	add	r3,r3,r3
  8002c0:	18c7883a 	add	r3,r3,r3
  8002c4:	10c5883a 	add	r2,r2,r3
  8002c8:	10800017 	ldw	r2,0(r2)
  8002cc:	e1fffe17 	ldw	r7,-8(fp)
  8002d0:	01802034 	movhi	r6,128
  8002d4:	31816c04 	addi	r6,r6,1456
  8002d8:	100b883a 	mov	r5,r2
  8002dc:	01002074 	movhi	r4,129
  8002e0:	211ba104 	addi	r4,r4,28292
  8002e4:	080e9dc0 	call	80e9dc <alt_alarm_start>
}
  8002e8:	0001883a 	nop
  8002ec:	e037883a 	mov	sp,fp
  8002f0:	dfc00117 	ldw	ra,4(sp)
  8002f4:	df000017 	ldw	fp,0(sp)
  8002f8:	dec00204 	addi	sp,sp,8
  8002fc:	f800283a 	ret

00800300 <ChangeLED>:

void ChangeLED(int* state) {
  800300:	defffd04 	addi	sp,sp,-12
  800304:	dfc00215 	stw	ra,8(sp)
  800308:	df000115 	stw	fp,4(sp)
  80030c:	df000104 	addi	fp,sp,4
  800310:	e13fff15 	stw	r4,-4(fp)
	//Switch statement for which LED is on based on mode
	switch (*state) {
  800314:	e0bfff17 	ldw	r2,-4(fp)
  800318:	10800017 	ldw	r2,0(r2)
  80031c:	10c001a8 	cmpgeui	r3,r2,6
  800320:	18006c1e 	bne	r3,zero,8004d4 <ChangeLED+0x1d4>
  800324:	100690ba 	slli	r3,r2,2
  800328:	00802034 	movhi	r2,128
  80032c:	1080cf04 	addi	r2,r2,828
  800330:	1885883a 	add	r2,r3,r2
  800334:	10800017 	ldw	r2,0(r2)
  800338:	1000683a 	jmp	r2
  80033c:	00800354 	movui	r2,13
  800340:	008003ac 	andhi	r2,zero,14
  800344:	00800380 	call	80038 <__alt_mem_sdram-0x77ffc8>
  800348:	00800414 	movui	r2,16
  80034c:	0080046c 	andhi	r2,zero,17
  800350:	00800440 	call	80044 <__alt_mem_sdram-0x77ffbc>
	case RR_NS:
		//LED bit 5,2 --> (0010 0100)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, traffic_lights[0]); //0x24
  800354:	00802074 	movhi	r2,129
  800358:	108cfb04 	addi	r2,r2,13292
  80035c:	10800003 	ldbu	r2,0(r2)
  800360:	10c03fcc 	andi	r3,r2,255
  800364:	00804434 	movhi	r2,272
  800368:	10841c04 	addi	r2,r2,4208
  80036c:	10c00035 	stwio	r3,0(r2)
		printf("5,2: NS Red\n");
  800370:	01002074 	movhi	r4,129
  800374:	210b2004 	addi	r4,r4,11392
  800378:	080319c0 	call	80319c <puts>
		break;
  80037c:	00006006 	br	800500 <ChangeLED+0x200>
	case YR_NS:
		//LED bit 5,1 --> (0010 0010)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, traffic_lights[1]); //0x22
  800380:	00802074 	movhi	r2,129
  800384:	108cfb04 	addi	r2,r2,13292
  800388:	10800043 	ldbu	r2,1(r2)
  80038c:	10c03fcc 	andi	r3,r2,255
  800390:	00804434 	movhi	r2,272
  800394:	10841c04 	addi	r2,r2,4208
  800398:	10c00035 	stwio	r3,0(r2)
		printf("5,1: NS Yellow\n");
  80039c:	01002074 	movhi	r4,129
  8003a0:	210b2304 	addi	r4,r4,11404
  8003a4:	080319c0 	call	80319c <puts>
		break;
  8003a8:	00005506 	br	800500 <ChangeLED+0x200>
	case GR_NS:
		//LED bit 5,0 --> (0010 0001)
		if (pedestrianState == 0 || mode == 0) {
  8003ac:	d0a75c17 	ldw	r2,-25232(gp)
  8003b0:	10000226 	beq	r2,zero,8003bc <ChangeLED+0xbc>
  8003b4:	d0a75517 	ldw	r2,-25260(gp)
  8003b8:	10000b1e 	bne	r2,zero,8003e8 <ChangeLED+0xe8>
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, traffic_lights[2]); //0x21
  8003bc:	00802074 	movhi	r2,129
  8003c0:	108cfb04 	addi	r2,r2,13292
  8003c4:	10800083 	ldbu	r2,2(r2)
  8003c8:	10c03fcc 	andi	r3,r2,255
  8003cc:	00804434 	movhi	r2,272
  8003d0:	10841c04 	addi	r2,r2,4208
  8003d4:	10c00035 	stwio	r3,0(r2)
			printf("5,0: NS Green\n");
  8003d8:	01002074 	movhi	r4,129
  8003dc:	210b2704 	addi	r4,r4,11420
  8003e0:	080319c0 	call	80319c <puts>
		} else { // NS Pedestrian LED bit 6,5,0 --> (0110 0001)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, traffic_lights[6]); //0x61
			printf("6,5,0, NS: Green_pedestrian\n");
		}
		break;
  8003e4:	00004606 	br	800500 <ChangeLED+0x200>
		//LED bit 5,0 --> (0010 0001)
		if (pedestrianState == 0 || mode == 0) {
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, traffic_lights[2]); //0x21
			printf("5,0: NS Green\n");
		} else { // NS Pedestrian LED bit 6,5,0 --> (0110 0001)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, traffic_lights[6]); //0x61
  8003e8:	00802074 	movhi	r2,129
  8003ec:	108cfb04 	addi	r2,r2,13292
  8003f0:	10800183 	ldbu	r2,6(r2)
  8003f4:	10c03fcc 	andi	r3,r2,255
  8003f8:	00804434 	movhi	r2,272
  8003fc:	10841c04 	addi	r2,r2,4208
  800400:	10c00035 	stwio	r3,0(r2)
			printf("6,5,0, NS: Green_pedestrian\n");
  800404:	01002074 	movhi	r4,129
  800408:	210b2b04 	addi	r4,r4,11436
  80040c:	080319c0 	call	80319c <puts>
		}
		break;
  800410:	00003b06 	br	800500 <ChangeLED+0x200>
	case RR_EW:
		//LED bit 5,2 --> (0010 0100)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, traffic_lights[3]); //0x24
  800414:	00802074 	movhi	r2,129
  800418:	108cfb04 	addi	r2,r2,13292
  80041c:	108000c3 	ldbu	r2,3(r2)
  800420:	10c03fcc 	andi	r3,r2,255
  800424:	00804434 	movhi	r2,272
  800428:	10841c04 	addi	r2,r2,4208
  80042c:	10c00035 	stwio	r3,0(r2)
		printf("5,2: EW Red\n");
  800430:	01002074 	movhi	r4,129
  800434:	210b3204 	addi	r4,r4,11464
  800438:	080319c0 	call	80319c <puts>
		break;
  80043c:	00003006 	br	800500 <ChangeLED+0x200>
	case RY_EW:
		//LED bit 4,2 --> (0001 0100)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, traffic_lights[4]); //0x14
  800440:	00802074 	movhi	r2,129
  800444:	108cfb04 	addi	r2,r2,13292
  800448:	10800103 	ldbu	r2,4(r2)
  80044c:	10c03fcc 	andi	r3,r2,255
  800450:	00804434 	movhi	r2,272
  800454:	10841c04 	addi	r2,r2,4208
  800458:	10c00035 	stwio	r3,0(r2)
		printf("4,2: EW Yellow\n");
  80045c:	01002074 	movhi	r4,129
  800460:	210b3504 	addi	r4,r4,11476
  800464:	080319c0 	call	80319c <puts>
		break;
  800468:	00002506 	br	800500 <ChangeLED+0x200>
	case RG_EW:
		//LED bit 3,2 --> (0000 1100)
		if (pedestrianState == 0 || mode == 0) {
  80046c:	d0a75c17 	ldw	r2,-25232(gp)
  800470:	10000226 	beq	r2,zero,80047c <ChangeLED+0x17c>
  800474:	d0a75517 	ldw	r2,-25260(gp)
  800478:	10000b1e 	bne	r2,zero,8004a8 <ChangeLED+0x1a8>
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, traffic_lights[5]); //0x0C
  80047c:	00802074 	movhi	r2,129
  800480:	108cfb04 	addi	r2,r2,13292
  800484:	10800143 	ldbu	r2,5(r2)
  800488:	10c03fcc 	andi	r3,r2,255
  80048c:	00804434 	movhi	r2,272
  800490:	10841c04 	addi	r2,r2,4208
  800494:	10c00035 	stwio	r3,0(r2)
			printf("3,2: EW Green\n");
  800498:	01002074 	movhi	r4,129
  80049c:	210b3904 	addi	r4,r4,11492
  8004a0:	080319c0 	call	80319c <puts>
		} else { // EW Pedestrian LED bit 2,3,7 -->(1000 1100)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, traffic_lights[7]); //0x8C
			printf("7,3,2, EW: Green_pedestrian\n");
		}
		break;
  8004a4:	00001606 	br	800500 <ChangeLED+0x200>
		//LED bit 3,2 --> (0000 1100)
		if (pedestrianState == 0 || mode == 0) {
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, traffic_lights[5]); //0x0C
			printf("3,2: EW Green\n");
		} else { // EW Pedestrian LED bit 2,3,7 -->(1000 1100)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, traffic_lights[7]); //0x8C
  8004a8:	00802074 	movhi	r2,129
  8004ac:	108cfb04 	addi	r2,r2,13292
  8004b0:	108001c3 	ldbu	r2,7(r2)
  8004b4:	10c03fcc 	andi	r3,r2,255
  8004b8:	00804434 	movhi	r2,272
  8004bc:	10841c04 	addi	r2,r2,4208
  8004c0:	10c00035 	stwio	r3,0(r2)
			printf("7,3,2, EW: Green_pedestrian\n");
  8004c4:	01002074 	movhi	r4,129
  8004c8:	210b3d04 	addi	r4,r4,11508
  8004cc:	080319c0 	call	80319c <puts>
		}
		break;
  8004d0:	00000b06 	br	800500 <ChangeLED+0x200>
	default:
		//All LED off --> (0000 0000)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, traffic_lights[8]); // 0xFF
  8004d4:	00802074 	movhi	r2,129
  8004d8:	108cfb04 	addi	r2,r2,13292
  8004dc:	10800203 	ldbu	r2,8(r2)
  8004e0:	10c03fcc 	andi	r3,r2,255
  8004e4:	00804434 	movhi	r2,272
  8004e8:	10841c04 	addi	r2,r2,4208
  8004ec:	10c00035 	stwio	r3,0(r2)
		printf("LED Off\n");
  8004f0:	01002074 	movhi	r4,129
  8004f4:	210b4404 	addi	r4,r4,11536
  8004f8:	080319c0 	call	80319c <puts>
		break;
  8004fc:	0001883a 	nop
	}
}
  800500:	0001883a 	nop
  800504:	e037883a 	mov	sp,fp
  800508:	dfc00117 	ldw	ra,4(sp)
  80050c:	df000017 	ldw	fp,0(sp)
  800510:	dec00204 	addi	sp,sp,8
  800514:	f800283a 	ret

00800518 <simple_tlc>:
////////////////////////////////////////////////////////////////////////////// Helper_functions_End //////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////// MODE_1_Start /////////////////////////////////////////////////////////////////////////////////////
void simple_tlc(int* state) {
  800518:	defffd04 	addi	sp,sp,-12
  80051c:	dfc00215 	stw	ra,8(sp)
  800520:	df000115 	stw	fp,4(sp)
  800524:	df000104 	addi	fp,sp,4
  800528:	e13fff15 	stw	r4,-4(fp)
	// Start initialization state once
	if (flag == 0) {
  80052c:	d0a75817 	ldw	r2,-25248(gp)
  800530:	1000051e 	bne	r2,zero,800548 <simple_tlc+0x30>
		Call_Timer(state);
  800534:	e13fff17 	ldw	r4,-4(fp)
  800538:	08002900 	call	800290 <Call_Timer>
		flag = 1;
  80053c:	00800044 	movi	r2,1
  800540:	d0a75815 	stw	r2,-25248(gp)
		goto
  800544:	00001206 	br	800590 <simple_tlc+0x78>
		Jump;
	}

	// Set timer value based on what state it's in
	if (timerCount > 0) {
  800548:	d0a75717 	ldw	r2,-25252(gp)
  80054c:	0080100e 	bge	zero,r2,800590 <simple_tlc+0x78>
		(*state)++;
  800550:	e0bfff17 	ldw	r2,-4(fp)
  800554:	10800017 	ldw	r2,0(r2)
  800558:	10c00044 	addi	r3,r2,1
  80055c:	e0bfff17 	ldw	r2,-4(fp)
  800560:	10c00015 	stw	r3,0(r2)
		timerCount = 0;
  800564:	d0275715 	stw	zero,-25252(gp)

		if (*state == 6) {
  800568:	e0bfff17 	ldw	r2,-4(fp)
  80056c:	10800017 	ldw	r2,0(r2)
  800570:	10800198 	cmpnei	r2,r2,6
  800574:	1000021e 	bne	r2,zero,800580 <simple_tlc+0x68>
			*state = 0;
  800578:	e0bfff17 	ldw	r2,-4(fp)
  80057c:	10000015 	stw	zero,0(r2)
		}
		Call_Timer(state);
  800580:	e13fff17 	ldw	r4,-4(fp)
  800584:	08002900 	call	800290 <Call_Timer>
		flag = 1;
  800588:	00800044 	movi	r2,1
  80058c:	d0a75815 	stw	r2,-25248(gp)
	}
	Jump: ChangeLED(state);
  800590:	e13fff17 	ldw	r4,-4(fp)
  800594:	08003000 	call	800300 <ChangeLED>
}
  800598:	0001883a 	nop
  80059c:	e037883a 	mov	sp,fp
  8005a0:	dfc00117 	ldw	ra,4(sp)
  8005a4:	df000017 	ldw	fp,0(sp)
  8005a8:	dec00204 	addi	sp,sp,8
  8005ac:	f800283a 	ret

008005b0 <tlc_timer_isr>:

alt_u32 tlc_timer_isr(void* context) {
  8005b0:	defffd04 	addi	sp,sp,-12
  8005b4:	df000215 	stw	fp,8(sp)
  8005b8:	df000204 	addi	fp,sp,8
  8005bc:	e13fff15 	stw	r4,-4(fp)
	volatile int* tiktok = (volatile int*) context;
  8005c0:	e0bfff17 	ldw	r2,-4(fp)
  8005c4:	e0bffe15 	stw	r2,-8(fp)
	*tiktok = 1;
  8005c8:	e0bffe17 	ldw	r2,-8(fp)
  8005cc:	00c00044 	movi	r3,1
  8005d0:	10c00015 	stw	r3,0(r2)
	return 0;
  8005d4:	0005883a 	mov	r2,zero
}
  8005d8:	e037883a 	mov	sp,fp
  8005dc:	df000017 	ldw	fp,0(sp)
  8005e0:	dec00104 	addi	sp,sp,4
  8005e4:	f800283a 	ret

008005e8 <pedestrian_tlc>:

////////////////////////////////////////////////////////////////////////////// MODE_1_End ////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////// MODE_2_Start //////////////////////////////////////////////////////////////////////////////
void pedestrian_tlc(int* state) {
  8005e8:	defffd04 	addi	sp,sp,-12
  8005ec:	dfc00215 	stw	ra,8(sp)
  8005f0:	df000115 	stw	fp,4(sp)
  8005f4:	df000104 	addi	fp,sp,4
  8005f8:	e13fff15 	stw	r4,-4(fp)
	if (flag == 0) {
  8005fc:	d0a75817 	ldw	r2,-25248(gp)
  800600:	1000061e 	bne	r2,zero,80061c <pedestrian_tlc+0x34>
		// Process initialization state
		PedestrianReset();
  800604:	08007180 	call	800718 <PedestrianReset>
		Call_Timer(state);
  800608:	e13fff17 	ldw	r4,-4(fp)
  80060c:	08002900 	call	800290 <Call_Timer>
		flag = 1;
  800610:	00800044 	movi	r2,1
  800614:	d0a75815 	stw	r2,-25248(gp)
		return;
  800618:	00003a06 	br	800704 <pedestrian_tlc+0x11c>
	}

	// Set timer value based on what state it's in
	if (timerCount > 0) {
  80061c:	d0a75717 	ldw	r2,-25252(gp)
  800620:	0080360e 	bge	zero,r2,8006fc <pedestrian_tlc+0x114>
		(*state)++;
  800624:	e0bfff17 	ldw	r2,-4(fp)
  800628:	10800017 	ldw	r2,0(r2)
  80062c:	10c00044 	addi	r3,r2,1
  800630:	e0bfff17 	ldw	r2,-4(fp)
  800634:	10c00015 	stw	r3,0(r2)

		// Reset state after overflow (i.e > 5)
		if (*state == 6) {
  800638:	e0bfff17 	ldw	r2,-4(fp)
  80063c:	10800017 	ldw	r2,0(r2)
  800640:	10800198 	cmpnei	r2,r2,6
  800644:	1000021e 	bne	r2,zero,800650 <pedestrian_tlc+0x68>
			*state = 0;
  800648:	e0bfff17 	ldw	r2,-4(fp)
  80064c:	10000015 	stw	zero,0(r2)
		}

		// Pedestrian signal only affected at R-R state
		switch (*state) {
  800650:	e0bfff17 	ldw	r2,-4(fp)
  800654:	10800017 	ldw	r2,0(r2)
  800658:	10c000a0 	cmpeqi	r3,r2,2
  80065c:	18000f1e 	bne	r3,zero,80069c <pedestrian_tlc+0xb4>
  800660:	10c000c8 	cmpgei	r3,r2,3
  800664:	1800021e 	bne	r3,zero,800670 <pedestrian_tlc+0x88>
  800668:	10000626 	beq	r2,zero,800684 <pedestrian_tlc+0x9c>
				pedestrianEW = 0;
			}
			pedestrianState = 0;
			break;
		default:
			break;
  80066c:	00002006 	br	8006f0 <pedestrian_tlc+0x108>
		if (*state == 6) {
			*state = 0;
		}

		// Pedestrian signal only affected at R-R state
		switch (*state) {
  800670:	10c000e0 	cmpeqi	r3,r2,3
  800674:	18000f1e 	bne	r3,zero,8006b4 <pedestrian_tlc+0xcc>
  800678:	10800160 	cmpeqi	r2,r2,5
  80067c:	1000131e 	bne	r2,zero,8006cc <pedestrian_tlc+0xe4>
				pedestrianEW = 0;
			}
			pedestrianState = 0;
			break;
		default:
			break;
  800680:	00001b06 	br	8006f0 <pedestrian_tlc+0x108>
		}

		// Pedestrian signal only affected at R-R state
		switch (*state) {
		case RR_NS:
			if (pedestrianNS == 1) {
  800684:	d0a75a17 	ldw	r2,-25240(gp)
  800688:	10800058 	cmpnei	r2,r2,1
  80068c:	1000151e 	bne	r2,zero,8006e4 <pedestrian_tlc+0xfc>
				pedestrianState = 1;
  800690:	00800044 	movi	r2,1
  800694:	d0a75c15 	stw	r2,-25232(gp)
			}
			break;
  800698:	00001206 	br	8006e4 <pedestrian_tlc+0xfc>
		case YR_NS:
			if (pedestrianState == 1) {
  80069c:	d0a75c17 	ldw	r2,-25232(gp)
  8006a0:	10800058 	cmpnei	r2,r2,1
  8006a4:	1000011e 	bne	r2,zero,8006ac <pedestrian_tlc+0xc4>
				pedestrianNS = 0;
  8006a8:	d0275a15 	stw	zero,-25240(gp)
			}
			pedestrianState = 0;
  8006ac:	d0275c15 	stw	zero,-25232(gp)
			break;
  8006b0:	00000f06 	br	8006f0 <pedestrian_tlc+0x108>
		case RR_EW:
			if (pedestrianEW == 1) {
  8006b4:	d0a75b17 	ldw	r2,-25236(gp)
  8006b8:	10800058 	cmpnei	r2,r2,1
  8006bc:	10000b1e 	bne	r2,zero,8006ec <pedestrian_tlc+0x104>
				pedestrianState = 1;
  8006c0:	00800044 	movi	r2,1
  8006c4:	d0a75c15 	stw	r2,-25232(gp)
			}
			break;
  8006c8:	00000806 	br	8006ec <pedestrian_tlc+0x104>
		case RY_EW:
			if (pedestrianState == 1) {
  8006cc:	d0a75c17 	ldw	r2,-25232(gp)
  8006d0:	10800058 	cmpnei	r2,r2,1
  8006d4:	1000011e 	bne	r2,zero,8006dc <pedestrian_tlc+0xf4>
				pedestrianEW = 0;
  8006d8:	d0275b15 	stw	zero,-25236(gp)
			}
			pedestrianState = 0;
  8006dc:	d0275c15 	stw	zero,-25232(gp)
			break;
  8006e0:	00000306 	br	8006f0 <pedestrian_tlc+0x108>
		switch (*state) {
		case RR_NS:
			if (pedestrianNS == 1) {
				pedestrianState = 1;
			}
			break;
  8006e4:	0001883a 	nop
  8006e8:	00000106 	br	8006f0 <pedestrian_tlc+0x108>
			break;
		case RR_EW:
			if (pedestrianEW == 1) {
				pedestrianState = 1;
			}
			break;
  8006ec:	0001883a 	nop
			pedestrianState = 0;
			break;
		default:
			break;
		}
		timerCount = 0;
  8006f0:	d0275715 	stw	zero,-25252(gp)
		Call_Timer(state);
  8006f4:	e13fff17 	ldw	r4,-4(fp)
  8006f8:	08002900 	call	800290 <Call_Timer>
	}
	ChangeLED(state);
  8006fc:	e13fff17 	ldw	r4,-4(fp)
  800700:	08003000 	call	800300 <ChangeLED>
}
  800704:	e037883a 	mov	sp,fp
  800708:	dfc00117 	ldw	ra,4(sp)
  80070c:	df000017 	ldw	fp,0(sp)
  800710:	dec00204 	addi	sp,sp,8
  800714:	f800283a 	ret

00800718 <PedestrianReset>:

void PedestrianReset(void) {
  800718:	deffff04 	addi	sp,sp,-4
  80071c:	df000015 	stw	fp,0(sp)
  800720:	d839883a 	mov	fp,sp
	pedestrianState = 0;
  800724:	d0275c15 	stw	zero,-25232(gp)
	pedestrianEW = 0;
  800728:	d0275b15 	stw	zero,-25236(gp)
	pedestrianNS = 0;
  80072c:	d0275a15 	stw	zero,-25240(gp)
	carEnter = 0;
  800730:	d0276015 	stw	zero,-25216(gp)
	carExit = 0;
  800734:	d0276115 	stw	zero,-25212(gp)
}
  800738:	0001883a 	nop
  80073c:	e037883a 	mov	sp,fp
  800740:	df000017 	ldw	fp,0(sp)
  800744:	dec00104 	addi	sp,sp,4
  800748:	f800283a 	ret

0080074c <NSEW_ped_isr>:

void NSEW_ped_isr(void* context, alt_u32 id) {
  80074c:	defffc04 	addi	sp,sp,-16
  800750:	df000315 	stw	fp,12(sp)
  800754:	df000304 	addi	fp,sp,12
  800758:	e13ffe15 	stw	r4,-8(fp)
  80075c:	e17fff15 	stw	r5,-4(fp)
	int* temp = (int*) context; // need to cast the context first before using it
  800760:	e0bffe17 	ldw	r2,-8(fp)
  800764:	e0bffd15 	stw	r2,-12(fp)
	(*temp) = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
  800768:	00804434 	movhi	r2,272
  80076c:	10842b04 	addi	r2,r2,4268
  800770:	10c00037 	ldwio	r3,0(r2)
  800774:	e0bffd17 	ldw	r2,-12(fp)
  800778:	10c00015 	stw	r3,0(r2)
	// clear the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
  80077c:	0007883a 	mov	r3,zero
  800780:	00804434 	movhi	r2,272
  800784:	10842b04 	addi	r2,r2,4268
  800788:	10c00035 	stwio	r3,0(r2)

	// Process key0 for pedestrianNS
	if (((*temp) & Button[0]) > 0) {
  80078c:	e0bffd17 	ldw	r2,-12(fp)
  800790:	10c00017 	ldw	r3,0(r2)
  800794:	d0a00003 	ldbu	r2,-32768(gp)
  800798:	10803fcc 	andi	r2,r2,255
  80079c:	1884703a 	and	r2,r3,r2
  8007a0:	0080020e 	bge	zero,r2,8007ac <NSEW_ped_isr+0x60>
		pedestrianNS = 1;
  8007a4:	00800044 	movi	r2,1
  8007a8:	d0a75a15 	stw	r2,-25240(gp)
	}

	// Process key1 for pedestrianEW
	if (((*temp) & Button[1]) > 0) {
  8007ac:	e0bffd17 	ldw	r2,-12(fp)
  8007b0:	10c00017 	ldw	r3,0(r2)
  8007b4:	d0a00043 	ldbu	r2,-32767(gp)
  8007b8:	10803fcc 	andi	r2,r2,255
  8007bc:	1884703a 	and	r2,r3,r2
  8007c0:	0080020e 	bge	zero,r2,8007cc <NSEW_ped_isr+0x80>
		pedestrianEW = 1;
  8007c4:	00800044 	movi	r2,1
  8007c8:	d0a75b15 	stw	r2,-25236(gp)
	}

	// Process key2 for car enter and exit
	if (((*temp) & Button[2]) > 0) {
  8007cc:	e0bffd17 	ldw	r2,-12(fp)
  8007d0:	10c00017 	ldw	r3,0(r2)
  8007d4:	d0a00083 	ldbu	r2,-32766(gp)
  8007d8:	10803fcc 	andi	r2,r2,255
  8007dc:	1884703a 	and	r2,r3,r2
  8007e0:	0080070e 	bge	zero,r2,800800 <NSEW_ped_isr+0xb4>
		if (carEnter == 0) {
  8007e4:	d0a76017 	ldw	r2,-25216(gp)
  8007e8:	1000031e 	bne	r2,zero,8007f8 <NSEW_ped_isr+0xac>
			carEnter = 1;
  8007ec:	00800044 	movi	r2,1
  8007f0:	d0a76015 	stw	r2,-25216(gp)
		} else {
			carExit = 1;
		}
	}
}
  8007f4:	00000206 	br	800800 <NSEW_ped_isr+0xb4>
	// Process key2 for car enter and exit
	if (((*temp) & Button[2]) > 0) {
		if (carEnter == 0) {
			carEnter = 1;
		} else {
			carExit = 1;
  8007f8:	00800044 	movi	r2,1
  8007fc:	d0a76115 	stw	r2,-25212(gp)
		}
	}
}
  800800:	0001883a 	nop
  800804:	e037883a 	mov	sp,fp
  800808:	df000017 	ldw	fp,0(sp)
  80080c:	dec00104 	addi	sp,sp,4
  800810:	f800283a 	ret

00800814 <configurable_tlc>:

////////////////////////////////////////////////////////////////////////////// MODE_2_End ////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////// MODE_3_Start //////////////////////////////////////////////////////////////////////////////

void configurable_tlc(int* state) {
  800814:	defffd04 	addi	sp,sp,-12
  800818:	dfc00215 	stw	ra,8(sp)
  80081c:	df000115 	stw	fp,4(sp)
  800820:	df000104 	addi	fp,sp,4
  800824:	e13fff15 	stw	r4,-4(fp)
	//Only enable switch in a safe state (i.e. R-R situations)
	// Switch 2 up for inputting new time out values and switch 2 down for activating traffic light
	if (((CurrentState == RR_NS) || (CurrentState == RR_EW))
  800828:	d0a75917 	ldw	r2,-25244(gp)
  80082c:	10000326 	beq	r2,zero,80083c <configurable_tlc+0x28>
  800830:	d0a75917 	ldw	r2,-25244(gp)
  800834:	108000d8 	cmpnei	r2,r2,3
  800838:	1000091e 	bne	r2,zero,800860 <configurable_tlc+0x4c>
			&& ((IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & Button[2]) > 0)) {
  80083c:	00804434 	movhi	r2,272
  800840:	10842404 	addi	r2,r2,4240
  800844:	10c00037 	ldwio	r3,0(r2)
  800848:	d0a00083 	ldbu	r2,-32766(gp)
  80084c:	10803fcc 	andi	r2,r2,255
  800850:	1884703a 	and	r2,r3,r2
  800854:	0080020e 	bge	zero,r2,800860 <configurable_tlc+0x4c>
		timeout_data_handler();
  800858:	08008840 	call	800884 <timeout_data_handler>
  80085c:	00000306 	br	80086c <configurable_tlc+0x58>
	} else {
		// Reuse mode 2 function
		pedestrian_tlc(state);
  800860:	e13fff17 	ldw	r4,-4(fp)
  800864:	08005e80 	call	8005e8 <pedestrian_tlc>
		PacketRecieved = 0;
  800868:	d0275d15 	stw	zero,-25228(gp)
	}
}
  80086c:	0001883a 	nop
  800870:	e037883a 	mov	sp,fp
  800874:	dfc00117 	ldw	ra,4(sp)
  800878:	df000017 	ldw	fp,0(sp)
  80087c:	dec00204 	addi	sp,sp,8
  800880:	f800283a 	ret

00800884 <timeout_data_handler>:

void timeout_data_handler() {
  800884:	deffd604 	addi	sp,sp,-168
  800888:	dfc02915 	stw	ra,164(sp)
  80088c:	df002815 	stw	fp,160(sp)
  800890:	df002804 	addi	fp,sp,160

	// Local function variables
	char S[100];
	char getChar;
	char *StringSplit;
	int unsigned Index = 0;
  800894:	e03fd915 	stw	zero,-156(fp)
	int unsigned char_logic = 0;
  800898:	e03fde15 	stw	zero,-136(fp)
	int unsigned t_n_array[6];
	int unsigned length_t_n = 0;
  80089c:	e03fda15 	stw	zero,-152(fp)
	int unsigned Out_Of_Range = 0;
  8008a0:	e03fdf15 	stw	zero,-132(fp)
	int unsigned commaCount = 0;
  8008a4:	e03fdb15 	stw	zero,-148(fp)

	// Tell user when to input new data when packet not received correctly
	if (PacketRecieved != 1) {
  8008a8:	d0a75d17 	ldw	r2,-25228(gp)
  8008ac:	10800060 	cmpeqi	r2,r2,1
  8008b0:	1000ca1e 	bne	r2,zero,800bdc <timeout_data_handler+0x358>
		fprintf(Storeuart, "\rType timeout values: ");
  8008b4:	d0a76417 	ldw	r2,-25200(gp)
  8008b8:	100f883a 	mov	r7,r2
  8008bc:	01800584 	movi	r6,22
  8008c0:	01400044 	movi	r5,1
  8008c4:	01002074 	movhi	r4,129
  8008c8:	210b4604 	addi	r4,r4,11544
  8008cc:	08024cc0 	call	8024cc <fwrite>
		fflush(Storeuart);
  8008d0:	d0a76417 	ldw	r2,-25200(gp)
  8008d4:	1009883a 	mov	r4,r2
  8008d8:	08013480 	call	801348 <fflush>
		printf("\rType timeout values: ");
  8008dc:	01002074 	movhi	r4,129
  8008e0:	210b4604 	addi	r4,r4,11544
  8008e4:	08030800 	call	803080 <printf>
	}

	// Get data from user
	while (PacketRecieved == 0) {
  8008e8:	0000bc06 	br	800bdc <timeout_data_handler+0x358>
		getChar = fgetc(Storeuart);
  8008ec:	d0a76417 	ldw	r2,-25200(gp)
  8008f0:	1009883a 	mov	r4,r2
  8008f4:	08013e80 	call	8013e8 <fgetc>
  8008f8:	e0bfe005 	stb	r2,-128(fp)
		char_logic = getChar;
  8008fc:	e0bfe007 	ldb	r2,-128(fp)
  800900:	e0bfde15 	stw	r2,-136(fp)

		// Convey received message if 'line feed' or 'carriage return' is inputed
		if ((char_logic == 13) || (char_logic == 10)) {
  800904:	e0bfde17 	ldw	r2,-136(fp)
  800908:	10800360 	cmpeqi	r2,r2,13
  80090c:	1000031e 	bne	r2,zero,80091c <timeout_data_handler+0x98>
  800910:	e0bfde17 	ldw	r2,-136(fp)
  800914:	10800298 	cmpnei	r2,r2,10
  800918:	10007d1e 	bne	r2,zero,800b10 <timeout_data_handler+0x28c>
			printf("\r\nPacket received: ");
  80091c:	01002074 	movhi	r4,129
  800920:	210b4c04 	addi	r4,r4,11568
  800924:	08030800 	call	803080 <printf>
			fprintf(Storeuart, "\r\nPacket received: ");
  800928:	d0a76417 	ldw	r2,-25200(gp)
  80092c:	100f883a 	mov	r7,r2
  800930:	018004c4 	movi	r6,19
  800934:	01400044 	movi	r5,1
  800938:	01002074 	movhi	r4,129
  80093c:	210b4c04 	addi	r4,r4,11568
  800940:	08024cc0 	call	8024cc <fwrite>
			fflush(Storeuart);
  800944:	d0a76417 	ldw	r2,-25200(gp)
  800948:	1009883a 	mov	r4,r2
  80094c:	08013480 	call	801348 <fflush>

			// Six digits so only five commas are allowed
			if (commaCount == 5) {
  800950:	e0bfdb17 	ldw	r2,-148(fp)
  800954:	10800158 	cmpnei	r2,r2,5
  800958:	1000591e 	bne	r2,zero,800ac0 <timeout_data_handler+0x23c>
				PacketRecieved = 1;
  80095c:	00800044 	movi	r2,1
  800960:	d0a75d15 	stw	r2,-25228(gp)
				// Format the input data into an array of integer type
				StringSplit = strtok(S, ",");
  800964:	e0bfe044 	addi	r2,fp,-127
  800968:	01402074 	movhi	r5,129
  80096c:	294b5104 	addi	r5,r5,11588
  800970:	1009883a 	mov	r4,r2
  800974:	08036500 	call	803650 <strtok>
  800978:	e0bfd815 	stw	r2,-160(fp)
				while (StringSplit) {
  80097c:	00001206 	br	8009c8 <timeout_data_handler+0x144>
					t_n_array[length_t_n] = atoi(StringSplit);
  800980:	e13fd817 	ldw	r4,-160(fp)
  800984:	08010b80 	call	8010b8 <atoi>
  800988:	1007883a 	mov	r3,r2
  80098c:	e0bfda17 	ldw	r2,-152(fp)
  800990:	1085883a 	add	r2,r2,r2
  800994:	1085883a 	add	r2,r2,r2
  800998:	e13fd804 	addi	r4,fp,-160
  80099c:	2085883a 	add	r2,r4,r2
  8009a0:	10802204 	addi	r2,r2,136
  8009a4:	10c00015 	stw	r3,0(r2)
					length_t_n++;
  8009a8:	e0bfda17 	ldw	r2,-152(fp)
  8009ac:	10800044 	addi	r2,r2,1
  8009b0:	e0bfda15 	stw	r2,-152(fp)
					StringSplit = strtok(NULL, ",");
  8009b4:	01402074 	movhi	r5,129
  8009b8:	294b5104 	addi	r5,r5,11588
  8009bc:	0009883a 	mov	r4,zero
  8009c0:	08036500 	call	803650 <strtok>
  8009c4:	e0bfd815 	stw	r2,-160(fp)
			// Six digits so only five commas are allowed
			if (commaCount == 5) {
				PacketRecieved = 1;
				// Format the input data into an array of integer type
				StringSplit = strtok(S, ",");
				while (StringSplit) {
  8009c8:	e0bfd817 	ldw	r2,-160(fp)
  8009cc:	103fec1e 	bne	r2,zero,800980 <__alt_mem_onchip_mem+0xff780980>
					length_t_n++;
					StringSplit = strtok(NULL, ",");
				}

				// Print out input data for user to see
				for (int i = 0; i < length_t_n; i++) {
  8009d0:	e03fdc15 	stw	zero,-144(fp)
  8009d4:	00001b06 	br	800a44 <timeout_data_handler+0x1c0>
					fprintf(Storeuart, "%d ", t_n_array[i]);
  8009d8:	d0e76417 	ldw	r3,-25200(gp)
  8009dc:	e0bfdc17 	ldw	r2,-144(fp)
  8009e0:	1085883a 	add	r2,r2,r2
  8009e4:	1085883a 	add	r2,r2,r2
  8009e8:	e13fd804 	addi	r4,fp,-160
  8009ec:	2085883a 	add	r2,r4,r2
  8009f0:	10802204 	addi	r2,r2,136
  8009f4:	10800017 	ldw	r2,0(r2)
  8009f8:	100d883a 	mov	r6,r2
  8009fc:	01402074 	movhi	r5,129
  800a00:	294b5204 	addi	r5,r5,11592
  800a04:	1809883a 	mov	r4,r3
  800a08:	08019440 	call	801944 <fprintf>
					printf("%d ", t_n_array[i]);
  800a0c:	e0bfdc17 	ldw	r2,-144(fp)
  800a10:	1085883a 	add	r2,r2,r2
  800a14:	1085883a 	add	r2,r2,r2
  800a18:	e0ffd804 	addi	r3,fp,-160
  800a1c:	1885883a 	add	r2,r3,r2
  800a20:	10802204 	addi	r2,r2,136
  800a24:	10800017 	ldw	r2,0(r2)
  800a28:	100b883a 	mov	r5,r2
  800a2c:	01002074 	movhi	r4,129
  800a30:	210b5204 	addi	r4,r4,11592
  800a34:	08030800 	call	803080 <printf>
					length_t_n++;
					StringSplit = strtok(NULL, ",");
				}

				// Print out input data for user to see
				for (int i = 0; i < length_t_n; i++) {
  800a38:	e0bfdc17 	ldw	r2,-144(fp)
  800a3c:	10800044 	addi	r2,r2,1
  800a40:	e0bfdc15 	stw	r2,-144(fp)
  800a44:	e0ffdc17 	ldw	r3,-144(fp)
  800a48:	e0bfda17 	ldw	r2,-152(fp)
  800a4c:	18bfe236 	bltu	r3,r2,8009d8 <__alt_mem_onchip_mem+0xff7809d8>
					if (((t_n_array[i] > 9999) && (t_n_array[i] < 0))) {
						Out_Of_Range = 1;
						goto invalid;
					}
				}
				fflush(Storeuart);
  800a50:	d0a76417 	ldw	r2,-25200(gp)
  800a54:	1009883a 	mov	r4,r2
  800a58:	08013480 	call	801348 <fflush>

				// Input data can only be positive and 4 digits only
				if (Out_Of_Range == 0) {
  800a5c:	e0bfdf17 	ldw	r2,-132(fp)
  800a60:	10002b1e 	bne	r2,zero,800b10 <timeout_data_handler+0x28c>
					for (int i = 0; i < 6; i++) {
  800a64:	e03fdd15 	stw	zero,-140(fp)
  800a68:	00001106 	br	800ab0 <timeout_data_handler+0x22c>
						timeout[i] = t_n_array[i];
  800a6c:	e0bfdd17 	ldw	r2,-140(fp)
  800a70:	1085883a 	add	r2,r2,r2
  800a74:	1085883a 	add	r2,r2,r2
  800a78:	e13fd804 	addi	r4,fp,-160
  800a7c:	2085883a 	add	r2,r4,r2
  800a80:	10802204 	addi	r2,r2,136
  800a84:	11000017 	ldw	r4,0(r2)
  800a88:	00802074 	movhi	r2,129
  800a8c:	108cf504 	addi	r2,r2,13268
  800a90:	e0ffdd17 	ldw	r3,-140(fp)
  800a94:	18c7883a 	add	r3,r3,r3
  800a98:	18c7883a 	add	r3,r3,r3
  800a9c:	10c5883a 	add	r2,r2,r3
  800aa0:	11000015 	stw	r4,0(r2)
				}
				fflush(Storeuart);

				// Input data can only be positive and 4 digits only
				if (Out_Of_Range == 0) {
					for (int i = 0; i < 6; i++) {
  800aa4:	e0bfdd17 	ldw	r2,-140(fp)
  800aa8:	10800044 	addi	r2,r2,1
  800aac:	e0bfdd15 	stw	r2,-140(fp)
  800ab0:	e0bfdd17 	ldw	r2,-140(fp)
  800ab4:	10800190 	cmplti	r2,r2,6
  800ab8:	103fec1e 	bne	r2,zero,800a6c <__alt_mem_onchip_mem+0xff780a6c>
						timeout[i] = t_n_array[i];
					}
					goto JumpToEnd;
  800abc:	00004906 	br	800be4 <timeout_data_handler+0x360>
				}

			} else {
				invalid: PacketRecieved = 0;
  800ac0:	d0275d15 	stw	zero,-25228(gp)
				fprintf(Storeuart, "\r\nInvalid packet received\r\n");
  800ac4:	d0a76417 	ldw	r2,-25200(gp)
  800ac8:	100f883a 	mov	r7,r2
  800acc:	018006c4 	movi	r6,27
  800ad0:	01400044 	movi	r5,1
  800ad4:	01002074 	movhi	r4,129
  800ad8:	210b5304 	addi	r4,r4,11596
  800adc:	08024cc0 	call	8024cc <fwrite>
				fflush(Storeuart);
  800ae0:	d0a76417 	ldw	r2,-25200(gp)
  800ae4:	1009883a 	mov	r4,r2
  800ae8:	08013480 	call	801348 <fflush>
				printf("\r\nInvalid packet received\r\n");
  800aec:	01002074 	movhi	r4,129
  800af0:	210b5a04 	addi	r4,r4,11624
  800af4:	080319c0 	call	80319c <puts>
				memset(S, 0, sizeof(S)); // clear the string
  800af8:	e0bfe044 	addi	r2,fp,-127
  800afc:	01801904 	movi	r6,100
  800b00:	000b883a 	mov	r5,zero
  800b04:	1009883a 	mov	r4,r2
  800b08:	0802ec80 	call	802ec8 <memset>
				goto JumpToEnd;
  800b0c:	00003506 	br	800be4 <timeout_data_handler+0x360>
			}

		}
		S[Index] = getChar;
  800b10:	e0ffe044 	addi	r3,fp,-127
  800b14:	e0bfd917 	ldw	r2,-156(fp)
  800b18:	1885883a 	add	r2,r3,r2
  800b1c:	e0ffe003 	ldbu	r3,-128(fp)
  800b20:	10c00005 	stb	r3,0(r2)
		printf("%c", S[Index]);
  800b24:	e0ffe044 	addi	r3,fp,-127
  800b28:	e0bfd917 	ldw	r2,-156(fp)
  800b2c:	1885883a 	add	r2,r3,r2
  800b30:	10800003 	ldbu	r2,0(r2)
  800b34:	10803fcc 	andi	r2,r2,255
  800b38:	1080201c 	xori	r2,r2,128
  800b3c:	10bfe004 	addi	r2,r2,-128
  800b40:	1009883a 	mov	r4,r2
  800b44:	08030c40 	call	8030c4 <putchar>

		// Check for comma
		if (S[Index] == 44) {
  800b48:	e0ffe044 	addi	r3,fp,-127
  800b4c:	e0bfd917 	ldw	r2,-156(fp)
  800b50:	1885883a 	add	r2,r3,r2
  800b54:	10800003 	ldbu	r2,0(r2)
  800b58:	10803fcc 	andi	r2,r2,255
  800b5c:	1080201c 	xori	r2,r2,128
  800b60:	10bfe004 	addi	r2,r2,-128
  800b64:	10800b18 	cmpnei	r2,r2,44
  800b68:	1000041e 	bne	r2,zero,800b7c <timeout_data_handler+0x2f8>
			commaCount++;
  800b6c:	e0bfdb17 	ldw	r2,-148(fp)
  800b70:	10800044 	addi	r2,r2,1
  800b74:	e0bfdb15 	stw	r2,-148(fp)
  800b78:	00001506 	br	800bd0 <timeout_data_handler+0x34c>
			// Check for for anything that is not a digit (i.e letters)
		} else if ((S[Index] > 57) || (S[Index] < 48)) {
  800b7c:	e0ffe044 	addi	r3,fp,-127
  800b80:	e0bfd917 	ldw	r2,-156(fp)
  800b84:	1885883a 	add	r2,r3,r2
  800b88:	10800003 	ldbu	r2,0(r2)
  800b8c:	10803fcc 	andi	r2,r2,255
  800b90:	1080201c 	xori	r2,r2,128
  800b94:	10bfe004 	addi	r2,r2,-128
  800b98:	10800e88 	cmpgei	r2,r2,58
  800b9c:	1000091e 	bne	r2,zero,800bc4 <timeout_data_handler+0x340>
  800ba0:	e0ffe044 	addi	r3,fp,-127
  800ba4:	e0bfd917 	ldw	r2,-156(fp)
  800ba8:	1885883a 	add	r2,r3,r2
  800bac:	10800003 	ldbu	r2,0(r2)
  800bb0:	10803fcc 	andi	r2,r2,255
  800bb4:	1080201c 	xori	r2,r2,128
  800bb8:	10bfe004 	addi	r2,r2,-128
  800bbc:	10800c08 	cmpgei	r2,r2,48
  800bc0:	1000031e 	bne	r2,zero,800bd0 <timeout_data_handler+0x34c>
			Out_Of_Range = 1;
  800bc4:	00800044 	movi	r2,1
  800bc8:	e0bfdf15 	stw	r2,-132(fp)
			goto invalid;
  800bcc:	003fbc06 	br	800ac0 <__alt_mem_onchip_mem+0xff780ac0>
		}
		Index++;
  800bd0:	e0bfd917 	ldw	r2,-156(fp)
  800bd4:	10800044 	addi	r2,r2,1
  800bd8:	e0bfd915 	stw	r2,-156(fp)
		fflush(Storeuart);
		printf("\rType timeout values: ");
	}

	// Get data from user
	while (PacketRecieved == 0) {
  800bdc:	d0a75d17 	ldw	r2,-25228(gp)
  800be0:	103f4226 	beq	r2,zero,8008ec <__alt_mem_onchip_mem+0xff7808ec>
			goto invalid;
		}
		Index++;
	}

	JumpToEnd: memset(S, 0, sizeof(S)); // clear the string
  800be4:	e0bfe044 	addi	r2,fp,-127
  800be8:	01801904 	movi	r6,100
  800bec:	000b883a 	mov	r5,zero
  800bf0:	1009883a 	mov	r4,r2
  800bf4:	0802ec80 	call	802ec8 <memset>

}
  800bf8:	0001883a 	nop
  800bfc:	e037883a 	mov	sp,fp
  800c00:	dfc00117 	ldw	ra,4(sp)
  800c04:	df000017 	ldw	fp,0(sp)
  800c08:	dec00204 	addi	sp,sp,8
  800c0c:	f800283a 	ret

00800c10 <camera_timer_isr>:
////////////////////////////////////////////////////////////////////////////// MODE_3_End ////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////// MODE_4_Start //////////////////////////////////////////////////////////////////////////////

alt_u32 camera_timer_isr(void* context) {
  800c10:	defffd04 	addi	sp,sp,-12
  800c14:	df000215 	stw	fp,8(sp)
  800c18:	df000204 	addi	fp,sp,8
  800c1c:	e13fff15 	stw	r4,-4(fp)
	volatile int* tiktok = (volatile int*) context;
  800c20:	e0bfff17 	ldw	r2,-4(fp)
  800c24:	e0bffe15 	stw	r2,-8(fp)
	*tiktok = 1;
  800c28:	e0bffe17 	ldw	r2,-8(fp)
  800c2c:	00c00044 	movi	r3,1
  800c30:	10c00015 	stw	r3,0(r2)
	return 0;
  800c34:	0005883a 	mov	r2,zero
}
  800c38:	e037883a 	mov	sp,fp
  800c3c:	df000017 	ldw	fp,0(sp)
  800c40:	dec00104 	addi	sp,sp,4
  800c44:	f800283a 	ret

00800c48 <timer_isr_function>:

alt_u32 timer_isr_function(void* context) {
  800c48:	defffd04 	addi	sp,sp,-12
  800c4c:	df000215 	stw	fp,8(sp)
  800c50:	df000204 	addi	fp,sp,8
  800c54:	e13fff15 	stw	r4,-4(fp)
	int *timeCount = (int*) context;
  800c58:	e0bfff17 	ldw	r2,-4(fp)
  800c5c:	e0bffe15 	stw	r2,-8(fp)
	(*timeCount)++;
  800c60:	e0bffe17 	ldw	r2,-8(fp)
  800c64:	10800017 	ldw	r2,0(r2)
  800c68:	10c00044 	addi	r3,r2,1
  800c6c:	e0bffe17 	ldw	r2,-8(fp)
  800c70:	10c00015 	stw	r3,0(r2)
	return 1000;
  800c74:	0080fa04 	movi	r2,1000
}
  800c78:	e037883a 	mov	sp,fp
  800c7c:	df000017 	ldw	fp,0(sp)
  800c80:	dec00104 	addi	sp,sp,4
  800c84:	f800283a 	ret

00800c88 <camera_tlc>:

void camera_tlc(int* state) {
  800c88:	defffb04 	addi	sp,sp,-20
  800c8c:	dfc00415 	stw	ra,16(sp)
  800c90:	df000315 	stw	fp,12(sp)
  800c94:	df000304 	addi	fp,sp,12
  800c98:	e13fff15 	stw	r4,-4(fp)
	if (timerStart == 0) {
  800c9c:	d0a76217 	ldw	r2,-25208(gp)
  800ca0:	10003d1e 	bne	r2,zero,800d98 <camera_tlc+0x110>
		if (carEnter == 1) {
  800ca4:	d0a76017 	ldw	r2,-25216(gp)
  800ca8:	10800058 	cmpnei	r2,r2,1
  800cac:	10003a1e 	bne	r2,zero,800d98 <camera_tlc+0x110>
			RedLightFlag = 0;
  800cb0:	d0275e15 	stw	zero,-25224(gp)
			// key2 activation in a red light state
			if ((*state) == RR_NS || (*state) == RR_EW) {
  800cb4:	e0bfff17 	ldw	r2,-4(fp)
  800cb8:	10800017 	ldw	r2,0(r2)
  800cbc:	10000426 	beq	r2,zero,800cd0 <camera_tlc+0x48>
  800cc0:	e0bfff17 	ldw	r2,-4(fp)
  800cc4:	10800017 	ldw	r2,0(r2)
  800cc8:	108000d8 	cmpnei	r2,r2,3
  800ccc:	10000b1e 	bne	r2,zero,800cfc <camera_tlc+0x74>
				fprintf(Storeuart, "Camera Activated and Snapshot Taken\r");
  800cd0:	d0a76417 	ldw	r2,-25200(gp)
  800cd4:	100f883a 	mov	r7,r2
  800cd8:	01800904 	movi	r6,36
  800cdc:	01400044 	movi	r5,1
  800ce0:	01002074 	movhi	r4,129
  800ce4:	210b6104 	addi	r4,r4,11652
  800ce8:	08024cc0 	call	8024cc <fwrite>
				fflush(Storeuart);
  800cec:	d0a76417 	ldw	r2,-25200(gp)
  800cf0:	1009883a 	mov	r4,r2
  800cf4:	08013480 	call	801348 <fflush>
  800cf8:	00001b06 	br	800d68 <camera_tlc+0xe0>
			}
			// key2 activation in yellow light state
			else if ((*state) == YR_NS || (*state) == RY_EW) {
  800cfc:	e0bfff17 	ldw	r2,-4(fp)
  800d00:	10800017 	ldw	r2,0(r2)
  800d04:	108000a0 	cmpeqi	r2,r2,2
  800d08:	1000041e 	bne	r2,zero,800d1c <camera_tlc+0x94>
  800d0c:	e0bfff17 	ldw	r2,-4(fp)
  800d10:	10800017 	ldw	r2,0(r2)
  800d14:	10800158 	cmpnei	r2,r2,5
  800d18:	1000131e 	bne	r2,zero,800d68 <camera_tlc+0xe0>
				fprintf(Storeuart, "Camera Activated\r");
  800d1c:	d0a76417 	ldw	r2,-25200(gp)
  800d20:	100f883a 	mov	r7,r2
  800d24:	01800444 	movi	r6,17
  800d28:	01400044 	movi	r5,1
  800d2c:	01002074 	movhi	r4,129
  800d30:	210b6b04 	addi	r4,r4,11692
  800d34:	08024cc0 	call	8024cc <fwrite>
				fflush(Storeuart);
  800d38:	d0a76417 	ldw	r2,-25200(gp)
  800d3c:	1009883a 	mov	r4,r2
  800d40:	08013480 	call	801348 <fflush>
				void* timerContext = (void*) &RedLightFlag;
  800d44:	d0a75e04 	addi	r2,gp,-25224
  800d48:	e0bffd15 	stw	r2,-12(fp)
				// Activate timer to count to 2s for yellow light duration
				alt_alarm_start(&camera_timer, 2000, camera_timer_isr,
  800d4c:	e1fffd17 	ldw	r7,-12(fp)
  800d50:	01802034 	movhi	r6,128
  800d54:	31830404 	addi	r6,r6,3088
  800d58:	0141f404 	movi	r5,2000
  800d5c:	01002074 	movhi	r4,129
  800d60:	211b9504 	addi	r4,r4,28244
  800d64:	080e9dc0 	call	80e9dc <alt_alarm_start>
						timerContext);
			}
			timeCountMain = 0;
  800d68:	d0275f15 	stw	zero,-25220(gp)
			void* timerContextMain = (void*) &timeCountMain;
  800d6c:	d0a75f04 	addi	r2,gp,-25220
  800d70:	e0bffe15 	stw	r2,-8(fp)
			// Count timer in seconds until key2 is pressed the second time
			alt_alarm_start(&timer, 1000, timer_isr_function, timerContextMain);
  800d74:	e1fffe17 	ldw	r7,-8(fp)
  800d78:	01802034 	movhi	r6,128
  800d7c:	31831204 	addi	r6,r6,3144
  800d80:	0140fa04 	movi	r5,1000
  800d84:	01002074 	movhi	r4,129
  800d88:	211b9b04 	addi	r4,r4,28268
  800d8c:	080e9dc0 	call	80e9dc <alt_alarm_start>
			timerStart = 1;
  800d90:	00800044 	movi	r2,1
  800d94:	d0a76215 	stw	r2,-25208(gp)
		}
	}

	// Print appropriate statements for when key2 is pressed
	if ((carEnter == 1)) {
  800d98:	d0a76017 	ldw	r2,-25216(gp)
  800d9c:	10800058 	cmpnei	r2,r2,1
  800da0:	10002d1e 	bne	r2,zero,800e58 <camera_tlc+0x1d0>
		if (carExit == 1) {
  800da4:	d0a76117 	ldw	r2,-25212(gp)
  800da8:	10800058 	cmpnei	r2,r2,1
  800dac:	10002a1e 	bne	r2,zero,800e58 <camera_tlc+0x1d0>
			carEnter = 0;
  800db0:	d0276015 	stw	zero,-25216(gp)
			if (RedLightFlag == 1) {
  800db4:	d0a75e17 	ldw	r2,-25224(gp)
  800db8:	10800058 	cmpnei	r2,r2,1
  800dbc:	1000171e 	bne	r2,zero,800e1c <camera_tlc+0x194>
				fprintf(Storeuart, "Snapshot Taken\r");
  800dc0:	d0a76417 	ldw	r2,-25200(gp)
  800dc4:	100f883a 	mov	r7,r2
  800dc8:	018003c4 	movi	r6,15
  800dcc:	01400044 	movi	r5,1
  800dd0:	01002074 	movhi	r4,129
  800dd4:	210b7004 	addi	r4,r4,11712
  800dd8:	08024cc0 	call	8024cc <fwrite>
				fprintf(Storeuart,
  800ddc:	d0a76417 	ldw	r2,-25200(gp)
  800de0:	d0e75f17 	ldw	r3,-25220(gp)
  800de4:	180d883a 	mov	r6,r3
  800de8:	01402074 	movhi	r5,129
  800dec:	294b7404 	addi	r5,r5,11728
  800df0:	1009883a 	mov	r4,r2
  800df4:	08019440 	call	801944 <fprintf>
						"Vehicle Left and Time in Intersection: %d sec\r\n",
						timeCountMain);
				fflush(Storeuart);
  800df8:	d0a76417 	ldw	r2,-25200(gp)
  800dfc:	1009883a 	mov	r4,r2
  800e00:	08013480 	call	801348 <fflush>
				alt_alarm_stop(&timer);
  800e04:	01002074 	movhi	r4,129
  800e08:	211b9b04 	addi	r4,r4,28268
  800e0c:	080f6ec0 	call	80f6ec <alt_alarm_stop>
				timerStart = 0;
  800e10:	d0276215 	stw	zero,-25208(gp)
				carExit = 0;
  800e14:	d0276115 	stw	zero,-25212(gp)
  800e18:	00000f06 	br	800e58 <camera_tlc+0x1d0>
			} else {
				fprintf(Storeuart,
  800e1c:	d0a76417 	ldw	r2,-25200(gp)
  800e20:	d0e75f17 	ldw	r3,-25220(gp)
  800e24:	180d883a 	mov	r6,r3
  800e28:	01402074 	movhi	r5,129
  800e2c:	294b7404 	addi	r5,r5,11728
  800e30:	1009883a 	mov	r4,r2
  800e34:	08019440 	call	801944 <fprintf>
						"Vehicle Left and Time in Intersection: %d sec\r\n",
						timeCountMain);
				fflush(Storeuart);
  800e38:	d0a76417 	ldw	r2,-25200(gp)
  800e3c:	1009883a 	mov	r4,r2
  800e40:	08013480 	call	801348 <fflush>
				alt_alarm_stop(&timer);
  800e44:	01002074 	movhi	r4,129
  800e48:	211b9b04 	addi	r4,r4,28268
  800e4c:	080f6ec0 	call	80f6ec <alt_alarm_stop>
				timerStart = 0;
  800e50:	d0276215 	stw	zero,-25208(gp)
				carExit = 0;
  800e54:	d0276115 	stw	zero,-25212(gp)
			}
		}
	}
	// Reuse mode 3 function
	configurable_tlc(state);
  800e58:	e13fff17 	ldw	r4,-4(fp)
  800e5c:	08008140 	call	800814 <configurable_tlc>
}
  800e60:	0001883a 	nop
  800e64:	e037883a 	mov	sp,fp
  800e68:	dfc00117 	ldw	ra,4(sp)
  800e6c:	df000017 	ldw	fp,0(sp)
  800e70:	dec00204 	addi	sp,sp,8
  800e74:	f800283a 	ret

00800e78 <init_buttons_pio>:
////////////////////////////////////////////////////////////////////////////// MODE_4_End ////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////// Interrupts&Buttons&LCD_Start //////////////////////////////////////////////////////////////////////////////
void init_buttons_pio(void) {
  800e78:	defffd04 	addi	sp,sp,-12
  800e7c:	dfc00215 	stw	ra,8(sp)
  800e80:	df000115 	stw	fp,4(sp)
  800e84:	df000104 	addi	fp,sp,4
	void* context = (void*) &buttonValue;
  800e88:	d0a00104 	addi	r2,gp,-32764
  800e8c:	e0bfff15 	stw	r2,-4(fp)
	// clears the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
  800e90:	0007883a 	mov	r3,zero
  800e94:	00804434 	movhi	r2,272
  800e98:	10842b04 	addi	r2,r2,4268
  800e9c:	10c00035 	stwio	r3,0(r2)
	// enable interrupts for all buttons
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0x7);
  800ea0:	00c001c4 	movi	r3,7
  800ea4:	00804434 	movhi	r2,272
  800ea8:	10842a04 	addi	r2,r2,4264
  800eac:	10c00035 	stwio	r3,0(r2)
	// register the ISR
	alt_irq_register(BUTTONS_IRQ, context, NSEW_ped_isr);
  800eb0:	01802034 	movhi	r6,128
  800eb4:	3181d304 	addi	r6,r6,1868
  800eb8:	e17fff17 	ldw	r5,-4(fp)
  800ebc:	01000104 	movi	r4,4
  800ec0:	080ed2c0 	call	80ed2c <alt_irq_register>
}
  800ec4:	0001883a 	nop
  800ec8:	e037883a 	mov	sp,fp
  800ecc:	dfc00117 	ldw	ra,4(sp)
  800ed0:	df000017 	ldw	fp,0(sp)
  800ed4:	dec00204 	addi	sp,sp,8
  800ed8:	f800283a 	ret

00800edc <handle_mode_button>:

void handle_mode_button() {
  800edc:	defffe04 	addi	sp,sp,-8
  800ee0:	dfc00115 	stw	ra,4(sp)
  800ee4:	df000015 	stw	fp,0(sp)
  800ee8:	d839883a 	mov	fp,sp
	// Only SW1 and SW0 work for mode changes
	ModeChange = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 0x03;
  800eec:	00804434 	movhi	r2,272
  800ef0:	10842404 	addi	r2,r2,4240
  800ef4:	10800037 	ldwio	r2,0(r2)
  800ef8:	108000cc 	andi	r2,r2,3
  800efc:	d0a75615 	stw	r2,-25256(gp)
	printf("Mode: %d: ", ModeChange + 1);
  800f00:	d0a75617 	ldw	r2,-25256(gp)
  800f04:	10800044 	addi	r2,r2,1
  800f08:	100b883a 	mov	r5,r2
  800f0c:	01002074 	movhi	r4,129
  800f10:	210b8004 	addi	r4,r4,11776
  800f14:	08030800 	call	803080 <printf>

	//Check for mode change
	if (ModeChange != mode) {
  800f18:	d0e75617 	ldw	r3,-25256(gp)
  800f1c:	d0a75517 	ldw	r2,-25260(gp)
  800f20:	18801826 	beq	r3,r2,800f84 <handle_mode_button+0xa8>
		// Change mode when safe (i.e red light states) and restart the variables
		if ((CurrentState == RR_NS) | (CurrentState == RR_EW)) {
  800f24:	d0a75917 	ldw	r2,-25244(gp)
  800f28:	1005003a 	cmpeq	r2,r2,zero
  800f2c:	1007883a 	mov	r3,r2
  800f30:	d0a75917 	ldw	r2,-25244(gp)
  800f34:	108000e0 	cmpeqi	r2,r2,3
  800f38:	1884b03a 	or	r2,r3,r2
  800f3c:	10803fcc 	andi	r2,r2,255
  800f40:	10001026 	beq	r2,zero,800f84 <handle_mode_button+0xa8>
			CurrentState = 0;
  800f44:	d0275915 	stw	zero,-25244(gp)
			flag = 0;
  800f48:	d0275815 	stw	zero,-25248(gp)
			mode = ModeChange;
  800f4c:	d0a75617 	ldw	r2,-25256(gp)
  800f50:	d0a75515 	stw	r2,-25260(gp)
			lcd_set_mode(mode);
  800f54:	d0a75517 	ldw	r2,-25260(gp)
  800f58:	1009883a 	mov	r4,r2
  800f5c:	0800f9c0 	call	800f9c <lcd_set_mode>
			alt_alarm_stop(&tlc_timer);
  800f60:	01002074 	movhi	r4,129
  800f64:	211ba104 	addi	r4,r4,28292
  800f68:	080f6ec0 	call	80f6ec <alt_alarm_stop>
			alt_alarm_stop(&camera_timer);
  800f6c:	01002074 	movhi	r4,129
  800f70:	211b9504 	addi	r4,r4,28244
  800f74:	080f6ec0 	call	80f6ec <alt_alarm_stop>
			alt_alarm_stop(&timer);
  800f78:	01002074 	movhi	r4,129
  800f7c:	211b9b04 	addi	r4,r4,28268
  800f80:	080f6ec0 	call	80f6ec <alt_alarm_stop>
		}
	}
}
  800f84:	0001883a 	nop
  800f88:	e037883a 	mov	sp,fp
  800f8c:	dfc00117 	ldw	ra,4(sp)
  800f90:	df000017 	ldw	fp,0(sp)
  800f94:	dec00204 	addi	sp,sp,8
  800f98:	f800283a 	ret

00800f9c <lcd_set_mode>:

void lcd_set_mode(unsigned int mode) {
  800f9c:	defffd04 	addi	sp,sp,-12
  800fa0:	dfc00215 	stw	ra,8(sp)
  800fa4:	df000115 	stw	fp,4(sp)
  800fa8:	df000104 	addi	fp,sp,4
  800fac:	e13fff15 	stw	r4,-4(fp)
	if (lcd != NULL) {
  800fb0:	d0a76317 	ldw	r2,-25204(gp)
  800fb4:	10001026 	beq	r2,zero,800ff8 <lcd_set_mode+0x5c>
		fprintf(lcd, "%c%s", 27, "[2J");
  800fb8:	d0a76317 	ldw	r2,-25204(gp)
  800fbc:	01c02074 	movhi	r7,129
  800fc0:	39cb8304 	addi	r7,r7,11788
  800fc4:	018006c4 	movi	r6,27
  800fc8:	01402074 	movhi	r5,129
  800fcc:	294b8404 	addi	r5,r5,11792
  800fd0:	1009883a 	mov	r4,r2
  800fd4:	08019440 	call	801944 <fprintf>
		fprintf(lcd, "Mode: %d\n", mode + 1);
  800fd8:	d0e76317 	ldw	r3,-25204(gp)
  800fdc:	e0bfff17 	ldw	r2,-4(fp)
  800fe0:	10800044 	addi	r2,r2,1
  800fe4:	100d883a 	mov	r6,r2
  800fe8:	01402074 	movhi	r5,129
  800fec:	294b8604 	addi	r5,r5,11800
  800ff0:	1809883a 	mov	r4,r3
  800ff4:	08019440 	call	801944 <fprintf>
	}
}
  800ff8:	0001883a 	nop
  800ffc:	e037883a 	mov	sp,fp
  801000:	dfc00117 	ldw	ra,4(sp)
  801004:	df000017 	ldw	fp,0(sp)
  801008:	dec00204 	addi	sp,sp,8
  80100c:	f800283a 	ret

00801010 <main>:
////////////////////////////////////////////////////////////////////////////// Interrupts&Buttons&LCD_End ///////////////////////////////////////////////////////////////////////////////////

int main(void) {
  801010:	defffe04 	addi	sp,sp,-8
  801014:	dfc00115 	stw	ra,4(sp)
  801018:	df000015 	stw	fp,0(sp)
  80101c:	d839883a 	mov	fp,sp
	// LCD
	lcd = fopen(LCD_NAME, "w");
  801020:	01402074 	movhi	r5,129
  801024:	294b8904 	addi	r5,r5,11812
  801028:	01002074 	movhi	r4,129
  80102c:	210b8a04 	addi	r4,r4,11816
  801030:	08019040 	call	801904 <fopen>
  801034:	d0a76315 	stw	r2,-25204(gp)
	Storeuart = fopen(UART_NAME, "w+");
  801038:	01402074 	movhi	r5,129
  80103c:	294b8d04 	addi	r5,r5,11828
  801040:	01002074 	movhi	r4,129
  801044:	210b8e04 	addi	r4,r4,11832
  801048:	08019040 	call	801904 <fopen>
  80104c:	d0a76415 	stw	r2,-25200(gp)
	lcd_set_mode(0);
  801050:	0009883a 	mov	r4,zero
  801054:	0800f9c0 	call	800f9c <lcd_set_mode>

	init_buttons_pio();
  801058:	0800e780 	call	800e78 <init_buttons_pio>

	while (1) {
		handle_mode_button();
  80105c:	0800edc0 	call	800edc <handle_mode_button>

		switch (mode) {
  801060:	d0a75517 	ldw	r2,-25260(gp)
  801064:	10c00060 	cmpeqi	r3,r2,1
  801068:	1800091e 	bne	r3,zero,801090 <main+0x80>
  80106c:	0080052e 	bgeu	zero,r2,801084 <main+0x74>
  801070:	10c000a0 	cmpeqi	r3,r2,2
  801074:	1800091e 	bne	r3,zero,80109c <main+0x8c>
  801078:	108000e0 	cmpeqi	r2,r2,3
  80107c:	10000a1e 	bne	r2,zero,8010a8 <main+0x98>
  801080:	00000c06 	br	8010b4 <main+0xa4>
		//Mode 1
		case 0:
			simple_tlc(&CurrentState);
  801084:	d1275904 	addi	r4,gp,-25244
  801088:	08005180 	call	800518 <simple_tlc>
			break;
  80108c:	00000906 	br	8010b4 <main+0xa4>
			//Mode 2
		case 1:
			pedestrian_tlc(&CurrentState);
  801090:	d1275904 	addi	r4,gp,-25244
  801094:	08005e80 	call	8005e8 <pedestrian_tlc>
			break;
  801098:	00000606 	br	8010b4 <main+0xa4>
			//Mode 3
		case 2:
			configurable_tlc(&CurrentState);
  80109c:	d1275904 	addi	r4,gp,-25244
  8010a0:	08008140 	call	800814 <configurable_tlc>
			break;
  8010a4:	00000306 	br	8010b4 <main+0xa4>
			//Mode 4
		case 3:
			camera_tlc(&CurrentState);
  8010a8:	d1275904 	addi	r4,gp,-25244
  8010ac:	0800c880 	call	800c88 <camera_tlc>
			break;
  8010b0:	0001883a 	nop
		}
	}
  8010b4:	003fe906 	br	80105c <__alt_mem_onchip_mem+0xff78105c>

008010b8 <atoi>:
  8010b8:	01800284 	movi	r6,10
  8010bc:	000b883a 	mov	r5,zero
  8010c0:	08039441 	jmpi	803944 <strtol>

008010c4 <_atoi_r>:
  8010c4:	01c00284 	movi	r7,10
  8010c8:	000d883a 	mov	r6,zero
  8010cc:	080370c1 	jmpi	80370c <_strtol_r>

008010d0 <__sflush_r>:
  8010d0:	2880030b 	ldhu	r2,12(r5)
  8010d4:	defffb04 	addi	sp,sp,-20
  8010d8:	dcc00315 	stw	r19,12(sp)
  8010dc:	dc400115 	stw	r17,4(sp)
  8010e0:	dfc00415 	stw	ra,16(sp)
  8010e4:	dc800215 	stw	r18,8(sp)
  8010e8:	dc000015 	stw	r16,0(sp)
  8010ec:	10c0020c 	andi	r3,r2,8
  8010f0:	2823883a 	mov	r17,r5
  8010f4:	2027883a 	mov	r19,r4
  8010f8:	1800311e 	bne	r3,zero,8011c0 <__sflush_r+0xf0>
  8010fc:	28c00117 	ldw	r3,4(r5)
  801100:	10820014 	ori	r2,r2,2048
  801104:	2880030d 	sth	r2,12(r5)
  801108:	00c04b0e 	bge	zero,r3,801238 <__sflush_r+0x168>
  80110c:	8a000a17 	ldw	r8,40(r17)
  801110:	40002326 	beq	r8,zero,8011a0 <__sflush_r+0xd0>
  801114:	9c000017 	ldw	r16,0(r19)
  801118:	10c4000c 	andi	r3,r2,4096
  80111c:	98000015 	stw	zero,0(r19)
  801120:	18004826 	beq	r3,zero,801244 <__sflush_r+0x174>
  801124:	89801417 	ldw	r6,80(r17)
  801128:	10c0010c 	andi	r3,r2,4
  80112c:	18000626 	beq	r3,zero,801148 <__sflush_r+0x78>
  801130:	88c00117 	ldw	r3,4(r17)
  801134:	88800c17 	ldw	r2,48(r17)
  801138:	30cdc83a 	sub	r6,r6,r3
  80113c:	10000226 	beq	r2,zero,801148 <__sflush_r+0x78>
  801140:	88800f17 	ldw	r2,60(r17)
  801144:	308dc83a 	sub	r6,r6,r2
  801148:	89400717 	ldw	r5,28(r17)
  80114c:	000f883a 	mov	r7,zero
  801150:	9809883a 	mov	r4,r19
  801154:	403ee83a 	callr	r8
  801158:	00ffffc4 	movi	r3,-1
  80115c:	10c04426 	beq	r2,r3,801270 <__sflush_r+0x1a0>
  801160:	88c0030b 	ldhu	r3,12(r17)
  801164:	89000417 	ldw	r4,16(r17)
  801168:	88000115 	stw	zero,4(r17)
  80116c:	197dffcc 	andi	r5,r3,63487
  801170:	8940030d 	sth	r5,12(r17)
  801174:	89000015 	stw	r4,0(r17)
  801178:	18c4000c 	andi	r3,r3,4096
  80117c:	18002c1e 	bne	r3,zero,801230 <__sflush_r+0x160>
  801180:	89400c17 	ldw	r5,48(r17)
  801184:	9c000015 	stw	r16,0(r19)
  801188:	28000526 	beq	r5,zero,8011a0 <__sflush_r+0xd0>
  80118c:	88801004 	addi	r2,r17,64
  801190:	28800226 	beq	r5,r2,80119c <__sflush_r+0xcc>
  801194:	9809883a 	mov	r4,r19
  801198:	0801a8c0 	call	801a8c <_free_r>
  80119c:	88000c15 	stw	zero,48(r17)
  8011a0:	0005883a 	mov	r2,zero
  8011a4:	dfc00417 	ldw	ra,16(sp)
  8011a8:	dcc00317 	ldw	r19,12(sp)
  8011ac:	dc800217 	ldw	r18,8(sp)
  8011b0:	dc400117 	ldw	r17,4(sp)
  8011b4:	dc000017 	ldw	r16,0(sp)
  8011b8:	dec00504 	addi	sp,sp,20
  8011bc:	f800283a 	ret
  8011c0:	2c800417 	ldw	r18,16(r5)
  8011c4:	903ff626 	beq	r18,zero,8011a0 <__alt_mem_onchip_mem+0xff7811a0>
  8011c8:	2c000017 	ldw	r16,0(r5)
  8011cc:	108000cc 	andi	r2,r2,3
  8011d0:	2c800015 	stw	r18,0(r5)
  8011d4:	84a1c83a 	sub	r16,r16,r18
  8011d8:	1000131e 	bne	r2,zero,801228 <__sflush_r+0x158>
  8011dc:	28800517 	ldw	r2,20(r5)
  8011e0:	88800215 	stw	r2,8(r17)
  8011e4:	04000316 	blt	zero,r16,8011f4 <__sflush_r+0x124>
  8011e8:	003fed06 	br	8011a0 <__alt_mem_onchip_mem+0xff7811a0>
  8011ec:	90a5883a 	add	r18,r18,r2
  8011f0:	043feb0e 	bge	zero,r16,8011a0 <__alt_mem_onchip_mem+0xff7811a0>
  8011f4:	88800917 	ldw	r2,36(r17)
  8011f8:	89400717 	ldw	r5,28(r17)
  8011fc:	800f883a 	mov	r7,r16
  801200:	900d883a 	mov	r6,r18
  801204:	9809883a 	mov	r4,r19
  801208:	103ee83a 	callr	r2
  80120c:	80a1c83a 	sub	r16,r16,r2
  801210:	00bff616 	blt	zero,r2,8011ec <__alt_mem_onchip_mem+0xff7811ec>
  801214:	88c0030b 	ldhu	r3,12(r17)
  801218:	00bfffc4 	movi	r2,-1
  80121c:	18c01014 	ori	r3,r3,64
  801220:	88c0030d 	sth	r3,12(r17)
  801224:	003fdf06 	br	8011a4 <__alt_mem_onchip_mem+0xff7811a4>
  801228:	0005883a 	mov	r2,zero
  80122c:	003fec06 	br	8011e0 <__alt_mem_onchip_mem+0xff7811e0>
  801230:	88801415 	stw	r2,80(r17)
  801234:	003fd206 	br	801180 <__alt_mem_onchip_mem+0xff781180>
  801238:	28c00f17 	ldw	r3,60(r5)
  80123c:	00ffb316 	blt	zero,r3,80110c <__alt_mem_onchip_mem+0xff78110c>
  801240:	003fd706 	br	8011a0 <__alt_mem_onchip_mem+0xff7811a0>
  801244:	89400717 	ldw	r5,28(r17)
  801248:	000d883a 	mov	r6,zero
  80124c:	01c00044 	movi	r7,1
  801250:	9809883a 	mov	r4,r19
  801254:	403ee83a 	callr	r8
  801258:	100d883a 	mov	r6,r2
  80125c:	00bfffc4 	movi	r2,-1
  801260:	30801426 	beq	r6,r2,8012b4 <__sflush_r+0x1e4>
  801264:	8880030b 	ldhu	r2,12(r17)
  801268:	8a000a17 	ldw	r8,40(r17)
  80126c:	003fae06 	br	801128 <__alt_mem_onchip_mem+0xff781128>
  801270:	98c00017 	ldw	r3,0(r19)
  801274:	183fba26 	beq	r3,zero,801160 <__alt_mem_onchip_mem+0xff781160>
  801278:	01000744 	movi	r4,29
  80127c:	19000626 	beq	r3,r4,801298 <__sflush_r+0x1c8>
  801280:	01000584 	movi	r4,22
  801284:	19000426 	beq	r3,r4,801298 <__sflush_r+0x1c8>
  801288:	88c0030b 	ldhu	r3,12(r17)
  80128c:	18c01014 	ori	r3,r3,64
  801290:	88c0030d 	sth	r3,12(r17)
  801294:	003fc306 	br	8011a4 <__alt_mem_onchip_mem+0xff7811a4>
  801298:	8880030b 	ldhu	r2,12(r17)
  80129c:	88c00417 	ldw	r3,16(r17)
  8012a0:	88000115 	stw	zero,4(r17)
  8012a4:	10bdffcc 	andi	r2,r2,63487
  8012a8:	8880030d 	sth	r2,12(r17)
  8012ac:	88c00015 	stw	r3,0(r17)
  8012b0:	003fb306 	br	801180 <__alt_mem_onchip_mem+0xff781180>
  8012b4:	98800017 	ldw	r2,0(r19)
  8012b8:	103fea26 	beq	r2,zero,801264 <__alt_mem_onchip_mem+0xff781264>
  8012bc:	00c00744 	movi	r3,29
  8012c0:	10c00226 	beq	r2,r3,8012cc <__sflush_r+0x1fc>
  8012c4:	00c00584 	movi	r3,22
  8012c8:	10c0031e 	bne	r2,r3,8012d8 <__sflush_r+0x208>
  8012cc:	9c000015 	stw	r16,0(r19)
  8012d0:	0005883a 	mov	r2,zero
  8012d4:	003fb306 	br	8011a4 <__alt_mem_onchip_mem+0xff7811a4>
  8012d8:	88c0030b 	ldhu	r3,12(r17)
  8012dc:	3005883a 	mov	r2,r6
  8012e0:	18c01014 	ori	r3,r3,64
  8012e4:	88c0030d 	sth	r3,12(r17)
  8012e8:	003fae06 	br	8011a4 <__alt_mem_onchip_mem+0xff7811a4>

008012ec <_fflush_r>:
  8012ec:	defffd04 	addi	sp,sp,-12
  8012f0:	dc000115 	stw	r16,4(sp)
  8012f4:	dfc00215 	stw	ra,8(sp)
  8012f8:	2021883a 	mov	r16,r4
  8012fc:	20000226 	beq	r4,zero,801308 <_fflush_r+0x1c>
  801300:	20800e17 	ldw	r2,56(r4)
  801304:	10000c26 	beq	r2,zero,801338 <_fflush_r+0x4c>
  801308:	2880030f 	ldh	r2,12(r5)
  80130c:	1000051e 	bne	r2,zero,801324 <_fflush_r+0x38>
  801310:	0005883a 	mov	r2,zero
  801314:	dfc00217 	ldw	ra,8(sp)
  801318:	dc000117 	ldw	r16,4(sp)
  80131c:	dec00304 	addi	sp,sp,12
  801320:	f800283a 	ret
  801324:	8009883a 	mov	r4,r16
  801328:	dfc00217 	ldw	ra,8(sp)
  80132c:	dc000117 	ldw	r16,4(sp)
  801330:	dec00304 	addi	sp,sp,12
  801334:	08010d01 	jmpi	8010d0 <__sflush_r>
  801338:	d9400015 	stw	r5,0(sp)
  80133c:	08017c00 	call	8017c0 <__sinit>
  801340:	d9400017 	ldw	r5,0(sp)
  801344:	003ff006 	br	801308 <__alt_mem_onchip_mem+0xff781308>

00801348 <fflush>:
  801348:	20000526 	beq	r4,zero,801360 <fflush+0x18>
  80134c:	00802074 	movhi	r2,129
  801350:	10942504 	addi	r2,r2,20628
  801354:	200b883a 	mov	r5,r4
  801358:	11000017 	ldw	r4,0(r2)
  80135c:	08012ec1 	jmpi	8012ec <_fflush_r>
  801360:	00802074 	movhi	r2,129
  801364:	10942404 	addi	r2,r2,20624
  801368:	11000017 	ldw	r4,0(r2)
  80136c:	01402034 	movhi	r5,128
  801370:	2944bb04 	addi	r5,r5,4844
  801374:	080233c1 	jmpi	80233c <_fwalk_reent>

00801378 <_fgetc_r>:
  801378:	defffd04 	addi	sp,sp,-12
  80137c:	dc000115 	stw	r16,4(sp)
  801380:	dfc00215 	stw	ra,8(sp)
  801384:	2021883a 	mov	r16,r4
  801388:	20000226 	beq	r4,zero,801394 <_fgetc_r+0x1c>
  80138c:	20800e17 	ldw	r2,56(r4)
  801390:	10000c26 	beq	r2,zero,8013c4 <_fgetc_r+0x4c>
  801394:	28800117 	ldw	r2,4(r5)
  801398:	10bfffc4 	addi	r2,r2,-1
  80139c:	28800115 	stw	r2,4(r5)
  8013a0:	10000c16 	blt	r2,zero,8013d4 <_fgetc_r+0x5c>
  8013a4:	28800017 	ldw	r2,0(r5)
  8013a8:	10c00044 	addi	r3,r2,1
  8013ac:	28c00015 	stw	r3,0(r5)
  8013b0:	10800003 	ldbu	r2,0(r2)
  8013b4:	dfc00217 	ldw	ra,8(sp)
  8013b8:	dc000117 	ldw	r16,4(sp)
  8013bc:	dec00304 	addi	sp,sp,12
  8013c0:	f800283a 	ret
  8013c4:	d9400015 	stw	r5,0(sp)
  8013c8:	08017c00 	call	8017c0 <__sinit>
  8013cc:	d9400017 	ldw	r5,0(sp)
  8013d0:	003ff006 	br	801394 <__alt_mem_onchip_mem+0xff781394>
  8013d4:	8009883a 	mov	r4,r16
  8013d8:	dfc00217 	ldw	ra,8(sp)
  8013dc:	dc000117 	ldw	r16,4(sp)
  8013e0:	dec00304 	addi	sp,sp,12
  8013e4:	08033a01 	jmpi	8033a0 <__srget_r>

008013e8 <fgetc>:
  8013e8:	00802074 	movhi	r2,129
  8013ec:	defffd04 	addi	sp,sp,-12
  8013f0:	10942504 	addi	r2,r2,20628
  8013f4:	dc400115 	stw	r17,4(sp)
  8013f8:	14400017 	ldw	r17,0(r2)
  8013fc:	dc000015 	stw	r16,0(sp)
  801400:	dfc00215 	stw	ra,8(sp)
  801404:	2021883a 	mov	r16,r4
  801408:	88000226 	beq	r17,zero,801414 <fgetc+0x2c>
  80140c:	88800e17 	ldw	r2,56(r17)
  801410:	10000d26 	beq	r2,zero,801448 <fgetc+0x60>
  801414:	80800117 	ldw	r2,4(r16)
  801418:	10bfffc4 	addi	r2,r2,-1
  80141c:	80800115 	stw	r2,4(r16)
  801420:	10000c16 	blt	r2,zero,801454 <fgetc+0x6c>
  801424:	80800017 	ldw	r2,0(r16)
  801428:	10c00044 	addi	r3,r2,1
  80142c:	80c00015 	stw	r3,0(r16)
  801430:	10800003 	ldbu	r2,0(r2)
  801434:	dfc00217 	ldw	ra,8(sp)
  801438:	dc400117 	ldw	r17,4(sp)
  80143c:	dc000017 	ldw	r16,0(sp)
  801440:	dec00304 	addi	sp,sp,12
  801444:	f800283a 	ret
  801448:	8809883a 	mov	r4,r17
  80144c:	08017c00 	call	8017c0 <__sinit>
  801450:	003ff006 	br	801414 <__alt_mem_onchip_mem+0xff781414>
  801454:	800b883a 	mov	r5,r16
  801458:	8809883a 	mov	r4,r17
  80145c:	dfc00217 	ldw	ra,8(sp)
  801460:	dc400117 	ldw	r17,4(sp)
  801464:	dc000017 	ldw	r16,0(sp)
  801468:	dec00304 	addi	sp,sp,12
  80146c:	08033a01 	jmpi	8033a0 <__srget_r>

00801470 <__fp_unlock>:
  801470:	0005883a 	mov	r2,zero
  801474:	f800283a 	ret

00801478 <_cleanup_r>:
  801478:	01402034 	movhi	r5,128
  80147c:	295db004 	addi	r5,r5,30400
  801480:	080233c1 	jmpi	80233c <_fwalk_reent>

00801484 <__sinit.part.1>:
  801484:	defff704 	addi	sp,sp,-36
  801488:	00c02034 	movhi	r3,128
  80148c:	dfc00815 	stw	ra,32(sp)
  801490:	ddc00715 	stw	r23,28(sp)
  801494:	dd800615 	stw	r22,24(sp)
  801498:	dd400515 	stw	r21,20(sp)
  80149c:	dd000415 	stw	r20,16(sp)
  8014a0:	dcc00315 	stw	r19,12(sp)
  8014a4:	dc800215 	stw	r18,8(sp)
  8014a8:	dc400115 	stw	r17,4(sp)
  8014ac:	dc000015 	stw	r16,0(sp)
  8014b0:	18c51e04 	addi	r3,r3,5240
  8014b4:	24000117 	ldw	r16,4(r4)
  8014b8:	20c00f15 	stw	r3,60(r4)
  8014bc:	2080bb04 	addi	r2,r4,748
  8014c0:	00c000c4 	movi	r3,3
  8014c4:	20c0b915 	stw	r3,740(r4)
  8014c8:	2080ba15 	stw	r2,744(r4)
  8014cc:	2000b815 	stw	zero,736(r4)
  8014d0:	05c00204 	movi	r23,8
  8014d4:	00800104 	movi	r2,4
  8014d8:	2025883a 	mov	r18,r4
  8014dc:	b80d883a 	mov	r6,r23
  8014e0:	81001704 	addi	r4,r16,92
  8014e4:	000b883a 	mov	r5,zero
  8014e8:	80000015 	stw	zero,0(r16)
  8014ec:	80000115 	stw	zero,4(r16)
  8014f0:	80000215 	stw	zero,8(r16)
  8014f4:	8080030d 	sth	r2,12(r16)
  8014f8:	80001915 	stw	zero,100(r16)
  8014fc:	8000038d 	sth	zero,14(r16)
  801500:	80000415 	stw	zero,16(r16)
  801504:	80000515 	stw	zero,20(r16)
  801508:	80000615 	stw	zero,24(r16)
  80150c:	0802ec80 	call	802ec8 <memset>
  801510:	05802034 	movhi	r22,128
  801514:	94400217 	ldw	r17,8(r18)
  801518:	05402034 	movhi	r21,128
  80151c:	05002034 	movhi	r20,128
  801520:	04c02034 	movhi	r19,128
  801524:	b58d1f04 	addi	r22,r22,13436
  801528:	ad4d3604 	addi	r21,r21,13528
  80152c:	a50d5504 	addi	r20,r20,13652
  801530:	9ccd6c04 	addi	r19,r19,13744
  801534:	85800815 	stw	r22,32(r16)
  801538:	85400915 	stw	r21,36(r16)
  80153c:	85000a15 	stw	r20,40(r16)
  801540:	84c00b15 	stw	r19,44(r16)
  801544:	84000715 	stw	r16,28(r16)
  801548:	00800284 	movi	r2,10
  80154c:	8880030d 	sth	r2,12(r17)
  801550:	00800044 	movi	r2,1
  801554:	b80d883a 	mov	r6,r23
  801558:	89001704 	addi	r4,r17,92
  80155c:	000b883a 	mov	r5,zero
  801560:	88000015 	stw	zero,0(r17)
  801564:	88000115 	stw	zero,4(r17)
  801568:	88000215 	stw	zero,8(r17)
  80156c:	88001915 	stw	zero,100(r17)
  801570:	8880038d 	sth	r2,14(r17)
  801574:	88000415 	stw	zero,16(r17)
  801578:	88000515 	stw	zero,20(r17)
  80157c:	88000615 	stw	zero,24(r17)
  801580:	0802ec80 	call	802ec8 <memset>
  801584:	94000317 	ldw	r16,12(r18)
  801588:	00800484 	movi	r2,18
  80158c:	8c400715 	stw	r17,28(r17)
  801590:	8d800815 	stw	r22,32(r17)
  801594:	8d400915 	stw	r21,36(r17)
  801598:	8d000a15 	stw	r20,40(r17)
  80159c:	8cc00b15 	stw	r19,44(r17)
  8015a0:	8080030d 	sth	r2,12(r16)
  8015a4:	00800084 	movi	r2,2
  8015a8:	80000015 	stw	zero,0(r16)
  8015ac:	80000115 	stw	zero,4(r16)
  8015b0:	80000215 	stw	zero,8(r16)
  8015b4:	80001915 	stw	zero,100(r16)
  8015b8:	8080038d 	sth	r2,14(r16)
  8015bc:	80000415 	stw	zero,16(r16)
  8015c0:	80000515 	stw	zero,20(r16)
  8015c4:	80000615 	stw	zero,24(r16)
  8015c8:	b80d883a 	mov	r6,r23
  8015cc:	000b883a 	mov	r5,zero
  8015d0:	81001704 	addi	r4,r16,92
  8015d4:	0802ec80 	call	802ec8 <memset>
  8015d8:	00800044 	movi	r2,1
  8015dc:	84000715 	stw	r16,28(r16)
  8015e0:	85800815 	stw	r22,32(r16)
  8015e4:	85400915 	stw	r21,36(r16)
  8015e8:	85000a15 	stw	r20,40(r16)
  8015ec:	84c00b15 	stw	r19,44(r16)
  8015f0:	90800e15 	stw	r2,56(r18)
  8015f4:	dfc00817 	ldw	ra,32(sp)
  8015f8:	ddc00717 	ldw	r23,28(sp)
  8015fc:	dd800617 	ldw	r22,24(sp)
  801600:	dd400517 	ldw	r21,20(sp)
  801604:	dd000417 	ldw	r20,16(sp)
  801608:	dcc00317 	ldw	r19,12(sp)
  80160c:	dc800217 	ldw	r18,8(sp)
  801610:	dc400117 	ldw	r17,4(sp)
  801614:	dc000017 	ldw	r16,0(sp)
  801618:	dec00904 	addi	sp,sp,36
  80161c:	f800283a 	ret

00801620 <__fp_lock>:
  801620:	0005883a 	mov	r2,zero
  801624:	f800283a 	ret

00801628 <__sfmoreglue>:
  801628:	defffc04 	addi	sp,sp,-16
  80162c:	dc400115 	stw	r17,4(sp)
  801630:	2c7fffc4 	addi	r17,r5,-1
  801634:	8c401a24 	muli	r17,r17,104
  801638:	dc800215 	stw	r18,8(sp)
  80163c:	2825883a 	mov	r18,r5
  801640:	89401d04 	addi	r5,r17,116
  801644:	dc000015 	stw	r16,0(sp)
  801648:	dfc00315 	stw	ra,12(sp)
  80164c:	08026bc0 	call	8026bc <_malloc_r>
  801650:	1021883a 	mov	r16,r2
  801654:	10000726 	beq	r2,zero,801674 <__sfmoreglue+0x4c>
  801658:	11000304 	addi	r4,r2,12
  80165c:	10000015 	stw	zero,0(r2)
  801660:	14800115 	stw	r18,4(r2)
  801664:	11000215 	stw	r4,8(r2)
  801668:	89801a04 	addi	r6,r17,104
  80166c:	000b883a 	mov	r5,zero
  801670:	0802ec80 	call	802ec8 <memset>
  801674:	8005883a 	mov	r2,r16
  801678:	dfc00317 	ldw	ra,12(sp)
  80167c:	dc800217 	ldw	r18,8(sp)
  801680:	dc400117 	ldw	r17,4(sp)
  801684:	dc000017 	ldw	r16,0(sp)
  801688:	dec00404 	addi	sp,sp,16
  80168c:	f800283a 	ret

00801690 <__sfp>:
  801690:	defffb04 	addi	sp,sp,-20
  801694:	dc000015 	stw	r16,0(sp)
  801698:	04002074 	movhi	r16,129
  80169c:	84142404 	addi	r16,r16,20624
  8016a0:	dcc00315 	stw	r19,12(sp)
  8016a4:	2027883a 	mov	r19,r4
  8016a8:	81000017 	ldw	r4,0(r16)
  8016ac:	dfc00415 	stw	ra,16(sp)
  8016b0:	dc800215 	stw	r18,8(sp)
  8016b4:	20800e17 	ldw	r2,56(r4)
  8016b8:	dc400115 	stw	r17,4(sp)
  8016bc:	1000021e 	bne	r2,zero,8016c8 <__sfp+0x38>
  8016c0:	08014840 	call	801484 <__sinit.part.1>
  8016c4:	81000017 	ldw	r4,0(r16)
  8016c8:	2480b804 	addi	r18,r4,736
  8016cc:	047fffc4 	movi	r17,-1
  8016d0:	91000117 	ldw	r4,4(r18)
  8016d4:	94000217 	ldw	r16,8(r18)
  8016d8:	213fffc4 	addi	r4,r4,-1
  8016dc:	20000a16 	blt	r4,zero,801708 <__sfp+0x78>
  8016e0:	8080030f 	ldh	r2,12(r16)
  8016e4:	10000c26 	beq	r2,zero,801718 <__sfp+0x88>
  8016e8:	80c01d04 	addi	r3,r16,116
  8016ec:	00000206 	br	8016f8 <__sfp+0x68>
  8016f0:	18bfe60f 	ldh	r2,-104(r3)
  8016f4:	10000826 	beq	r2,zero,801718 <__sfp+0x88>
  8016f8:	213fffc4 	addi	r4,r4,-1
  8016fc:	1c3ffd04 	addi	r16,r3,-12
  801700:	18c01a04 	addi	r3,r3,104
  801704:	247ffa1e 	bne	r4,r17,8016f0 <__alt_mem_onchip_mem+0xff7816f0>
  801708:	90800017 	ldw	r2,0(r18)
  80170c:	10001d26 	beq	r2,zero,801784 <__sfp+0xf4>
  801710:	1025883a 	mov	r18,r2
  801714:	003fee06 	br	8016d0 <__alt_mem_onchip_mem+0xff7816d0>
  801718:	00bfffc4 	movi	r2,-1
  80171c:	8080038d 	sth	r2,14(r16)
  801720:	00800044 	movi	r2,1
  801724:	8080030d 	sth	r2,12(r16)
  801728:	80001915 	stw	zero,100(r16)
  80172c:	80000015 	stw	zero,0(r16)
  801730:	80000215 	stw	zero,8(r16)
  801734:	80000115 	stw	zero,4(r16)
  801738:	80000415 	stw	zero,16(r16)
  80173c:	80000515 	stw	zero,20(r16)
  801740:	80000615 	stw	zero,24(r16)
  801744:	01800204 	movi	r6,8
  801748:	000b883a 	mov	r5,zero
  80174c:	81001704 	addi	r4,r16,92
  801750:	0802ec80 	call	802ec8 <memset>
  801754:	8005883a 	mov	r2,r16
  801758:	80000c15 	stw	zero,48(r16)
  80175c:	80000d15 	stw	zero,52(r16)
  801760:	80001115 	stw	zero,68(r16)
  801764:	80001215 	stw	zero,72(r16)
  801768:	dfc00417 	ldw	ra,16(sp)
  80176c:	dcc00317 	ldw	r19,12(sp)
  801770:	dc800217 	ldw	r18,8(sp)
  801774:	dc400117 	ldw	r17,4(sp)
  801778:	dc000017 	ldw	r16,0(sp)
  80177c:	dec00504 	addi	sp,sp,20
  801780:	f800283a 	ret
  801784:	01400104 	movi	r5,4
  801788:	9809883a 	mov	r4,r19
  80178c:	08016280 	call	801628 <__sfmoreglue>
  801790:	90800015 	stw	r2,0(r18)
  801794:	103fde1e 	bne	r2,zero,801710 <__alt_mem_onchip_mem+0xff781710>
  801798:	00800304 	movi	r2,12
  80179c:	98800015 	stw	r2,0(r19)
  8017a0:	0005883a 	mov	r2,zero
  8017a4:	003ff006 	br	801768 <__alt_mem_onchip_mem+0xff781768>

008017a8 <_cleanup>:
  8017a8:	00802074 	movhi	r2,129
  8017ac:	10942404 	addi	r2,r2,20624
  8017b0:	11000017 	ldw	r4,0(r2)
  8017b4:	01402034 	movhi	r5,128
  8017b8:	295db004 	addi	r5,r5,30400
  8017bc:	080233c1 	jmpi	80233c <_fwalk_reent>

008017c0 <__sinit>:
  8017c0:	20800e17 	ldw	r2,56(r4)
  8017c4:	10000126 	beq	r2,zero,8017cc <__sinit+0xc>
  8017c8:	f800283a 	ret
  8017cc:	08014841 	jmpi	801484 <__sinit.part.1>

008017d0 <__sfp_lock_acquire>:
  8017d0:	f800283a 	ret

008017d4 <__sfp_lock_release>:
  8017d4:	f800283a 	ret

008017d8 <__sinit_lock_acquire>:
  8017d8:	f800283a 	ret

008017dc <__sinit_lock_release>:
  8017dc:	f800283a 	ret

008017e0 <__fp_lock_all>:
  8017e0:	00802074 	movhi	r2,129
  8017e4:	10942504 	addi	r2,r2,20628
  8017e8:	11000017 	ldw	r4,0(r2)
  8017ec:	01402034 	movhi	r5,128
  8017f0:	29458804 	addi	r5,r5,5664
  8017f4:	08022781 	jmpi	802278 <_fwalk>

008017f8 <__fp_unlock_all>:
  8017f8:	00802074 	movhi	r2,129
  8017fc:	10942504 	addi	r2,r2,20628
  801800:	11000017 	ldw	r4,0(r2)
  801804:	01402034 	movhi	r5,128
  801808:	29451c04 	addi	r5,r5,5232
  80180c:	08022781 	jmpi	802278 <_fwalk>

00801810 <_fopen_r>:
  801810:	defffa04 	addi	sp,sp,-24
  801814:	3005883a 	mov	r2,r6
  801818:	dcc00415 	stw	r19,16(sp)
  80181c:	d80d883a 	mov	r6,sp
  801820:	2827883a 	mov	r19,r5
  801824:	100b883a 	mov	r5,r2
  801828:	dc800315 	stw	r18,12(sp)
  80182c:	dfc00515 	stw	ra,20(sp)
  801830:	dc400215 	stw	r17,8(sp)
  801834:	dc000115 	stw	r16,4(sp)
  801838:	2025883a 	mov	r18,r4
  80183c:	08077c40 	call	8077c4 <__sflags>
  801840:	10002726 	beq	r2,zero,8018e0 <_fopen_r+0xd0>
  801844:	9009883a 	mov	r4,r18
  801848:	1023883a 	mov	r17,r2
  80184c:	08016900 	call	801690 <__sfp>
  801850:	1021883a 	mov	r16,r2
  801854:	10002226 	beq	r2,zero,8018e0 <_fopen_r+0xd0>
  801858:	d9800017 	ldw	r6,0(sp)
  80185c:	01c06d84 	movi	r7,438
  801860:	980b883a 	mov	r5,r19
  801864:	9009883a 	mov	r4,r18
  801868:	0802ff00 	call	802ff0 <_open_r>
  80186c:	10001916 	blt	r2,zero,8018d4 <_fopen_r+0xc4>
  801870:	8080038d 	sth	r2,14(r16)
  801874:	00802034 	movhi	r2,128
  801878:	108d1f04 	addi	r2,r2,13436
  80187c:	80800815 	stw	r2,32(r16)
  801880:	00802034 	movhi	r2,128
  801884:	108d3604 	addi	r2,r2,13528
  801888:	80800915 	stw	r2,36(r16)
  80188c:	00802034 	movhi	r2,128
  801890:	108d5504 	addi	r2,r2,13652
  801894:	80800a15 	stw	r2,40(r16)
  801898:	00802034 	movhi	r2,128
  80189c:	108d6c04 	addi	r2,r2,13744
  8018a0:	8440030d 	sth	r17,12(r16)
  8018a4:	84000715 	stw	r16,28(r16)
  8018a8:	80800b15 	stw	r2,44(r16)
  8018ac:	8c40400c 	andi	r17,r17,256
  8018b0:	88000d1e 	bne	r17,zero,8018e8 <_fopen_r+0xd8>
  8018b4:	8005883a 	mov	r2,r16
  8018b8:	dfc00517 	ldw	ra,20(sp)
  8018bc:	dcc00417 	ldw	r19,16(sp)
  8018c0:	dc800317 	ldw	r18,12(sp)
  8018c4:	dc400217 	ldw	r17,8(sp)
  8018c8:	dc000117 	ldw	r16,4(sp)
  8018cc:	dec00604 	addi	sp,sp,24
  8018d0:	f800283a 	ret
  8018d4:	08017d00 	call	8017d0 <__sfp_lock_acquire>
  8018d8:	8000030d 	sth	zero,12(r16)
  8018dc:	08017d40 	call	8017d4 <__sfp_lock_release>
  8018e0:	0005883a 	mov	r2,zero
  8018e4:	003ff406 	br	8018b8 <__alt_mem_onchip_mem+0xff7818b8>
  8018e8:	01c00084 	movi	r7,2
  8018ec:	000d883a 	mov	r6,zero
  8018f0:	800b883a 	mov	r5,r16
  8018f4:	9009883a 	mov	r4,r18
  8018f8:	0801d9c0 	call	801d9c <_fseek_r>
  8018fc:	8005883a 	mov	r2,r16
  801900:	003fed06 	br	8018b8 <__alt_mem_onchip_mem+0xff7818b8>

00801904 <fopen>:
  801904:	00802074 	movhi	r2,129
  801908:	10942504 	addi	r2,r2,20628
  80190c:	280d883a 	mov	r6,r5
  801910:	200b883a 	mov	r5,r4
  801914:	11000017 	ldw	r4,0(r2)
  801918:	08018101 	jmpi	801810 <_fopen_r>

0080191c <_fprintf_r>:
  80191c:	defffe04 	addi	sp,sp,-8
  801920:	2809883a 	mov	r4,r5
  801924:	300b883a 	mov	r5,r6
  801928:	dfc00015 	stw	ra,0(sp)
  80192c:	d9c00115 	stw	r7,4(sp)
  801930:	d9800104 	addi	r6,sp,4
  801934:	0805b580 	call	805b58 <__vfprintf_internal>
  801938:	dfc00017 	ldw	ra,0(sp)
  80193c:	dec00204 	addi	sp,sp,8
  801940:	f800283a 	ret

00801944 <fprintf>:
  801944:	defffd04 	addi	sp,sp,-12
  801948:	dfc00015 	stw	ra,0(sp)
  80194c:	d9800115 	stw	r6,4(sp)
  801950:	d9c00215 	stw	r7,8(sp)
  801954:	d9800104 	addi	r6,sp,4
  801958:	0805b580 	call	805b58 <__vfprintf_internal>
  80195c:	dfc00017 	ldw	ra,0(sp)
  801960:	dec00304 	addi	sp,sp,12
  801964:	f800283a 	ret

00801968 <_malloc_trim_r>:
  801968:	defffb04 	addi	sp,sp,-20
  80196c:	dcc00315 	stw	r19,12(sp)
  801970:	04c02074 	movhi	r19,129
  801974:	dc800215 	stw	r18,8(sp)
  801978:	dc400115 	stw	r17,4(sp)
  80197c:	dc000015 	stw	r16,0(sp)
  801980:	dfc00415 	stw	ra,16(sp)
  801984:	2821883a 	mov	r16,r5
  801988:	9cce0704 	addi	r19,r19,14364
  80198c:	2025883a 	mov	r18,r4
  801990:	080f2040 	call	80f204 <__malloc_lock>
  801994:	98800217 	ldw	r2,8(r19)
  801998:	14400117 	ldw	r17,4(r2)
  80199c:	00bfff04 	movi	r2,-4
  8019a0:	88a2703a 	and	r17,r17,r2
  8019a4:	8c21c83a 	sub	r16,r17,r16
  8019a8:	8403fbc4 	addi	r16,r16,4079
  8019ac:	8020d33a 	srli	r16,r16,12
  8019b0:	0083ffc4 	movi	r2,4095
  8019b4:	843fffc4 	addi	r16,r16,-1
  8019b8:	8020933a 	slli	r16,r16,12
  8019bc:	1400060e 	bge	r2,r16,8019d8 <_malloc_trim_r+0x70>
  8019c0:	000b883a 	mov	r5,zero
  8019c4:	9009883a 	mov	r4,r18
  8019c8:	08034280 	call	803428 <_sbrk_r>
  8019cc:	98c00217 	ldw	r3,8(r19)
  8019d0:	1c47883a 	add	r3,r3,r17
  8019d4:	10c00a26 	beq	r2,r3,801a00 <_malloc_trim_r+0x98>
  8019d8:	9009883a 	mov	r4,r18
  8019dc:	080f2280 	call	80f228 <__malloc_unlock>
  8019e0:	0005883a 	mov	r2,zero
  8019e4:	dfc00417 	ldw	ra,16(sp)
  8019e8:	dcc00317 	ldw	r19,12(sp)
  8019ec:	dc800217 	ldw	r18,8(sp)
  8019f0:	dc400117 	ldw	r17,4(sp)
  8019f4:	dc000017 	ldw	r16,0(sp)
  8019f8:	dec00504 	addi	sp,sp,20
  8019fc:	f800283a 	ret
  801a00:	040bc83a 	sub	r5,zero,r16
  801a04:	9009883a 	mov	r4,r18
  801a08:	08034280 	call	803428 <_sbrk_r>
  801a0c:	00ffffc4 	movi	r3,-1
  801a10:	10c00d26 	beq	r2,r3,801a48 <_malloc_trim_r+0xe0>
  801a14:	00c02074 	movhi	r3,129
  801a18:	18dba704 	addi	r3,r3,28316
  801a1c:	18800017 	ldw	r2,0(r3)
  801a20:	99000217 	ldw	r4,8(r19)
  801a24:	8c23c83a 	sub	r17,r17,r16
  801a28:	8c400054 	ori	r17,r17,1
  801a2c:	1421c83a 	sub	r16,r2,r16
  801a30:	24400115 	stw	r17,4(r4)
  801a34:	9009883a 	mov	r4,r18
  801a38:	1c000015 	stw	r16,0(r3)
  801a3c:	080f2280 	call	80f228 <__malloc_unlock>
  801a40:	00800044 	movi	r2,1
  801a44:	003fe706 	br	8019e4 <__alt_mem_onchip_mem+0xff7819e4>
  801a48:	000b883a 	mov	r5,zero
  801a4c:	9009883a 	mov	r4,r18
  801a50:	08034280 	call	803428 <_sbrk_r>
  801a54:	99000217 	ldw	r4,8(r19)
  801a58:	014003c4 	movi	r5,15
  801a5c:	1107c83a 	sub	r3,r2,r4
  801a60:	28ffdd0e 	bge	r5,r3,8019d8 <__alt_mem_onchip_mem+0xff7819d8>
  801a64:	01402074 	movhi	r5,129
  801a68:	29542604 	addi	r5,r5,20632
  801a6c:	29400017 	ldw	r5,0(r5)
  801a70:	18c00054 	ori	r3,r3,1
  801a74:	20c00115 	stw	r3,4(r4)
  801a78:	00c02074 	movhi	r3,129
  801a7c:	1145c83a 	sub	r2,r2,r5
  801a80:	18dba704 	addi	r3,r3,28316
  801a84:	18800015 	stw	r2,0(r3)
  801a88:	003fd306 	br	8019d8 <__alt_mem_onchip_mem+0xff7819d8>

00801a8c <_free_r>:
  801a8c:	28004126 	beq	r5,zero,801b94 <_free_r+0x108>
  801a90:	defffd04 	addi	sp,sp,-12
  801a94:	dc400115 	stw	r17,4(sp)
  801a98:	dc000015 	stw	r16,0(sp)
  801a9c:	2023883a 	mov	r17,r4
  801aa0:	2821883a 	mov	r16,r5
  801aa4:	dfc00215 	stw	ra,8(sp)
  801aa8:	080f2040 	call	80f204 <__malloc_lock>
  801aac:	81ffff17 	ldw	r7,-4(r16)
  801ab0:	00bfff84 	movi	r2,-2
  801ab4:	01002074 	movhi	r4,129
  801ab8:	81bffe04 	addi	r6,r16,-8
  801abc:	3884703a 	and	r2,r7,r2
  801ac0:	210e0704 	addi	r4,r4,14364
  801ac4:	308b883a 	add	r5,r6,r2
  801ac8:	2a400117 	ldw	r9,4(r5)
  801acc:	22000217 	ldw	r8,8(r4)
  801ad0:	00ffff04 	movi	r3,-4
  801ad4:	48c6703a 	and	r3,r9,r3
  801ad8:	2a005726 	beq	r5,r8,801c38 <_free_r+0x1ac>
  801adc:	28c00115 	stw	r3,4(r5)
  801ae0:	39c0004c 	andi	r7,r7,1
  801ae4:	3800091e 	bne	r7,zero,801b0c <_free_r+0x80>
  801ae8:	823ffe17 	ldw	r8,-8(r16)
  801aec:	22400204 	addi	r9,r4,8
  801af0:	320dc83a 	sub	r6,r6,r8
  801af4:	31c00217 	ldw	r7,8(r6)
  801af8:	1205883a 	add	r2,r2,r8
  801afc:	3a406526 	beq	r7,r9,801c94 <_free_r+0x208>
  801b00:	32000317 	ldw	r8,12(r6)
  801b04:	3a000315 	stw	r8,12(r7)
  801b08:	41c00215 	stw	r7,8(r8)
  801b0c:	28cf883a 	add	r7,r5,r3
  801b10:	39c00117 	ldw	r7,4(r7)
  801b14:	39c0004c 	andi	r7,r7,1
  801b18:	38003a26 	beq	r7,zero,801c04 <_free_r+0x178>
  801b1c:	10c00054 	ori	r3,r2,1
  801b20:	30c00115 	stw	r3,4(r6)
  801b24:	3087883a 	add	r3,r6,r2
  801b28:	18800015 	stw	r2,0(r3)
  801b2c:	00c07fc4 	movi	r3,511
  801b30:	18801936 	bltu	r3,r2,801b98 <_free_r+0x10c>
  801b34:	1004d0fa 	srli	r2,r2,3
  801b38:	01c00044 	movi	r7,1
  801b3c:	21400117 	ldw	r5,4(r4)
  801b40:	10c00044 	addi	r3,r2,1
  801b44:	18c7883a 	add	r3,r3,r3
  801b48:	1005d0ba 	srai	r2,r2,2
  801b4c:	18c7883a 	add	r3,r3,r3
  801b50:	18c7883a 	add	r3,r3,r3
  801b54:	1907883a 	add	r3,r3,r4
  801b58:	3884983a 	sll	r2,r7,r2
  801b5c:	19c00017 	ldw	r7,0(r3)
  801b60:	1a3ffe04 	addi	r8,r3,-8
  801b64:	1144b03a 	or	r2,r2,r5
  801b68:	32000315 	stw	r8,12(r6)
  801b6c:	31c00215 	stw	r7,8(r6)
  801b70:	20800115 	stw	r2,4(r4)
  801b74:	19800015 	stw	r6,0(r3)
  801b78:	39800315 	stw	r6,12(r7)
  801b7c:	8809883a 	mov	r4,r17
  801b80:	dfc00217 	ldw	ra,8(sp)
  801b84:	dc400117 	ldw	r17,4(sp)
  801b88:	dc000017 	ldw	r16,0(sp)
  801b8c:	dec00304 	addi	sp,sp,12
  801b90:	080f2281 	jmpi	80f228 <__malloc_unlock>
  801b94:	f800283a 	ret
  801b98:	100ad27a 	srli	r5,r2,9
  801b9c:	00c00104 	movi	r3,4
  801ba0:	19404a36 	bltu	r3,r5,801ccc <_free_r+0x240>
  801ba4:	100ad1ba 	srli	r5,r2,6
  801ba8:	28c00e44 	addi	r3,r5,57
  801bac:	18c7883a 	add	r3,r3,r3
  801bb0:	29400e04 	addi	r5,r5,56
  801bb4:	18c7883a 	add	r3,r3,r3
  801bb8:	18c7883a 	add	r3,r3,r3
  801bbc:	1909883a 	add	r4,r3,r4
  801bc0:	20c00017 	ldw	r3,0(r4)
  801bc4:	01c02074 	movhi	r7,129
  801bc8:	213ffe04 	addi	r4,r4,-8
  801bcc:	39ce0704 	addi	r7,r7,14364
  801bd0:	20c04426 	beq	r4,r3,801ce4 <_free_r+0x258>
  801bd4:	01ffff04 	movi	r7,-4
  801bd8:	19400117 	ldw	r5,4(r3)
  801bdc:	29ca703a 	and	r5,r5,r7
  801be0:	1140022e 	bgeu	r2,r5,801bec <_free_r+0x160>
  801be4:	18c00217 	ldw	r3,8(r3)
  801be8:	20fffb1e 	bne	r4,r3,801bd8 <__alt_mem_onchip_mem+0xff781bd8>
  801bec:	19000317 	ldw	r4,12(r3)
  801bf0:	31000315 	stw	r4,12(r6)
  801bf4:	30c00215 	stw	r3,8(r6)
  801bf8:	21800215 	stw	r6,8(r4)
  801bfc:	19800315 	stw	r6,12(r3)
  801c00:	003fde06 	br	801b7c <__alt_mem_onchip_mem+0xff781b7c>
  801c04:	29c00217 	ldw	r7,8(r5)
  801c08:	10c5883a 	add	r2,r2,r3
  801c0c:	00c02074 	movhi	r3,129
  801c10:	18ce0904 	addi	r3,r3,14372
  801c14:	38c03b26 	beq	r7,r3,801d04 <_free_r+0x278>
  801c18:	2a000317 	ldw	r8,12(r5)
  801c1c:	11400054 	ori	r5,r2,1
  801c20:	3087883a 	add	r3,r6,r2
  801c24:	3a000315 	stw	r8,12(r7)
  801c28:	41c00215 	stw	r7,8(r8)
  801c2c:	31400115 	stw	r5,4(r6)
  801c30:	18800015 	stw	r2,0(r3)
  801c34:	003fbd06 	br	801b2c <__alt_mem_onchip_mem+0xff781b2c>
  801c38:	39c0004c 	andi	r7,r7,1
  801c3c:	10c5883a 	add	r2,r2,r3
  801c40:	3800071e 	bne	r7,zero,801c60 <_free_r+0x1d4>
  801c44:	81fffe17 	ldw	r7,-8(r16)
  801c48:	31cdc83a 	sub	r6,r6,r7
  801c4c:	30c00317 	ldw	r3,12(r6)
  801c50:	31400217 	ldw	r5,8(r6)
  801c54:	11c5883a 	add	r2,r2,r7
  801c58:	28c00315 	stw	r3,12(r5)
  801c5c:	19400215 	stw	r5,8(r3)
  801c60:	10c00054 	ori	r3,r2,1
  801c64:	30c00115 	stw	r3,4(r6)
  801c68:	00c02074 	movhi	r3,129
  801c6c:	18d42704 	addi	r3,r3,20636
  801c70:	18c00017 	ldw	r3,0(r3)
  801c74:	21800215 	stw	r6,8(r4)
  801c78:	10ffc036 	bltu	r2,r3,801b7c <__alt_mem_onchip_mem+0xff781b7c>
  801c7c:	00802074 	movhi	r2,129
  801c80:	109b8a04 	addi	r2,r2,28200
  801c84:	11400017 	ldw	r5,0(r2)
  801c88:	8809883a 	mov	r4,r17
  801c8c:	08019680 	call	801968 <_malloc_trim_r>
  801c90:	003fba06 	br	801b7c <__alt_mem_onchip_mem+0xff781b7c>
  801c94:	28c9883a 	add	r4,r5,r3
  801c98:	21000117 	ldw	r4,4(r4)
  801c9c:	2100004c 	andi	r4,r4,1
  801ca0:	2000391e 	bne	r4,zero,801d88 <_free_r+0x2fc>
  801ca4:	29c00217 	ldw	r7,8(r5)
  801ca8:	29000317 	ldw	r4,12(r5)
  801cac:	1885883a 	add	r2,r3,r2
  801cb0:	10c00054 	ori	r3,r2,1
  801cb4:	39000315 	stw	r4,12(r7)
  801cb8:	21c00215 	stw	r7,8(r4)
  801cbc:	30c00115 	stw	r3,4(r6)
  801cc0:	308d883a 	add	r6,r6,r2
  801cc4:	30800015 	stw	r2,0(r6)
  801cc8:	003fac06 	br	801b7c <__alt_mem_onchip_mem+0xff781b7c>
  801ccc:	00c00504 	movi	r3,20
  801cd0:	19401536 	bltu	r3,r5,801d28 <_free_r+0x29c>
  801cd4:	28c01704 	addi	r3,r5,92
  801cd8:	18c7883a 	add	r3,r3,r3
  801cdc:	294016c4 	addi	r5,r5,91
  801ce0:	003fb406 	br	801bb4 <__alt_mem_onchip_mem+0xff781bb4>
  801ce4:	280bd0ba 	srai	r5,r5,2
  801ce8:	00c00044 	movi	r3,1
  801cec:	38800117 	ldw	r2,4(r7)
  801cf0:	194a983a 	sll	r5,r3,r5
  801cf4:	2007883a 	mov	r3,r4
  801cf8:	2884b03a 	or	r2,r5,r2
  801cfc:	38800115 	stw	r2,4(r7)
  801d00:	003fbb06 	br	801bf0 <__alt_mem_onchip_mem+0xff781bf0>
  801d04:	21800515 	stw	r6,20(r4)
  801d08:	21800415 	stw	r6,16(r4)
  801d0c:	10c00054 	ori	r3,r2,1
  801d10:	31c00315 	stw	r7,12(r6)
  801d14:	31c00215 	stw	r7,8(r6)
  801d18:	30c00115 	stw	r3,4(r6)
  801d1c:	308d883a 	add	r6,r6,r2
  801d20:	30800015 	stw	r2,0(r6)
  801d24:	003f9506 	br	801b7c <__alt_mem_onchip_mem+0xff781b7c>
  801d28:	00c01504 	movi	r3,84
  801d2c:	19400536 	bltu	r3,r5,801d44 <_free_r+0x2b8>
  801d30:	100ad33a 	srli	r5,r2,12
  801d34:	28c01bc4 	addi	r3,r5,111
  801d38:	18c7883a 	add	r3,r3,r3
  801d3c:	29401b84 	addi	r5,r5,110
  801d40:	003f9c06 	br	801bb4 <__alt_mem_onchip_mem+0xff781bb4>
  801d44:	00c05504 	movi	r3,340
  801d48:	19400536 	bltu	r3,r5,801d60 <_free_r+0x2d4>
  801d4c:	100ad3fa 	srli	r5,r2,15
  801d50:	28c01e04 	addi	r3,r5,120
  801d54:	18c7883a 	add	r3,r3,r3
  801d58:	29401dc4 	addi	r5,r5,119
  801d5c:	003f9506 	br	801bb4 <__alt_mem_onchip_mem+0xff781bb4>
  801d60:	00c15504 	movi	r3,1364
  801d64:	19400536 	bltu	r3,r5,801d7c <_free_r+0x2f0>
  801d68:	100ad4ba 	srli	r5,r2,18
  801d6c:	28c01f44 	addi	r3,r5,125
  801d70:	18c7883a 	add	r3,r3,r3
  801d74:	29401f04 	addi	r5,r5,124
  801d78:	003f8e06 	br	801bb4 <__alt_mem_onchip_mem+0xff781bb4>
  801d7c:	00c03f84 	movi	r3,254
  801d80:	01401f84 	movi	r5,126
  801d84:	003f8b06 	br	801bb4 <__alt_mem_onchip_mem+0xff781bb4>
  801d88:	10c00054 	ori	r3,r2,1
  801d8c:	30c00115 	stw	r3,4(r6)
  801d90:	308d883a 	add	r6,r6,r2
  801d94:	30800015 	stw	r2,0(r6)
  801d98:	003f7806 	br	801b7c <__alt_mem_onchip_mem+0xff781b7c>

00801d9c <_fseek_r>:
  801d9c:	0801dbc1 	jmpi	801dbc <_fseeko_r>

00801da0 <fseek>:
  801da0:	00802074 	movhi	r2,129
  801da4:	10942504 	addi	r2,r2,20628
  801da8:	300f883a 	mov	r7,r6
  801dac:	280d883a 	mov	r6,r5
  801db0:	200b883a 	mov	r5,r4
  801db4:	11000017 	ldw	r4,0(r2)
  801db8:	0801dbc1 	jmpi	801dbc <_fseeko_r>

00801dbc <_fseeko_r>:
  801dbc:	deffe804 	addi	sp,sp,-96
  801dc0:	dd401415 	stw	r21,80(sp)
  801dc4:	dc801115 	stw	r18,68(sp)
  801dc8:	dc401015 	stw	r17,64(sp)
  801dcc:	dc000f15 	stw	r16,60(sp)
  801dd0:	dfc01715 	stw	ra,92(sp)
  801dd4:	ddc01615 	stw	r23,88(sp)
  801dd8:	dd801515 	stw	r22,84(sp)
  801ddc:	dd001315 	stw	r20,76(sp)
  801de0:	dcc01215 	stw	r19,72(sp)
  801de4:	2023883a 	mov	r17,r4
  801de8:	2821883a 	mov	r16,r5
  801dec:	302b883a 	mov	r21,r6
  801df0:	3825883a 	mov	r18,r7
  801df4:	20000226 	beq	r4,zero,801e00 <_fseeko_r+0x44>
  801df8:	20800e17 	ldw	r2,56(r4)
  801dfc:	10005a26 	beq	r2,zero,801f68 <_fseeko_r+0x1ac>
  801e00:	8080030b 	ldhu	r2,12(r16)
  801e04:	00c04204 	movi	r3,264
  801e08:	1080420c 	andi	r2,r2,264
  801e0c:	10c05b26 	beq	r2,r3,801f7c <_fseeko_r+0x1c0>
  801e10:	85000a17 	ldw	r20,40(r16)
  801e14:	a000f626 	beq	r20,zero,8021f0 <_fseeko_r+0x434>
  801e18:	00800044 	movi	r2,1
  801e1c:	90803e26 	beq	r18,r2,801f18 <_fseeko_r+0x15c>
  801e20:	00800084 	movi	r2,2
  801e24:	90801026 	beq	r18,r2,801e68 <_fseeko_r+0xac>
  801e28:	90000f26 	beq	r18,zero,801e68 <_fseeko_r+0xac>
  801e2c:	00800584 	movi	r2,22
  801e30:	88800015 	stw	r2,0(r17)
  801e34:	04ffffc4 	movi	r19,-1
  801e38:	9805883a 	mov	r2,r19
  801e3c:	dfc01717 	ldw	ra,92(sp)
  801e40:	ddc01617 	ldw	r23,88(sp)
  801e44:	dd801517 	ldw	r22,84(sp)
  801e48:	dd401417 	ldw	r21,80(sp)
  801e4c:	dd001317 	ldw	r20,76(sp)
  801e50:	dcc01217 	ldw	r19,72(sp)
  801e54:	dc801117 	ldw	r18,68(sp)
  801e58:	dc401017 	ldw	r17,64(sp)
  801e5c:	dc000f17 	ldw	r16,60(sp)
  801e60:	dec01804 	addi	sp,sp,96
  801e64:	f800283a 	ret
  801e68:	80800417 	ldw	r2,16(r16)
  801e6c:	002f883a 	mov	r23,zero
  801e70:	0027883a 	mov	r19,zero
  801e74:	1000cb26 	beq	r2,zero,8021a4 <_fseeko_r+0x3e8>
  801e78:	8080030b 	ldhu	r2,12(r16)
  801e7c:	10c2068c 	andi	r3,r2,2074
  801e80:	1800071e 	bne	r3,zero,801ea0 <_fseeko_r+0xe4>
  801e84:	10c1000c 	andi	r3,r2,1024
  801e88:	1800451e 	bne	r3,zero,801fa0 <_fseeko_r+0x1e4>
  801e8c:	00c02034 	movhi	r3,128
  801e90:	18cd5504 	addi	r3,r3,13652
  801e94:	a0c0b726 	beq	r20,r3,802174 <_fseeko_r+0x3b8>
  801e98:	10820014 	ori	r2,r2,2048
  801e9c:	8080030d 	sth	r2,12(r16)
  801ea0:	800b883a 	mov	r5,r16
  801ea4:	8809883a 	mov	r4,r17
  801ea8:	08012ec0 	call	8012ec <_fflush_r>
  801eac:	1027883a 	mov	r19,r2
  801eb0:	103fe01e 	bne	r2,zero,801e34 <__alt_mem_onchip_mem+0xff781e34>
  801eb4:	81400717 	ldw	r5,28(r16)
  801eb8:	900f883a 	mov	r7,r18
  801ebc:	a80d883a 	mov	r6,r21
  801ec0:	8809883a 	mov	r4,r17
  801ec4:	a03ee83a 	callr	r20
  801ec8:	00ffffc4 	movi	r3,-1
  801ecc:	10ffd926 	beq	r2,r3,801e34 <__alt_mem_onchip_mem+0xff781e34>
  801ed0:	81400c17 	ldw	r5,48(r16)
  801ed4:	28000526 	beq	r5,zero,801eec <_fseeko_r+0x130>
  801ed8:	80801004 	addi	r2,r16,64
  801edc:	28800226 	beq	r5,r2,801ee8 <_fseeko_r+0x12c>
  801ee0:	8809883a 	mov	r4,r17
  801ee4:	0801a8c0 	call	801a8c <_free_r>
  801ee8:	80000c15 	stw	zero,48(r16)
  801eec:	8080030b 	ldhu	r2,12(r16)
  801ef0:	80c00417 	ldw	r3,16(r16)
  801ef4:	80000115 	stw	zero,4(r16)
  801ef8:	10bdf7cc 	andi	r2,r2,63455
  801efc:	80c00015 	stw	r3,0(r16)
  801f00:	8080030d 	sth	r2,12(r16)
  801f04:	01800204 	movi	r6,8
  801f08:	000b883a 	mov	r5,zero
  801f0c:	81001704 	addi	r4,r16,92
  801f10:	0802ec80 	call	802ec8 <memset>
  801f14:	003fc806 	br	801e38 <__alt_mem_onchip_mem+0xff781e38>
  801f18:	800b883a 	mov	r5,r16
  801f1c:	8809883a 	mov	r4,r17
  801f20:	08012ec0 	call	8012ec <_fflush_r>
  801f24:	8080030b 	ldhu	r2,12(r16)
  801f28:	10c4000c 	andi	r3,r2,4096
  801f2c:	18008726 	beq	r3,zero,80214c <_fseeko_r+0x390>
  801f30:	84c01417 	ldw	r19,80(r16)
  801f34:	10c0010c 	andi	r3,r2,4
  801f38:	1800431e 	bne	r3,zero,802048 <_fseeko_r+0x28c>
  801f3c:	1080020c 	andi	r2,r2,8
  801f40:	10008026 	beq	r2,zero,802144 <_fseeko_r+0x388>
  801f44:	80c00017 	ldw	r3,0(r16)
  801f48:	80800417 	ldw	r2,16(r16)
  801f4c:	18000226 	beq	r3,zero,801f58 <_fseeko_r+0x19c>
  801f50:	1887c83a 	sub	r3,r3,r2
  801f54:	98e7883a 	add	r19,r19,r3
  801f58:	aceb883a 	add	r21,r21,r19
  801f5c:	05c00044 	movi	r23,1
  801f60:	0025883a 	mov	r18,zero
  801f64:	003fc306 	br	801e74 <__alt_mem_onchip_mem+0xff781e74>
  801f68:	08017c00 	call	8017c0 <__sinit>
  801f6c:	8080030b 	ldhu	r2,12(r16)
  801f70:	00c04204 	movi	r3,264
  801f74:	1080420c 	andi	r2,r2,264
  801f78:	10ffa51e 	bne	r2,r3,801e10 <__alt_mem_onchip_mem+0xff781e10>
  801f7c:	800b883a 	mov	r5,r16
  801f80:	8809883a 	mov	r4,r17
  801f84:	08012ec0 	call	8012ec <_fflush_r>
  801f88:	003fa106 	br	801e10 <__alt_mem_onchip_mem+0xff781e10>
  801f8c:	8080030b 	ldhu	r2,12(r16)
  801f90:	00c10004 	movi	r3,1024
  801f94:	80c01315 	stw	r3,76(r16)
  801f98:	10c4b03a 	or	r2,r2,r3
  801f9c:	8080030d 	sth	r2,12(r16)
  801fa0:	9000311e 	bne	r18,zero,802068 <_fseeko_r+0x2ac>
  801fa4:	a82d883a 	mov	r22,r21
  801fa8:	b800371e 	bne	r23,zero,802088 <_fseeko_r+0x2cc>
  801fac:	8080030b 	ldhu	r2,12(r16)
  801fb0:	1084000c 	andi	r2,r2,4096
  801fb4:	10007f26 	beq	r2,zero,8021b4 <_fseeko_r+0x3f8>
  801fb8:	80801417 	ldw	r2,80(r16)
  801fbc:	81800117 	ldw	r6,4(r16)
  801fc0:	81400c17 	ldw	r5,48(r16)
  801fc4:	11a7c83a 	sub	r19,r2,r6
  801fc8:	28008226 	beq	r5,zero,8021d4 <_fseeko_r+0x418>
  801fcc:	81c00f17 	ldw	r7,60(r16)
  801fd0:	99e7c83a 	sub	r19,r19,r7
  801fd4:	81000e17 	ldw	r4,56(r16)
  801fd8:	80800417 	ldw	r2,16(r16)
  801fdc:	99a7883a 	add	r19,r19,r6
  801fe0:	2087c83a 	sub	r3,r4,r2
  801fe4:	98e7c83a 	sub	r19,r19,r3
  801fe8:	38c7883a 	add	r3,r7,r3
  801fec:	b4c02b16 	blt	r22,r19,80209c <_fseeko_r+0x2e0>
  801ff0:	98c9883a 	add	r4,r19,r3
  801ff4:	b100292e 	bgeu	r22,r4,80209c <_fseeko_r+0x2e0>
  801ff8:	b4e7c83a 	sub	r19,r22,r19
  801ffc:	14c5883a 	add	r2,r2,r19
  802000:	1ce7c83a 	sub	r19,r3,r19
  802004:	80800015 	stw	r2,0(r16)
  802008:	84c00115 	stw	r19,4(r16)
  80200c:	28000526 	beq	r5,zero,802024 <_fseeko_r+0x268>
  802010:	80801004 	addi	r2,r16,64
  802014:	28800226 	beq	r5,r2,802020 <_fseeko_r+0x264>
  802018:	8809883a 	mov	r4,r17
  80201c:	0801a8c0 	call	801a8c <_free_r>
  802020:	80000c15 	stw	zero,48(r16)
  802024:	8080030b 	ldhu	r2,12(r16)
  802028:	01800204 	movi	r6,8
  80202c:	000b883a 	mov	r5,zero
  802030:	10bff7cc 	andi	r2,r2,65503
  802034:	8080030d 	sth	r2,12(r16)
  802038:	81001704 	addi	r4,r16,92
  80203c:	0802ec80 	call	802ec8 <memset>
  802040:	0027883a 	mov	r19,zero
  802044:	003f7c06 	br	801e38 <__alt_mem_onchip_mem+0xff781e38>
  802048:	80c00117 	ldw	r3,4(r16)
  80204c:	80800c17 	ldw	r2,48(r16)
  802050:	98e7c83a 	sub	r19,r19,r3
  802054:	10003b26 	beq	r2,zero,802144 <_fseeko_r+0x388>
  802058:	80c00f17 	ldw	r3,60(r16)
  80205c:	80800417 	ldw	r2,16(r16)
  802060:	98e7c83a 	sub	r19,r19,r3
  802064:	003fbc06 	br	801f58 <__alt_mem_onchip_mem+0xff781f58>
  802068:	8140038f 	ldh	r5,14(r16)
  80206c:	d80d883a 	mov	r6,sp
  802070:	8809883a 	mov	r4,r17
  802074:	080221c0 	call	80221c <_fstat_r>
  802078:	103f891e 	bne	r2,zero,801ea0 <__alt_mem_onchip_mem+0xff781ea0>
  80207c:	dd800417 	ldw	r22,16(sp)
  802080:	adad883a 	add	r22,r21,r22
  802084:	b83fc926 	beq	r23,zero,801fac <__alt_mem_onchip_mem+0xff781fac>
  802088:	81400c17 	ldw	r5,48(r16)
  80208c:	81800117 	ldw	r6,4(r16)
  802090:	28005026 	beq	r5,zero,8021d4 <_fseeko_r+0x418>
  802094:	81c00f17 	ldw	r7,60(r16)
  802098:	003fce06 	br	801fd4 <__alt_mem_onchip_mem+0xff781fd4>
  80209c:	84c01317 	ldw	r19,76(r16)
  8020a0:	81400717 	ldw	r5,28(r16)
  8020a4:	000f883a 	mov	r7,zero
  8020a8:	04e7c83a 	sub	r19,zero,r19
  8020ac:	9da6703a 	and	r19,r19,r22
  8020b0:	980d883a 	mov	r6,r19
  8020b4:	8809883a 	mov	r4,r17
  8020b8:	a03ee83a 	callr	r20
  8020bc:	00ffffc4 	movi	r3,-1
  8020c0:	10ff7726 	beq	r2,r3,801ea0 <__alt_mem_onchip_mem+0xff781ea0>
  8020c4:	80800417 	ldw	r2,16(r16)
  8020c8:	81400c17 	ldw	r5,48(r16)
  8020cc:	80000115 	stw	zero,4(r16)
  8020d0:	80800015 	stw	r2,0(r16)
  8020d4:	28000526 	beq	r5,zero,8020ec <_fseeko_r+0x330>
  8020d8:	80801004 	addi	r2,r16,64
  8020dc:	28800226 	beq	r5,r2,8020e8 <_fseeko_r+0x32c>
  8020e0:	8809883a 	mov	r4,r17
  8020e4:	0801a8c0 	call	801a8c <_free_r>
  8020e8:	80000c15 	stw	zero,48(r16)
  8020ec:	8080030b 	ldhu	r2,12(r16)
  8020f0:	b4e7c83a 	sub	r19,r22,r19
  8020f4:	10bff7cc 	andi	r2,r2,65503
  8020f8:	8080030d 	sth	r2,12(r16)
  8020fc:	98000b26 	beq	r19,zero,80212c <_fseeko_r+0x370>
  802100:	800b883a 	mov	r5,r16
  802104:	8809883a 	mov	r4,r17
  802108:	08031cc0 	call	8031cc <__srefill_r>
  80210c:	103f641e 	bne	r2,zero,801ea0 <__alt_mem_onchip_mem+0xff781ea0>
  802110:	80800117 	ldw	r2,4(r16)
  802114:	14ff6236 	bltu	r2,r19,801ea0 <__alt_mem_onchip_mem+0xff781ea0>
  802118:	80c00017 	ldw	r3,0(r16)
  80211c:	14c5c83a 	sub	r2,r2,r19
  802120:	80800115 	stw	r2,4(r16)
  802124:	1ce7883a 	add	r19,r3,r19
  802128:	84c00015 	stw	r19,0(r16)
  80212c:	01800204 	movi	r6,8
  802130:	000b883a 	mov	r5,zero
  802134:	81001704 	addi	r4,r16,92
  802138:	0802ec80 	call	802ec8 <memset>
  80213c:	0027883a 	mov	r19,zero
  802140:	003f3d06 	br	801e38 <__alt_mem_onchip_mem+0xff781e38>
  802144:	80800417 	ldw	r2,16(r16)
  802148:	003f8306 	br	801f58 <__alt_mem_onchip_mem+0xff781f58>
  80214c:	81400717 	ldw	r5,28(r16)
  802150:	900f883a 	mov	r7,r18
  802154:	000d883a 	mov	r6,zero
  802158:	8809883a 	mov	r4,r17
  80215c:	a03ee83a 	callr	r20
  802160:	1027883a 	mov	r19,r2
  802164:	00bfffc4 	movi	r2,-1
  802168:	98bf3226 	beq	r19,r2,801e34 <__alt_mem_onchip_mem+0xff781e34>
  80216c:	8080030b 	ldhu	r2,12(r16)
  802170:	003f7006 	br	801f34 <__alt_mem_onchip_mem+0xff781f34>
  802174:	8140038f 	ldh	r5,14(r16)
  802178:	283f4716 	blt	r5,zero,801e98 <__alt_mem_onchip_mem+0xff781e98>
  80217c:	d80d883a 	mov	r6,sp
  802180:	8809883a 	mov	r4,r17
  802184:	080221c0 	call	80221c <_fstat_r>
  802188:	1000041e 	bne	r2,zero,80219c <_fseeko_r+0x3e0>
  80218c:	d8800117 	ldw	r2,4(sp)
  802190:	00e00014 	movui	r3,32768
  802194:	10bc000c 	andi	r2,r2,61440
  802198:	10ff7c26 	beq	r2,r3,801f8c <__alt_mem_onchip_mem+0xff781f8c>
  80219c:	8080030b 	ldhu	r2,12(r16)
  8021a0:	003f3d06 	br	801e98 <__alt_mem_onchip_mem+0xff781e98>
  8021a4:	800b883a 	mov	r5,r16
  8021a8:	8809883a 	mov	r4,r17
  8021ac:	08025000 	call	802500 <__smakebuf_r>
  8021b0:	003f3106 	br	801e78 <__alt_mem_onchip_mem+0xff781e78>
  8021b4:	81400717 	ldw	r5,28(r16)
  8021b8:	01c00044 	movi	r7,1
  8021bc:	000d883a 	mov	r6,zero
  8021c0:	8809883a 	mov	r4,r17
  8021c4:	a03ee83a 	callr	r20
  8021c8:	00ffffc4 	movi	r3,-1
  8021cc:	10ff7b1e 	bne	r2,r3,801fbc <__alt_mem_onchip_mem+0xff781fbc>
  8021d0:	003f3306 	br	801ea0 <__alt_mem_onchip_mem+0xff781ea0>
  8021d4:	80c00017 	ldw	r3,0(r16)
  8021d8:	80800417 	ldw	r2,16(r16)
  8021dc:	000b883a 	mov	r5,zero
  8021e0:	1887c83a 	sub	r3,r3,r2
  8021e4:	98e7c83a 	sub	r19,r19,r3
  8021e8:	30c7883a 	add	r3,r6,r3
  8021ec:	003f7f06 	br	801fec <__alt_mem_onchip_mem+0xff781fec>
  8021f0:	00800744 	movi	r2,29
  8021f4:	88800015 	stw	r2,0(r17)
  8021f8:	04ffffc4 	movi	r19,-1
  8021fc:	003f0e06 	br	801e38 <__alt_mem_onchip_mem+0xff781e38>

00802200 <fseeko>:
  802200:	00802074 	movhi	r2,129
  802204:	10942504 	addi	r2,r2,20628
  802208:	300f883a 	mov	r7,r6
  80220c:	280d883a 	mov	r6,r5
  802210:	200b883a 	mov	r5,r4
  802214:	11000017 	ldw	r4,0(r2)
  802218:	0801dbc1 	jmpi	801dbc <_fseeko_r>

0080221c <_fstat_r>:
  80221c:	defffd04 	addi	sp,sp,-12
  802220:	2805883a 	mov	r2,r5
  802224:	dc000015 	stw	r16,0(sp)
  802228:	04002074 	movhi	r16,129
  80222c:	dc400115 	stw	r17,4(sp)
  802230:	841b8704 	addi	r16,r16,28188
  802234:	2023883a 	mov	r17,r4
  802238:	300b883a 	mov	r5,r6
  80223c:	1009883a 	mov	r4,r2
  802240:	dfc00215 	stw	ra,8(sp)
  802244:	80000015 	stw	zero,0(r16)
  802248:	080ec7c0 	call	80ec7c <fstat>
  80224c:	00ffffc4 	movi	r3,-1
  802250:	10c00526 	beq	r2,r3,802268 <_fstat_r+0x4c>
  802254:	dfc00217 	ldw	ra,8(sp)
  802258:	dc400117 	ldw	r17,4(sp)
  80225c:	dc000017 	ldw	r16,0(sp)
  802260:	dec00304 	addi	sp,sp,12
  802264:	f800283a 	ret
  802268:	80c00017 	ldw	r3,0(r16)
  80226c:	183ff926 	beq	r3,zero,802254 <__alt_mem_onchip_mem+0xff782254>
  802270:	88c00015 	stw	r3,0(r17)
  802274:	003ff706 	br	802254 <__alt_mem_onchip_mem+0xff782254>

00802278 <_fwalk>:
  802278:	defff704 	addi	sp,sp,-36
  80227c:	dd000415 	stw	r20,16(sp)
  802280:	dfc00815 	stw	ra,32(sp)
  802284:	ddc00715 	stw	r23,28(sp)
  802288:	dd800615 	stw	r22,24(sp)
  80228c:	dd400515 	stw	r21,20(sp)
  802290:	dcc00315 	stw	r19,12(sp)
  802294:	dc800215 	stw	r18,8(sp)
  802298:	dc400115 	stw	r17,4(sp)
  80229c:	dc000015 	stw	r16,0(sp)
  8022a0:	2500b804 	addi	r20,r4,736
  8022a4:	a0002326 	beq	r20,zero,802334 <_fwalk+0xbc>
  8022a8:	282b883a 	mov	r21,r5
  8022ac:	002f883a 	mov	r23,zero
  8022b0:	05800044 	movi	r22,1
  8022b4:	04ffffc4 	movi	r19,-1
  8022b8:	a4400117 	ldw	r17,4(r20)
  8022bc:	a4800217 	ldw	r18,8(r20)
  8022c0:	8c7fffc4 	addi	r17,r17,-1
  8022c4:	88000d16 	blt	r17,zero,8022fc <_fwalk+0x84>
  8022c8:	94000304 	addi	r16,r18,12
  8022cc:	94800384 	addi	r18,r18,14
  8022d0:	8080000b 	ldhu	r2,0(r16)
  8022d4:	8c7fffc4 	addi	r17,r17,-1
  8022d8:	813ffd04 	addi	r4,r16,-12
  8022dc:	b080042e 	bgeu	r22,r2,8022f0 <_fwalk+0x78>
  8022e0:	9080000f 	ldh	r2,0(r18)
  8022e4:	14c00226 	beq	r2,r19,8022f0 <_fwalk+0x78>
  8022e8:	a83ee83a 	callr	r21
  8022ec:	b8aeb03a 	or	r23,r23,r2
  8022f0:	84001a04 	addi	r16,r16,104
  8022f4:	94801a04 	addi	r18,r18,104
  8022f8:	8cfff51e 	bne	r17,r19,8022d0 <__alt_mem_onchip_mem+0xff7822d0>
  8022fc:	a5000017 	ldw	r20,0(r20)
  802300:	a03fed1e 	bne	r20,zero,8022b8 <__alt_mem_onchip_mem+0xff7822b8>
  802304:	b805883a 	mov	r2,r23
  802308:	dfc00817 	ldw	ra,32(sp)
  80230c:	ddc00717 	ldw	r23,28(sp)
  802310:	dd800617 	ldw	r22,24(sp)
  802314:	dd400517 	ldw	r21,20(sp)
  802318:	dd000417 	ldw	r20,16(sp)
  80231c:	dcc00317 	ldw	r19,12(sp)
  802320:	dc800217 	ldw	r18,8(sp)
  802324:	dc400117 	ldw	r17,4(sp)
  802328:	dc000017 	ldw	r16,0(sp)
  80232c:	dec00904 	addi	sp,sp,36
  802330:	f800283a 	ret
  802334:	002f883a 	mov	r23,zero
  802338:	003ff206 	br	802304 <__alt_mem_onchip_mem+0xff782304>

0080233c <_fwalk_reent>:
  80233c:	defff704 	addi	sp,sp,-36
  802340:	dd000415 	stw	r20,16(sp)
  802344:	dfc00815 	stw	ra,32(sp)
  802348:	ddc00715 	stw	r23,28(sp)
  80234c:	dd800615 	stw	r22,24(sp)
  802350:	dd400515 	stw	r21,20(sp)
  802354:	dcc00315 	stw	r19,12(sp)
  802358:	dc800215 	stw	r18,8(sp)
  80235c:	dc400115 	stw	r17,4(sp)
  802360:	dc000015 	stw	r16,0(sp)
  802364:	2500b804 	addi	r20,r4,736
  802368:	a0002326 	beq	r20,zero,8023f8 <_fwalk_reent+0xbc>
  80236c:	282b883a 	mov	r21,r5
  802370:	2027883a 	mov	r19,r4
  802374:	002f883a 	mov	r23,zero
  802378:	05800044 	movi	r22,1
  80237c:	04bfffc4 	movi	r18,-1
  802380:	a4400117 	ldw	r17,4(r20)
  802384:	a4000217 	ldw	r16,8(r20)
  802388:	8c7fffc4 	addi	r17,r17,-1
  80238c:	88000c16 	blt	r17,zero,8023c0 <_fwalk_reent+0x84>
  802390:	84000304 	addi	r16,r16,12
  802394:	8080000b 	ldhu	r2,0(r16)
  802398:	8c7fffc4 	addi	r17,r17,-1
  80239c:	817ffd04 	addi	r5,r16,-12
  8023a0:	b080052e 	bgeu	r22,r2,8023b8 <_fwalk_reent+0x7c>
  8023a4:	8080008f 	ldh	r2,2(r16)
  8023a8:	9809883a 	mov	r4,r19
  8023ac:	14800226 	beq	r2,r18,8023b8 <_fwalk_reent+0x7c>
  8023b0:	a83ee83a 	callr	r21
  8023b4:	b8aeb03a 	or	r23,r23,r2
  8023b8:	84001a04 	addi	r16,r16,104
  8023bc:	8cbff51e 	bne	r17,r18,802394 <__alt_mem_onchip_mem+0xff782394>
  8023c0:	a5000017 	ldw	r20,0(r20)
  8023c4:	a03fee1e 	bne	r20,zero,802380 <__alt_mem_onchip_mem+0xff782380>
  8023c8:	b805883a 	mov	r2,r23
  8023cc:	dfc00817 	ldw	ra,32(sp)
  8023d0:	ddc00717 	ldw	r23,28(sp)
  8023d4:	dd800617 	ldw	r22,24(sp)
  8023d8:	dd400517 	ldw	r21,20(sp)
  8023dc:	dd000417 	ldw	r20,16(sp)
  8023e0:	dcc00317 	ldw	r19,12(sp)
  8023e4:	dc800217 	ldw	r18,8(sp)
  8023e8:	dc400117 	ldw	r17,4(sp)
  8023ec:	dc000017 	ldw	r16,0(sp)
  8023f0:	dec00904 	addi	sp,sp,36
  8023f4:	f800283a 	ret
  8023f8:	002f883a 	mov	r23,zero
  8023fc:	003ff206 	br	8023c8 <__alt_mem_onchip_mem+0xff7823c8>

00802400 <_fwrite_r>:
  802400:	defff504 	addi	sp,sp,-44
  802404:	dc800815 	stw	r18,32(sp)
  802408:	39a5383a 	mul	r18,r7,r6
  80240c:	d8800304 	addi	r2,sp,12
  802410:	d8800015 	stw	r2,0(sp)
  802414:	00800044 	movi	r2,1
  802418:	dcc00915 	stw	r19,36(sp)
  80241c:	dc400715 	stw	r17,28(sp)
  802420:	dc000615 	stw	r16,24(sp)
  802424:	d9400315 	stw	r5,12(sp)
  802428:	dfc00a15 	stw	ra,40(sp)
  80242c:	dc800415 	stw	r18,16(sp)
  802430:	dc800215 	stw	r18,8(sp)
  802434:	d8800115 	stw	r2,4(sp)
  802438:	3027883a 	mov	r19,r6
  80243c:	3821883a 	mov	r16,r7
  802440:	2023883a 	mov	r17,r4
  802444:	d9400b17 	ldw	r5,44(sp)
  802448:	20000226 	beq	r4,zero,802454 <_fwrite_r+0x54>
  80244c:	20800e17 	ldw	r2,56(r4)
  802450:	10001a26 	beq	r2,zero,8024bc <_fwrite_r+0xbc>
  802454:	2880030b 	ldhu	r2,12(r5)
  802458:	10c8000c 	andi	r3,r2,8192
  80245c:	1800061e 	bne	r3,zero,802478 <_fwrite_r+0x78>
  802460:	29001917 	ldw	r4,100(r5)
  802464:	00f7ffc4 	movi	r3,-8193
  802468:	10880014 	ori	r2,r2,8192
  80246c:	20c6703a 	and	r3,r4,r3
  802470:	2880030d 	sth	r2,12(r5)
  802474:	28c01915 	stw	r3,100(r5)
  802478:	d80d883a 	mov	r6,sp
  80247c:	8809883a 	mov	r4,r17
  802480:	08078700 	call	807870 <__sfvwrite_r>
  802484:	10000b26 	beq	r2,zero,8024b4 <_fwrite_r+0xb4>
  802488:	d9000217 	ldw	r4,8(sp)
  80248c:	980b883a 	mov	r5,r19
  802490:	9109c83a 	sub	r4,r18,r4
  802494:	080c2b80 	call	80c2b8 <__udivsi3>
  802498:	dfc00a17 	ldw	ra,40(sp)
  80249c:	dcc00917 	ldw	r19,36(sp)
  8024a0:	dc800817 	ldw	r18,32(sp)
  8024a4:	dc400717 	ldw	r17,28(sp)
  8024a8:	dc000617 	ldw	r16,24(sp)
  8024ac:	dec00b04 	addi	sp,sp,44
  8024b0:	f800283a 	ret
  8024b4:	8005883a 	mov	r2,r16
  8024b8:	003ff706 	br	802498 <__alt_mem_onchip_mem+0xff782498>
  8024bc:	d9400515 	stw	r5,20(sp)
  8024c0:	08017c00 	call	8017c0 <__sinit>
  8024c4:	d9400517 	ldw	r5,20(sp)
  8024c8:	003fe206 	br	802454 <__alt_mem_onchip_mem+0xff782454>

008024cc <fwrite>:
  8024cc:	defffe04 	addi	sp,sp,-8
  8024d0:	00802074 	movhi	r2,129
  8024d4:	d9c00015 	stw	r7,0(sp)
  8024d8:	10942504 	addi	r2,r2,20628
  8024dc:	300f883a 	mov	r7,r6
  8024e0:	280d883a 	mov	r6,r5
  8024e4:	200b883a 	mov	r5,r4
  8024e8:	11000017 	ldw	r4,0(r2)
  8024ec:	dfc00115 	stw	ra,4(sp)
  8024f0:	08024000 	call	802400 <_fwrite_r>
  8024f4:	dfc00117 	ldw	ra,4(sp)
  8024f8:	dec00204 	addi	sp,sp,8
  8024fc:	f800283a 	ret

00802500 <__smakebuf_r>:
  802500:	2880030b 	ldhu	r2,12(r5)
  802504:	10c0008c 	andi	r3,r2,2
  802508:	1800411e 	bne	r3,zero,802610 <__smakebuf_r+0x110>
  80250c:	deffec04 	addi	sp,sp,-80
  802510:	dc000f15 	stw	r16,60(sp)
  802514:	2821883a 	mov	r16,r5
  802518:	2940038f 	ldh	r5,14(r5)
  80251c:	dc401015 	stw	r17,64(sp)
  802520:	dfc01315 	stw	ra,76(sp)
  802524:	dcc01215 	stw	r19,72(sp)
  802528:	dc801115 	stw	r18,68(sp)
  80252c:	2023883a 	mov	r17,r4
  802530:	28001c16 	blt	r5,zero,8025a4 <__smakebuf_r+0xa4>
  802534:	d80d883a 	mov	r6,sp
  802538:	080221c0 	call	80221c <_fstat_r>
  80253c:	10001816 	blt	r2,zero,8025a0 <__smakebuf_r+0xa0>
  802540:	d8800117 	ldw	r2,4(sp)
  802544:	00e00014 	movui	r3,32768
  802548:	10bc000c 	andi	r2,r2,61440
  80254c:	14c80020 	cmpeqi	r19,r2,8192
  802550:	10c03726 	beq	r2,r3,802630 <__smakebuf_r+0x130>
  802554:	80c0030b 	ldhu	r3,12(r16)
  802558:	18c20014 	ori	r3,r3,2048
  80255c:	80c0030d 	sth	r3,12(r16)
  802560:	00c80004 	movi	r3,8192
  802564:	10c0521e 	bne	r2,r3,8026b0 <__smakebuf_r+0x1b0>
  802568:	8140038f 	ldh	r5,14(r16)
  80256c:	8809883a 	mov	r4,r17
  802570:	0807d2c0 	call	807d2c <_isatty_r>
  802574:	10004c26 	beq	r2,zero,8026a8 <__smakebuf_r+0x1a8>
  802578:	8080030b 	ldhu	r2,12(r16)
  80257c:	80c010c4 	addi	r3,r16,67
  802580:	80c00015 	stw	r3,0(r16)
  802584:	10800054 	ori	r2,r2,1
  802588:	8080030d 	sth	r2,12(r16)
  80258c:	00800044 	movi	r2,1
  802590:	80c00415 	stw	r3,16(r16)
  802594:	80800515 	stw	r2,20(r16)
  802598:	04810004 	movi	r18,1024
  80259c:	00000706 	br	8025bc <__smakebuf_r+0xbc>
  8025a0:	8080030b 	ldhu	r2,12(r16)
  8025a4:	10c0200c 	andi	r3,r2,128
  8025a8:	18001f1e 	bne	r3,zero,802628 <__smakebuf_r+0x128>
  8025ac:	04810004 	movi	r18,1024
  8025b0:	10820014 	ori	r2,r2,2048
  8025b4:	8080030d 	sth	r2,12(r16)
  8025b8:	0027883a 	mov	r19,zero
  8025bc:	900b883a 	mov	r5,r18
  8025c0:	8809883a 	mov	r4,r17
  8025c4:	08026bc0 	call	8026bc <_malloc_r>
  8025c8:	10002c26 	beq	r2,zero,80267c <__smakebuf_r+0x17c>
  8025cc:	80c0030b 	ldhu	r3,12(r16)
  8025d0:	01002034 	movhi	r4,128
  8025d4:	21051e04 	addi	r4,r4,5240
  8025d8:	89000f15 	stw	r4,60(r17)
  8025dc:	18c02014 	ori	r3,r3,128
  8025e0:	80c0030d 	sth	r3,12(r16)
  8025e4:	80800015 	stw	r2,0(r16)
  8025e8:	80800415 	stw	r2,16(r16)
  8025ec:	84800515 	stw	r18,20(r16)
  8025f0:	98001a1e 	bne	r19,zero,80265c <__smakebuf_r+0x15c>
  8025f4:	dfc01317 	ldw	ra,76(sp)
  8025f8:	dcc01217 	ldw	r19,72(sp)
  8025fc:	dc801117 	ldw	r18,68(sp)
  802600:	dc401017 	ldw	r17,64(sp)
  802604:	dc000f17 	ldw	r16,60(sp)
  802608:	dec01404 	addi	sp,sp,80
  80260c:	f800283a 	ret
  802610:	288010c4 	addi	r2,r5,67
  802614:	28800015 	stw	r2,0(r5)
  802618:	28800415 	stw	r2,16(r5)
  80261c:	00800044 	movi	r2,1
  802620:	28800515 	stw	r2,20(r5)
  802624:	f800283a 	ret
  802628:	04801004 	movi	r18,64
  80262c:	003fe006 	br	8025b0 <__alt_mem_onchip_mem+0xff7825b0>
  802630:	81000a17 	ldw	r4,40(r16)
  802634:	00c02034 	movhi	r3,128
  802638:	18cd5504 	addi	r3,r3,13652
  80263c:	20ffc51e 	bne	r4,r3,802554 <__alt_mem_onchip_mem+0xff782554>
  802640:	8080030b 	ldhu	r2,12(r16)
  802644:	04810004 	movi	r18,1024
  802648:	84801315 	stw	r18,76(r16)
  80264c:	1484b03a 	or	r2,r2,r18
  802650:	8080030d 	sth	r2,12(r16)
  802654:	0027883a 	mov	r19,zero
  802658:	003fd806 	br	8025bc <__alt_mem_onchip_mem+0xff7825bc>
  80265c:	8140038f 	ldh	r5,14(r16)
  802660:	8809883a 	mov	r4,r17
  802664:	0807d2c0 	call	807d2c <_isatty_r>
  802668:	103fe226 	beq	r2,zero,8025f4 <__alt_mem_onchip_mem+0xff7825f4>
  80266c:	8080030b 	ldhu	r2,12(r16)
  802670:	10800054 	ori	r2,r2,1
  802674:	8080030d 	sth	r2,12(r16)
  802678:	003fde06 	br	8025f4 <__alt_mem_onchip_mem+0xff7825f4>
  80267c:	8080030b 	ldhu	r2,12(r16)
  802680:	10c0800c 	andi	r3,r2,512
  802684:	183fdb1e 	bne	r3,zero,8025f4 <__alt_mem_onchip_mem+0xff7825f4>
  802688:	10800094 	ori	r2,r2,2
  80268c:	80c010c4 	addi	r3,r16,67
  802690:	8080030d 	sth	r2,12(r16)
  802694:	00800044 	movi	r2,1
  802698:	80c00015 	stw	r3,0(r16)
  80269c:	80c00415 	stw	r3,16(r16)
  8026a0:	80800515 	stw	r2,20(r16)
  8026a4:	003fd306 	br	8025f4 <__alt_mem_onchip_mem+0xff7825f4>
  8026a8:	04810004 	movi	r18,1024
  8026ac:	003fc306 	br	8025bc <__alt_mem_onchip_mem+0xff7825bc>
  8026b0:	0027883a 	mov	r19,zero
  8026b4:	04810004 	movi	r18,1024
  8026b8:	003fc006 	br	8025bc <__alt_mem_onchip_mem+0xff7825bc>

008026bc <_malloc_r>:
  8026bc:	defff504 	addi	sp,sp,-44
  8026c0:	dc800315 	stw	r18,12(sp)
  8026c4:	dfc00a15 	stw	ra,40(sp)
  8026c8:	df000915 	stw	fp,36(sp)
  8026cc:	ddc00815 	stw	r23,32(sp)
  8026d0:	dd800715 	stw	r22,28(sp)
  8026d4:	dd400615 	stw	r21,24(sp)
  8026d8:	dd000515 	stw	r20,20(sp)
  8026dc:	dcc00415 	stw	r19,16(sp)
  8026e0:	dc400215 	stw	r17,8(sp)
  8026e4:	dc000115 	stw	r16,4(sp)
  8026e8:	288002c4 	addi	r2,r5,11
  8026ec:	00c00584 	movi	r3,22
  8026f0:	2025883a 	mov	r18,r4
  8026f4:	18807f2e 	bgeu	r3,r2,8028f4 <_malloc_r+0x238>
  8026f8:	047ffe04 	movi	r17,-8
  8026fc:	1462703a 	and	r17,r2,r17
  802700:	8800a316 	blt	r17,zero,802990 <_malloc_r+0x2d4>
  802704:	8940a236 	bltu	r17,r5,802990 <_malloc_r+0x2d4>
  802708:	080f2040 	call	80f204 <__malloc_lock>
  80270c:	00807dc4 	movi	r2,503
  802710:	1441e92e 	bgeu	r2,r17,802eb8 <_malloc_r+0x7fc>
  802714:	8804d27a 	srli	r2,r17,9
  802718:	1000a126 	beq	r2,zero,8029a0 <_malloc_r+0x2e4>
  80271c:	00c00104 	movi	r3,4
  802720:	18811e36 	bltu	r3,r2,802b9c <_malloc_r+0x4e0>
  802724:	8804d1ba 	srli	r2,r17,6
  802728:	12000e44 	addi	r8,r2,57
  80272c:	11c00e04 	addi	r7,r2,56
  802730:	4209883a 	add	r4,r8,r8
  802734:	04c02074 	movhi	r19,129
  802738:	2109883a 	add	r4,r4,r4
  80273c:	9cce0704 	addi	r19,r19,14364
  802740:	2109883a 	add	r4,r4,r4
  802744:	9909883a 	add	r4,r19,r4
  802748:	24000117 	ldw	r16,4(r4)
  80274c:	213ffe04 	addi	r4,r4,-8
  802750:	24009726 	beq	r4,r16,8029b0 <_malloc_r+0x2f4>
  802754:	80800117 	ldw	r2,4(r16)
  802758:	01bfff04 	movi	r6,-4
  80275c:	014003c4 	movi	r5,15
  802760:	1184703a 	and	r2,r2,r6
  802764:	1447c83a 	sub	r3,r2,r17
  802768:	28c00716 	blt	r5,r3,802788 <_malloc_r+0xcc>
  80276c:	1800920e 	bge	r3,zero,8029b8 <_malloc_r+0x2fc>
  802770:	84000317 	ldw	r16,12(r16)
  802774:	24008e26 	beq	r4,r16,8029b0 <_malloc_r+0x2f4>
  802778:	80800117 	ldw	r2,4(r16)
  80277c:	1184703a 	and	r2,r2,r6
  802780:	1447c83a 	sub	r3,r2,r17
  802784:	28fff90e 	bge	r5,r3,80276c <__alt_mem_onchip_mem+0xff78276c>
  802788:	3809883a 	mov	r4,r7
  80278c:	01802074 	movhi	r6,129
  802790:	9c000417 	ldw	r16,16(r19)
  802794:	318e0704 	addi	r6,r6,14364
  802798:	32000204 	addi	r8,r6,8
  80279c:	82013426 	beq	r16,r8,802c70 <_malloc_r+0x5b4>
  8027a0:	80c00117 	ldw	r3,4(r16)
  8027a4:	00bfff04 	movi	r2,-4
  8027a8:	188e703a 	and	r7,r3,r2
  8027ac:	3c45c83a 	sub	r2,r7,r17
  8027b0:	00c003c4 	movi	r3,15
  8027b4:	18811f16 	blt	r3,r2,802c34 <_malloc_r+0x578>
  8027b8:	32000515 	stw	r8,20(r6)
  8027bc:	32000415 	stw	r8,16(r6)
  8027c0:	10007f0e 	bge	r2,zero,8029c0 <_malloc_r+0x304>
  8027c4:	00807fc4 	movi	r2,511
  8027c8:	11c0fd36 	bltu	r2,r7,802bc0 <_malloc_r+0x504>
  8027cc:	3806d0fa 	srli	r3,r7,3
  8027d0:	01c00044 	movi	r7,1
  8027d4:	30800117 	ldw	r2,4(r6)
  8027d8:	19400044 	addi	r5,r3,1
  8027dc:	294b883a 	add	r5,r5,r5
  8027e0:	1807d0ba 	srai	r3,r3,2
  8027e4:	294b883a 	add	r5,r5,r5
  8027e8:	294b883a 	add	r5,r5,r5
  8027ec:	298b883a 	add	r5,r5,r6
  8027f0:	38c6983a 	sll	r3,r7,r3
  8027f4:	29c00017 	ldw	r7,0(r5)
  8027f8:	2a7ffe04 	addi	r9,r5,-8
  8027fc:	1886b03a 	or	r3,r3,r2
  802800:	82400315 	stw	r9,12(r16)
  802804:	81c00215 	stw	r7,8(r16)
  802808:	30c00115 	stw	r3,4(r6)
  80280c:	2c000015 	stw	r16,0(r5)
  802810:	3c000315 	stw	r16,12(r7)
  802814:	2005d0ba 	srai	r2,r4,2
  802818:	01400044 	movi	r5,1
  80281c:	288a983a 	sll	r5,r5,r2
  802820:	19406f36 	bltu	r3,r5,8029e0 <_malloc_r+0x324>
  802824:	28c4703a 	and	r2,r5,r3
  802828:	10000a1e 	bne	r2,zero,802854 <_malloc_r+0x198>
  80282c:	00bfff04 	movi	r2,-4
  802830:	294b883a 	add	r5,r5,r5
  802834:	2088703a 	and	r4,r4,r2
  802838:	28c4703a 	and	r2,r5,r3
  80283c:	21000104 	addi	r4,r4,4
  802840:	1000041e 	bne	r2,zero,802854 <_malloc_r+0x198>
  802844:	294b883a 	add	r5,r5,r5
  802848:	28c4703a 	and	r2,r5,r3
  80284c:	21000104 	addi	r4,r4,4
  802850:	103ffc26 	beq	r2,zero,802844 <__alt_mem_onchip_mem+0xff782844>
  802854:	02bfff04 	movi	r10,-4
  802858:	024003c4 	movi	r9,15
  80285c:	21800044 	addi	r6,r4,1
  802860:	318d883a 	add	r6,r6,r6
  802864:	318d883a 	add	r6,r6,r6
  802868:	318d883a 	add	r6,r6,r6
  80286c:	998d883a 	add	r6,r19,r6
  802870:	333ffe04 	addi	r12,r6,-8
  802874:	2017883a 	mov	r11,r4
  802878:	31800104 	addi	r6,r6,4
  80287c:	34000017 	ldw	r16,0(r6)
  802880:	31fffd04 	addi	r7,r6,-12
  802884:	81c0041e 	bne	r16,r7,802898 <_malloc_r+0x1dc>
  802888:	0000fb06 	br	802c78 <_malloc_r+0x5bc>
  80288c:	1801030e 	bge	r3,zero,802c9c <_malloc_r+0x5e0>
  802890:	84000317 	ldw	r16,12(r16)
  802894:	81c0f826 	beq	r16,r7,802c78 <_malloc_r+0x5bc>
  802898:	80800117 	ldw	r2,4(r16)
  80289c:	1284703a 	and	r2,r2,r10
  8028a0:	1447c83a 	sub	r3,r2,r17
  8028a4:	48fff90e 	bge	r9,r3,80288c <__alt_mem_onchip_mem+0xff78288c>
  8028a8:	80800317 	ldw	r2,12(r16)
  8028ac:	81000217 	ldw	r4,8(r16)
  8028b0:	89400054 	ori	r5,r17,1
  8028b4:	81400115 	stw	r5,4(r16)
  8028b8:	20800315 	stw	r2,12(r4)
  8028bc:	11000215 	stw	r4,8(r2)
  8028c0:	8463883a 	add	r17,r16,r17
  8028c4:	9c400515 	stw	r17,20(r19)
  8028c8:	9c400415 	stw	r17,16(r19)
  8028cc:	18800054 	ori	r2,r3,1
  8028d0:	88800115 	stw	r2,4(r17)
  8028d4:	8a000315 	stw	r8,12(r17)
  8028d8:	8a000215 	stw	r8,8(r17)
  8028dc:	88e3883a 	add	r17,r17,r3
  8028e0:	88c00015 	stw	r3,0(r17)
  8028e4:	9009883a 	mov	r4,r18
  8028e8:	080f2280 	call	80f228 <__malloc_unlock>
  8028ec:	80800204 	addi	r2,r16,8
  8028f0:	00001b06 	br	802960 <_malloc_r+0x2a4>
  8028f4:	04400404 	movi	r17,16
  8028f8:	89402536 	bltu	r17,r5,802990 <_malloc_r+0x2d4>
  8028fc:	080f2040 	call	80f204 <__malloc_lock>
  802900:	00800184 	movi	r2,6
  802904:	01000084 	movi	r4,2
  802908:	04c02074 	movhi	r19,129
  80290c:	1085883a 	add	r2,r2,r2
  802910:	9cce0704 	addi	r19,r19,14364
  802914:	1085883a 	add	r2,r2,r2
  802918:	9885883a 	add	r2,r19,r2
  80291c:	14000117 	ldw	r16,4(r2)
  802920:	10fffe04 	addi	r3,r2,-8
  802924:	80c0d926 	beq	r16,r3,802c8c <_malloc_r+0x5d0>
  802928:	80c00117 	ldw	r3,4(r16)
  80292c:	81000317 	ldw	r4,12(r16)
  802930:	00bfff04 	movi	r2,-4
  802934:	1884703a 	and	r2,r3,r2
  802938:	81400217 	ldw	r5,8(r16)
  80293c:	8085883a 	add	r2,r16,r2
  802940:	10c00117 	ldw	r3,4(r2)
  802944:	29000315 	stw	r4,12(r5)
  802948:	21400215 	stw	r5,8(r4)
  80294c:	18c00054 	ori	r3,r3,1
  802950:	10c00115 	stw	r3,4(r2)
  802954:	9009883a 	mov	r4,r18
  802958:	080f2280 	call	80f228 <__malloc_unlock>
  80295c:	80800204 	addi	r2,r16,8
  802960:	dfc00a17 	ldw	ra,40(sp)
  802964:	df000917 	ldw	fp,36(sp)
  802968:	ddc00817 	ldw	r23,32(sp)
  80296c:	dd800717 	ldw	r22,28(sp)
  802970:	dd400617 	ldw	r21,24(sp)
  802974:	dd000517 	ldw	r20,20(sp)
  802978:	dcc00417 	ldw	r19,16(sp)
  80297c:	dc800317 	ldw	r18,12(sp)
  802980:	dc400217 	ldw	r17,8(sp)
  802984:	dc000117 	ldw	r16,4(sp)
  802988:	dec00b04 	addi	sp,sp,44
  80298c:	f800283a 	ret
  802990:	00800304 	movi	r2,12
  802994:	90800015 	stw	r2,0(r18)
  802998:	0005883a 	mov	r2,zero
  80299c:	003ff006 	br	802960 <__alt_mem_onchip_mem+0xff782960>
  8029a0:	01002004 	movi	r4,128
  8029a4:	02001004 	movi	r8,64
  8029a8:	01c00fc4 	movi	r7,63
  8029ac:	003f6106 	br	802734 <__alt_mem_onchip_mem+0xff782734>
  8029b0:	4009883a 	mov	r4,r8
  8029b4:	003f7506 	br	80278c <__alt_mem_onchip_mem+0xff78278c>
  8029b8:	81000317 	ldw	r4,12(r16)
  8029bc:	003fde06 	br	802938 <__alt_mem_onchip_mem+0xff782938>
  8029c0:	81c5883a 	add	r2,r16,r7
  8029c4:	11400117 	ldw	r5,4(r2)
  8029c8:	9009883a 	mov	r4,r18
  8029cc:	29400054 	ori	r5,r5,1
  8029d0:	11400115 	stw	r5,4(r2)
  8029d4:	080f2280 	call	80f228 <__malloc_unlock>
  8029d8:	80800204 	addi	r2,r16,8
  8029dc:	003fe006 	br	802960 <__alt_mem_onchip_mem+0xff782960>
  8029e0:	9c000217 	ldw	r16,8(r19)
  8029e4:	00bfff04 	movi	r2,-4
  8029e8:	85800117 	ldw	r22,4(r16)
  8029ec:	b0ac703a 	and	r22,r22,r2
  8029f0:	b4400336 	bltu	r22,r17,802a00 <_malloc_r+0x344>
  8029f4:	b445c83a 	sub	r2,r22,r17
  8029f8:	00c003c4 	movi	r3,15
  8029fc:	18805d16 	blt	r3,r2,802b74 <_malloc_r+0x4b8>
  802a00:	05c02074 	movhi	r23,129
  802a04:	00802074 	movhi	r2,129
  802a08:	109b8a04 	addi	r2,r2,28200
  802a0c:	bdd42604 	addi	r23,r23,20632
  802a10:	15400017 	ldw	r21,0(r2)
  802a14:	b8c00017 	ldw	r3,0(r23)
  802a18:	00bfffc4 	movi	r2,-1
  802a1c:	858d883a 	add	r6,r16,r22
  802a20:	8d6b883a 	add	r21,r17,r21
  802a24:	1880ea26 	beq	r3,r2,802dd0 <_malloc_r+0x714>
  802a28:	ad4403c4 	addi	r21,r21,4111
  802a2c:	00bc0004 	movi	r2,-4096
  802a30:	a8aa703a 	and	r21,r21,r2
  802a34:	a80b883a 	mov	r5,r21
  802a38:	9009883a 	mov	r4,r18
  802a3c:	d9800015 	stw	r6,0(sp)
  802a40:	08034280 	call	803428 <_sbrk_r>
  802a44:	1029883a 	mov	r20,r2
  802a48:	00bfffc4 	movi	r2,-1
  802a4c:	d9800017 	ldw	r6,0(sp)
  802a50:	a080e826 	beq	r20,r2,802df4 <_malloc_r+0x738>
  802a54:	a180a636 	bltu	r20,r6,802cf0 <_malloc_r+0x634>
  802a58:	07002074 	movhi	fp,129
  802a5c:	e71ba704 	addi	fp,fp,28316
  802a60:	e0800017 	ldw	r2,0(fp)
  802a64:	a887883a 	add	r3,r21,r2
  802a68:	e0c00015 	stw	r3,0(fp)
  802a6c:	3500e626 	beq	r6,r20,802e08 <_malloc_r+0x74c>
  802a70:	b9000017 	ldw	r4,0(r23)
  802a74:	00bfffc4 	movi	r2,-1
  802a78:	2080ee26 	beq	r4,r2,802e34 <_malloc_r+0x778>
  802a7c:	a185c83a 	sub	r2,r20,r6
  802a80:	10c5883a 	add	r2,r2,r3
  802a84:	e0800015 	stw	r2,0(fp)
  802a88:	a0c001cc 	andi	r3,r20,7
  802a8c:	1800bc26 	beq	r3,zero,802d80 <_malloc_r+0x6c4>
  802a90:	a0e9c83a 	sub	r20,r20,r3
  802a94:	00840204 	movi	r2,4104
  802a98:	a5000204 	addi	r20,r20,8
  802a9c:	10c7c83a 	sub	r3,r2,r3
  802aa0:	a545883a 	add	r2,r20,r21
  802aa4:	1083ffcc 	andi	r2,r2,4095
  802aa8:	18abc83a 	sub	r21,r3,r2
  802aac:	a80b883a 	mov	r5,r21
  802ab0:	9009883a 	mov	r4,r18
  802ab4:	08034280 	call	803428 <_sbrk_r>
  802ab8:	00ffffc4 	movi	r3,-1
  802abc:	10c0e126 	beq	r2,r3,802e44 <_malloc_r+0x788>
  802ac0:	1505c83a 	sub	r2,r2,r20
  802ac4:	1545883a 	add	r2,r2,r21
  802ac8:	10800054 	ori	r2,r2,1
  802acc:	e0c00017 	ldw	r3,0(fp)
  802ad0:	9d000215 	stw	r20,8(r19)
  802ad4:	a0800115 	stw	r2,4(r20)
  802ad8:	a8c7883a 	add	r3,r21,r3
  802adc:	e0c00015 	stw	r3,0(fp)
  802ae0:	84c00e26 	beq	r16,r19,802b1c <_malloc_r+0x460>
  802ae4:	018003c4 	movi	r6,15
  802ae8:	3580a72e 	bgeu	r6,r22,802d88 <_malloc_r+0x6cc>
  802aec:	81400117 	ldw	r5,4(r16)
  802af0:	013ffe04 	movi	r4,-8
  802af4:	b0bffd04 	addi	r2,r22,-12
  802af8:	1104703a 	and	r2,r2,r4
  802afc:	2900004c 	andi	r4,r5,1
  802b00:	2088b03a 	or	r4,r4,r2
  802b04:	81000115 	stw	r4,4(r16)
  802b08:	01400144 	movi	r5,5
  802b0c:	8089883a 	add	r4,r16,r2
  802b10:	21400115 	stw	r5,4(r4)
  802b14:	21400215 	stw	r5,8(r4)
  802b18:	3080cd36 	bltu	r6,r2,802e50 <_malloc_r+0x794>
  802b1c:	00802074 	movhi	r2,129
  802b20:	109b8904 	addi	r2,r2,28196
  802b24:	11000017 	ldw	r4,0(r2)
  802b28:	20c0012e 	bgeu	r4,r3,802b30 <_malloc_r+0x474>
  802b2c:	10c00015 	stw	r3,0(r2)
  802b30:	00802074 	movhi	r2,129
  802b34:	109b8804 	addi	r2,r2,28192
  802b38:	11000017 	ldw	r4,0(r2)
  802b3c:	9c000217 	ldw	r16,8(r19)
  802b40:	20c0012e 	bgeu	r4,r3,802b48 <_malloc_r+0x48c>
  802b44:	10c00015 	stw	r3,0(r2)
  802b48:	80c00117 	ldw	r3,4(r16)
  802b4c:	00bfff04 	movi	r2,-4
  802b50:	1886703a 	and	r3,r3,r2
  802b54:	1c45c83a 	sub	r2,r3,r17
  802b58:	1c400236 	bltu	r3,r17,802b64 <_malloc_r+0x4a8>
  802b5c:	00c003c4 	movi	r3,15
  802b60:	18800416 	blt	r3,r2,802b74 <_malloc_r+0x4b8>
  802b64:	9009883a 	mov	r4,r18
  802b68:	080f2280 	call	80f228 <__malloc_unlock>
  802b6c:	0005883a 	mov	r2,zero
  802b70:	003f7b06 	br	802960 <__alt_mem_onchip_mem+0xff782960>
  802b74:	88c00054 	ori	r3,r17,1
  802b78:	80c00115 	stw	r3,4(r16)
  802b7c:	8463883a 	add	r17,r16,r17
  802b80:	10800054 	ori	r2,r2,1
  802b84:	9c400215 	stw	r17,8(r19)
  802b88:	88800115 	stw	r2,4(r17)
  802b8c:	9009883a 	mov	r4,r18
  802b90:	080f2280 	call	80f228 <__malloc_unlock>
  802b94:	80800204 	addi	r2,r16,8
  802b98:	003f7106 	br	802960 <__alt_mem_onchip_mem+0xff782960>
  802b9c:	00c00504 	movi	r3,20
  802ba0:	18804a2e 	bgeu	r3,r2,802ccc <_malloc_r+0x610>
  802ba4:	00c01504 	movi	r3,84
  802ba8:	18806e36 	bltu	r3,r2,802d64 <_malloc_r+0x6a8>
  802bac:	8804d33a 	srli	r2,r17,12
  802bb0:	12001bc4 	addi	r8,r2,111
  802bb4:	11c01b84 	addi	r7,r2,110
  802bb8:	4209883a 	add	r4,r8,r8
  802bbc:	003edd06 	br	802734 <__alt_mem_onchip_mem+0xff782734>
  802bc0:	3804d27a 	srli	r2,r7,9
  802bc4:	00c00104 	movi	r3,4
  802bc8:	1880442e 	bgeu	r3,r2,802cdc <_malloc_r+0x620>
  802bcc:	00c00504 	movi	r3,20
  802bd0:	18808136 	bltu	r3,r2,802dd8 <_malloc_r+0x71c>
  802bd4:	11401704 	addi	r5,r2,92
  802bd8:	10c016c4 	addi	r3,r2,91
  802bdc:	294b883a 	add	r5,r5,r5
  802be0:	294b883a 	add	r5,r5,r5
  802be4:	294b883a 	add	r5,r5,r5
  802be8:	994b883a 	add	r5,r19,r5
  802bec:	28800017 	ldw	r2,0(r5)
  802bf0:	01802074 	movhi	r6,129
  802bf4:	297ffe04 	addi	r5,r5,-8
  802bf8:	318e0704 	addi	r6,r6,14364
  802bfc:	28806526 	beq	r5,r2,802d94 <_malloc_r+0x6d8>
  802c00:	01bfff04 	movi	r6,-4
  802c04:	10c00117 	ldw	r3,4(r2)
  802c08:	1986703a 	and	r3,r3,r6
  802c0c:	38c0022e 	bgeu	r7,r3,802c18 <_malloc_r+0x55c>
  802c10:	10800217 	ldw	r2,8(r2)
  802c14:	28bffb1e 	bne	r5,r2,802c04 <__alt_mem_onchip_mem+0xff782c04>
  802c18:	11400317 	ldw	r5,12(r2)
  802c1c:	98c00117 	ldw	r3,4(r19)
  802c20:	81400315 	stw	r5,12(r16)
  802c24:	80800215 	stw	r2,8(r16)
  802c28:	2c000215 	stw	r16,8(r5)
  802c2c:	14000315 	stw	r16,12(r2)
  802c30:	003ef806 	br	802814 <__alt_mem_onchip_mem+0xff782814>
  802c34:	88c00054 	ori	r3,r17,1
  802c38:	80c00115 	stw	r3,4(r16)
  802c3c:	8463883a 	add	r17,r16,r17
  802c40:	34400515 	stw	r17,20(r6)
  802c44:	34400415 	stw	r17,16(r6)
  802c48:	10c00054 	ori	r3,r2,1
  802c4c:	8a000315 	stw	r8,12(r17)
  802c50:	8a000215 	stw	r8,8(r17)
  802c54:	88c00115 	stw	r3,4(r17)
  802c58:	88a3883a 	add	r17,r17,r2
  802c5c:	88800015 	stw	r2,0(r17)
  802c60:	9009883a 	mov	r4,r18
  802c64:	080f2280 	call	80f228 <__malloc_unlock>
  802c68:	80800204 	addi	r2,r16,8
  802c6c:	003f3c06 	br	802960 <__alt_mem_onchip_mem+0xff782960>
  802c70:	30c00117 	ldw	r3,4(r6)
  802c74:	003ee706 	br	802814 <__alt_mem_onchip_mem+0xff782814>
  802c78:	5ac00044 	addi	r11,r11,1
  802c7c:	588000cc 	andi	r2,r11,3
  802c80:	31800204 	addi	r6,r6,8
  802c84:	103efd1e 	bne	r2,zero,80287c <__alt_mem_onchip_mem+0xff78287c>
  802c88:	00002406 	br	802d1c <_malloc_r+0x660>
  802c8c:	14000317 	ldw	r16,12(r2)
  802c90:	143f251e 	bne	r2,r16,802928 <__alt_mem_onchip_mem+0xff782928>
  802c94:	21000084 	addi	r4,r4,2
  802c98:	003ebc06 	br	80278c <__alt_mem_onchip_mem+0xff78278c>
  802c9c:	8085883a 	add	r2,r16,r2
  802ca0:	10c00117 	ldw	r3,4(r2)
  802ca4:	81000317 	ldw	r4,12(r16)
  802ca8:	81400217 	ldw	r5,8(r16)
  802cac:	18c00054 	ori	r3,r3,1
  802cb0:	10c00115 	stw	r3,4(r2)
  802cb4:	29000315 	stw	r4,12(r5)
  802cb8:	21400215 	stw	r5,8(r4)
  802cbc:	9009883a 	mov	r4,r18
  802cc0:	080f2280 	call	80f228 <__malloc_unlock>
  802cc4:	80800204 	addi	r2,r16,8
  802cc8:	003f2506 	br	802960 <__alt_mem_onchip_mem+0xff782960>
  802ccc:	12001704 	addi	r8,r2,92
  802cd0:	11c016c4 	addi	r7,r2,91
  802cd4:	4209883a 	add	r4,r8,r8
  802cd8:	003e9606 	br	802734 <__alt_mem_onchip_mem+0xff782734>
  802cdc:	3804d1ba 	srli	r2,r7,6
  802ce0:	11400e44 	addi	r5,r2,57
  802ce4:	10c00e04 	addi	r3,r2,56
  802ce8:	294b883a 	add	r5,r5,r5
  802cec:	003fbc06 	br	802be0 <__alt_mem_onchip_mem+0xff782be0>
  802cf0:	84ff5926 	beq	r16,r19,802a58 <__alt_mem_onchip_mem+0xff782a58>
  802cf4:	00802074 	movhi	r2,129
  802cf8:	108e0704 	addi	r2,r2,14364
  802cfc:	14000217 	ldw	r16,8(r2)
  802d00:	00bfff04 	movi	r2,-4
  802d04:	80c00117 	ldw	r3,4(r16)
  802d08:	1886703a 	and	r3,r3,r2
  802d0c:	003f9106 	br	802b54 <__alt_mem_onchip_mem+0xff782b54>
  802d10:	60800217 	ldw	r2,8(r12)
  802d14:	213fffc4 	addi	r4,r4,-1
  802d18:	1300651e 	bne	r2,r12,802eb0 <_malloc_r+0x7f4>
  802d1c:	208000cc 	andi	r2,r4,3
  802d20:	633ffe04 	addi	r12,r12,-8
  802d24:	103ffa1e 	bne	r2,zero,802d10 <__alt_mem_onchip_mem+0xff782d10>
  802d28:	98800117 	ldw	r2,4(r19)
  802d2c:	0146303a 	nor	r3,zero,r5
  802d30:	1884703a 	and	r2,r3,r2
  802d34:	98800115 	stw	r2,4(r19)
  802d38:	294b883a 	add	r5,r5,r5
  802d3c:	117f2836 	bltu	r2,r5,8029e0 <__alt_mem_onchip_mem+0xff7829e0>
  802d40:	283f2726 	beq	r5,zero,8029e0 <__alt_mem_onchip_mem+0xff7829e0>
  802d44:	2886703a 	and	r3,r5,r2
  802d48:	5809883a 	mov	r4,r11
  802d4c:	183ec31e 	bne	r3,zero,80285c <__alt_mem_onchip_mem+0xff78285c>
  802d50:	294b883a 	add	r5,r5,r5
  802d54:	2886703a 	and	r3,r5,r2
  802d58:	21000104 	addi	r4,r4,4
  802d5c:	183ffc26 	beq	r3,zero,802d50 <__alt_mem_onchip_mem+0xff782d50>
  802d60:	003ebe06 	br	80285c <__alt_mem_onchip_mem+0xff78285c>
  802d64:	00c05504 	movi	r3,340
  802d68:	18801236 	bltu	r3,r2,802db4 <_malloc_r+0x6f8>
  802d6c:	8804d3fa 	srli	r2,r17,15
  802d70:	12001e04 	addi	r8,r2,120
  802d74:	11c01dc4 	addi	r7,r2,119
  802d78:	4209883a 	add	r4,r8,r8
  802d7c:	003e6d06 	br	802734 <__alt_mem_onchip_mem+0xff782734>
  802d80:	00c40004 	movi	r3,4096
  802d84:	003f4606 	br	802aa0 <__alt_mem_onchip_mem+0xff782aa0>
  802d88:	00800044 	movi	r2,1
  802d8c:	a0800115 	stw	r2,4(r20)
  802d90:	003f7406 	br	802b64 <__alt_mem_onchip_mem+0xff782b64>
  802d94:	1805d0ba 	srai	r2,r3,2
  802d98:	01c00044 	movi	r7,1
  802d9c:	30c00117 	ldw	r3,4(r6)
  802da0:	388e983a 	sll	r7,r7,r2
  802da4:	2805883a 	mov	r2,r5
  802da8:	38c6b03a 	or	r3,r7,r3
  802dac:	30c00115 	stw	r3,4(r6)
  802db0:	003f9b06 	br	802c20 <__alt_mem_onchip_mem+0xff782c20>
  802db4:	00c15504 	movi	r3,1364
  802db8:	18801a36 	bltu	r3,r2,802e24 <_malloc_r+0x768>
  802dbc:	8804d4ba 	srli	r2,r17,18
  802dc0:	12001f44 	addi	r8,r2,125
  802dc4:	11c01f04 	addi	r7,r2,124
  802dc8:	4209883a 	add	r4,r8,r8
  802dcc:	003e5906 	br	802734 <__alt_mem_onchip_mem+0xff782734>
  802dd0:	ad400404 	addi	r21,r21,16
  802dd4:	003f1706 	br	802a34 <__alt_mem_onchip_mem+0xff782a34>
  802dd8:	00c01504 	movi	r3,84
  802ddc:	18802336 	bltu	r3,r2,802e6c <_malloc_r+0x7b0>
  802de0:	3804d33a 	srli	r2,r7,12
  802de4:	11401bc4 	addi	r5,r2,111
  802de8:	10c01b84 	addi	r3,r2,110
  802dec:	294b883a 	add	r5,r5,r5
  802df0:	003f7b06 	br	802be0 <__alt_mem_onchip_mem+0xff782be0>
  802df4:	9c000217 	ldw	r16,8(r19)
  802df8:	00bfff04 	movi	r2,-4
  802dfc:	80c00117 	ldw	r3,4(r16)
  802e00:	1886703a 	and	r3,r3,r2
  802e04:	003f5306 	br	802b54 <__alt_mem_onchip_mem+0xff782b54>
  802e08:	3083ffcc 	andi	r2,r6,4095
  802e0c:	103f181e 	bne	r2,zero,802a70 <__alt_mem_onchip_mem+0xff782a70>
  802e10:	99000217 	ldw	r4,8(r19)
  802e14:	b545883a 	add	r2,r22,r21
  802e18:	10800054 	ori	r2,r2,1
  802e1c:	20800115 	stw	r2,4(r4)
  802e20:	003f3e06 	br	802b1c <__alt_mem_onchip_mem+0xff782b1c>
  802e24:	01003f84 	movi	r4,254
  802e28:	02001fc4 	movi	r8,127
  802e2c:	01c01f84 	movi	r7,126
  802e30:	003e4006 	br	802734 <__alt_mem_onchip_mem+0xff782734>
  802e34:	00802074 	movhi	r2,129
  802e38:	10942604 	addi	r2,r2,20632
  802e3c:	15000015 	stw	r20,0(r2)
  802e40:	003f1106 	br	802a88 <__alt_mem_onchip_mem+0xff782a88>
  802e44:	00800044 	movi	r2,1
  802e48:	002b883a 	mov	r21,zero
  802e4c:	003f1f06 	br	802acc <__alt_mem_onchip_mem+0xff782acc>
  802e50:	81400204 	addi	r5,r16,8
  802e54:	9009883a 	mov	r4,r18
  802e58:	0801a8c0 	call	801a8c <_free_r>
  802e5c:	00802074 	movhi	r2,129
  802e60:	109ba704 	addi	r2,r2,28316
  802e64:	10c00017 	ldw	r3,0(r2)
  802e68:	003f2c06 	br	802b1c <__alt_mem_onchip_mem+0xff782b1c>
  802e6c:	00c05504 	movi	r3,340
  802e70:	18800536 	bltu	r3,r2,802e88 <_malloc_r+0x7cc>
  802e74:	3804d3fa 	srli	r2,r7,15
  802e78:	11401e04 	addi	r5,r2,120
  802e7c:	10c01dc4 	addi	r3,r2,119
  802e80:	294b883a 	add	r5,r5,r5
  802e84:	003f5606 	br	802be0 <__alt_mem_onchip_mem+0xff782be0>
  802e88:	00c15504 	movi	r3,1364
  802e8c:	18800536 	bltu	r3,r2,802ea4 <_malloc_r+0x7e8>
  802e90:	3804d4ba 	srli	r2,r7,18
  802e94:	11401f44 	addi	r5,r2,125
  802e98:	10c01f04 	addi	r3,r2,124
  802e9c:	294b883a 	add	r5,r5,r5
  802ea0:	003f4f06 	br	802be0 <__alt_mem_onchip_mem+0xff782be0>
  802ea4:	01403f84 	movi	r5,254
  802ea8:	00c01f84 	movi	r3,126
  802eac:	003f4c06 	br	802be0 <__alt_mem_onchip_mem+0xff782be0>
  802eb0:	98800117 	ldw	r2,4(r19)
  802eb4:	003fa006 	br	802d38 <__alt_mem_onchip_mem+0xff782d38>
  802eb8:	8808d0fa 	srli	r4,r17,3
  802ebc:	20800044 	addi	r2,r4,1
  802ec0:	1085883a 	add	r2,r2,r2
  802ec4:	003e9006 	br	802908 <__alt_mem_onchip_mem+0xff782908>

00802ec8 <memset>:
  802ec8:	20c000cc 	andi	r3,r4,3
  802ecc:	2005883a 	mov	r2,r4
  802ed0:	18004426 	beq	r3,zero,802fe4 <memset+0x11c>
  802ed4:	31ffffc4 	addi	r7,r6,-1
  802ed8:	30004026 	beq	r6,zero,802fdc <memset+0x114>
  802edc:	2813883a 	mov	r9,r5
  802ee0:	200d883a 	mov	r6,r4
  802ee4:	2007883a 	mov	r3,r4
  802ee8:	00000406 	br	802efc <memset+0x34>
  802eec:	3a3fffc4 	addi	r8,r7,-1
  802ef0:	31800044 	addi	r6,r6,1
  802ef4:	38003926 	beq	r7,zero,802fdc <memset+0x114>
  802ef8:	400f883a 	mov	r7,r8
  802efc:	18c00044 	addi	r3,r3,1
  802f00:	32400005 	stb	r9,0(r6)
  802f04:	1a0000cc 	andi	r8,r3,3
  802f08:	403ff81e 	bne	r8,zero,802eec <__alt_mem_onchip_mem+0xff782eec>
  802f0c:	010000c4 	movi	r4,3
  802f10:	21c02d2e 	bgeu	r4,r7,802fc8 <memset+0x100>
  802f14:	29003fcc 	andi	r4,r5,255
  802f18:	200c923a 	slli	r6,r4,8
  802f1c:	3108b03a 	or	r4,r6,r4
  802f20:	200c943a 	slli	r6,r4,16
  802f24:	218cb03a 	or	r6,r4,r6
  802f28:	010003c4 	movi	r4,15
  802f2c:	21c0182e 	bgeu	r4,r7,802f90 <memset+0xc8>
  802f30:	3b3ffc04 	addi	r12,r7,-16
  802f34:	6018d13a 	srli	r12,r12,4
  802f38:	1a000104 	addi	r8,r3,4
  802f3c:	1ac00204 	addi	r11,r3,8
  802f40:	6008913a 	slli	r4,r12,4
  802f44:	1a800304 	addi	r10,r3,12
  802f48:	1813883a 	mov	r9,r3
  802f4c:	21000504 	addi	r4,r4,20
  802f50:	1909883a 	add	r4,r3,r4
  802f54:	49800015 	stw	r6,0(r9)
  802f58:	41800015 	stw	r6,0(r8)
  802f5c:	59800015 	stw	r6,0(r11)
  802f60:	51800015 	stw	r6,0(r10)
  802f64:	42000404 	addi	r8,r8,16
  802f68:	4a400404 	addi	r9,r9,16
  802f6c:	5ac00404 	addi	r11,r11,16
  802f70:	52800404 	addi	r10,r10,16
  802f74:	413ff71e 	bne	r8,r4,802f54 <__alt_mem_onchip_mem+0xff782f54>
  802f78:	63000044 	addi	r12,r12,1
  802f7c:	6018913a 	slli	r12,r12,4
  802f80:	39c003cc 	andi	r7,r7,15
  802f84:	010000c4 	movi	r4,3
  802f88:	1b07883a 	add	r3,r3,r12
  802f8c:	21c00e2e 	bgeu	r4,r7,802fc8 <memset+0x100>
  802f90:	1813883a 	mov	r9,r3
  802f94:	3811883a 	mov	r8,r7
  802f98:	010000c4 	movi	r4,3
  802f9c:	49800015 	stw	r6,0(r9)
  802fa0:	423fff04 	addi	r8,r8,-4
  802fa4:	4a400104 	addi	r9,r9,4
  802fa8:	223ffc36 	bltu	r4,r8,802f9c <__alt_mem_onchip_mem+0xff782f9c>
  802fac:	393fff04 	addi	r4,r7,-4
  802fb0:	2008d0ba 	srli	r4,r4,2
  802fb4:	39c000cc 	andi	r7,r7,3
  802fb8:	21000044 	addi	r4,r4,1
  802fbc:	2109883a 	add	r4,r4,r4
  802fc0:	2109883a 	add	r4,r4,r4
  802fc4:	1907883a 	add	r3,r3,r4
  802fc8:	38000526 	beq	r7,zero,802fe0 <memset+0x118>
  802fcc:	19cf883a 	add	r7,r3,r7
  802fd0:	19400005 	stb	r5,0(r3)
  802fd4:	18c00044 	addi	r3,r3,1
  802fd8:	38fffd1e 	bne	r7,r3,802fd0 <__alt_mem_onchip_mem+0xff782fd0>
  802fdc:	f800283a 	ret
  802fe0:	f800283a 	ret
  802fe4:	2007883a 	mov	r3,r4
  802fe8:	300f883a 	mov	r7,r6
  802fec:	003fc706 	br	802f0c <__alt_mem_onchip_mem+0xff782f0c>

00802ff0 <_open_r>:
  802ff0:	defffd04 	addi	sp,sp,-12
  802ff4:	2805883a 	mov	r2,r5
  802ff8:	dc000015 	stw	r16,0(sp)
  802ffc:	04002074 	movhi	r16,129
  803000:	dc400115 	stw	r17,4(sp)
  803004:	300b883a 	mov	r5,r6
  803008:	841b8704 	addi	r16,r16,28188
  80300c:	2023883a 	mov	r17,r4
  803010:	380d883a 	mov	r6,r7
  803014:	1009883a 	mov	r4,r2
  803018:	dfc00215 	stw	ra,8(sp)
  80301c:	80000015 	stw	zero,0(r16)
  803020:	080f34c0 	call	80f34c <open>
  803024:	00ffffc4 	movi	r3,-1
  803028:	10c00526 	beq	r2,r3,803040 <_open_r+0x50>
  80302c:	dfc00217 	ldw	ra,8(sp)
  803030:	dc400117 	ldw	r17,4(sp)
  803034:	dc000017 	ldw	r16,0(sp)
  803038:	dec00304 	addi	sp,sp,12
  80303c:	f800283a 	ret
  803040:	80c00017 	ldw	r3,0(r16)
  803044:	183ff926 	beq	r3,zero,80302c <__alt_mem_onchip_mem+0xff78302c>
  803048:	88c00015 	stw	r3,0(r17)
  80304c:	003ff706 	br	80302c <__alt_mem_onchip_mem+0xff78302c>

00803050 <_printf_r>:
  803050:	defffd04 	addi	sp,sp,-12
  803054:	2805883a 	mov	r2,r5
  803058:	dfc00015 	stw	ra,0(sp)
  80305c:	d9800115 	stw	r6,4(sp)
  803060:	d9c00215 	stw	r7,8(sp)
  803064:	21400217 	ldw	r5,8(r4)
  803068:	d9c00104 	addi	r7,sp,4
  80306c:	100d883a 	mov	r6,r2
  803070:	08039600 	call	803960 <___vfprintf_internal_r>
  803074:	dfc00017 	ldw	ra,0(sp)
  803078:	dec00304 	addi	sp,sp,12
  80307c:	f800283a 	ret

00803080 <printf>:
  803080:	defffc04 	addi	sp,sp,-16
  803084:	dfc00015 	stw	ra,0(sp)
  803088:	d9400115 	stw	r5,4(sp)
  80308c:	d9800215 	stw	r6,8(sp)
  803090:	d9c00315 	stw	r7,12(sp)
  803094:	00802074 	movhi	r2,129
  803098:	10942504 	addi	r2,r2,20628
  80309c:	10800017 	ldw	r2,0(r2)
  8030a0:	200b883a 	mov	r5,r4
  8030a4:	d9800104 	addi	r6,sp,4
  8030a8:	11000217 	ldw	r4,8(r2)
  8030ac:	0805b580 	call	805b58 <__vfprintf_internal>
  8030b0:	dfc00017 	ldw	ra,0(sp)
  8030b4:	dec00404 	addi	sp,sp,16
  8030b8:	f800283a 	ret

008030bc <_putchar_r>:
  8030bc:	21800217 	ldw	r6,8(r4)
  8030c0:	08092401 	jmpi	809240 <_putc_r>

008030c4 <putchar>:
  8030c4:	00802074 	movhi	r2,129
  8030c8:	10942504 	addi	r2,r2,20628
  8030cc:	200b883a 	mov	r5,r4
  8030d0:	11000017 	ldw	r4,0(r2)
  8030d4:	21800217 	ldw	r6,8(r4)
  8030d8:	08092401 	jmpi	809240 <_putc_r>

008030dc <_puts_r>:
  8030dc:	defff604 	addi	sp,sp,-40
  8030e0:	dc000715 	stw	r16,28(sp)
  8030e4:	2021883a 	mov	r16,r4
  8030e8:	2809883a 	mov	r4,r5
  8030ec:	dc400815 	stw	r17,32(sp)
  8030f0:	dfc00915 	stw	ra,36(sp)
  8030f4:	2823883a 	mov	r17,r5
  8030f8:	08035b80 	call	8035b8 <strlen>
  8030fc:	10c00044 	addi	r3,r2,1
  803100:	d8800115 	stw	r2,4(sp)
  803104:	00802074 	movhi	r2,129
  803108:	108b9204 	addi	r2,r2,11848
  80310c:	d8800215 	stw	r2,8(sp)
  803110:	00800044 	movi	r2,1
  803114:	d8800315 	stw	r2,12(sp)
  803118:	00800084 	movi	r2,2
  80311c:	dc400015 	stw	r17,0(sp)
  803120:	d8c00615 	stw	r3,24(sp)
  803124:	dec00415 	stw	sp,16(sp)
  803128:	d8800515 	stw	r2,20(sp)
  80312c:	80000226 	beq	r16,zero,803138 <_puts_r+0x5c>
  803130:	80800e17 	ldw	r2,56(r16)
  803134:	10001426 	beq	r2,zero,803188 <_puts_r+0xac>
  803138:	81400217 	ldw	r5,8(r16)
  80313c:	2880030b 	ldhu	r2,12(r5)
  803140:	10c8000c 	andi	r3,r2,8192
  803144:	1800061e 	bne	r3,zero,803160 <_puts_r+0x84>
  803148:	29001917 	ldw	r4,100(r5)
  80314c:	00f7ffc4 	movi	r3,-8193
  803150:	10880014 	ori	r2,r2,8192
  803154:	20c6703a 	and	r3,r4,r3
  803158:	2880030d 	sth	r2,12(r5)
  80315c:	28c01915 	stw	r3,100(r5)
  803160:	d9800404 	addi	r6,sp,16
  803164:	8009883a 	mov	r4,r16
  803168:	08078700 	call	807870 <__sfvwrite_r>
  80316c:	1000091e 	bne	r2,zero,803194 <_puts_r+0xb8>
  803170:	00800284 	movi	r2,10
  803174:	dfc00917 	ldw	ra,36(sp)
  803178:	dc400817 	ldw	r17,32(sp)
  80317c:	dc000717 	ldw	r16,28(sp)
  803180:	dec00a04 	addi	sp,sp,40
  803184:	f800283a 	ret
  803188:	8009883a 	mov	r4,r16
  80318c:	08017c00 	call	8017c0 <__sinit>
  803190:	003fe906 	br	803138 <__alt_mem_onchip_mem+0xff783138>
  803194:	00bfffc4 	movi	r2,-1
  803198:	003ff606 	br	803174 <__alt_mem_onchip_mem+0xff783174>

0080319c <puts>:
  80319c:	00802074 	movhi	r2,129
  8031a0:	10942504 	addi	r2,r2,20628
  8031a4:	200b883a 	mov	r5,r4
  8031a8:	11000017 	ldw	r4,0(r2)
  8031ac:	08030dc1 	jmpi	8030dc <_puts_r>

008031b0 <lflush>:
  8031b0:	2080030b 	ldhu	r2,12(r4)
  8031b4:	00c00244 	movi	r3,9
  8031b8:	1080024c 	andi	r2,r2,9
  8031bc:	10c00226 	beq	r2,r3,8031c8 <lflush+0x18>
  8031c0:	0005883a 	mov	r2,zero
  8031c4:	f800283a 	ret
  8031c8:	08013481 	jmpi	801348 <fflush>

008031cc <__srefill_r>:
  8031cc:	defffc04 	addi	sp,sp,-16
  8031d0:	dc400115 	stw	r17,4(sp)
  8031d4:	dc000015 	stw	r16,0(sp)
  8031d8:	dfc00315 	stw	ra,12(sp)
  8031dc:	dc800215 	stw	r18,8(sp)
  8031e0:	2023883a 	mov	r17,r4
  8031e4:	2821883a 	mov	r16,r5
  8031e8:	20000226 	beq	r4,zero,8031f4 <__srefill_r+0x28>
  8031ec:	20800e17 	ldw	r2,56(r4)
  8031f0:	10003c26 	beq	r2,zero,8032e4 <__srefill_r+0x118>
  8031f4:	80c0030b 	ldhu	r3,12(r16)
  8031f8:	1908000c 	andi	r4,r3,8192
  8031fc:	1805883a 	mov	r2,r3
  803200:	2000071e 	bne	r4,zero,803220 <__srefill_r+0x54>
  803204:	81001917 	ldw	r4,100(r16)
  803208:	18880014 	ori	r2,r3,8192
  80320c:	00f7ffc4 	movi	r3,-8193
  803210:	20c8703a 	and	r4,r4,r3
  803214:	8080030d 	sth	r2,12(r16)
  803218:	1007883a 	mov	r3,r2
  80321c:	81001915 	stw	r4,100(r16)
  803220:	80000115 	stw	zero,4(r16)
  803224:	1100080c 	andi	r4,r2,32
  803228:	2000571e 	bne	r4,zero,803388 <__srefill_r+0x1bc>
  80322c:	1100010c 	andi	r4,r2,4
  803230:	20001f26 	beq	r4,zero,8032b0 <__srefill_r+0xe4>
  803234:	81400c17 	ldw	r5,48(r16)
  803238:	28000826 	beq	r5,zero,80325c <__srefill_r+0x90>
  80323c:	80801004 	addi	r2,r16,64
  803240:	28800226 	beq	r5,r2,80324c <__srefill_r+0x80>
  803244:	8809883a 	mov	r4,r17
  803248:	0801a8c0 	call	801a8c <_free_r>
  80324c:	80800f17 	ldw	r2,60(r16)
  803250:	80000c15 	stw	zero,48(r16)
  803254:	80800115 	stw	r2,4(r16)
  803258:	1000391e 	bne	r2,zero,803340 <__srefill_r+0x174>
  80325c:	80800417 	ldw	r2,16(r16)
  803260:	10004b26 	beq	r2,zero,803390 <__srefill_r+0x1c4>
  803264:	8480030b 	ldhu	r18,12(r16)
  803268:	908000cc 	andi	r2,r18,3
  80326c:	10001f1e 	bne	r2,zero,8032ec <__srefill_r+0x120>
  803270:	81800417 	ldw	r6,16(r16)
  803274:	80800817 	ldw	r2,32(r16)
  803278:	81c00517 	ldw	r7,20(r16)
  80327c:	81400717 	ldw	r5,28(r16)
  803280:	81800015 	stw	r6,0(r16)
  803284:	8809883a 	mov	r4,r17
  803288:	103ee83a 	callr	r2
  80328c:	80800115 	stw	r2,4(r16)
  803290:	00800e0e 	bge	zero,r2,8032cc <__srefill_r+0x100>
  803294:	0005883a 	mov	r2,zero
  803298:	dfc00317 	ldw	ra,12(sp)
  80329c:	dc800217 	ldw	r18,8(sp)
  8032a0:	dc400117 	ldw	r17,4(sp)
  8032a4:	dc000017 	ldw	r16,0(sp)
  8032a8:	dec00404 	addi	sp,sp,16
  8032ac:	f800283a 	ret
  8032b0:	1100040c 	andi	r4,r2,16
  8032b4:	20003026 	beq	r4,zero,803378 <__srefill_r+0x1ac>
  8032b8:	1080020c 	andi	r2,r2,8
  8032bc:	1000241e 	bne	r2,zero,803350 <__srefill_r+0x184>
  8032c0:	18c00114 	ori	r3,r3,4
  8032c4:	80c0030d 	sth	r3,12(r16)
  8032c8:	003fe406 	br	80325c <__alt_mem_onchip_mem+0xff78325c>
  8032cc:	80c0030b 	ldhu	r3,12(r16)
  8032d0:	1000161e 	bne	r2,zero,80332c <__srefill_r+0x160>
  8032d4:	18c00814 	ori	r3,r3,32
  8032d8:	00bfffc4 	movi	r2,-1
  8032dc:	80c0030d 	sth	r3,12(r16)
  8032e0:	003fed06 	br	803298 <__alt_mem_onchip_mem+0xff783298>
  8032e4:	08017c00 	call	8017c0 <__sinit>
  8032e8:	003fc206 	br	8031f4 <__alt_mem_onchip_mem+0xff7831f4>
  8032ec:	00802074 	movhi	r2,129
  8032f0:	10942404 	addi	r2,r2,20624
  8032f4:	11000017 	ldw	r4,0(r2)
  8032f8:	01402034 	movhi	r5,128
  8032fc:	00800044 	movi	r2,1
  803300:	294c6c04 	addi	r5,r5,12720
  803304:	8080030d 	sth	r2,12(r16)
  803308:	08022780 	call	802278 <_fwalk>
  80330c:	00800244 	movi	r2,9
  803310:	8480030d 	sth	r18,12(r16)
  803314:	9480024c 	andi	r18,r18,9
  803318:	90bfd51e 	bne	r18,r2,803270 <__alt_mem_onchip_mem+0xff783270>
  80331c:	800b883a 	mov	r5,r16
  803320:	8809883a 	mov	r4,r17
  803324:	08010d00 	call	8010d0 <__sflush_r>
  803328:	003fd106 	br	803270 <__alt_mem_onchip_mem+0xff783270>
  80332c:	18c01014 	ori	r3,r3,64
  803330:	80000115 	stw	zero,4(r16)
  803334:	00bfffc4 	movi	r2,-1
  803338:	80c0030d 	sth	r3,12(r16)
  80333c:	003fd606 	br	803298 <__alt_mem_onchip_mem+0xff783298>
  803340:	80c00e17 	ldw	r3,56(r16)
  803344:	0005883a 	mov	r2,zero
  803348:	80c00015 	stw	r3,0(r16)
  80334c:	003fd206 	br	803298 <__alt_mem_onchip_mem+0xff783298>
  803350:	800b883a 	mov	r5,r16
  803354:	8809883a 	mov	r4,r17
  803358:	08012ec0 	call	8012ec <_fflush_r>
  80335c:	10000a1e 	bne	r2,zero,803388 <__srefill_r+0x1bc>
  803360:	8080030b 	ldhu	r2,12(r16)
  803364:	00fffdc4 	movi	r3,-9
  803368:	80000215 	stw	zero,8(r16)
  80336c:	1886703a 	and	r3,r3,r2
  803370:	80000615 	stw	zero,24(r16)
  803374:	003fd206 	br	8032c0 <__alt_mem_onchip_mem+0xff7832c0>
  803378:	00800244 	movi	r2,9
  80337c:	88800015 	stw	r2,0(r17)
  803380:	18c01014 	ori	r3,r3,64
  803384:	80c0030d 	sth	r3,12(r16)
  803388:	00bfffc4 	movi	r2,-1
  80338c:	003fc206 	br	803298 <__alt_mem_onchip_mem+0xff783298>
  803390:	800b883a 	mov	r5,r16
  803394:	8809883a 	mov	r4,r17
  803398:	08025000 	call	802500 <__smakebuf_r>
  80339c:	003fb106 	br	803264 <__alt_mem_onchip_mem+0xff783264>

008033a0 <__srget_r>:
  8033a0:	defffd04 	addi	sp,sp,-12
  8033a4:	dc400115 	stw	r17,4(sp)
  8033a8:	dc000015 	stw	r16,0(sp)
  8033ac:	dfc00215 	stw	ra,8(sp)
  8033b0:	2023883a 	mov	r17,r4
  8033b4:	2821883a 	mov	r16,r5
  8033b8:	20000226 	beq	r4,zero,8033c4 <__srget_r+0x24>
  8033bc:	20800e17 	ldw	r2,56(r4)
  8033c0:	10001026 	beq	r2,zero,803404 <__srget_r+0x64>
  8033c4:	800b883a 	mov	r5,r16
  8033c8:	8809883a 	mov	r4,r17
  8033cc:	08031cc0 	call	8031cc <__srefill_r>
  8033d0:	10000e1e 	bne	r2,zero,80340c <__srget_r+0x6c>
  8033d4:	80c00017 	ldw	r3,0(r16)
  8033d8:	80800117 	ldw	r2,4(r16)
  8033dc:	19000044 	addi	r4,r3,1
  8033e0:	10bfffc4 	addi	r2,r2,-1
  8033e4:	80800115 	stw	r2,4(r16)
  8033e8:	81000015 	stw	r4,0(r16)
  8033ec:	18800003 	ldbu	r2,0(r3)
  8033f0:	dfc00217 	ldw	ra,8(sp)
  8033f4:	dc400117 	ldw	r17,4(sp)
  8033f8:	dc000017 	ldw	r16,0(sp)
  8033fc:	dec00304 	addi	sp,sp,12
  803400:	f800283a 	ret
  803404:	08017c00 	call	8017c0 <__sinit>
  803408:	003fee06 	br	8033c4 <__alt_mem_onchip_mem+0xff7833c4>
  80340c:	00bfffc4 	movi	r2,-1
  803410:	003ff706 	br	8033f0 <__alt_mem_onchip_mem+0xff7833f0>

00803414 <__srget>:
  803414:	00802074 	movhi	r2,129
  803418:	10942504 	addi	r2,r2,20628
  80341c:	200b883a 	mov	r5,r4
  803420:	11000017 	ldw	r4,0(r2)
  803424:	08033a01 	jmpi	8033a0 <__srget_r>

00803428 <_sbrk_r>:
  803428:	defffd04 	addi	sp,sp,-12
  80342c:	dc000015 	stw	r16,0(sp)
  803430:	04002074 	movhi	r16,129
  803434:	dc400115 	stw	r17,4(sp)
  803438:	841b8704 	addi	r16,r16,28188
  80343c:	2023883a 	mov	r17,r4
  803440:	2809883a 	mov	r4,r5
  803444:	dfc00215 	stw	ra,8(sp)
  803448:	80000015 	stw	zero,0(r16)
  80344c:	080f63c0 	call	80f63c <sbrk>
  803450:	00ffffc4 	movi	r3,-1
  803454:	10c00526 	beq	r2,r3,80346c <_sbrk_r+0x44>
  803458:	dfc00217 	ldw	ra,8(sp)
  80345c:	dc400117 	ldw	r17,4(sp)
  803460:	dc000017 	ldw	r16,0(sp)
  803464:	dec00304 	addi	sp,sp,12
  803468:	f800283a 	ret
  80346c:	80c00017 	ldw	r3,0(r16)
  803470:	183ff926 	beq	r3,zero,803458 <__alt_mem_onchip_mem+0xff783458>
  803474:	88c00015 	stw	r3,0(r17)
  803478:	003ff706 	br	803458 <__alt_mem_onchip_mem+0xff783458>

0080347c <__sread>:
  80347c:	defffe04 	addi	sp,sp,-8
  803480:	dc000015 	stw	r16,0(sp)
  803484:	2821883a 	mov	r16,r5
  803488:	2940038f 	ldh	r5,14(r5)
  80348c:	dfc00115 	stw	ra,4(sp)
  803490:	08093a80 	call	8093a8 <_read_r>
  803494:	10000716 	blt	r2,zero,8034b4 <__sread+0x38>
  803498:	80c01417 	ldw	r3,80(r16)
  80349c:	1887883a 	add	r3,r3,r2
  8034a0:	80c01415 	stw	r3,80(r16)
  8034a4:	dfc00117 	ldw	ra,4(sp)
  8034a8:	dc000017 	ldw	r16,0(sp)
  8034ac:	dec00204 	addi	sp,sp,8
  8034b0:	f800283a 	ret
  8034b4:	80c0030b 	ldhu	r3,12(r16)
  8034b8:	18fbffcc 	andi	r3,r3,61439
  8034bc:	80c0030d 	sth	r3,12(r16)
  8034c0:	dfc00117 	ldw	ra,4(sp)
  8034c4:	dc000017 	ldw	r16,0(sp)
  8034c8:	dec00204 	addi	sp,sp,8
  8034cc:	f800283a 	ret

008034d0 <__seofread>:
  8034d0:	0005883a 	mov	r2,zero
  8034d4:	f800283a 	ret

008034d8 <__swrite>:
  8034d8:	2880030b 	ldhu	r2,12(r5)
  8034dc:	defffb04 	addi	sp,sp,-20
  8034e0:	dcc00315 	stw	r19,12(sp)
  8034e4:	dc800215 	stw	r18,8(sp)
  8034e8:	dc400115 	stw	r17,4(sp)
  8034ec:	dc000015 	stw	r16,0(sp)
  8034f0:	dfc00415 	stw	ra,16(sp)
  8034f4:	10c0400c 	andi	r3,r2,256
  8034f8:	2821883a 	mov	r16,r5
  8034fc:	2023883a 	mov	r17,r4
  803500:	3025883a 	mov	r18,r6
  803504:	3827883a 	mov	r19,r7
  803508:	18000526 	beq	r3,zero,803520 <__swrite+0x48>
  80350c:	2940038f 	ldh	r5,14(r5)
  803510:	01c00084 	movi	r7,2
  803514:	000d883a 	mov	r6,zero
  803518:	0807e5c0 	call	807e5c <_lseek_r>
  80351c:	8080030b 	ldhu	r2,12(r16)
  803520:	8140038f 	ldh	r5,14(r16)
  803524:	10bbffcc 	andi	r2,r2,61439
  803528:	980f883a 	mov	r7,r19
  80352c:	900d883a 	mov	r6,r18
  803530:	8809883a 	mov	r4,r17
  803534:	8080030d 	sth	r2,12(r16)
  803538:	dfc00417 	ldw	ra,16(sp)
  80353c:	dcc00317 	ldw	r19,12(sp)
  803540:	dc800217 	ldw	r18,8(sp)
  803544:	dc400117 	ldw	r17,4(sp)
  803548:	dc000017 	ldw	r16,0(sp)
  80354c:	dec00504 	addi	sp,sp,20
  803550:	0805c301 	jmpi	805c30 <_write_r>

00803554 <__sseek>:
  803554:	defffe04 	addi	sp,sp,-8
  803558:	dc000015 	stw	r16,0(sp)
  80355c:	2821883a 	mov	r16,r5
  803560:	2940038f 	ldh	r5,14(r5)
  803564:	dfc00115 	stw	ra,4(sp)
  803568:	0807e5c0 	call	807e5c <_lseek_r>
  80356c:	00ffffc4 	movi	r3,-1
  803570:	10c00826 	beq	r2,r3,803594 <__sseek+0x40>
  803574:	80c0030b 	ldhu	r3,12(r16)
  803578:	80801415 	stw	r2,80(r16)
  80357c:	18c40014 	ori	r3,r3,4096
  803580:	80c0030d 	sth	r3,12(r16)
  803584:	dfc00117 	ldw	ra,4(sp)
  803588:	dc000017 	ldw	r16,0(sp)
  80358c:	dec00204 	addi	sp,sp,8
  803590:	f800283a 	ret
  803594:	80c0030b 	ldhu	r3,12(r16)
  803598:	18fbffcc 	andi	r3,r3,61439
  80359c:	80c0030d 	sth	r3,12(r16)
  8035a0:	dfc00117 	ldw	ra,4(sp)
  8035a4:	dc000017 	ldw	r16,0(sp)
  8035a8:	dec00204 	addi	sp,sp,8
  8035ac:	f800283a 	ret

008035b0 <__sclose>:
  8035b0:	2940038f 	ldh	r5,14(r5)
  8035b4:	0805de41 	jmpi	805de4 <_close_r>

008035b8 <strlen>:
  8035b8:	208000cc 	andi	r2,r4,3
  8035bc:	10002026 	beq	r2,zero,803640 <strlen+0x88>
  8035c0:	20800007 	ldb	r2,0(r4)
  8035c4:	10002026 	beq	r2,zero,803648 <strlen+0x90>
  8035c8:	2005883a 	mov	r2,r4
  8035cc:	00000206 	br	8035d8 <strlen+0x20>
  8035d0:	10c00007 	ldb	r3,0(r2)
  8035d4:	18001826 	beq	r3,zero,803638 <strlen+0x80>
  8035d8:	10800044 	addi	r2,r2,1
  8035dc:	10c000cc 	andi	r3,r2,3
  8035e0:	183ffb1e 	bne	r3,zero,8035d0 <__alt_mem_onchip_mem+0xff7835d0>
  8035e4:	10c00017 	ldw	r3,0(r2)
  8035e8:	01ffbff4 	movhi	r7,65279
  8035ec:	39ffbfc4 	addi	r7,r7,-257
  8035f0:	00ca303a 	nor	r5,zero,r3
  8035f4:	01a02074 	movhi	r6,32897
  8035f8:	19c7883a 	add	r3,r3,r7
  8035fc:	31a02004 	addi	r6,r6,-32640
  803600:	1946703a 	and	r3,r3,r5
  803604:	1986703a 	and	r3,r3,r6
  803608:	1800091e 	bne	r3,zero,803630 <strlen+0x78>
  80360c:	10800104 	addi	r2,r2,4
  803610:	10c00017 	ldw	r3,0(r2)
  803614:	19cb883a 	add	r5,r3,r7
  803618:	00c6303a 	nor	r3,zero,r3
  80361c:	28c6703a 	and	r3,r5,r3
  803620:	1986703a 	and	r3,r3,r6
  803624:	183ff926 	beq	r3,zero,80360c <__alt_mem_onchip_mem+0xff78360c>
  803628:	00000106 	br	803630 <strlen+0x78>
  80362c:	10800044 	addi	r2,r2,1
  803630:	10c00007 	ldb	r3,0(r2)
  803634:	183ffd1e 	bne	r3,zero,80362c <__alt_mem_onchip_mem+0xff78362c>
  803638:	1105c83a 	sub	r2,r2,r4
  80363c:	f800283a 	ret
  803640:	2005883a 	mov	r2,r4
  803644:	003fe706 	br	8035e4 <__alt_mem_onchip_mem+0xff7835e4>
  803648:	0005883a 	mov	r2,zero
  80364c:	f800283a 	ret

00803650 <strtok>:
  803650:	00802074 	movhi	r2,129
  803654:	10942504 	addi	r2,r2,20628
  803658:	11800017 	ldw	r6,0(r2)
  80365c:	01c00044 	movi	r7,1
  803660:	31801704 	addi	r6,r6,92
  803664:	08036681 	jmpi	803668 <__strtok_r>

00803668 <__strtok_r>:
  803668:	20001f26 	beq	r4,zero,8036e8 <__strtok_r+0x80>
  80366c:	2005883a 	mov	r2,r4
  803670:	22400007 	ldb	r9,0(r4)
  803674:	2807883a 	mov	r3,r5
  803678:	21000044 	addi	r4,r4,1
  80367c:	00000106 	br	803684 <__strtok_r+0x1c>
  803680:	4a001226 	beq	r9,r8,8036cc <__strtok_r+0x64>
  803684:	1a000007 	ldb	r8,0(r3)
  803688:	18c00044 	addi	r3,r3,1
  80368c:	403ffc1e 	bne	r8,zero,803680 <__alt_mem_onchip_mem+0xff783680>
  803690:	48001926 	beq	r9,zero,8036f8 <__strtok_r+0x90>
  803694:	22000007 	ldb	r8,0(r4)
  803698:	2013883a 	mov	r9,r4
  80369c:	21000044 	addi	r4,r4,1
  8036a0:	2015883a 	mov	r10,r4
  8036a4:	2807883a 	mov	r3,r5
  8036a8:	00000106 	br	8036b0 <__strtok_r+0x48>
  8036ac:	383ff926 	beq	r7,zero,803694 <__alt_mem_onchip_mem+0xff783694>
  8036b0:	19c00007 	ldb	r7,0(r3)
  8036b4:	18c00044 	addi	r3,r3,1
  8036b8:	41fffc1e 	bne	r8,r7,8036ac <__alt_mem_onchip_mem+0xff7836ac>
  8036bc:	40000726 	beq	r8,zero,8036dc <__strtok_r+0x74>
  8036c0:	48000005 	stb	zero,0(r9)
  8036c4:	32800015 	stw	r10,0(r6)
  8036c8:	f800283a 	ret
  8036cc:	383fe71e 	bne	r7,zero,80366c <__alt_mem_onchip_mem+0xff78366c>
  8036d0:	31000015 	stw	r4,0(r6)
  8036d4:	10000005 	stb	zero,0(r2)
  8036d8:	f800283a 	ret
  8036dc:	0015883a 	mov	r10,zero
  8036e0:	32800015 	stw	r10,0(r6)
  8036e4:	f800283a 	ret
  8036e8:	31000017 	ldw	r4,0(r6)
  8036ec:	203fdf1e 	bne	r4,zero,80366c <__alt_mem_onchip_mem+0xff78366c>
  8036f0:	0005883a 	mov	r2,zero
  8036f4:	f800283a 	ret
  8036f8:	30000015 	stw	zero,0(r6)
  8036fc:	0005883a 	mov	r2,zero
  803700:	f800283a 	ret

00803704 <strtok_r>:
  803704:	01c00044 	movi	r7,1
  803708:	08036681 	jmpi	803668 <__strtok_r>

0080370c <_strtol_r>:
  80370c:	00802074 	movhi	r2,129
  803710:	defff404 	addi	sp,sp,-48
  803714:	10942804 	addi	r2,r2,20640
  803718:	dd400715 	stw	r21,28(sp)
  80371c:	15400017 	ldw	r21,0(r2)
  803720:	dd800815 	stw	r22,32(sp)
  803724:	dd000615 	stw	r20,24(sp)
  803728:	dcc00515 	stw	r19,20(sp)
  80372c:	d9000015 	stw	r4,0(sp)
  803730:	dfc00b15 	stw	ra,44(sp)
  803734:	df000a15 	stw	fp,40(sp)
  803738:	ddc00915 	stw	r23,36(sp)
  80373c:	dc800415 	stw	r18,16(sp)
  803740:	dc400315 	stw	r17,12(sp)
  803744:	dc000215 	stw	r16,8(sp)
  803748:	2829883a 	mov	r20,r5
  80374c:	3027883a 	mov	r19,r6
  803750:	382d883a 	mov	r22,r7
  803754:	2809883a 	mov	r4,r5
  803758:	24000003 	ldbu	r16,0(r4)
  80375c:	24400044 	addi	r17,r4,1
  803760:	2007883a 	mov	r3,r4
  803764:	ac05883a 	add	r2,r21,r16
  803768:	10800043 	ldbu	r2,1(r2)
  80376c:	8809883a 	mov	r4,r17
  803770:	1080020c 	andi	r2,r2,8
  803774:	103ff81e 	bne	r2,zero,803758 <__alt_mem_onchip_mem+0xff783758>
  803778:	00800b44 	movi	r2,45
  80377c:	80805826 	beq	r16,r2,8038e0 <_strtol_r+0x1d4>
  803780:	00800ac4 	movi	r2,43
  803784:	80805a26 	beq	r16,r2,8038f0 <_strtol_r+0x1e4>
  803788:	0039883a 	mov	fp,zero
  80378c:	b0004426 	beq	r22,zero,8038a0 <_strtol_r+0x194>
  803790:	00800404 	movi	r2,16
  803794:	b0806026 	beq	r22,r2,803918 <_strtol_r+0x20c>
  803798:	b02f883a 	mov	r23,r22
  80379c:	00a00034 	movhi	r2,32768
  8037a0:	e025003a 	cmpeq	r18,fp,zero
  8037a4:	14a5c83a 	sub	r18,r2,r18
  8037a8:	b80b883a 	mov	r5,r23
  8037ac:	9009883a 	mov	r4,r18
  8037b0:	080c31c0 	call	80c31c <__umodsi3>
  8037b4:	b80b883a 	mov	r5,r23
  8037b8:	9009883a 	mov	r4,r18
  8037bc:	d8800115 	stw	r2,4(sp)
  8037c0:	080c2b80 	call	80c2b8 <__udivsi3>
  8037c4:	ac07883a 	add	r3,r21,r16
  8037c8:	18c00043 	ldbu	r3,1(r3)
  8037cc:	880b883a 	mov	r5,r17
  8037d0:	000d883a 	mov	r6,zero
  8037d4:	1a00010c 	andi	r8,r3,4
  8037d8:	0009883a 	mov	r4,zero
  8037dc:	02800044 	movi	r10,1
  8037e0:	027fffc4 	movi	r9,-1
  8037e4:	d9c00117 	ldw	r7,4(sp)
  8037e8:	40000e26 	beq	r8,zero,803824 <_strtol_r+0x118>
  8037ec:	843ff404 	addi	r16,r16,-48
  8037f0:	8580120e 	bge	r16,r22,80383c <_strtol_r+0x130>
  8037f4:	32400526 	beq	r6,r9,80380c <_strtol_r+0x100>
  8037f8:	11002536 	bltu	r2,r4,803890 <_strtol_r+0x184>
  8037fc:	20802326 	beq	r4,r2,80388c <_strtol_r+0x180>
  803800:	25c9383a 	mul	r4,r4,r23
  803804:	01800044 	movi	r6,1
  803808:	8109883a 	add	r4,r16,r4
  80380c:	2c000003 	ldbu	r16,0(r5)
  803810:	29400044 	addi	r5,r5,1
  803814:	ac07883a 	add	r3,r21,r16
  803818:	18c00043 	ldbu	r3,1(r3)
  80381c:	1a00010c 	andi	r8,r3,4
  803820:	403ff21e 	bne	r8,zero,8037ec <__alt_mem_onchip_mem+0xff7837ec>
  803824:	18c000cc 	andi	r3,r3,3
  803828:	18000426 	beq	r3,zero,80383c <_strtol_r+0x130>
  80382c:	1a801a26 	beq	r3,r10,803898 <_strtol_r+0x18c>
  803830:	00c015c4 	movi	r3,87
  803834:	80e1c83a 	sub	r16,r16,r3
  803838:	85bfee16 	blt	r16,r22,8037f4 <__alt_mem_onchip_mem+0xff7837f4>
  80383c:	00bfffc4 	movi	r2,-1
  803840:	30801e26 	beq	r6,r2,8038bc <_strtol_r+0x1b0>
  803844:	e0001b1e 	bne	fp,zero,8038b4 <_strtol_r+0x1a8>
  803848:	2005883a 	mov	r2,r4
  80384c:	98000326 	beq	r19,zero,80385c <_strtol_r+0x150>
  803850:	3000211e 	bne	r6,zero,8038d8 <_strtol_r+0x1cc>
  803854:	a00b883a 	mov	r5,r20
  803858:	99400015 	stw	r5,0(r19)
  80385c:	dfc00b17 	ldw	ra,44(sp)
  803860:	df000a17 	ldw	fp,40(sp)
  803864:	ddc00917 	ldw	r23,36(sp)
  803868:	dd800817 	ldw	r22,32(sp)
  80386c:	dd400717 	ldw	r21,28(sp)
  803870:	dd000617 	ldw	r20,24(sp)
  803874:	dcc00517 	ldw	r19,20(sp)
  803878:	dc800417 	ldw	r18,16(sp)
  80387c:	dc400317 	ldw	r17,12(sp)
  803880:	dc000217 	ldw	r16,8(sp)
  803884:	dec00c04 	addi	sp,sp,48
  803888:	f800283a 	ret
  80388c:	3c3fdc0e 	bge	r7,r16,803800 <__alt_mem_onchip_mem+0xff783800>
  803890:	01bfffc4 	movi	r6,-1
  803894:	003fdd06 	br	80380c <__alt_mem_onchip_mem+0xff78380c>
  803898:	00c00dc4 	movi	r3,55
  80389c:	003fe506 	br	803834 <__alt_mem_onchip_mem+0xff783834>
  8038a0:	00800c04 	movi	r2,48
  8038a4:	80801626 	beq	r16,r2,803900 <_strtol_r+0x1f4>
  8038a8:	05800284 	movi	r22,10
  8038ac:	b02f883a 	mov	r23,r22
  8038b0:	003fba06 	br	80379c <__alt_mem_onchip_mem+0xff78379c>
  8038b4:	0109c83a 	sub	r4,zero,r4
  8038b8:	003fe306 	br	803848 <__alt_mem_onchip_mem+0xff783848>
  8038bc:	d9000017 	ldw	r4,0(sp)
  8038c0:	00c00884 	movi	r3,34
  8038c4:	e005003a 	cmpeq	r2,fp,zero
  8038c8:	20c00015 	stw	r3,0(r4)
  8038cc:	00e00034 	movhi	r3,32768
  8038d0:	1885c83a 	sub	r2,r3,r2
  8038d4:	983fe126 	beq	r19,zero,80385c <__alt_mem_onchip_mem+0xff78385c>
  8038d8:	297fffc4 	addi	r5,r5,-1
  8038dc:	003fde06 	br	803858 <__alt_mem_onchip_mem+0xff783858>
  8038e0:	1c400084 	addi	r17,r3,2
  8038e4:	1c000043 	ldbu	r16,1(r3)
  8038e8:	07000044 	movi	fp,1
  8038ec:	003fa706 	br	80378c <__alt_mem_onchip_mem+0xff78378c>
  8038f0:	1c400084 	addi	r17,r3,2
  8038f4:	1c000043 	ldbu	r16,1(r3)
  8038f8:	0039883a 	mov	fp,zero
  8038fc:	003fa306 	br	80378c <__alt_mem_onchip_mem+0xff78378c>
  803900:	88800003 	ldbu	r2,0(r17)
  803904:	00c01604 	movi	r3,88
  803908:	108037cc 	andi	r2,r2,223
  80390c:	10c00826 	beq	r2,r3,803930 <_strtol_r+0x224>
  803910:	05800204 	movi	r22,8
  803914:	003fa006 	br	803798 <__alt_mem_onchip_mem+0xff783798>
  803918:	00800c04 	movi	r2,48
  80391c:	80bf9e1e 	bne	r16,r2,803798 <__alt_mem_onchip_mem+0xff783798>
  803920:	88800003 	ldbu	r2,0(r17)
  803924:	00c01604 	movi	r3,88
  803928:	108037cc 	andi	r2,r2,223
  80392c:	10ff9a1e 	bne	r2,r3,803798 <__alt_mem_onchip_mem+0xff783798>
  803930:	05c00404 	movi	r23,16
  803934:	8c000043 	ldbu	r16,1(r17)
  803938:	b82d883a 	mov	r22,r23
  80393c:	8c400084 	addi	r17,r17,2
  803940:	003f9606 	br	80379c <__alt_mem_onchip_mem+0xff78379c>

00803944 <strtol>:
  803944:	00802074 	movhi	r2,129
  803948:	10942504 	addi	r2,r2,20628
  80394c:	300f883a 	mov	r7,r6
  803950:	280d883a 	mov	r6,r5
  803954:	200b883a 	mov	r5,r4
  803958:	11000017 	ldw	r4,0(r2)
  80395c:	080370c1 	jmpi	80370c <_strtol_r>

00803960 <___vfprintf_internal_r>:
  803960:	deffb804 	addi	sp,sp,-288
  803964:	dfc04715 	stw	ra,284(sp)
  803968:	ddc04515 	stw	r23,276(sp)
  80396c:	dd404315 	stw	r21,268(sp)
  803970:	d9002c15 	stw	r4,176(sp)
  803974:	282f883a 	mov	r23,r5
  803978:	302b883a 	mov	r21,r6
  80397c:	d9c02d15 	stw	r7,180(sp)
  803980:	df004615 	stw	fp,280(sp)
  803984:	dd804415 	stw	r22,272(sp)
  803988:	dd004215 	stw	r20,264(sp)
  80398c:	dcc04115 	stw	r19,260(sp)
  803990:	dc804015 	stw	r18,256(sp)
  803994:	dc403f15 	stw	r17,252(sp)
  803998:	dc003e15 	stw	r16,248(sp)
  80399c:	0807e2c0 	call	807e2c <_localeconv_r>
  8039a0:	10800017 	ldw	r2,0(r2)
  8039a4:	1009883a 	mov	r4,r2
  8039a8:	d8803415 	stw	r2,208(sp)
  8039ac:	08035b80 	call	8035b8 <strlen>
  8039b0:	d8803715 	stw	r2,220(sp)
  8039b4:	d8802c17 	ldw	r2,176(sp)
  8039b8:	10000226 	beq	r2,zero,8039c4 <___vfprintf_internal_r+0x64>
  8039bc:	10800e17 	ldw	r2,56(r2)
  8039c0:	1000f926 	beq	r2,zero,803da8 <___vfprintf_internal_r+0x448>
  8039c4:	b880030b 	ldhu	r2,12(r23)
  8039c8:	10c8000c 	andi	r3,r2,8192
  8039cc:	1800061e 	bne	r3,zero,8039e8 <___vfprintf_internal_r+0x88>
  8039d0:	b9001917 	ldw	r4,100(r23)
  8039d4:	00f7ffc4 	movi	r3,-8193
  8039d8:	10880014 	ori	r2,r2,8192
  8039dc:	20c6703a 	and	r3,r4,r3
  8039e0:	b880030d 	sth	r2,12(r23)
  8039e4:	b8c01915 	stw	r3,100(r23)
  8039e8:	10c0020c 	andi	r3,r2,8
  8039ec:	1800c126 	beq	r3,zero,803cf4 <___vfprintf_internal_r+0x394>
  8039f0:	b8c00417 	ldw	r3,16(r23)
  8039f4:	1800bf26 	beq	r3,zero,803cf4 <___vfprintf_internal_r+0x394>
  8039f8:	1080068c 	andi	r2,r2,26
  8039fc:	00c00284 	movi	r3,10
  803a00:	10c0c426 	beq	r2,r3,803d14 <___vfprintf_internal_r+0x3b4>
  803a04:	d8c00404 	addi	r3,sp,16
  803a08:	05002074 	movhi	r20,129
  803a0c:	d9001e04 	addi	r4,sp,120
  803a10:	a50ba384 	addi	r20,r20,11918
  803a14:	d8c01e15 	stw	r3,120(sp)
  803a18:	d8002015 	stw	zero,128(sp)
  803a1c:	d8001f15 	stw	zero,124(sp)
  803a20:	d8003315 	stw	zero,204(sp)
  803a24:	d8003615 	stw	zero,216(sp)
  803a28:	d8003815 	stw	zero,224(sp)
  803a2c:	1811883a 	mov	r8,r3
  803a30:	d8003915 	stw	zero,228(sp)
  803a34:	d8003a15 	stw	zero,232(sp)
  803a38:	d8002f15 	stw	zero,188(sp)
  803a3c:	d9002815 	stw	r4,160(sp)
  803a40:	a8800007 	ldb	r2,0(r21)
  803a44:	10027b26 	beq	r2,zero,804434 <___vfprintf_internal_r+0xad4>
  803a48:	00c00944 	movi	r3,37
  803a4c:	a821883a 	mov	r16,r21
  803a50:	10c0021e 	bne	r2,r3,803a5c <___vfprintf_internal_r+0xfc>
  803a54:	00001406 	br	803aa8 <___vfprintf_internal_r+0x148>
  803a58:	10c00326 	beq	r2,r3,803a68 <___vfprintf_internal_r+0x108>
  803a5c:	84000044 	addi	r16,r16,1
  803a60:	80800007 	ldb	r2,0(r16)
  803a64:	103ffc1e 	bne	r2,zero,803a58 <__alt_mem_onchip_mem+0xff783a58>
  803a68:	8563c83a 	sub	r17,r16,r21
  803a6c:	88000e26 	beq	r17,zero,803aa8 <___vfprintf_internal_r+0x148>
  803a70:	d8c02017 	ldw	r3,128(sp)
  803a74:	d8801f17 	ldw	r2,124(sp)
  803a78:	45400015 	stw	r21,0(r8)
  803a7c:	1c47883a 	add	r3,r3,r17
  803a80:	10800044 	addi	r2,r2,1
  803a84:	d8c02015 	stw	r3,128(sp)
  803a88:	44400115 	stw	r17,4(r8)
  803a8c:	d8801f15 	stw	r2,124(sp)
  803a90:	00c001c4 	movi	r3,7
  803a94:	1880a716 	blt	r3,r2,803d34 <___vfprintf_internal_r+0x3d4>
  803a98:	42000204 	addi	r8,r8,8
  803a9c:	d9402f17 	ldw	r5,188(sp)
  803aa0:	2c4b883a 	add	r5,r5,r17
  803aa4:	d9402f15 	stw	r5,188(sp)
  803aa8:	80800007 	ldb	r2,0(r16)
  803aac:	1000a826 	beq	r2,zero,803d50 <___vfprintf_internal_r+0x3f0>
  803ab0:	84400047 	ldb	r17,1(r16)
  803ab4:	00bfffc4 	movi	r2,-1
  803ab8:	85400044 	addi	r21,r16,1
  803abc:	d8002785 	stb	zero,158(sp)
  803ac0:	0007883a 	mov	r3,zero
  803ac4:	000f883a 	mov	r7,zero
  803ac8:	d8802915 	stw	r2,164(sp)
  803acc:	d8003115 	stw	zero,196(sp)
  803ad0:	0025883a 	mov	r18,zero
  803ad4:	01401604 	movi	r5,88
  803ad8:	01800244 	movi	r6,9
  803adc:	02800a84 	movi	r10,42
  803ae0:	02401b04 	movi	r9,108
  803ae4:	ad400044 	addi	r21,r21,1
  803ae8:	88bff804 	addi	r2,r17,-32
  803aec:	28830436 	bltu	r5,r2,804700 <___vfprintf_internal_r+0xda0>
  803af0:	100490ba 	slli	r2,r2,2
  803af4:	01002034 	movhi	r4,128
  803af8:	210ec204 	addi	r4,r4,15112
  803afc:	1105883a 	add	r2,r2,r4
  803b00:	10800017 	ldw	r2,0(r2)
  803b04:	1000683a 	jmp	r2
  803b08:	00804620 	cmpeqi	r2,zero,280
  803b0c:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803b10:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803b14:	00804640 	call	80464 <__alt_mem_sdram-0x77fb9c>
  803b18:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803b1c:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803b20:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803b24:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803b28:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803b2c:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803b30:	00803db4 	movhi	r2,246
  803b34:	0080455c 	xori	r2,zero,277
  803b38:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803b3c:	00803c7c 	xorhi	r2,zero,241
  803b40:	00803ddc 	xori	r2,zero,247
  803b44:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803b48:	00803e1c 	xori	r2,zero,248
  803b4c:	00803e28 	cmpgeui	r2,zero,248
  803b50:	00803e28 	cmpgeui	r2,zero,248
  803b54:	00803e28 	cmpgeui	r2,zero,248
  803b58:	00803e28 	cmpgeui	r2,zero,248
  803b5c:	00803e28 	cmpgeui	r2,zero,248
  803b60:	00803e28 	cmpgeui	r2,zero,248
  803b64:	00803e28 	cmpgeui	r2,zero,248
  803b68:	00803e28 	cmpgeui	r2,zero,248
  803b6c:	00803e28 	cmpgeui	r2,zero,248
  803b70:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803b74:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803b78:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803b7c:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803b80:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803b84:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803b88:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803b8c:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803b90:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803b94:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803b98:	00803e5c 	xori	r2,zero,249
  803b9c:	00803f18 	cmpnei	r2,zero,252
  803ba0:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803ba4:	00803f18 	cmpnei	r2,zero,252
  803ba8:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803bac:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803bb0:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803bb4:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803bb8:	00803fb8 	rdprs	r2,zero,254
  803bbc:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803bc0:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803bc4:	00803fc4 	movi	r2,255
  803bc8:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803bcc:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803bd0:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803bd4:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803bd8:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803bdc:	0080443c 	xorhi	r2,zero,272
  803be0:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803be4:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803be8:	0080449c 	xori	r2,zero,274
  803bec:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803bf0:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803bf4:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803bf8:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803bfc:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803c00:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803c04:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803c08:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803c0c:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803c10:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803c14:	008046ac 	andhi	r2,zero,282
  803c18:	0080464c 	andi	r2,zero,281
  803c1c:	00803f18 	cmpnei	r2,zero,252
  803c20:	00803f18 	cmpnei	r2,zero,252
  803c24:	00803f18 	cmpnei	r2,zero,252
  803c28:	0080465c 	xori	r2,zero,281
  803c2c:	0080464c 	andi	r2,zero,281
  803c30:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803c34:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803c38:	00804668 	cmpgeui	r2,zero,281
  803c3c:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803c40:	00804678 	rdprs	r2,zero,281
  803c44:	0080454c 	andi	r2,zero,277
  803c48:	00803c88 	cmpgei	r2,zero,242
  803c4c:	0080456c 	andhi	r2,zero,277
  803c50:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803c54:	00804578 	rdprs	r2,zero,277
  803c58:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803c5c:	008045d4 	movui	r2,279
  803c60:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803c64:	00804700 	call	80470 <__alt_mem_sdram-0x77fb90>
  803c68:	008045e4 	muli	r2,zero,279
  803c6c:	d9003117 	ldw	r4,196(sp)
  803c70:	d8802d15 	stw	r2,180(sp)
  803c74:	0109c83a 	sub	r4,zero,r4
  803c78:	d9003115 	stw	r4,196(sp)
  803c7c:	94800114 	ori	r18,r18,4
  803c80:	ac400007 	ldb	r17,0(r21)
  803c84:	003f9706 	br	803ae4 <__alt_mem_onchip_mem+0xff783ae4>
  803c88:	00800c04 	movi	r2,48
  803c8c:	d9002d17 	ldw	r4,180(sp)
  803c90:	d9402917 	ldw	r5,164(sp)
  803c94:	d8802705 	stb	r2,156(sp)
  803c98:	00801e04 	movi	r2,120
  803c9c:	d8802745 	stb	r2,157(sp)
  803ca0:	d8002785 	stb	zero,158(sp)
  803ca4:	20c00104 	addi	r3,r4,4
  803ca8:	24c00017 	ldw	r19,0(r4)
  803cac:	002d883a 	mov	r22,zero
  803cb0:	90800094 	ori	r2,r18,2
  803cb4:	28029a16 	blt	r5,zero,804720 <___vfprintf_internal_r+0xdc0>
  803cb8:	00bfdfc4 	movi	r2,-129
  803cbc:	90a4703a 	and	r18,r18,r2
  803cc0:	d8c02d15 	stw	r3,180(sp)
  803cc4:	94800094 	ori	r18,r18,2
  803cc8:	9802871e 	bne	r19,zero,8046e8 <___vfprintf_internal_r+0xd88>
  803ccc:	00802074 	movhi	r2,129
  803cd0:	108b9c04 	addi	r2,r2,11888
  803cd4:	d8803915 	stw	r2,228(sp)
  803cd8:	04401e04 	movi	r17,120
  803cdc:	d8802917 	ldw	r2,164(sp)
  803ce0:	0039883a 	mov	fp,zero
  803ce4:	1001e926 	beq	r2,zero,80448c <___vfprintf_internal_r+0xb2c>
  803ce8:	0027883a 	mov	r19,zero
  803cec:	002d883a 	mov	r22,zero
  803cf0:	00020506 	br	804508 <___vfprintf_internal_r+0xba8>
  803cf4:	d9002c17 	ldw	r4,176(sp)
  803cf8:	b80b883a 	mov	r5,r23
  803cfc:	0805c900 	call	805c90 <__swsetup_r>
  803d00:	1005ac1e 	bne	r2,zero,8053b4 <___vfprintf_internal_r+0x1a54>
  803d04:	b880030b 	ldhu	r2,12(r23)
  803d08:	00c00284 	movi	r3,10
  803d0c:	1080068c 	andi	r2,r2,26
  803d10:	10ff3c1e 	bne	r2,r3,803a04 <__alt_mem_onchip_mem+0xff783a04>
  803d14:	b880038f 	ldh	r2,14(r23)
  803d18:	103f3a16 	blt	r2,zero,803a04 <__alt_mem_onchip_mem+0xff783a04>
  803d1c:	d9c02d17 	ldw	r7,180(sp)
  803d20:	d9002c17 	ldw	r4,176(sp)
  803d24:	a80d883a 	mov	r6,r21
  803d28:	b80b883a 	mov	r5,r23
  803d2c:	0805b740 	call	805b74 <__sbprintf>
  803d30:	00001106 	br	803d78 <___vfprintf_internal_r+0x418>
  803d34:	d9002c17 	ldw	r4,176(sp)
  803d38:	d9801e04 	addi	r6,sp,120
  803d3c:	b80b883a 	mov	r5,r23
  803d40:	0809bb80 	call	809bb8 <__sprint_r>
  803d44:	1000081e 	bne	r2,zero,803d68 <___vfprintf_internal_r+0x408>
  803d48:	da000404 	addi	r8,sp,16
  803d4c:	003f5306 	br	803a9c <__alt_mem_onchip_mem+0xff783a9c>
  803d50:	d8802017 	ldw	r2,128(sp)
  803d54:	10000426 	beq	r2,zero,803d68 <___vfprintf_internal_r+0x408>
  803d58:	d9002c17 	ldw	r4,176(sp)
  803d5c:	d9801e04 	addi	r6,sp,120
  803d60:	b80b883a 	mov	r5,r23
  803d64:	0809bb80 	call	809bb8 <__sprint_r>
  803d68:	b880030b 	ldhu	r2,12(r23)
  803d6c:	1080100c 	andi	r2,r2,64
  803d70:	1005901e 	bne	r2,zero,8053b4 <___vfprintf_internal_r+0x1a54>
  803d74:	d8802f17 	ldw	r2,188(sp)
  803d78:	dfc04717 	ldw	ra,284(sp)
  803d7c:	df004617 	ldw	fp,280(sp)
  803d80:	ddc04517 	ldw	r23,276(sp)
  803d84:	dd804417 	ldw	r22,272(sp)
  803d88:	dd404317 	ldw	r21,268(sp)
  803d8c:	dd004217 	ldw	r20,264(sp)
  803d90:	dcc04117 	ldw	r19,260(sp)
  803d94:	dc804017 	ldw	r18,256(sp)
  803d98:	dc403f17 	ldw	r17,252(sp)
  803d9c:	dc003e17 	ldw	r16,248(sp)
  803da0:	dec04804 	addi	sp,sp,288
  803da4:	f800283a 	ret
  803da8:	d9002c17 	ldw	r4,176(sp)
  803dac:	08017c00 	call	8017c0 <__sinit>
  803db0:	003f0406 	br	8039c4 <__alt_mem_onchip_mem+0xff7839c4>
  803db4:	d8802d17 	ldw	r2,180(sp)
  803db8:	d9002d17 	ldw	r4,180(sp)
  803dbc:	10800017 	ldw	r2,0(r2)
  803dc0:	d8803115 	stw	r2,196(sp)
  803dc4:	20800104 	addi	r2,r4,4
  803dc8:	d9003117 	ldw	r4,196(sp)
  803dcc:	203fa716 	blt	r4,zero,803c6c <__alt_mem_onchip_mem+0xff783c6c>
  803dd0:	d8802d15 	stw	r2,180(sp)
  803dd4:	ac400007 	ldb	r17,0(r21)
  803dd8:	003f4206 	br	803ae4 <__alt_mem_onchip_mem+0xff783ae4>
  803ddc:	ac400007 	ldb	r17,0(r21)
  803de0:	aac00044 	addi	r11,r21,1
  803de4:	8a872826 	beq	r17,r10,805a88 <___vfprintf_internal_r+0x2128>
  803de8:	88bff404 	addi	r2,r17,-48
  803dec:	0009883a 	mov	r4,zero
  803df0:	30867d36 	bltu	r6,r2,8057e8 <___vfprintf_internal_r+0x1e88>
  803df4:	5c400007 	ldb	r17,0(r11)
  803df8:	210002a4 	muli	r4,r4,10
  803dfc:	5d400044 	addi	r21,r11,1
  803e00:	a817883a 	mov	r11,r21
  803e04:	2089883a 	add	r4,r4,r2
  803e08:	88bff404 	addi	r2,r17,-48
  803e0c:	30bff92e 	bgeu	r6,r2,803df4 <__alt_mem_onchip_mem+0xff783df4>
  803e10:	2005c916 	blt	r4,zero,805538 <___vfprintf_internal_r+0x1bd8>
  803e14:	d9002915 	stw	r4,164(sp)
  803e18:	003f3306 	br	803ae8 <__alt_mem_onchip_mem+0xff783ae8>
  803e1c:	94802014 	ori	r18,r18,128
  803e20:	ac400007 	ldb	r17,0(r21)
  803e24:	003f2f06 	br	803ae4 <__alt_mem_onchip_mem+0xff783ae4>
  803e28:	a809883a 	mov	r4,r21
  803e2c:	d8003115 	stw	zero,196(sp)
  803e30:	88bff404 	addi	r2,r17,-48
  803e34:	0017883a 	mov	r11,zero
  803e38:	24400007 	ldb	r17,0(r4)
  803e3c:	5ac002a4 	muli	r11,r11,10
  803e40:	ad400044 	addi	r21,r21,1
  803e44:	a809883a 	mov	r4,r21
  803e48:	12d7883a 	add	r11,r2,r11
  803e4c:	88bff404 	addi	r2,r17,-48
  803e50:	30bff92e 	bgeu	r6,r2,803e38 <__alt_mem_onchip_mem+0xff783e38>
  803e54:	dac03115 	stw	r11,196(sp)
  803e58:	003f2306 	br	803ae8 <__alt_mem_onchip_mem+0xff783ae8>
  803e5c:	18c03fcc 	andi	r3,r3,255
  803e60:	18072b1e 	bne	r3,zero,805b10 <___vfprintf_internal_r+0x21b0>
  803e64:	94800414 	ori	r18,r18,16
  803e68:	9080080c 	andi	r2,r18,32
  803e6c:	10037b26 	beq	r2,zero,804c5c <___vfprintf_internal_r+0x12fc>
  803e70:	d9402d17 	ldw	r5,180(sp)
  803e74:	28800117 	ldw	r2,4(r5)
  803e78:	2cc00017 	ldw	r19,0(r5)
  803e7c:	29400204 	addi	r5,r5,8
  803e80:	d9402d15 	stw	r5,180(sp)
  803e84:	102d883a 	mov	r22,r2
  803e88:	10044b16 	blt	r2,zero,804fb8 <___vfprintf_internal_r+0x1658>
  803e8c:	d9402917 	ldw	r5,164(sp)
  803e90:	df002783 	ldbu	fp,158(sp)
  803e94:	2803bc16 	blt	r5,zero,804d88 <___vfprintf_internal_r+0x1428>
  803e98:	00ffdfc4 	movi	r3,-129
  803e9c:	9d84b03a 	or	r2,r19,r22
  803ea0:	90e4703a 	and	r18,r18,r3
  803ea4:	10017726 	beq	r2,zero,804484 <___vfprintf_internal_r+0xb24>
  803ea8:	b0038326 	beq	r22,zero,804cb8 <___vfprintf_internal_r+0x1358>
  803eac:	dc402a15 	stw	r17,168(sp)
  803eb0:	dc001e04 	addi	r16,sp,120
  803eb4:	b023883a 	mov	r17,r22
  803eb8:	402d883a 	mov	r22,r8
  803ebc:	9809883a 	mov	r4,r19
  803ec0:	880b883a 	mov	r5,r17
  803ec4:	01800284 	movi	r6,10
  803ec8:	000f883a 	mov	r7,zero
  803ecc:	080bc880 	call	80bc88 <__umoddi3>
  803ed0:	10800c04 	addi	r2,r2,48
  803ed4:	843fffc4 	addi	r16,r16,-1
  803ed8:	9809883a 	mov	r4,r19
  803edc:	880b883a 	mov	r5,r17
  803ee0:	80800005 	stb	r2,0(r16)
  803ee4:	01800284 	movi	r6,10
  803ee8:	000f883a 	mov	r7,zero
  803eec:	080b7100 	call	80b710 <__udivdi3>
  803ef0:	1027883a 	mov	r19,r2
  803ef4:	10c4b03a 	or	r2,r2,r3
  803ef8:	1823883a 	mov	r17,r3
  803efc:	103fef1e 	bne	r2,zero,803ebc <__alt_mem_onchip_mem+0xff783ebc>
  803f00:	d8c02817 	ldw	r3,160(sp)
  803f04:	dc402a17 	ldw	r17,168(sp)
  803f08:	b011883a 	mov	r8,r22
  803f0c:	1c07c83a 	sub	r3,r3,r16
  803f10:	d8c02e15 	stw	r3,184(sp)
  803f14:	00005906 	br	80407c <___vfprintf_internal_r+0x71c>
  803f18:	18c03fcc 	andi	r3,r3,255
  803f1c:	1806fa1e 	bne	r3,zero,805b08 <___vfprintf_internal_r+0x21a8>
  803f20:	9080020c 	andi	r2,r18,8
  803f24:	10048a26 	beq	r2,zero,805150 <___vfprintf_internal_r+0x17f0>
  803f28:	d8c02d17 	ldw	r3,180(sp)
  803f2c:	d9002d17 	ldw	r4,180(sp)
  803f30:	d9402d17 	ldw	r5,180(sp)
  803f34:	18c00017 	ldw	r3,0(r3)
  803f38:	21000117 	ldw	r4,4(r4)
  803f3c:	29400204 	addi	r5,r5,8
  803f40:	d8c03615 	stw	r3,216(sp)
  803f44:	d9003815 	stw	r4,224(sp)
  803f48:	d9402d15 	stw	r5,180(sp)
  803f4c:	d9003617 	ldw	r4,216(sp)
  803f50:	d9403817 	ldw	r5,224(sp)
  803f54:	da003d15 	stw	r8,244(sp)
  803f58:	04000044 	movi	r16,1
  803f5c:	080996c0 	call	80996c <__fpclassifyd>
  803f60:	da003d17 	ldw	r8,244(sp)
  803f64:	14041f1e 	bne	r2,r16,804fe4 <___vfprintf_internal_r+0x1684>
  803f68:	d9003617 	ldw	r4,216(sp)
  803f6c:	d9403817 	ldw	r5,224(sp)
  803f70:	000d883a 	mov	r6,zero
  803f74:	000f883a 	mov	r7,zero
  803f78:	080d66c0 	call	80d66c <__ledf2>
  803f7c:	da003d17 	ldw	r8,244(sp)
  803f80:	1005be16 	blt	r2,zero,80567c <___vfprintf_internal_r+0x1d1c>
  803f84:	df002783 	ldbu	fp,158(sp)
  803f88:	008011c4 	movi	r2,71
  803f8c:	1445330e 	bge	r2,r17,80545c <___vfprintf_internal_r+0x1afc>
  803f90:	04002074 	movhi	r16,129
  803f94:	840b9404 	addi	r16,r16,11856
  803f98:	00c000c4 	movi	r3,3
  803f9c:	00bfdfc4 	movi	r2,-129
  803fa0:	d8c02a15 	stw	r3,168(sp)
  803fa4:	90a4703a 	and	r18,r18,r2
  803fa8:	d8c02e15 	stw	r3,184(sp)
  803fac:	d8002915 	stw	zero,164(sp)
  803fb0:	d8003215 	stw	zero,200(sp)
  803fb4:	00003706 	br	804094 <___vfprintf_internal_r+0x734>
  803fb8:	94800214 	ori	r18,r18,8
  803fbc:	ac400007 	ldb	r17,0(r21)
  803fc0:	003ec806 	br	803ae4 <__alt_mem_onchip_mem+0xff783ae4>
  803fc4:	18c03fcc 	andi	r3,r3,255
  803fc8:	1806db1e 	bne	r3,zero,805b38 <___vfprintf_internal_r+0x21d8>
  803fcc:	94800414 	ori	r18,r18,16
  803fd0:	9080080c 	andi	r2,r18,32
  803fd4:	1002d826 	beq	r2,zero,804b38 <___vfprintf_internal_r+0x11d8>
  803fd8:	d9402d17 	ldw	r5,180(sp)
  803fdc:	d8c02917 	ldw	r3,164(sp)
  803fe0:	d8002785 	stb	zero,158(sp)
  803fe4:	28800204 	addi	r2,r5,8
  803fe8:	2cc00017 	ldw	r19,0(r5)
  803fec:	2d800117 	ldw	r22,4(r5)
  803ff0:	18048f16 	blt	r3,zero,805230 <___vfprintf_internal_r+0x18d0>
  803ff4:	013fdfc4 	movi	r4,-129
  803ff8:	9d86b03a 	or	r3,r19,r22
  803ffc:	d8802d15 	stw	r2,180(sp)
  804000:	9124703a 	and	r18,r18,r4
  804004:	1802d91e 	bne	r3,zero,804b6c <___vfprintf_internal_r+0x120c>
  804008:	d8c02917 	ldw	r3,164(sp)
  80400c:	0039883a 	mov	fp,zero
  804010:	1805c326 	beq	r3,zero,805720 <___vfprintf_internal_r+0x1dc0>
  804014:	0027883a 	mov	r19,zero
  804018:	002d883a 	mov	r22,zero
  80401c:	dc001e04 	addi	r16,sp,120
  804020:	9806d0fa 	srli	r3,r19,3
  804024:	b008977a 	slli	r4,r22,29
  804028:	b02cd0fa 	srli	r22,r22,3
  80402c:	9cc001cc 	andi	r19,r19,7
  804030:	98800c04 	addi	r2,r19,48
  804034:	843fffc4 	addi	r16,r16,-1
  804038:	20e6b03a 	or	r19,r4,r3
  80403c:	80800005 	stb	r2,0(r16)
  804040:	9d86b03a 	or	r3,r19,r22
  804044:	183ff61e 	bne	r3,zero,804020 <__alt_mem_onchip_mem+0xff784020>
  804048:	90c0004c 	andi	r3,r18,1
  80404c:	18013b26 	beq	r3,zero,80453c <___vfprintf_internal_r+0xbdc>
  804050:	10803fcc 	andi	r2,r2,255
  804054:	1080201c 	xori	r2,r2,128
  804058:	10bfe004 	addi	r2,r2,-128
  80405c:	00c00c04 	movi	r3,48
  804060:	10c13626 	beq	r2,r3,80453c <___vfprintf_internal_r+0xbdc>
  804064:	80ffffc5 	stb	r3,-1(r16)
  804068:	d8c02817 	ldw	r3,160(sp)
  80406c:	80bfffc4 	addi	r2,r16,-1
  804070:	1021883a 	mov	r16,r2
  804074:	1887c83a 	sub	r3,r3,r2
  804078:	d8c02e15 	stw	r3,184(sp)
  80407c:	d8802e17 	ldw	r2,184(sp)
  804080:	d9002917 	ldw	r4,164(sp)
  804084:	1100010e 	bge	r2,r4,80408c <___vfprintf_internal_r+0x72c>
  804088:	2005883a 	mov	r2,r4
  80408c:	d8802a15 	stw	r2,168(sp)
  804090:	d8003215 	stw	zero,200(sp)
  804094:	e7003fcc 	andi	fp,fp,255
  804098:	e700201c 	xori	fp,fp,128
  80409c:	e73fe004 	addi	fp,fp,-128
  8040a0:	e0000326 	beq	fp,zero,8040b0 <___vfprintf_internal_r+0x750>
  8040a4:	d8c02a17 	ldw	r3,168(sp)
  8040a8:	18c00044 	addi	r3,r3,1
  8040ac:	d8c02a15 	stw	r3,168(sp)
  8040b0:	90c0008c 	andi	r3,r18,2
  8040b4:	d8c02b15 	stw	r3,172(sp)
  8040b8:	18000326 	beq	r3,zero,8040c8 <___vfprintf_internal_r+0x768>
  8040bc:	d8c02a17 	ldw	r3,168(sp)
  8040c0:	18c00084 	addi	r3,r3,2
  8040c4:	d8c02a15 	stw	r3,168(sp)
  8040c8:	90c0210c 	andi	r3,r18,132
  8040cc:	d8c03015 	stw	r3,192(sp)
  8040d0:	1801a31e 	bne	r3,zero,804760 <___vfprintf_internal_r+0xe00>
  8040d4:	d9003117 	ldw	r4,196(sp)
  8040d8:	d8c02a17 	ldw	r3,168(sp)
  8040dc:	20e7c83a 	sub	r19,r4,r3
  8040e0:	04c19f0e 	bge	zero,r19,804760 <___vfprintf_internal_r+0xe00>
  8040e4:	02400404 	movi	r9,16
  8040e8:	d8c02017 	ldw	r3,128(sp)
  8040ec:	d8801f17 	ldw	r2,124(sp)
  8040f0:	4cc50d0e 	bge	r9,r19,805528 <___vfprintf_internal_r+0x1bc8>
  8040f4:	01402074 	movhi	r5,129
  8040f8:	294ba784 	addi	r5,r5,11934
  8040fc:	dc403b15 	stw	r17,236(sp)
  804100:	d9403515 	stw	r5,212(sp)
  804104:	9823883a 	mov	r17,r19
  804108:	482d883a 	mov	r22,r9
  80410c:	9027883a 	mov	r19,r18
  804110:	070001c4 	movi	fp,7
  804114:	8025883a 	mov	r18,r16
  804118:	dc002c17 	ldw	r16,176(sp)
  80411c:	00000306 	br	80412c <___vfprintf_internal_r+0x7cc>
  804120:	8c7ffc04 	addi	r17,r17,-16
  804124:	42000204 	addi	r8,r8,8
  804128:	b440130e 	bge	r22,r17,804178 <___vfprintf_internal_r+0x818>
  80412c:	01002074 	movhi	r4,129
  804130:	18c00404 	addi	r3,r3,16
  804134:	10800044 	addi	r2,r2,1
  804138:	210ba784 	addi	r4,r4,11934
  80413c:	41000015 	stw	r4,0(r8)
  804140:	45800115 	stw	r22,4(r8)
  804144:	d8c02015 	stw	r3,128(sp)
  804148:	d8801f15 	stw	r2,124(sp)
  80414c:	e0bff40e 	bge	fp,r2,804120 <__alt_mem_onchip_mem+0xff784120>
  804150:	d9801e04 	addi	r6,sp,120
  804154:	b80b883a 	mov	r5,r23
  804158:	8009883a 	mov	r4,r16
  80415c:	0809bb80 	call	809bb8 <__sprint_r>
  804160:	103f011e 	bne	r2,zero,803d68 <__alt_mem_onchip_mem+0xff783d68>
  804164:	8c7ffc04 	addi	r17,r17,-16
  804168:	d8c02017 	ldw	r3,128(sp)
  80416c:	d8801f17 	ldw	r2,124(sp)
  804170:	da000404 	addi	r8,sp,16
  804174:	b47fed16 	blt	r22,r17,80412c <__alt_mem_onchip_mem+0xff78412c>
  804178:	9021883a 	mov	r16,r18
  80417c:	9825883a 	mov	r18,r19
  804180:	8827883a 	mov	r19,r17
  804184:	dc403b17 	ldw	r17,236(sp)
  804188:	d9403517 	ldw	r5,212(sp)
  80418c:	98c7883a 	add	r3,r19,r3
  804190:	10800044 	addi	r2,r2,1
  804194:	41400015 	stw	r5,0(r8)
  804198:	44c00115 	stw	r19,4(r8)
  80419c:	d8c02015 	stw	r3,128(sp)
  8041a0:	d8801f15 	stw	r2,124(sp)
  8041a4:	010001c4 	movi	r4,7
  8041a8:	2082a316 	blt	r4,r2,804c38 <___vfprintf_internal_r+0x12d8>
  8041ac:	df002787 	ldb	fp,158(sp)
  8041b0:	42000204 	addi	r8,r8,8
  8041b4:	e0000c26 	beq	fp,zero,8041e8 <___vfprintf_internal_r+0x888>
  8041b8:	d8801f17 	ldw	r2,124(sp)
  8041bc:	d9002784 	addi	r4,sp,158
  8041c0:	18c00044 	addi	r3,r3,1
  8041c4:	10800044 	addi	r2,r2,1
  8041c8:	41000015 	stw	r4,0(r8)
  8041cc:	01000044 	movi	r4,1
  8041d0:	41000115 	stw	r4,4(r8)
  8041d4:	d8c02015 	stw	r3,128(sp)
  8041d8:	d8801f15 	stw	r2,124(sp)
  8041dc:	010001c4 	movi	r4,7
  8041e0:	20823c16 	blt	r4,r2,804ad4 <___vfprintf_internal_r+0x1174>
  8041e4:	42000204 	addi	r8,r8,8
  8041e8:	d8802b17 	ldw	r2,172(sp)
  8041ec:	10000c26 	beq	r2,zero,804220 <___vfprintf_internal_r+0x8c0>
  8041f0:	d8801f17 	ldw	r2,124(sp)
  8041f4:	d9002704 	addi	r4,sp,156
  8041f8:	18c00084 	addi	r3,r3,2
  8041fc:	10800044 	addi	r2,r2,1
  804200:	41000015 	stw	r4,0(r8)
  804204:	01000084 	movi	r4,2
  804208:	41000115 	stw	r4,4(r8)
  80420c:	d8c02015 	stw	r3,128(sp)
  804210:	d8801f15 	stw	r2,124(sp)
  804214:	010001c4 	movi	r4,7
  804218:	20823616 	blt	r4,r2,804af4 <___vfprintf_internal_r+0x1194>
  80421c:	42000204 	addi	r8,r8,8
  804220:	d9003017 	ldw	r4,192(sp)
  804224:	00802004 	movi	r2,128
  804228:	20819926 	beq	r4,r2,804890 <___vfprintf_internal_r+0xf30>
  80422c:	d9402917 	ldw	r5,164(sp)
  804230:	d8802e17 	ldw	r2,184(sp)
  804234:	28adc83a 	sub	r22,r5,r2
  804238:	0580310e 	bge	zero,r22,804300 <___vfprintf_internal_r+0x9a0>
  80423c:	07000404 	movi	fp,16
  804240:	d8801f17 	ldw	r2,124(sp)
  804244:	e584140e 	bge	fp,r22,805298 <___vfprintf_internal_r+0x1938>
  804248:	01402074 	movhi	r5,129
  80424c:	294ba384 	addi	r5,r5,11918
  804250:	dc402915 	stw	r17,164(sp)
  804254:	d9402b15 	stw	r5,172(sp)
  804258:	b023883a 	mov	r17,r22
  80425c:	04c001c4 	movi	r19,7
  804260:	a82d883a 	mov	r22,r21
  804264:	902b883a 	mov	r21,r18
  804268:	8025883a 	mov	r18,r16
  80426c:	dc002c17 	ldw	r16,176(sp)
  804270:	00000306 	br	804280 <___vfprintf_internal_r+0x920>
  804274:	8c7ffc04 	addi	r17,r17,-16
  804278:	42000204 	addi	r8,r8,8
  80427c:	e440110e 	bge	fp,r17,8042c4 <___vfprintf_internal_r+0x964>
  804280:	18c00404 	addi	r3,r3,16
  804284:	10800044 	addi	r2,r2,1
  804288:	45000015 	stw	r20,0(r8)
  80428c:	47000115 	stw	fp,4(r8)
  804290:	d8c02015 	stw	r3,128(sp)
  804294:	d8801f15 	stw	r2,124(sp)
  804298:	98bff60e 	bge	r19,r2,804274 <__alt_mem_onchip_mem+0xff784274>
  80429c:	d9801e04 	addi	r6,sp,120
  8042a0:	b80b883a 	mov	r5,r23
  8042a4:	8009883a 	mov	r4,r16
  8042a8:	0809bb80 	call	809bb8 <__sprint_r>
  8042ac:	103eae1e 	bne	r2,zero,803d68 <__alt_mem_onchip_mem+0xff783d68>
  8042b0:	8c7ffc04 	addi	r17,r17,-16
  8042b4:	d8c02017 	ldw	r3,128(sp)
  8042b8:	d8801f17 	ldw	r2,124(sp)
  8042bc:	da000404 	addi	r8,sp,16
  8042c0:	e47fef16 	blt	fp,r17,804280 <__alt_mem_onchip_mem+0xff784280>
  8042c4:	9021883a 	mov	r16,r18
  8042c8:	a825883a 	mov	r18,r21
  8042cc:	b02b883a 	mov	r21,r22
  8042d0:	882d883a 	mov	r22,r17
  8042d4:	dc402917 	ldw	r17,164(sp)
  8042d8:	d9002b17 	ldw	r4,172(sp)
  8042dc:	1d87883a 	add	r3,r3,r22
  8042e0:	10800044 	addi	r2,r2,1
  8042e4:	41000015 	stw	r4,0(r8)
  8042e8:	45800115 	stw	r22,4(r8)
  8042ec:	d8c02015 	stw	r3,128(sp)
  8042f0:	d8801f15 	stw	r2,124(sp)
  8042f4:	010001c4 	movi	r4,7
  8042f8:	2081ee16 	blt	r4,r2,804ab4 <___vfprintf_internal_r+0x1154>
  8042fc:	42000204 	addi	r8,r8,8
  804300:	9080400c 	andi	r2,r18,256
  804304:	1001181e 	bne	r2,zero,804768 <___vfprintf_internal_r+0xe08>
  804308:	d9402e17 	ldw	r5,184(sp)
  80430c:	d8801f17 	ldw	r2,124(sp)
  804310:	44000015 	stw	r16,0(r8)
  804314:	1947883a 	add	r3,r3,r5
  804318:	10800044 	addi	r2,r2,1
  80431c:	41400115 	stw	r5,4(r8)
  804320:	d8c02015 	stw	r3,128(sp)
  804324:	d8801f15 	stw	r2,124(sp)
  804328:	010001c4 	movi	r4,7
  80432c:	2081d316 	blt	r4,r2,804a7c <___vfprintf_internal_r+0x111c>
  804330:	42000204 	addi	r8,r8,8
  804334:	9480010c 	andi	r18,r18,4
  804338:	90003226 	beq	r18,zero,804404 <___vfprintf_internal_r+0xaa4>
  80433c:	d9403117 	ldw	r5,196(sp)
  804340:	d8802a17 	ldw	r2,168(sp)
  804344:	28a1c83a 	sub	r16,r5,r2
  804348:	04002e0e 	bge	zero,r16,804404 <___vfprintf_internal_r+0xaa4>
  80434c:	04400404 	movi	r17,16
  804350:	d8801f17 	ldw	r2,124(sp)
  804354:	8c04a20e 	bge	r17,r16,8055e0 <___vfprintf_internal_r+0x1c80>
  804358:	01402074 	movhi	r5,129
  80435c:	294ba784 	addi	r5,r5,11934
  804360:	d9403515 	stw	r5,212(sp)
  804364:	048001c4 	movi	r18,7
  804368:	dcc02c17 	ldw	r19,176(sp)
  80436c:	00000306 	br	80437c <___vfprintf_internal_r+0xa1c>
  804370:	843ffc04 	addi	r16,r16,-16
  804374:	42000204 	addi	r8,r8,8
  804378:	8c00130e 	bge	r17,r16,8043c8 <___vfprintf_internal_r+0xa68>
  80437c:	01002074 	movhi	r4,129
  804380:	18c00404 	addi	r3,r3,16
  804384:	10800044 	addi	r2,r2,1
  804388:	210ba784 	addi	r4,r4,11934
  80438c:	41000015 	stw	r4,0(r8)
  804390:	44400115 	stw	r17,4(r8)
  804394:	d8c02015 	stw	r3,128(sp)
  804398:	d8801f15 	stw	r2,124(sp)
  80439c:	90bff40e 	bge	r18,r2,804370 <__alt_mem_onchip_mem+0xff784370>
  8043a0:	d9801e04 	addi	r6,sp,120
  8043a4:	b80b883a 	mov	r5,r23
  8043a8:	9809883a 	mov	r4,r19
  8043ac:	0809bb80 	call	809bb8 <__sprint_r>
  8043b0:	103e6d1e 	bne	r2,zero,803d68 <__alt_mem_onchip_mem+0xff783d68>
  8043b4:	843ffc04 	addi	r16,r16,-16
  8043b8:	d8c02017 	ldw	r3,128(sp)
  8043bc:	d8801f17 	ldw	r2,124(sp)
  8043c0:	da000404 	addi	r8,sp,16
  8043c4:	8c3fed16 	blt	r17,r16,80437c <__alt_mem_onchip_mem+0xff78437c>
  8043c8:	d9403517 	ldw	r5,212(sp)
  8043cc:	1c07883a 	add	r3,r3,r16
  8043d0:	10800044 	addi	r2,r2,1
  8043d4:	41400015 	stw	r5,0(r8)
  8043d8:	44000115 	stw	r16,4(r8)
  8043dc:	d8c02015 	stw	r3,128(sp)
  8043e0:	d8801f15 	stw	r2,124(sp)
  8043e4:	010001c4 	movi	r4,7
  8043e8:	2080060e 	bge	r4,r2,804404 <___vfprintf_internal_r+0xaa4>
  8043ec:	d9002c17 	ldw	r4,176(sp)
  8043f0:	d9801e04 	addi	r6,sp,120
  8043f4:	b80b883a 	mov	r5,r23
  8043f8:	0809bb80 	call	809bb8 <__sprint_r>
  8043fc:	103e5a1e 	bne	r2,zero,803d68 <__alt_mem_onchip_mem+0xff783d68>
  804400:	d8c02017 	ldw	r3,128(sp)
  804404:	d8803117 	ldw	r2,196(sp)
  804408:	d9002a17 	ldw	r4,168(sp)
  80440c:	1100010e 	bge	r2,r4,804414 <___vfprintf_internal_r+0xab4>
  804410:	2005883a 	mov	r2,r4
  804414:	d9402f17 	ldw	r5,188(sp)
  804418:	288b883a 	add	r5,r5,r2
  80441c:	d9402f15 	stw	r5,188(sp)
  804420:	18019e1e 	bne	r3,zero,804a9c <___vfprintf_internal_r+0x113c>
  804424:	a8800007 	ldb	r2,0(r21)
  804428:	d8001f15 	stw	zero,124(sp)
  80442c:	da000404 	addi	r8,sp,16
  804430:	103d851e 	bne	r2,zero,803a48 <__alt_mem_onchip_mem+0xff783a48>
  804434:	a821883a 	mov	r16,r21
  804438:	003d9b06 	br	803aa8 <__alt_mem_onchip_mem+0xff783aa8>
  80443c:	18c03fcc 	andi	r3,r3,255
  804440:	1805c11e 	bne	r3,zero,805b48 <___vfprintf_internal_r+0x21e8>
  804444:	94800414 	ori	r18,r18,16
  804448:	9080080c 	andi	r2,r18,32
  80444c:	10020c26 	beq	r2,zero,804c80 <___vfprintf_internal_r+0x1320>
  804450:	d8802d17 	ldw	r2,180(sp)
  804454:	d9002917 	ldw	r4,164(sp)
  804458:	d8002785 	stb	zero,158(sp)
  80445c:	10c00204 	addi	r3,r2,8
  804460:	14c00017 	ldw	r19,0(r2)
  804464:	15800117 	ldw	r22,4(r2)
  804468:	20040f16 	blt	r4,zero,8054a8 <___vfprintf_internal_r+0x1b48>
  80446c:	013fdfc4 	movi	r4,-129
  804470:	9d84b03a 	or	r2,r19,r22
  804474:	d8c02d15 	stw	r3,180(sp)
  804478:	9124703a 	and	r18,r18,r4
  80447c:	0039883a 	mov	fp,zero
  804480:	103e891e 	bne	r2,zero,803ea8 <__alt_mem_onchip_mem+0xff783ea8>
  804484:	d9002917 	ldw	r4,164(sp)
  804488:	2002c11e 	bne	r4,zero,804f90 <___vfprintf_internal_r+0x1630>
  80448c:	d8002915 	stw	zero,164(sp)
  804490:	d8002e15 	stw	zero,184(sp)
  804494:	dc001e04 	addi	r16,sp,120
  804498:	003ef806 	br	80407c <__alt_mem_onchip_mem+0xff78407c>
  80449c:	18c03fcc 	andi	r3,r3,255
  8044a0:	18059d1e 	bne	r3,zero,805b18 <___vfprintf_internal_r+0x21b8>
  8044a4:	01402074 	movhi	r5,129
  8044a8:	294b9704 	addi	r5,r5,11868
  8044ac:	d9403915 	stw	r5,228(sp)
  8044b0:	9080080c 	andi	r2,r18,32
  8044b4:	10005226 	beq	r2,zero,804600 <___vfprintf_internal_r+0xca0>
  8044b8:	d8802d17 	ldw	r2,180(sp)
  8044bc:	14c00017 	ldw	r19,0(r2)
  8044c0:	15800117 	ldw	r22,4(r2)
  8044c4:	10800204 	addi	r2,r2,8
  8044c8:	d8802d15 	stw	r2,180(sp)
  8044cc:	9080004c 	andi	r2,r18,1
  8044d0:	10019026 	beq	r2,zero,804b14 <___vfprintf_internal_r+0x11b4>
  8044d4:	9d84b03a 	or	r2,r19,r22
  8044d8:	10036926 	beq	r2,zero,805280 <___vfprintf_internal_r+0x1920>
  8044dc:	d8c02917 	ldw	r3,164(sp)
  8044e0:	00800c04 	movi	r2,48
  8044e4:	d8802705 	stb	r2,156(sp)
  8044e8:	dc402745 	stb	r17,157(sp)
  8044ec:	d8002785 	stb	zero,158(sp)
  8044f0:	90800094 	ori	r2,r18,2
  8044f4:	18045d16 	blt	r3,zero,80566c <___vfprintf_internal_r+0x1d0c>
  8044f8:	00bfdfc4 	movi	r2,-129
  8044fc:	90a4703a 	and	r18,r18,r2
  804500:	94800094 	ori	r18,r18,2
  804504:	0039883a 	mov	fp,zero
  804508:	d9003917 	ldw	r4,228(sp)
  80450c:	dc001e04 	addi	r16,sp,120
  804510:	988003cc 	andi	r2,r19,15
  804514:	b006973a 	slli	r3,r22,28
  804518:	2085883a 	add	r2,r4,r2
  80451c:	9826d13a 	srli	r19,r19,4
  804520:	10800003 	ldbu	r2,0(r2)
  804524:	b02cd13a 	srli	r22,r22,4
  804528:	843fffc4 	addi	r16,r16,-1
  80452c:	1ce6b03a 	or	r19,r3,r19
  804530:	80800005 	stb	r2,0(r16)
  804534:	9d84b03a 	or	r2,r19,r22
  804538:	103ff51e 	bne	r2,zero,804510 <__alt_mem_onchip_mem+0xff784510>
  80453c:	d8c02817 	ldw	r3,160(sp)
  804540:	1c07c83a 	sub	r3,r3,r16
  804544:	d8c02e15 	stw	r3,184(sp)
  804548:	003ecc06 	br	80407c <__alt_mem_onchip_mem+0xff78407c>
  80454c:	18c03fcc 	andi	r3,r3,255
  804550:	183e9f26 	beq	r3,zero,803fd0 <__alt_mem_onchip_mem+0xff783fd0>
  804554:	d9c02785 	stb	r7,158(sp)
  804558:	003e9d06 	br	803fd0 <__alt_mem_onchip_mem+0xff783fd0>
  80455c:	00c00044 	movi	r3,1
  804560:	01c00ac4 	movi	r7,43
  804564:	ac400007 	ldb	r17,0(r21)
  804568:	003d5e06 	br	803ae4 <__alt_mem_onchip_mem+0xff783ae4>
  80456c:	94800814 	ori	r18,r18,32
  804570:	ac400007 	ldb	r17,0(r21)
  804574:	003d5b06 	br	803ae4 <__alt_mem_onchip_mem+0xff783ae4>
  804578:	d8c02d17 	ldw	r3,180(sp)
  80457c:	d8002785 	stb	zero,158(sp)
  804580:	1c000017 	ldw	r16,0(r3)
  804584:	1cc00104 	addi	r19,r3,4
  804588:	80041926 	beq	r16,zero,8055f0 <___vfprintf_internal_r+0x1c90>
  80458c:	d9002917 	ldw	r4,164(sp)
  804590:	2003d016 	blt	r4,zero,8054d4 <___vfprintf_internal_r+0x1b74>
  804594:	200d883a 	mov	r6,r4
  804598:	000b883a 	mov	r5,zero
  80459c:	8009883a 	mov	r4,r16
  8045a0:	da003d15 	stw	r8,244(sp)
  8045a4:	0807ebc0 	call	807ebc <memchr>
  8045a8:	da003d17 	ldw	r8,244(sp)
  8045ac:	10045426 	beq	r2,zero,805700 <___vfprintf_internal_r+0x1da0>
  8045b0:	1405c83a 	sub	r2,r2,r16
  8045b4:	d8802e15 	stw	r2,184(sp)
  8045b8:	1003cc16 	blt	r2,zero,8054ec <___vfprintf_internal_r+0x1b8c>
  8045bc:	df002783 	ldbu	fp,158(sp)
  8045c0:	d8802a15 	stw	r2,168(sp)
  8045c4:	dcc02d15 	stw	r19,180(sp)
  8045c8:	d8002915 	stw	zero,164(sp)
  8045cc:	d8003215 	stw	zero,200(sp)
  8045d0:	003eb006 	br	804094 <__alt_mem_onchip_mem+0xff784094>
  8045d4:	18c03fcc 	andi	r3,r3,255
  8045d8:	183f9b26 	beq	r3,zero,804448 <__alt_mem_onchip_mem+0xff784448>
  8045dc:	d9c02785 	stb	r7,158(sp)
  8045e0:	003f9906 	br	804448 <__alt_mem_onchip_mem+0xff784448>
  8045e4:	18c03fcc 	andi	r3,r3,255
  8045e8:	1805551e 	bne	r3,zero,805b40 <___vfprintf_internal_r+0x21e0>
  8045ec:	01402074 	movhi	r5,129
  8045f0:	294b9c04 	addi	r5,r5,11888
  8045f4:	d9403915 	stw	r5,228(sp)
  8045f8:	9080080c 	andi	r2,r18,32
  8045fc:	103fae1e 	bne	r2,zero,8044b8 <__alt_mem_onchip_mem+0xff7844b8>
  804600:	9080040c 	andi	r2,r18,16
  804604:	1002de26 	beq	r2,zero,805180 <___vfprintf_internal_r+0x1820>
  804608:	d8c02d17 	ldw	r3,180(sp)
  80460c:	002d883a 	mov	r22,zero
  804610:	1cc00017 	ldw	r19,0(r3)
  804614:	18c00104 	addi	r3,r3,4
  804618:	d8c02d15 	stw	r3,180(sp)
  80461c:	003fab06 	br	8044cc <__alt_mem_onchip_mem+0xff7844cc>
  804620:	38803fcc 	andi	r2,r7,255
  804624:	1080201c 	xori	r2,r2,128
  804628:	10bfe004 	addi	r2,r2,-128
  80462c:	1002d21e 	bne	r2,zero,805178 <___vfprintf_internal_r+0x1818>
  804630:	00c00044 	movi	r3,1
  804634:	01c00804 	movi	r7,32
  804638:	ac400007 	ldb	r17,0(r21)
  80463c:	003d2906 	br	803ae4 <__alt_mem_onchip_mem+0xff783ae4>
  804640:	94800054 	ori	r18,r18,1
  804644:	ac400007 	ldb	r17,0(r21)
  804648:	003d2606 	br	803ae4 <__alt_mem_onchip_mem+0xff783ae4>
  80464c:	18c03fcc 	andi	r3,r3,255
  804650:	183e0526 	beq	r3,zero,803e68 <__alt_mem_onchip_mem+0xff783e68>
  804654:	d9c02785 	stb	r7,158(sp)
  804658:	003e0306 	br	803e68 <__alt_mem_onchip_mem+0xff783e68>
  80465c:	94801014 	ori	r18,r18,64
  804660:	ac400007 	ldb	r17,0(r21)
  804664:	003d1f06 	br	803ae4 <__alt_mem_onchip_mem+0xff783ae4>
  804668:	ac400007 	ldb	r17,0(r21)
  80466c:	8a438726 	beq	r17,r9,80548c <___vfprintf_internal_r+0x1b2c>
  804670:	94800414 	ori	r18,r18,16
  804674:	003d1b06 	br	803ae4 <__alt_mem_onchip_mem+0xff783ae4>
  804678:	18c03fcc 	andi	r3,r3,255
  80467c:	1805341e 	bne	r3,zero,805b50 <___vfprintf_internal_r+0x21f0>
  804680:	9080080c 	andi	r2,r18,32
  804684:	1002cd26 	beq	r2,zero,8051bc <___vfprintf_internal_r+0x185c>
  804688:	d9402d17 	ldw	r5,180(sp)
  80468c:	d9002f17 	ldw	r4,188(sp)
  804690:	28800017 	ldw	r2,0(r5)
  804694:	2007d7fa 	srai	r3,r4,31
  804698:	29400104 	addi	r5,r5,4
  80469c:	d9402d15 	stw	r5,180(sp)
  8046a0:	11000015 	stw	r4,0(r2)
  8046a4:	10c00115 	stw	r3,4(r2)
  8046a8:	003ce506 	br	803a40 <__alt_mem_onchip_mem+0xff783a40>
  8046ac:	d8c02d17 	ldw	r3,180(sp)
  8046b0:	d9002d17 	ldw	r4,180(sp)
  8046b4:	d8002785 	stb	zero,158(sp)
  8046b8:	18800017 	ldw	r2,0(r3)
  8046bc:	21000104 	addi	r4,r4,4
  8046c0:	00c00044 	movi	r3,1
  8046c4:	d8c02a15 	stw	r3,168(sp)
  8046c8:	d8801405 	stb	r2,80(sp)
  8046cc:	d9002d15 	stw	r4,180(sp)
  8046d0:	d8c02e15 	stw	r3,184(sp)
  8046d4:	d8002915 	stw	zero,164(sp)
  8046d8:	d8003215 	stw	zero,200(sp)
  8046dc:	dc001404 	addi	r16,sp,80
  8046e0:	0039883a 	mov	fp,zero
  8046e4:	003e7206 	br	8040b0 <__alt_mem_onchip_mem+0xff7840b0>
  8046e8:	01002074 	movhi	r4,129
  8046ec:	210b9c04 	addi	r4,r4,11888
  8046f0:	0039883a 	mov	fp,zero
  8046f4:	d9003915 	stw	r4,228(sp)
  8046f8:	04401e04 	movi	r17,120
  8046fc:	003f8206 	br	804508 <__alt_mem_onchip_mem+0xff784508>
  804700:	18c03fcc 	andi	r3,r3,255
  804704:	1805061e 	bne	r3,zero,805b20 <___vfprintf_internal_r+0x21c0>
  804708:	883d9126 	beq	r17,zero,803d50 <__alt_mem_onchip_mem+0xff783d50>
  80470c:	00c00044 	movi	r3,1
  804710:	d8c02a15 	stw	r3,168(sp)
  804714:	dc401405 	stb	r17,80(sp)
  804718:	d8002785 	stb	zero,158(sp)
  80471c:	003fec06 	br	8046d0 <__alt_mem_onchip_mem+0xff7846d0>
  804720:	01402074 	movhi	r5,129
  804724:	294b9c04 	addi	r5,r5,11888
  804728:	d9403915 	stw	r5,228(sp)
  80472c:	d8c02d15 	stw	r3,180(sp)
  804730:	1025883a 	mov	r18,r2
  804734:	04401e04 	movi	r17,120
  804738:	9d84b03a 	or	r2,r19,r22
  80473c:	1000fc1e 	bne	r2,zero,804b30 <___vfprintf_internal_r+0x11d0>
  804740:	0039883a 	mov	fp,zero
  804744:	00800084 	movi	r2,2
  804748:	10803fcc 	andi	r2,r2,255
  80474c:	00c00044 	movi	r3,1
  804750:	10c20f26 	beq	r2,r3,804f90 <___vfprintf_internal_r+0x1630>
  804754:	00c00084 	movi	r3,2
  804758:	10fd6326 	beq	r2,r3,803ce8 <__alt_mem_onchip_mem+0xff783ce8>
  80475c:	003e2d06 	br	804014 <__alt_mem_onchip_mem+0xff784014>
  804760:	d8c02017 	ldw	r3,128(sp)
  804764:	003e9306 	br	8041b4 <__alt_mem_onchip_mem+0xff7841b4>
  804768:	00801944 	movi	r2,101
  80476c:	14407e0e 	bge	r2,r17,804968 <___vfprintf_internal_r+0x1008>
  804770:	d9003617 	ldw	r4,216(sp)
  804774:	d9403817 	ldw	r5,224(sp)
  804778:	000d883a 	mov	r6,zero
  80477c:	000f883a 	mov	r7,zero
  804780:	d8c03c15 	stw	r3,240(sp)
  804784:	da003d15 	stw	r8,244(sp)
  804788:	080d5080 	call	80d508 <__eqdf2>
  80478c:	d8c03c17 	ldw	r3,240(sp)
  804790:	da003d17 	ldw	r8,244(sp)
  804794:	1000f71e 	bne	r2,zero,804b74 <___vfprintf_internal_r+0x1214>
  804798:	d8801f17 	ldw	r2,124(sp)
  80479c:	01002074 	movhi	r4,129
  8047a0:	210ba304 	addi	r4,r4,11916
  8047a4:	18c00044 	addi	r3,r3,1
  8047a8:	10800044 	addi	r2,r2,1
  8047ac:	41000015 	stw	r4,0(r8)
  8047b0:	01000044 	movi	r4,1
  8047b4:	41000115 	stw	r4,4(r8)
  8047b8:	d8c02015 	stw	r3,128(sp)
  8047bc:	d8801f15 	stw	r2,124(sp)
  8047c0:	010001c4 	movi	r4,7
  8047c4:	2082b816 	blt	r4,r2,8052a8 <___vfprintf_internal_r+0x1948>
  8047c8:	42000204 	addi	r8,r8,8
  8047cc:	d8802617 	ldw	r2,152(sp)
  8047d0:	d9403317 	ldw	r5,204(sp)
  8047d4:	11400216 	blt	r2,r5,8047e0 <___vfprintf_internal_r+0xe80>
  8047d8:	9080004c 	andi	r2,r18,1
  8047dc:	103ed526 	beq	r2,zero,804334 <__alt_mem_onchip_mem+0xff784334>
  8047e0:	d8803717 	ldw	r2,220(sp)
  8047e4:	d9003417 	ldw	r4,208(sp)
  8047e8:	d9403717 	ldw	r5,220(sp)
  8047ec:	1887883a 	add	r3,r3,r2
  8047f0:	d8801f17 	ldw	r2,124(sp)
  8047f4:	41000015 	stw	r4,0(r8)
  8047f8:	41400115 	stw	r5,4(r8)
  8047fc:	10800044 	addi	r2,r2,1
  804800:	d8c02015 	stw	r3,128(sp)
  804804:	d8801f15 	stw	r2,124(sp)
  804808:	010001c4 	movi	r4,7
  80480c:	20832916 	blt	r4,r2,8054b4 <___vfprintf_internal_r+0x1b54>
  804810:	42000204 	addi	r8,r8,8
  804814:	d8803317 	ldw	r2,204(sp)
  804818:	143fffc4 	addi	r16,r2,-1
  80481c:	043ec50e 	bge	zero,r16,804334 <__alt_mem_onchip_mem+0xff784334>
  804820:	04400404 	movi	r17,16
  804824:	d8801f17 	ldw	r2,124(sp)
  804828:	8c00880e 	bge	r17,r16,804a4c <___vfprintf_internal_r+0x10ec>
  80482c:	01402074 	movhi	r5,129
  804830:	294ba384 	addi	r5,r5,11918
  804834:	d9402b15 	stw	r5,172(sp)
  804838:	058001c4 	movi	r22,7
  80483c:	dcc02c17 	ldw	r19,176(sp)
  804840:	00000306 	br	804850 <___vfprintf_internal_r+0xef0>
  804844:	42000204 	addi	r8,r8,8
  804848:	843ffc04 	addi	r16,r16,-16
  80484c:	8c00820e 	bge	r17,r16,804a58 <___vfprintf_internal_r+0x10f8>
  804850:	18c00404 	addi	r3,r3,16
  804854:	10800044 	addi	r2,r2,1
  804858:	45000015 	stw	r20,0(r8)
  80485c:	44400115 	stw	r17,4(r8)
  804860:	d8c02015 	stw	r3,128(sp)
  804864:	d8801f15 	stw	r2,124(sp)
  804868:	b0bff60e 	bge	r22,r2,804844 <__alt_mem_onchip_mem+0xff784844>
  80486c:	d9801e04 	addi	r6,sp,120
  804870:	b80b883a 	mov	r5,r23
  804874:	9809883a 	mov	r4,r19
  804878:	0809bb80 	call	809bb8 <__sprint_r>
  80487c:	103d3a1e 	bne	r2,zero,803d68 <__alt_mem_onchip_mem+0xff783d68>
  804880:	d8c02017 	ldw	r3,128(sp)
  804884:	d8801f17 	ldw	r2,124(sp)
  804888:	da000404 	addi	r8,sp,16
  80488c:	003fee06 	br	804848 <__alt_mem_onchip_mem+0xff784848>
  804890:	d9403117 	ldw	r5,196(sp)
  804894:	d8802a17 	ldw	r2,168(sp)
  804898:	28adc83a 	sub	r22,r5,r2
  80489c:	05be630e 	bge	zero,r22,80422c <__alt_mem_onchip_mem+0xff78422c>
  8048a0:	07000404 	movi	fp,16
  8048a4:	d8801f17 	ldw	r2,124(sp)
  8048a8:	e5838f0e 	bge	fp,r22,8056e8 <___vfprintf_internal_r+0x1d88>
  8048ac:	01402074 	movhi	r5,129
  8048b0:	294ba384 	addi	r5,r5,11918
  8048b4:	dc403015 	stw	r17,192(sp)
  8048b8:	d9402b15 	stw	r5,172(sp)
  8048bc:	b023883a 	mov	r17,r22
  8048c0:	04c001c4 	movi	r19,7
  8048c4:	a82d883a 	mov	r22,r21
  8048c8:	902b883a 	mov	r21,r18
  8048cc:	8025883a 	mov	r18,r16
  8048d0:	dc002c17 	ldw	r16,176(sp)
  8048d4:	00000306 	br	8048e4 <___vfprintf_internal_r+0xf84>
  8048d8:	8c7ffc04 	addi	r17,r17,-16
  8048dc:	42000204 	addi	r8,r8,8
  8048e0:	e440110e 	bge	fp,r17,804928 <___vfprintf_internal_r+0xfc8>
  8048e4:	18c00404 	addi	r3,r3,16
  8048e8:	10800044 	addi	r2,r2,1
  8048ec:	45000015 	stw	r20,0(r8)
  8048f0:	47000115 	stw	fp,4(r8)
  8048f4:	d8c02015 	stw	r3,128(sp)
  8048f8:	d8801f15 	stw	r2,124(sp)
  8048fc:	98bff60e 	bge	r19,r2,8048d8 <__alt_mem_onchip_mem+0xff7848d8>
  804900:	d9801e04 	addi	r6,sp,120
  804904:	b80b883a 	mov	r5,r23
  804908:	8009883a 	mov	r4,r16
  80490c:	0809bb80 	call	809bb8 <__sprint_r>
  804910:	103d151e 	bne	r2,zero,803d68 <__alt_mem_onchip_mem+0xff783d68>
  804914:	8c7ffc04 	addi	r17,r17,-16
  804918:	d8c02017 	ldw	r3,128(sp)
  80491c:	d8801f17 	ldw	r2,124(sp)
  804920:	da000404 	addi	r8,sp,16
  804924:	e47fef16 	blt	fp,r17,8048e4 <__alt_mem_onchip_mem+0xff7848e4>
  804928:	9021883a 	mov	r16,r18
  80492c:	a825883a 	mov	r18,r21
  804930:	b02b883a 	mov	r21,r22
  804934:	882d883a 	mov	r22,r17
  804938:	dc403017 	ldw	r17,192(sp)
  80493c:	d9002b17 	ldw	r4,172(sp)
  804940:	1d87883a 	add	r3,r3,r22
  804944:	10800044 	addi	r2,r2,1
  804948:	41000015 	stw	r4,0(r8)
  80494c:	45800115 	stw	r22,4(r8)
  804950:	d8c02015 	stw	r3,128(sp)
  804954:	d8801f15 	stw	r2,124(sp)
  804958:	010001c4 	movi	r4,7
  80495c:	20818e16 	blt	r4,r2,804f98 <___vfprintf_internal_r+0x1638>
  804960:	42000204 	addi	r8,r8,8
  804964:	003e3106 	br	80422c <__alt_mem_onchip_mem+0xff78422c>
  804968:	d9403317 	ldw	r5,204(sp)
  80496c:	00800044 	movi	r2,1
  804970:	18c00044 	addi	r3,r3,1
  804974:	1141530e 	bge	r2,r5,804ec4 <___vfprintf_internal_r+0x1564>
  804978:	dc401f17 	ldw	r17,124(sp)
  80497c:	00800044 	movi	r2,1
  804980:	40800115 	stw	r2,4(r8)
  804984:	8c400044 	addi	r17,r17,1
  804988:	44000015 	stw	r16,0(r8)
  80498c:	d8c02015 	stw	r3,128(sp)
  804990:	dc401f15 	stw	r17,124(sp)
  804994:	008001c4 	movi	r2,7
  804998:	14416b16 	blt	r2,r17,804f48 <___vfprintf_internal_r+0x15e8>
  80499c:	42000204 	addi	r8,r8,8
  8049a0:	d8803717 	ldw	r2,220(sp)
  8049a4:	d9003417 	ldw	r4,208(sp)
  8049a8:	8c400044 	addi	r17,r17,1
  8049ac:	10c7883a 	add	r3,r2,r3
  8049b0:	40800115 	stw	r2,4(r8)
  8049b4:	41000015 	stw	r4,0(r8)
  8049b8:	d8c02015 	stw	r3,128(sp)
  8049bc:	dc401f15 	stw	r17,124(sp)
  8049c0:	008001c4 	movi	r2,7
  8049c4:	14416916 	blt	r2,r17,804f6c <___vfprintf_internal_r+0x160c>
  8049c8:	45800204 	addi	r22,r8,8
  8049cc:	d9003617 	ldw	r4,216(sp)
  8049d0:	d9403817 	ldw	r5,224(sp)
  8049d4:	000d883a 	mov	r6,zero
  8049d8:	000f883a 	mov	r7,zero
  8049dc:	d8c03c15 	stw	r3,240(sp)
  8049e0:	080d5080 	call	80d508 <__eqdf2>
  8049e4:	d8c03c17 	ldw	r3,240(sp)
  8049e8:	1000bc26 	beq	r2,zero,804cdc <___vfprintf_internal_r+0x137c>
  8049ec:	d9403317 	ldw	r5,204(sp)
  8049f0:	84000044 	addi	r16,r16,1
  8049f4:	8c400044 	addi	r17,r17,1
  8049f8:	28bfffc4 	addi	r2,r5,-1
  8049fc:	1887883a 	add	r3,r3,r2
  804a00:	b0800115 	stw	r2,4(r22)
  804a04:	b4000015 	stw	r16,0(r22)
  804a08:	d8c02015 	stw	r3,128(sp)
  804a0c:	dc401f15 	stw	r17,124(sp)
  804a10:	008001c4 	movi	r2,7
  804a14:	14414316 	blt	r2,r17,804f24 <___vfprintf_internal_r+0x15c4>
  804a18:	b5800204 	addi	r22,r22,8
  804a1c:	d9003a17 	ldw	r4,232(sp)
  804a20:	df0022c4 	addi	fp,sp,139
  804a24:	8c400044 	addi	r17,r17,1
  804a28:	20c7883a 	add	r3,r4,r3
  804a2c:	b7000015 	stw	fp,0(r22)
  804a30:	b1000115 	stw	r4,4(r22)
  804a34:	d8c02015 	stw	r3,128(sp)
  804a38:	dc401f15 	stw	r17,124(sp)
  804a3c:	008001c4 	movi	r2,7
  804a40:	14400e16 	blt	r2,r17,804a7c <___vfprintf_internal_r+0x111c>
  804a44:	b2000204 	addi	r8,r22,8
  804a48:	003e3a06 	br	804334 <__alt_mem_onchip_mem+0xff784334>
  804a4c:	01002074 	movhi	r4,129
  804a50:	210ba384 	addi	r4,r4,11918
  804a54:	d9002b15 	stw	r4,172(sp)
  804a58:	d9002b17 	ldw	r4,172(sp)
  804a5c:	1c07883a 	add	r3,r3,r16
  804a60:	44000115 	stw	r16,4(r8)
  804a64:	41000015 	stw	r4,0(r8)
  804a68:	10800044 	addi	r2,r2,1
  804a6c:	d8c02015 	stw	r3,128(sp)
  804a70:	d8801f15 	stw	r2,124(sp)
  804a74:	010001c4 	movi	r4,7
  804a78:	20be2d0e 	bge	r4,r2,804330 <__alt_mem_onchip_mem+0xff784330>
  804a7c:	d9002c17 	ldw	r4,176(sp)
  804a80:	d9801e04 	addi	r6,sp,120
  804a84:	b80b883a 	mov	r5,r23
  804a88:	0809bb80 	call	809bb8 <__sprint_r>
  804a8c:	103cb61e 	bne	r2,zero,803d68 <__alt_mem_onchip_mem+0xff783d68>
  804a90:	d8c02017 	ldw	r3,128(sp)
  804a94:	da000404 	addi	r8,sp,16
  804a98:	003e2606 	br	804334 <__alt_mem_onchip_mem+0xff784334>
  804a9c:	d9002c17 	ldw	r4,176(sp)
  804aa0:	d9801e04 	addi	r6,sp,120
  804aa4:	b80b883a 	mov	r5,r23
  804aa8:	0809bb80 	call	809bb8 <__sprint_r>
  804aac:	103e5d26 	beq	r2,zero,804424 <__alt_mem_onchip_mem+0xff784424>
  804ab0:	003cad06 	br	803d68 <__alt_mem_onchip_mem+0xff783d68>
  804ab4:	d9002c17 	ldw	r4,176(sp)
  804ab8:	d9801e04 	addi	r6,sp,120
  804abc:	b80b883a 	mov	r5,r23
  804ac0:	0809bb80 	call	809bb8 <__sprint_r>
  804ac4:	103ca81e 	bne	r2,zero,803d68 <__alt_mem_onchip_mem+0xff783d68>
  804ac8:	d8c02017 	ldw	r3,128(sp)
  804acc:	da000404 	addi	r8,sp,16
  804ad0:	003e0b06 	br	804300 <__alt_mem_onchip_mem+0xff784300>
  804ad4:	d9002c17 	ldw	r4,176(sp)
  804ad8:	d9801e04 	addi	r6,sp,120
  804adc:	b80b883a 	mov	r5,r23
  804ae0:	0809bb80 	call	809bb8 <__sprint_r>
  804ae4:	103ca01e 	bne	r2,zero,803d68 <__alt_mem_onchip_mem+0xff783d68>
  804ae8:	d8c02017 	ldw	r3,128(sp)
  804aec:	da000404 	addi	r8,sp,16
  804af0:	003dbd06 	br	8041e8 <__alt_mem_onchip_mem+0xff7841e8>
  804af4:	d9002c17 	ldw	r4,176(sp)
  804af8:	d9801e04 	addi	r6,sp,120
  804afc:	b80b883a 	mov	r5,r23
  804b00:	0809bb80 	call	809bb8 <__sprint_r>
  804b04:	103c981e 	bne	r2,zero,803d68 <__alt_mem_onchip_mem+0xff783d68>
  804b08:	d8c02017 	ldw	r3,128(sp)
  804b0c:	da000404 	addi	r8,sp,16
  804b10:	003dc306 	br	804220 <__alt_mem_onchip_mem+0xff784220>
  804b14:	d8802917 	ldw	r2,164(sp)
  804b18:	d8002785 	stb	zero,158(sp)
  804b1c:	103f0616 	blt	r2,zero,804738 <__alt_mem_onchip_mem+0xff784738>
  804b20:	00ffdfc4 	movi	r3,-129
  804b24:	9d84b03a 	or	r2,r19,r22
  804b28:	90e4703a 	and	r18,r18,r3
  804b2c:	103c6b26 	beq	r2,zero,803cdc <__alt_mem_onchip_mem+0xff783cdc>
  804b30:	0039883a 	mov	fp,zero
  804b34:	003e7406 	br	804508 <__alt_mem_onchip_mem+0xff784508>
  804b38:	9080040c 	andi	r2,r18,16
  804b3c:	1001b326 	beq	r2,zero,80520c <___vfprintf_internal_r+0x18ac>
  804b40:	d9002d17 	ldw	r4,180(sp)
  804b44:	d9402917 	ldw	r5,164(sp)
  804b48:	d8002785 	stb	zero,158(sp)
  804b4c:	20800104 	addi	r2,r4,4
  804b50:	24c00017 	ldw	r19,0(r4)
  804b54:	002d883a 	mov	r22,zero
  804b58:	2801b516 	blt	r5,zero,805230 <___vfprintf_internal_r+0x18d0>
  804b5c:	00ffdfc4 	movi	r3,-129
  804b60:	d8802d15 	stw	r2,180(sp)
  804b64:	90e4703a 	and	r18,r18,r3
  804b68:	983d2726 	beq	r19,zero,804008 <__alt_mem_onchip_mem+0xff784008>
  804b6c:	0039883a 	mov	fp,zero
  804b70:	003d2a06 	br	80401c <__alt_mem_onchip_mem+0xff78401c>
  804b74:	dc402617 	ldw	r17,152(sp)
  804b78:	0441d30e 	bge	zero,r17,8052c8 <___vfprintf_internal_r+0x1968>
  804b7c:	dc403217 	ldw	r17,200(sp)
  804b80:	d8803317 	ldw	r2,204(sp)
  804b84:	1440010e 	bge	r2,r17,804b8c <___vfprintf_internal_r+0x122c>
  804b88:	1023883a 	mov	r17,r2
  804b8c:	04400a0e 	bge	zero,r17,804bb8 <___vfprintf_internal_r+0x1258>
  804b90:	d8801f17 	ldw	r2,124(sp)
  804b94:	1c47883a 	add	r3,r3,r17
  804b98:	44000015 	stw	r16,0(r8)
  804b9c:	10800044 	addi	r2,r2,1
  804ba0:	44400115 	stw	r17,4(r8)
  804ba4:	d8c02015 	stw	r3,128(sp)
  804ba8:	d8801f15 	stw	r2,124(sp)
  804bac:	010001c4 	movi	r4,7
  804bb0:	20826516 	blt	r4,r2,805548 <___vfprintf_internal_r+0x1be8>
  804bb4:	42000204 	addi	r8,r8,8
  804bb8:	88026116 	blt	r17,zero,805540 <___vfprintf_internal_r+0x1be0>
  804bbc:	d9003217 	ldw	r4,200(sp)
  804bc0:	2463c83a 	sub	r17,r4,r17
  804bc4:	04407b0e 	bge	zero,r17,804db4 <___vfprintf_internal_r+0x1454>
  804bc8:	05800404 	movi	r22,16
  804bcc:	d8801f17 	ldw	r2,124(sp)
  804bd0:	b4419d0e 	bge	r22,r17,805248 <___vfprintf_internal_r+0x18e8>
  804bd4:	01002074 	movhi	r4,129
  804bd8:	210ba384 	addi	r4,r4,11918
  804bdc:	d9002b15 	stw	r4,172(sp)
  804be0:	070001c4 	movi	fp,7
  804be4:	dcc02c17 	ldw	r19,176(sp)
  804be8:	00000306 	br	804bf8 <___vfprintf_internal_r+0x1298>
  804bec:	42000204 	addi	r8,r8,8
  804bf0:	8c7ffc04 	addi	r17,r17,-16
  804bf4:	b441970e 	bge	r22,r17,805254 <___vfprintf_internal_r+0x18f4>
  804bf8:	18c00404 	addi	r3,r3,16
  804bfc:	10800044 	addi	r2,r2,1
  804c00:	45000015 	stw	r20,0(r8)
  804c04:	45800115 	stw	r22,4(r8)
  804c08:	d8c02015 	stw	r3,128(sp)
  804c0c:	d8801f15 	stw	r2,124(sp)
  804c10:	e0bff60e 	bge	fp,r2,804bec <__alt_mem_onchip_mem+0xff784bec>
  804c14:	d9801e04 	addi	r6,sp,120
  804c18:	b80b883a 	mov	r5,r23
  804c1c:	9809883a 	mov	r4,r19
  804c20:	0809bb80 	call	809bb8 <__sprint_r>
  804c24:	103c501e 	bne	r2,zero,803d68 <__alt_mem_onchip_mem+0xff783d68>
  804c28:	d8c02017 	ldw	r3,128(sp)
  804c2c:	d8801f17 	ldw	r2,124(sp)
  804c30:	da000404 	addi	r8,sp,16
  804c34:	003fee06 	br	804bf0 <__alt_mem_onchip_mem+0xff784bf0>
  804c38:	d9002c17 	ldw	r4,176(sp)
  804c3c:	d9801e04 	addi	r6,sp,120
  804c40:	b80b883a 	mov	r5,r23
  804c44:	0809bb80 	call	809bb8 <__sprint_r>
  804c48:	103c471e 	bne	r2,zero,803d68 <__alt_mem_onchip_mem+0xff783d68>
  804c4c:	d8c02017 	ldw	r3,128(sp)
  804c50:	df002787 	ldb	fp,158(sp)
  804c54:	da000404 	addi	r8,sp,16
  804c58:	003d5606 	br	8041b4 <__alt_mem_onchip_mem+0xff7841b4>
  804c5c:	9080040c 	andi	r2,r18,16
  804c60:	10016126 	beq	r2,zero,8051e8 <___vfprintf_internal_r+0x1888>
  804c64:	d8802d17 	ldw	r2,180(sp)
  804c68:	14c00017 	ldw	r19,0(r2)
  804c6c:	10800104 	addi	r2,r2,4
  804c70:	d8802d15 	stw	r2,180(sp)
  804c74:	982dd7fa 	srai	r22,r19,31
  804c78:	b005883a 	mov	r2,r22
  804c7c:	003c8206 	br	803e88 <__alt_mem_onchip_mem+0xff783e88>
  804c80:	9080040c 	andi	r2,r18,16
  804c84:	10003526 	beq	r2,zero,804d5c <___vfprintf_internal_r+0x13fc>
  804c88:	d9402d17 	ldw	r5,180(sp)
  804c8c:	d8c02917 	ldw	r3,164(sp)
  804c90:	d8002785 	stb	zero,158(sp)
  804c94:	28800104 	addi	r2,r5,4
  804c98:	2cc00017 	ldw	r19,0(r5)
  804c9c:	002d883a 	mov	r22,zero
  804ca0:	18003716 	blt	r3,zero,804d80 <___vfprintf_internal_r+0x1420>
  804ca4:	00ffdfc4 	movi	r3,-129
  804ca8:	d8802d15 	stw	r2,180(sp)
  804cac:	90e4703a 	and	r18,r18,r3
  804cb0:	0039883a 	mov	fp,zero
  804cb4:	983df326 	beq	r19,zero,804484 <__alt_mem_onchip_mem+0xff784484>
  804cb8:	00800244 	movi	r2,9
  804cbc:	14fc7b36 	bltu	r2,r19,803eac <__alt_mem_onchip_mem+0xff783eac>
  804cc0:	d8c02817 	ldw	r3,160(sp)
  804cc4:	dc001dc4 	addi	r16,sp,119
  804cc8:	9cc00c04 	addi	r19,r19,48
  804ccc:	1c07c83a 	sub	r3,r3,r16
  804cd0:	dcc01dc5 	stb	r19,119(sp)
  804cd4:	d8c02e15 	stw	r3,184(sp)
  804cd8:	003ce806 	br	80407c <__alt_mem_onchip_mem+0xff78407c>
  804cdc:	d8803317 	ldw	r2,204(sp)
  804ce0:	143fffc4 	addi	r16,r2,-1
  804ce4:	043f4d0e 	bge	zero,r16,804a1c <__alt_mem_onchip_mem+0xff784a1c>
  804ce8:	07000404 	movi	fp,16
  804cec:	e400810e 	bge	fp,r16,804ef4 <___vfprintf_internal_r+0x1594>
  804cf0:	01402074 	movhi	r5,129
  804cf4:	294ba384 	addi	r5,r5,11918
  804cf8:	d9402b15 	stw	r5,172(sp)
  804cfc:	01c001c4 	movi	r7,7
  804d00:	dcc02c17 	ldw	r19,176(sp)
  804d04:	00000306 	br	804d14 <___vfprintf_internal_r+0x13b4>
  804d08:	b5800204 	addi	r22,r22,8
  804d0c:	843ffc04 	addi	r16,r16,-16
  804d10:	e4007b0e 	bge	fp,r16,804f00 <___vfprintf_internal_r+0x15a0>
  804d14:	18c00404 	addi	r3,r3,16
  804d18:	8c400044 	addi	r17,r17,1
  804d1c:	b5000015 	stw	r20,0(r22)
  804d20:	b7000115 	stw	fp,4(r22)
  804d24:	d8c02015 	stw	r3,128(sp)
  804d28:	dc401f15 	stw	r17,124(sp)
  804d2c:	3c7ff60e 	bge	r7,r17,804d08 <__alt_mem_onchip_mem+0xff784d08>
  804d30:	d9801e04 	addi	r6,sp,120
  804d34:	b80b883a 	mov	r5,r23
  804d38:	9809883a 	mov	r4,r19
  804d3c:	d9c03c15 	stw	r7,240(sp)
  804d40:	0809bb80 	call	809bb8 <__sprint_r>
  804d44:	d9c03c17 	ldw	r7,240(sp)
  804d48:	103c071e 	bne	r2,zero,803d68 <__alt_mem_onchip_mem+0xff783d68>
  804d4c:	d8c02017 	ldw	r3,128(sp)
  804d50:	dc401f17 	ldw	r17,124(sp)
  804d54:	dd800404 	addi	r22,sp,16
  804d58:	003fec06 	br	804d0c <__alt_mem_onchip_mem+0xff784d0c>
  804d5c:	9080100c 	andi	r2,r18,64
  804d60:	d8002785 	stb	zero,158(sp)
  804d64:	10010e26 	beq	r2,zero,8051a0 <___vfprintf_internal_r+0x1840>
  804d68:	d9002d17 	ldw	r4,180(sp)
  804d6c:	d9402917 	ldw	r5,164(sp)
  804d70:	002d883a 	mov	r22,zero
  804d74:	20800104 	addi	r2,r4,4
  804d78:	24c0000b 	ldhu	r19,0(r4)
  804d7c:	283fc90e 	bge	r5,zero,804ca4 <__alt_mem_onchip_mem+0xff784ca4>
  804d80:	d8802d15 	stw	r2,180(sp)
  804d84:	0039883a 	mov	fp,zero
  804d88:	9d84b03a 	or	r2,r19,r22
  804d8c:	103c461e 	bne	r2,zero,803ea8 <__alt_mem_onchip_mem+0xff783ea8>
  804d90:	00800044 	movi	r2,1
  804d94:	003e6c06 	br	804748 <__alt_mem_onchip_mem+0xff784748>
  804d98:	d9002c17 	ldw	r4,176(sp)
  804d9c:	d9801e04 	addi	r6,sp,120
  804da0:	b80b883a 	mov	r5,r23
  804da4:	0809bb80 	call	809bb8 <__sprint_r>
  804da8:	103bef1e 	bne	r2,zero,803d68 <__alt_mem_onchip_mem+0xff783d68>
  804dac:	d8c02017 	ldw	r3,128(sp)
  804db0:	da000404 	addi	r8,sp,16
  804db4:	d9003217 	ldw	r4,200(sp)
  804db8:	d8802617 	ldw	r2,152(sp)
  804dbc:	d9403317 	ldw	r5,204(sp)
  804dc0:	8123883a 	add	r17,r16,r4
  804dc4:	11400216 	blt	r2,r5,804dd0 <___vfprintf_internal_r+0x1470>
  804dc8:	9100004c 	andi	r4,r18,1
  804dcc:	20000d26 	beq	r4,zero,804e04 <___vfprintf_internal_r+0x14a4>
  804dd0:	d9003717 	ldw	r4,220(sp)
  804dd4:	d9403417 	ldw	r5,208(sp)
  804dd8:	1907883a 	add	r3,r3,r4
  804ddc:	d9001f17 	ldw	r4,124(sp)
  804de0:	41400015 	stw	r5,0(r8)
  804de4:	d9403717 	ldw	r5,220(sp)
  804de8:	21000044 	addi	r4,r4,1
  804dec:	d8c02015 	stw	r3,128(sp)
  804df0:	41400115 	stw	r5,4(r8)
  804df4:	d9001f15 	stw	r4,124(sp)
  804df8:	014001c4 	movi	r5,7
  804dfc:	2901e816 	blt	r5,r4,8055a0 <___vfprintf_internal_r+0x1c40>
  804e00:	42000204 	addi	r8,r8,8
  804e04:	d9003317 	ldw	r4,204(sp)
  804e08:	8121883a 	add	r16,r16,r4
  804e0c:	2085c83a 	sub	r2,r4,r2
  804e10:	8461c83a 	sub	r16,r16,r17
  804e14:	1400010e 	bge	r2,r16,804e1c <___vfprintf_internal_r+0x14bc>
  804e18:	1021883a 	mov	r16,r2
  804e1c:	04000a0e 	bge	zero,r16,804e48 <___vfprintf_internal_r+0x14e8>
  804e20:	d9001f17 	ldw	r4,124(sp)
  804e24:	1c07883a 	add	r3,r3,r16
  804e28:	44400015 	stw	r17,0(r8)
  804e2c:	21000044 	addi	r4,r4,1
  804e30:	44000115 	stw	r16,4(r8)
  804e34:	d8c02015 	stw	r3,128(sp)
  804e38:	d9001f15 	stw	r4,124(sp)
  804e3c:	014001c4 	movi	r5,7
  804e40:	2901fb16 	blt	r5,r4,805630 <___vfprintf_internal_r+0x1cd0>
  804e44:	42000204 	addi	r8,r8,8
  804e48:	8001f716 	blt	r16,zero,805628 <___vfprintf_internal_r+0x1cc8>
  804e4c:	1421c83a 	sub	r16,r2,r16
  804e50:	043d380e 	bge	zero,r16,804334 <__alt_mem_onchip_mem+0xff784334>
  804e54:	04400404 	movi	r17,16
  804e58:	d8801f17 	ldw	r2,124(sp)
  804e5c:	8c3efb0e 	bge	r17,r16,804a4c <__alt_mem_onchip_mem+0xff784a4c>
  804e60:	01402074 	movhi	r5,129
  804e64:	294ba384 	addi	r5,r5,11918
  804e68:	d9402b15 	stw	r5,172(sp)
  804e6c:	058001c4 	movi	r22,7
  804e70:	dcc02c17 	ldw	r19,176(sp)
  804e74:	00000306 	br	804e84 <___vfprintf_internal_r+0x1524>
  804e78:	42000204 	addi	r8,r8,8
  804e7c:	843ffc04 	addi	r16,r16,-16
  804e80:	8c3ef50e 	bge	r17,r16,804a58 <__alt_mem_onchip_mem+0xff784a58>
  804e84:	18c00404 	addi	r3,r3,16
  804e88:	10800044 	addi	r2,r2,1
  804e8c:	45000015 	stw	r20,0(r8)
  804e90:	44400115 	stw	r17,4(r8)
  804e94:	d8c02015 	stw	r3,128(sp)
  804e98:	d8801f15 	stw	r2,124(sp)
  804e9c:	b0bff60e 	bge	r22,r2,804e78 <__alt_mem_onchip_mem+0xff784e78>
  804ea0:	d9801e04 	addi	r6,sp,120
  804ea4:	b80b883a 	mov	r5,r23
  804ea8:	9809883a 	mov	r4,r19
  804eac:	0809bb80 	call	809bb8 <__sprint_r>
  804eb0:	103bad1e 	bne	r2,zero,803d68 <__alt_mem_onchip_mem+0xff783d68>
  804eb4:	d8c02017 	ldw	r3,128(sp)
  804eb8:	d8801f17 	ldw	r2,124(sp)
  804ebc:	da000404 	addi	r8,sp,16
  804ec0:	003fee06 	br	804e7c <__alt_mem_onchip_mem+0xff784e7c>
  804ec4:	9088703a 	and	r4,r18,r2
  804ec8:	203eab1e 	bne	r4,zero,804978 <__alt_mem_onchip_mem+0xff784978>
  804ecc:	dc401f17 	ldw	r17,124(sp)
  804ed0:	40800115 	stw	r2,4(r8)
  804ed4:	44000015 	stw	r16,0(r8)
  804ed8:	8c400044 	addi	r17,r17,1
  804edc:	d8c02015 	stw	r3,128(sp)
  804ee0:	dc401f15 	stw	r17,124(sp)
  804ee4:	008001c4 	movi	r2,7
  804ee8:	14400e16 	blt	r2,r17,804f24 <___vfprintf_internal_r+0x15c4>
  804eec:	45800204 	addi	r22,r8,8
  804ef0:	003eca06 	br	804a1c <__alt_mem_onchip_mem+0xff784a1c>
  804ef4:	01002074 	movhi	r4,129
  804ef8:	210ba384 	addi	r4,r4,11918
  804efc:	d9002b15 	stw	r4,172(sp)
  804f00:	d8802b17 	ldw	r2,172(sp)
  804f04:	1c07883a 	add	r3,r3,r16
  804f08:	8c400044 	addi	r17,r17,1
  804f0c:	b0800015 	stw	r2,0(r22)
  804f10:	b4000115 	stw	r16,4(r22)
  804f14:	d8c02015 	stw	r3,128(sp)
  804f18:	dc401f15 	stw	r17,124(sp)
  804f1c:	008001c4 	movi	r2,7
  804f20:	147ebd0e 	bge	r2,r17,804a18 <__alt_mem_onchip_mem+0xff784a18>
  804f24:	d9002c17 	ldw	r4,176(sp)
  804f28:	d9801e04 	addi	r6,sp,120
  804f2c:	b80b883a 	mov	r5,r23
  804f30:	0809bb80 	call	809bb8 <__sprint_r>
  804f34:	103b8c1e 	bne	r2,zero,803d68 <__alt_mem_onchip_mem+0xff783d68>
  804f38:	d8c02017 	ldw	r3,128(sp)
  804f3c:	dc401f17 	ldw	r17,124(sp)
  804f40:	dd800404 	addi	r22,sp,16
  804f44:	003eb506 	br	804a1c <__alt_mem_onchip_mem+0xff784a1c>
  804f48:	d9002c17 	ldw	r4,176(sp)
  804f4c:	d9801e04 	addi	r6,sp,120
  804f50:	b80b883a 	mov	r5,r23
  804f54:	0809bb80 	call	809bb8 <__sprint_r>
  804f58:	103b831e 	bne	r2,zero,803d68 <__alt_mem_onchip_mem+0xff783d68>
  804f5c:	d8c02017 	ldw	r3,128(sp)
  804f60:	dc401f17 	ldw	r17,124(sp)
  804f64:	da000404 	addi	r8,sp,16
  804f68:	003e8d06 	br	8049a0 <__alt_mem_onchip_mem+0xff7849a0>
  804f6c:	d9002c17 	ldw	r4,176(sp)
  804f70:	d9801e04 	addi	r6,sp,120
  804f74:	b80b883a 	mov	r5,r23
  804f78:	0809bb80 	call	809bb8 <__sprint_r>
  804f7c:	103b7a1e 	bne	r2,zero,803d68 <__alt_mem_onchip_mem+0xff783d68>
  804f80:	d8c02017 	ldw	r3,128(sp)
  804f84:	dc401f17 	ldw	r17,124(sp)
  804f88:	dd800404 	addi	r22,sp,16
  804f8c:	003e8f06 	br	8049cc <__alt_mem_onchip_mem+0xff7849cc>
  804f90:	0027883a 	mov	r19,zero
  804f94:	003f4a06 	br	804cc0 <__alt_mem_onchip_mem+0xff784cc0>
  804f98:	d9002c17 	ldw	r4,176(sp)
  804f9c:	d9801e04 	addi	r6,sp,120
  804fa0:	b80b883a 	mov	r5,r23
  804fa4:	0809bb80 	call	809bb8 <__sprint_r>
  804fa8:	103b6f1e 	bne	r2,zero,803d68 <__alt_mem_onchip_mem+0xff783d68>
  804fac:	d8c02017 	ldw	r3,128(sp)
  804fb0:	da000404 	addi	r8,sp,16
  804fb4:	003c9d06 	br	80422c <__alt_mem_onchip_mem+0xff78422c>
  804fb8:	04e7c83a 	sub	r19,zero,r19
  804fbc:	9804c03a 	cmpne	r2,r19,zero
  804fc0:	05adc83a 	sub	r22,zero,r22
  804fc4:	b0adc83a 	sub	r22,r22,r2
  804fc8:	d8802917 	ldw	r2,164(sp)
  804fcc:	07000b44 	movi	fp,45
  804fd0:	df002785 	stb	fp,158(sp)
  804fd4:	10017b16 	blt	r2,zero,8055c4 <___vfprintf_internal_r+0x1c64>
  804fd8:	00bfdfc4 	movi	r2,-129
  804fdc:	90a4703a 	and	r18,r18,r2
  804fe0:	003bb106 	br	803ea8 <__alt_mem_onchip_mem+0xff783ea8>
  804fe4:	d9003617 	ldw	r4,216(sp)
  804fe8:	d9403817 	ldw	r5,224(sp)
  804fec:	da003d15 	stw	r8,244(sp)
  804ff0:	080996c0 	call	80996c <__fpclassifyd>
  804ff4:	da003d17 	ldw	r8,244(sp)
  804ff8:	1000f026 	beq	r2,zero,8053bc <___vfprintf_internal_r+0x1a5c>
  804ffc:	d9002917 	ldw	r4,164(sp)
  805000:	05bff7c4 	movi	r22,-33
  805004:	00bfffc4 	movi	r2,-1
  805008:	8dac703a 	and	r22,r17,r22
  80500c:	20820026 	beq	r4,r2,805810 <___vfprintf_internal_r+0x1eb0>
  805010:	008011c4 	movi	r2,71
  805014:	b081f726 	beq	r22,r2,8057f4 <___vfprintf_internal_r+0x1e94>
  805018:	d9003817 	ldw	r4,224(sp)
  80501c:	90c04014 	ori	r3,r18,256
  805020:	d8c02b15 	stw	r3,172(sp)
  805024:	20021516 	blt	r4,zero,80587c <___vfprintf_internal_r+0x1f1c>
  805028:	dcc03817 	ldw	r19,224(sp)
  80502c:	d8002a05 	stb	zero,168(sp)
  805030:	00801984 	movi	r2,102
  805034:	8881f926 	beq	r17,r2,80581c <___vfprintf_internal_r+0x1ebc>
  805038:	00801184 	movi	r2,70
  80503c:	88821c26 	beq	r17,r2,8058b0 <___vfprintf_internal_r+0x1f50>
  805040:	00801144 	movi	r2,69
  805044:	b081ef26 	beq	r22,r2,805804 <___vfprintf_internal_r+0x1ea4>
  805048:	d8c02917 	ldw	r3,164(sp)
  80504c:	d8802104 	addi	r2,sp,132
  805050:	d8800315 	stw	r2,12(sp)
  805054:	d9403617 	ldw	r5,216(sp)
  805058:	d8802504 	addi	r2,sp,148
  80505c:	d9002c17 	ldw	r4,176(sp)
  805060:	d8800215 	stw	r2,8(sp)
  805064:	d8802604 	addi	r2,sp,152
  805068:	d8c00015 	stw	r3,0(sp)
  80506c:	d8800115 	stw	r2,4(sp)
  805070:	01c00084 	movi	r7,2
  805074:	980d883a 	mov	r6,r19
  805078:	d8c03c15 	stw	r3,240(sp)
  80507c:	da003d15 	stw	r8,244(sp)
  805080:	08060380 	call	806038 <_dtoa_r>
  805084:	1021883a 	mov	r16,r2
  805088:	008019c4 	movi	r2,103
  80508c:	d8c03c17 	ldw	r3,240(sp)
  805090:	da003d17 	ldw	r8,244(sp)
  805094:	88817126 	beq	r17,r2,80565c <___vfprintf_internal_r+0x1cfc>
  805098:	008011c4 	movi	r2,71
  80509c:	88829226 	beq	r17,r2,805ae8 <___vfprintf_internal_r+0x2188>
  8050a0:	80f9883a 	add	fp,r16,r3
  8050a4:	d9003617 	ldw	r4,216(sp)
  8050a8:	000d883a 	mov	r6,zero
  8050ac:	000f883a 	mov	r7,zero
  8050b0:	980b883a 	mov	r5,r19
  8050b4:	da003d15 	stw	r8,244(sp)
  8050b8:	080d5080 	call	80d508 <__eqdf2>
  8050bc:	da003d17 	ldw	r8,244(sp)
  8050c0:	10018d26 	beq	r2,zero,8056f8 <___vfprintf_internal_r+0x1d98>
  8050c4:	d8802117 	ldw	r2,132(sp)
  8050c8:	1700062e 	bgeu	r2,fp,8050e4 <___vfprintf_internal_r+0x1784>
  8050cc:	01000c04 	movi	r4,48
  8050d0:	10c00044 	addi	r3,r2,1
  8050d4:	d8c02115 	stw	r3,132(sp)
  8050d8:	11000005 	stb	r4,0(r2)
  8050dc:	d8802117 	ldw	r2,132(sp)
  8050e0:	173ffb36 	bltu	r2,fp,8050d0 <__alt_mem_onchip_mem+0xff7850d0>
  8050e4:	1405c83a 	sub	r2,r2,r16
  8050e8:	d8803315 	stw	r2,204(sp)
  8050ec:	008011c4 	movi	r2,71
  8050f0:	b0817626 	beq	r22,r2,8056cc <___vfprintf_internal_r+0x1d6c>
  8050f4:	00801944 	movi	r2,101
  8050f8:	1442810e 	bge	r2,r17,805b00 <___vfprintf_internal_r+0x21a0>
  8050fc:	d8c02617 	ldw	r3,152(sp)
  805100:	00801984 	movi	r2,102
  805104:	d8c03215 	stw	r3,200(sp)
  805108:	8881fe26 	beq	r17,r2,805904 <___vfprintf_internal_r+0x1fa4>
  80510c:	d8c03217 	ldw	r3,200(sp)
  805110:	d9003317 	ldw	r4,204(sp)
  805114:	1901dd16 	blt	r3,r4,80588c <___vfprintf_internal_r+0x1f2c>
  805118:	9480004c 	andi	r18,r18,1
  80511c:	90022b1e 	bne	r18,zero,8059cc <___vfprintf_internal_r+0x206c>
  805120:	1805883a 	mov	r2,r3
  805124:	18028016 	blt	r3,zero,805b28 <___vfprintf_internal_r+0x21c8>
  805128:	d8c03217 	ldw	r3,200(sp)
  80512c:	044019c4 	movi	r17,103
  805130:	d8c02e15 	stw	r3,184(sp)
  805134:	df002a07 	ldb	fp,168(sp)
  805138:	e001531e 	bne	fp,zero,805688 <___vfprintf_internal_r+0x1d28>
  80513c:	df002783 	ldbu	fp,158(sp)
  805140:	d8802a15 	stw	r2,168(sp)
  805144:	dc802b17 	ldw	r18,172(sp)
  805148:	d8002915 	stw	zero,164(sp)
  80514c:	003bd106 	br	804094 <__alt_mem_onchip_mem+0xff784094>
  805150:	d8802d17 	ldw	r2,180(sp)
  805154:	d8c02d17 	ldw	r3,180(sp)
  805158:	d9002d17 	ldw	r4,180(sp)
  80515c:	10800017 	ldw	r2,0(r2)
  805160:	18c00117 	ldw	r3,4(r3)
  805164:	21000204 	addi	r4,r4,8
  805168:	d8803615 	stw	r2,216(sp)
  80516c:	d8c03815 	stw	r3,224(sp)
  805170:	d9002d15 	stw	r4,180(sp)
  805174:	003b7506 	br	803f4c <__alt_mem_onchip_mem+0xff783f4c>
  805178:	ac400007 	ldb	r17,0(r21)
  80517c:	003a5906 	br	803ae4 <__alt_mem_onchip_mem+0xff783ae4>
  805180:	9080100c 	andi	r2,r18,64
  805184:	1000a826 	beq	r2,zero,805428 <___vfprintf_internal_r+0x1ac8>
  805188:	d9002d17 	ldw	r4,180(sp)
  80518c:	002d883a 	mov	r22,zero
  805190:	24c0000b 	ldhu	r19,0(r4)
  805194:	21000104 	addi	r4,r4,4
  805198:	d9002d15 	stw	r4,180(sp)
  80519c:	003ccb06 	br	8044cc <__alt_mem_onchip_mem+0xff7844cc>
  8051a0:	d8c02d17 	ldw	r3,180(sp)
  8051a4:	d9002917 	ldw	r4,164(sp)
  8051a8:	002d883a 	mov	r22,zero
  8051ac:	18800104 	addi	r2,r3,4
  8051b0:	1cc00017 	ldw	r19,0(r3)
  8051b4:	203ebb0e 	bge	r4,zero,804ca4 <__alt_mem_onchip_mem+0xff784ca4>
  8051b8:	003ef106 	br	804d80 <__alt_mem_onchip_mem+0xff784d80>
  8051bc:	9080040c 	andi	r2,r18,16
  8051c0:	1000921e 	bne	r2,zero,80540c <___vfprintf_internal_r+0x1aac>
  8051c4:	9480100c 	andi	r18,r18,64
  8051c8:	90013926 	beq	r18,zero,8056b0 <___vfprintf_internal_r+0x1d50>
  8051cc:	d9002d17 	ldw	r4,180(sp)
  8051d0:	d9402f17 	ldw	r5,188(sp)
  8051d4:	20800017 	ldw	r2,0(r4)
  8051d8:	21000104 	addi	r4,r4,4
  8051dc:	d9002d15 	stw	r4,180(sp)
  8051e0:	1140000d 	sth	r5,0(r2)
  8051e4:	003a1606 	br	803a40 <__alt_mem_onchip_mem+0xff783a40>
  8051e8:	9080100c 	andi	r2,r18,64
  8051ec:	10008026 	beq	r2,zero,8053f0 <___vfprintf_internal_r+0x1a90>
  8051f0:	d8c02d17 	ldw	r3,180(sp)
  8051f4:	1cc0000f 	ldh	r19,0(r3)
  8051f8:	18c00104 	addi	r3,r3,4
  8051fc:	d8c02d15 	stw	r3,180(sp)
  805200:	982dd7fa 	srai	r22,r19,31
  805204:	b005883a 	mov	r2,r22
  805208:	003b1f06 	br	803e88 <__alt_mem_onchip_mem+0xff783e88>
  80520c:	9080100c 	andi	r2,r18,64
  805210:	d8002785 	stb	zero,158(sp)
  805214:	10008a1e 	bne	r2,zero,805440 <___vfprintf_internal_r+0x1ae0>
  805218:	d9402d17 	ldw	r5,180(sp)
  80521c:	d8c02917 	ldw	r3,164(sp)
  805220:	002d883a 	mov	r22,zero
  805224:	28800104 	addi	r2,r5,4
  805228:	2cc00017 	ldw	r19,0(r5)
  80522c:	183e4b0e 	bge	r3,zero,804b5c <__alt_mem_onchip_mem+0xff784b5c>
  805230:	9d86b03a 	or	r3,r19,r22
  805234:	d8802d15 	stw	r2,180(sp)
  805238:	183e4c1e 	bne	r3,zero,804b6c <__alt_mem_onchip_mem+0xff784b6c>
  80523c:	0039883a 	mov	fp,zero
  805240:	0005883a 	mov	r2,zero
  805244:	003d4006 	br	804748 <__alt_mem_onchip_mem+0xff784748>
  805248:	01402074 	movhi	r5,129
  80524c:	294ba384 	addi	r5,r5,11918
  805250:	d9402b15 	stw	r5,172(sp)
  805254:	d9402b17 	ldw	r5,172(sp)
  805258:	1c47883a 	add	r3,r3,r17
  80525c:	10800044 	addi	r2,r2,1
  805260:	41400015 	stw	r5,0(r8)
  805264:	44400115 	stw	r17,4(r8)
  805268:	d8c02015 	stw	r3,128(sp)
  80526c:	d8801f15 	stw	r2,124(sp)
  805270:	010001c4 	movi	r4,7
  805274:	20bec816 	blt	r4,r2,804d98 <__alt_mem_onchip_mem+0xff784d98>
  805278:	42000204 	addi	r8,r8,8
  80527c:	003ecd06 	br	804db4 <__alt_mem_onchip_mem+0xff784db4>
  805280:	d9002917 	ldw	r4,164(sp)
  805284:	d8002785 	stb	zero,158(sp)
  805288:	203d2d16 	blt	r4,zero,804740 <__alt_mem_onchip_mem+0xff784740>
  80528c:	00bfdfc4 	movi	r2,-129
  805290:	90a4703a 	and	r18,r18,r2
  805294:	003a9106 	br	803cdc <__alt_mem_onchip_mem+0xff783cdc>
  805298:	01002074 	movhi	r4,129
  80529c:	210ba384 	addi	r4,r4,11918
  8052a0:	d9002b15 	stw	r4,172(sp)
  8052a4:	003c0c06 	br	8042d8 <__alt_mem_onchip_mem+0xff7842d8>
  8052a8:	d9002c17 	ldw	r4,176(sp)
  8052ac:	d9801e04 	addi	r6,sp,120
  8052b0:	b80b883a 	mov	r5,r23
  8052b4:	0809bb80 	call	809bb8 <__sprint_r>
  8052b8:	103aab1e 	bne	r2,zero,803d68 <__alt_mem_onchip_mem+0xff783d68>
  8052bc:	d8c02017 	ldw	r3,128(sp)
  8052c0:	da000404 	addi	r8,sp,16
  8052c4:	003d4106 	br	8047cc <__alt_mem_onchip_mem+0xff7847cc>
  8052c8:	d8801f17 	ldw	r2,124(sp)
  8052cc:	01402074 	movhi	r5,129
  8052d0:	01000044 	movi	r4,1
  8052d4:	18c00044 	addi	r3,r3,1
  8052d8:	10800044 	addi	r2,r2,1
  8052dc:	294ba304 	addi	r5,r5,11916
  8052e0:	41000115 	stw	r4,4(r8)
  8052e4:	41400015 	stw	r5,0(r8)
  8052e8:	d8c02015 	stw	r3,128(sp)
  8052ec:	d8801f15 	stw	r2,124(sp)
  8052f0:	010001c4 	movi	r4,7
  8052f4:	20805c16 	blt	r4,r2,805468 <___vfprintf_internal_r+0x1b08>
  8052f8:	42000204 	addi	r8,r8,8
  8052fc:	8800041e 	bne	r17,zero,805310 <___vfprintf_internal_r+0x19b0>
  805300:	d8803317 	ldw	r2,204(sp)
  805304:	1000021e 	bne	r2,zero,805310 <___vfprintf_internal_r+0x19b0>
  805308:	9080004c 	andi	r2,r18,1
  80530c:	103c0926 	beq	r2,zero,804334 <__alt_mem_onchip_mem+0xff784334>
  805310:	d9003717 	ldw	r4,220(sp)
  805314:	d8801f17 	ldw	r2,124(sp)
  805318:	d9403417 	ldw	r5,208(sp)
  80531c:	20c7883a 	add	r3,r4,r3
  805320:	10800044 	addi	r2,r2,1
  805324:	41000115 	stw	r4,4(r8)
  805328:	41400015 	stw	r5,0(r8)
  80532c:	d8c02015 	stw	r3,128(sp)
  805330:	d8801f15 	stw	r2,124(sp)
  805334:	010001c4 	movi	r4,7
  805338:	20812116 	blt	r4,r2,8057c0 <___vfprintf_internal_r+0x1e60>
  80533c:	42000204 	addi	r8,r8,8
  805340:	0463c83a 	sub	r17,zero,r17
  805344:	0440730e 	bge	zero,r17,805514 <___vfprintf_internal_r+0x1bb4>
  805348:	05800404 	movi	r22,16
  80534c:	b440860e 	bge	r22,r17,805568 <___vfprintf_internal_r+0x1c08>
  805350:	01402074 	movhi	r5,129
  805354:	294ba384 	addi	r5,r5,11918
  805358:	d9402b15 	stw	r5,172(sp)
  80535c:	070001c4 	movi	fp,7
  805360:	dcc02c17 	ldw	r19,176(sp)
  805364:	00000306 	br	805374 <___vfprintf_internal_r+0x1a14>
  805368:	42000204 	addi	r8,r8,8
  80536c:	8c7ffc04 	addi	r17,r17,-16
  805370:	b440800e 	bge	r22,r17,805574 <___vfprintf_internal_r+0x1c14>
  805374:	18c00404 	addi	r3,r3,16
  805378:	10800044 	addi	r2,r2,1
  80537c:	45000015 	stw	r20,0(r8)
  805380:	45800115 	stw	r22,4(r8)
  805384:	d8c02015 	stw	r3,128(sp)
  805388:	d8801f15 	stw	r2,124(sp)
  80538c:	e0bff60e 	bge	fp,r2,805368 <__alt_mem_onchip_mem+0xff785368>
  805390:	d9801e04 	addi	r6,sp,120
  805394:	b80b883a 	mov	r5,r23
  805398:	9809883a 	mov	r4,r19
  80539c:	0809bb80 	call	809bb8 <__sprint_r>
  8053a0:	103a711e 	bne	r2,zero,803d68 <__alt_mem_onchip_mem+0xff783d68>
  8053a4:	d8c02017 	ldw	r3,128(sp)
  8053a8:	d8801f17 	ldw	r2,124(sp)
  8053ac:	da000404 	addi	r8,sp,16
  8053b0:	003fee06 	br	80536c <__alt_mem_onchip_mem+0xff78536c>
  8053b4:	00bfffc4 	movi	r2,-1
  8053b8:	003a6f06 	br	803d78 <__alt_mem_onchip_mem+0xff783d78>
  8053bc:	008011c4 	movi	r2,71
  8053c0:	1440b816 	blt	r2,r17,8056a4 <___vfprintf_internal_r+0x1d44>
  8053c4:	04002074 	movhi	r16,129
  8053c8:	840b9504 	addi	r16,r16,11860
  8053cc:	00c000c4 	movi	r3,3
  8053d0:	00bfdfc4 	movi	r2,-129
  8053d4:	d8c02a15 	stw	r3,168(sp)
  8053d8:	90a4703a 	and	r18,r18,r2
  8053dc:	df002783 	ldbu	fp,158(sp)
  8053e0:	d8c02e15 	stw	r3,184(sp)
  8053e4:	d8002915 	stw	zero,164(sp)
  8053e8:	d8003215 	stw	zero,200(sp)
  8053ec:	003b2906 	br	804094 <__alt_mem_onchip_mem+0xff784094>
  8053f0:	d9002d17 	ldw	r4,180(sp)
  8053f4:	24c00017 	ldw	r19,0(r4)
  8053f8:	21000104 	addi	r4,r4,4
  8053fc:	d9002d15 	stw	r4,180(sp)
  805400:	982dd7fa 	srai	r22,r19,31
  805404:	b005883a 	mov	r2,r22
  805408:	003a9f06 	br	803e88 <__alt_mem_onchip_mem+0xff783e88>
  80540c:	d9402d17 	ldw	r5,180(sp)
  805410:	d8c02f17 	ldw	r3,188(sp)
  805414:	28800017 	ldw	r2,0(r5)
  805418:	29400104 	addi	r5,r5,4
  80541c:	d9402d15 	stw	r5,180(sp)
  805420:	10c00015 	stw	r3,0(r2)
  805424:	00398606 	br	803a40 <__alt_mem_onchip_mem+0xff783a40>
  805428:	d9402d17 	ldw	r5,180(sp)
  80542c:	002d883a 	mov	r22,zero
  805430:	2cc00017 	ldw	r19,0(r5)
  805434:	29400104 	addi	r5,r5,4
  805438:	d9402d15 	stw	r5,180(sp)
  80543c:	003c2306 	br	8044cc <__alt_mem_onchip_mem+0xff7844cc>
  805440:	d8c02d17 	ldw	r3,180(sp)
  805444:	d9002917 	ldw	r4,164(sp)
  805448:	002d883a 	mov	r22,zero
  80544c:	18800104 	addi	r2,r3,4
  805450:	1cc0000b 	ldhu	r19,0(r3)
  805454:	203dc10e 	bge	r4,zero,804b5c <__alt_mem_onchip_mem+0xff784b5c>
  805458:	003f7506 	br	805230 <__alt_mem_onchip_mem+0xff785230>
  80545c:	04002074 	movhi	r16,129
  805460:	840b9304 	addi	r16,r16,11852
  805464:	003acc06 	br	803f98 <__alt_mem_onchip_mem+0xff783f98>
  805468:	d9002c17 	ldw	r4,176(sp)
  80546c:	d9801e04 	addi	r6,sp,120
  805470:	b80b883a 	mov	r5,r23
  805474:	0809bb80 	call	809bb8 <__sprint_r>
  805478:	103a3b1e 	bne	r2,zero,803d68 <__alt_mem_onchip_mem+0xff783d68>
  80547c:	dc402617 	ldw	r17,152(sp)
  805480:	d8c02017 	ldw	r3,128(sp)
  805484:	da000404 	addi	r8,sp,16
  805488:	003f9c06 	br	8052fc <__alt_mem_onchip_mem+0xff7852fc>
  80548c:	ac400043 	ldbu	r17,1(r21)
  805490:	94800814 	ori	r18,r18,32
  805494:	ad400044 	addi	r21,r21,1
  805498:	8c403fcc 	andi	r17,r17,255
  80549c:	8c40201c 	xori	r17,r17,128
  8054a0:	8c7fe004 	addi	r17,r17,-128
  8054a4:	00398f06 	br	803ae4 <__alt_mem_onchip_mem+0xff783ae4>
  8054a8:	d8c02d15 	stw	r3,180(sp)
  8054ac:	0039883a 	mov	fp,zero
  8054b0:	003e3506 	br	804d88 <__alt_mem_onchip_mem+0xff784d88>
  8054b4:	d9002c17 	ldw	r4,176(sp)
  8054b8:	d9801e04 	addi	r6,sp,120
  8054bc:	b80b883a 	mov	r5,r23
  8054c0:	0809bb80 	call	809bb8 <__sprint_r>
  8054c4:	103a281e 	bne	r2,zero,803d68 <__alt_mem_onchip_mem+0xff783d68>
  8054c8:	d8c02017 	ldw	r3,128(sp)
  8054cc:	da000404 	addi	r8,sp,16
  8054d0:	003cd006 	br	804814 <__alt_mem_onchip_mem+0xff784814>
  8054d4:	8009883a 	mov	r4,r16
  8054d8:	da003d15 	stw	r8,244(sp)
  8054dc:	08035b80 	call	8035b8 <strlen>
  8054e0:	d8802e15 	stw	r2,184(sp)
  8054e4:	da003d17 	ldw	r8,244(sp)
  8054e8:	103c340e 	bge	r2,zero,8045bc <__alt_mem_onchip_mem+0xff7845bc>
  8054ec:	0005883a 	mov	r2,zero
  8054f0:	003c3206 	br	8045bc <__alt_mem_onchip_mem+0xff7845bc>
  8054f4:	d9002c17 	ldw	r4,176(sp)
  8054f8:	d9801e04 	addi	r6,sp,120
  8054fc:	b80b883a 	mov	r5,r23
  805500:	0809bb80 	call	809bb8 <__sprint_r>
  805504:	103a181e 	bne	r2,zero,803d68 <__alt_mem_onchip_mem+0xff783d68>
  805508:	d8c02017 	ldw	r3,128(sp)
  80550c:	d8801f17 	ldw	r2,124(sp)
  805510:	da000404 	addi	r8,sp,16
  805514:	d9403317 	ldw	r5,204(sp)
  805518:	10800044 	addi	r2,r2,1
  80551c:	44000015 	stw	r16,0(r8)
  805520:	28c7883a 	add	r3,r5,r3
  805524:	003b7d06 	br	80431c <__alt_mem_onchip_mem+0xff78431c>
  805528:	01002074 	movhi	r4,129
  80552c:	210ba784 	addi	r4,r4,11934
  805530:	d9003515 	stw	r4,212(sp)
  805534:	003b1406 	br	804188 <__alt_mem_onchip_mem+0xff784188>
  805538:	013fffc4 	movi	r4,-1
  80553c:	003a3506 	br	803e14 <__alt_mem_onchip_mem+0xff783e14>
  805540:	0023883a 	mov	r17,zero
  805544:	003d9d06 	br	804bbc <__alt_mem_onchip_mem+0xff784bbc>
  805548:	d9002c17 	ldw	r4,176(sp)
  80554c:	d9801e04 	addi	r6,sp,120
  805550:	b80b883a 	mov	r5,r23
  805554:	0809bb80 	call	809bb8 <__sprint_r>
  805558:	103a031e 	bne	r2,zero,803d68 <__alt_mem_onchip_mem+0xff783d68>
  80555c:	d8c02017 	ldw	r3,128(sp)
  805560:	da000404 	addi	r8,sp,16
  805564:	003d9406 	br	804bb8 <__alt_mem_onchip_mem+0xff784bb8>
  805568:	01002074 	movhi	r4,129
  80556c:	210ba384 	addi	r4,r4,11918
  805570:	d9002b15 	stw	r4,172(sp)
  805574:	d9002b17 	ldw	r4,172(sp)
  805578:	1c47883a 	add	r3,r3,r17
  80557c:	10800044 	addi	r2,r2,1
  805580:	41000015 	stw	r4,0(r8)
  805584:	44400115 	stw	r17,4(r8)
  805588:	d8c02015 	stw	r3,128(sp)
  80558c:	d8801f15 	stw	r2,124(sp)
  805590:	010001c4 	movi	r4,7
  805594:	20bfd716 	blt	r4,r2,8054f4 <__alt_mem_onchip_mem+0xff7854f4>
  805598:	42000204 	addi	r8,r8,8
  80559c:	003fdd06 	br	805514 <__alt_mem_onchip_mem+0xff785514>
  8055a0:	d9002c17 	ldw	r4,176(sp)
  8055a4:	d9801e04 	addi	r6,sp,120
  8055a8:	b80b883a 	mov	r5,r23
  8055ac:	0809bb80 	call	809bb8 <__sprint_r>
  8055b0:	1039ed1e 	bne	r2,zero,803d68 <__alt_mem_onchip_mem+0xff783d68>
  8055b4:	d8802617 	ldw	r2,152(sp)
  8055b8:	d8c02017 	ldw	r3,128(sp)
  8055bc:	da000404 	addi	r8,sp,16
  8055c0:	003e1006 	br	804e04 <__alt_mem_onchip_mem+0xff784e04>
  8055c4:	00800044 	movi	r2,1
  8055c8:	10803fcc 	andi	r2,r2,255
  8055cc:	00c00044 	movi	r3,1
  8055d0:	10fa3526 	beq	r2,r3,803ea8 <__alt_mem_onchip_mem+0xff783ea8>
  8055d4:	00c00084 	movi	r3,2
  8055d8:	10fbcb26 	beq	r2,r3,804508 <__alt_mem_onchip_mem+0xff784508>
  8055dc:	003a8f06 	br	80401c <__alt_mem_onchip_mem+0xff78401c>
  8055e0:	01002074 	movhi	r4,129
  8055e4:	210ba784 	addi	r4,r4,11934
  8055e8:	d9003515 	stw	r4,212(sp)
  8055ec:	003b7606 	br	8043c8 <__alt_mem_onchip_mem+0xff7843c8>
  8055f0:	d8802917 	ldw	r2,164(sp)
  8055f4:	00c00184 	movi	r3,6
  8055f8:	1880012e 	bgeu	r3,r2,805600 <___vfprintf_internal_r+0x1ca0>
  8055fc:	1805883a 	mov	r2,r3
  805600:	d8802e15 	stw	r2,184(sp)
  805604:	1000ef16 	blt	r2,zero,8059c4 <___vfprintf_internal_r+0x2064>
  805608:	04002074 	movhi	r16,129
  80560c:	d8802a15 	stw	r2,168(sp)
  805610:	dcc02d15 	stw	r19,180(sp)
  805614:	d8002915 	stw	zero,164(sp)
  805618:	d8003215 	stw	zero,200(sp)
  80561c:	840ba104 	addi	r16,r16,11908
  805620:	0039883a 	mov	fp,zero
  805624:	003aa206 	br	8040b0 <__alt_mem_onchip_mem+0xff7840b0>
  805628:	0021883a 	mov	r16,zero
  80562c:	003e0706 	br	804e4c <__alt_mem_onchip_mem+0xff784e4c>
  805630:	d9002c17 	ldw	r4,176(sp)
  805634:	d9801e04 	addi	r6,sp,120
  805638:	b80b883a 	mov	r5,r23
  80563c:	0809bb80 	call	809bb8 <__sprint_r>
  805640:	1039c91e 	bne	r2,zero,803d68 <__alt_mem_onchip_mem+0xff783d68>
  805644:	d8802617 	ldw	r2,152(sp)
  805648:	d9403317 	ldw	r5,204(sp)
  80564c:	d8c02017 	ldw	r3,128(sp)
  805650:	da000404 	addi	r8,sp,16
  805654:	2885c83a 	sub	r2,r5,r2
  805658:	003dfb06 	br	804e48 <__alt_mem_onchip_mem+0xff784e48>
  80565c:	9080004c 	andi	r2,r18,1
  805660:	103e8f1e 	bne	r2,zero,8050a0 <__alt_mem_onchip_mem+0xff7850a0>
  805664:	d8802117 	ldw	r2,132(sp)
  805668:	003e9e06 	br	8050e4 <__alt_mem_onchip_mem+0xff7850e4>
  80566c:	1025883a 	mov	r18,r2
  805670:	0039883a 	mov	fp,zero
  805674:	00800084 	movi	r2,2
  805678:	003fd306 	br	8055c8 <__alt_mem_onchip_mem+0xff7855c8>
  80567c:	07000b44 	movi	fp,45
  805680:	df002785 	stb	fp,158(sp)
  805684:	003a4006 	br	803f88 <__alt_mem_onchip_mem+0xff783f88>
  805688:	00c00b44 	movi	r3,45
  80568c:	d8c02785 	stb	r3,158(sp)
  805690:	d8802a15 	stw	r2,168(sp)
  805694:	dc802b17 	ldw	r18,172(sp)
  805698:	d8002915 	stw	zero,164(sp)
  80569c:	07000b44 	movi	fp,45
  8056a0:	003a8006 	br	8040a4 <__alt_mem_onchip_mem+0xff7840a4>
  8056a4:	04002074 	movhi	r16,129
  8056a8:	840b9604 	addi	r16,r16,11864
  8056ac:	003f4706 	br	8053cc <__alt_mem_onchip_mem+0xff7853cc>
  8056b0:	d8c02d17 	ldw	r3,180(sp)
  8056b4:	d9002f17 	ldw	r4,188(sp)
  8056b8:	18800017 	ldw	r2,0(r3)
  8056bc:	18c00104 	addi	r3,r3,4
  8056c0:	d8c02d15 	stw	r3,180(sp)
  8056c4:	11000015 	stw	r4,0(r2)
  8056c8:	0038dd06 	br	803a40 <__alt_mem_onchip_mem+0xff783a40>
  8056cc:	dd802617 	ldw	r22,152(sp)
  8056d0:	00bfff44 	movi	r2,-3
  8056d4:	b0801c16 	blt	r22,r2,805748 <___vfprintf_internal_r+0x1de8>
  8056d8:	d9402917 	ldw	r5,164(sp)
  8056dc:	2d801a16 	blt	r5,r22,805748 <___vfprintf_internal_r+0x1de8>
  8056e0:	dd803215 	stw	r22,200(sp)
  8056e4:	003e8906 	br	80510c <__alt_mem_onchip_mem+0xff78510c>
  8056e8:	01002074 	movhi	r4,129
  8056ec:	210ba384 	addi	r4,r4,11918
  8056f0:	d9002b15 	stw	r4,172(sp)
  8056f4:	003c9106 	br	80493c <__alt_mem_onchip_mem+0xff78493c>
  8056f8:	e005883a 	mov	r2,fp
  8056fc:	003e7906 	br	8050e4 <__alt_mem_onchip_mem+0xff7850e4>
  805700:	d9402917 	ldw	r5,164(sp)
  805704:	df002783 	ldbu	fp,158(sp)
  805708:	dcc02d15 	stw	r19,180(sp)
  80570c:	d9402a15 	stw	r5,168(sp)
  805710:	d9402e15 	stw	r5,184(sp)
  805714:	d8002915 	stw	zero,164(sp)
  805718:	d8003215 	stw	zero,200(sp)
  80571c:	003a5d06 	br	804094 <__alt_mem_onchip_mem+0xff784094>
  805720:	9080004c 	andi	r2,r18,1
  805724:	0039883a 	mov	fp,zero
  805728:	10000426 	beq	r2,zero,80573c <___vfprintf_internal_r+0x1ddc>
  80572c:	00800c04 	movi	r2,48
  805730:	dc001dc4 	addi	r16,sp,119
  805734:	d8801dc5 	stb	r2,119(sp)
  805738:	003b8006 	br	80453c <__alt_mem_onchip_mem+0xff78453c>
  80573c:	d8002e15 	stw	zero,184(sp)
  805740:	dc001e04 	addi	r16,sp,120
  805744:	003a4d06 	br	80407c <__alt_mem_onchip_mem+0xff78407c>
  805748:	8c7fff84 	addi	r17,r17,-2
  80574c:	b5bfffc4 	addi	r22,r22,-1
  805750:	dd802615 	stw	r22,152(sp)
  805754:	dc4022c5 	stb	r17,139(sp)
  805758:	b000bf16 	blt	r22,zero,805a58 <___vfprintf_internal_r+0x20f8>
  80575c:	00800ac4 	movi	r2,43
  805760:	d8802305 	stb	r2,140(sp)
  805764:	00800244 	movi	r2,9
  805768:	15807016 	blt	r2,r22,80592c <___vfprintf_internal_r+0x1fcc>
  80576c:	00800c04 	movi	r2,48
  805770:	b5800c04 	addi	r22,r22,48
  805774:	d8802345 	stb	r2,141(sp)
  805778:	dd802385 	stb	r22,142(sp)
  80577c:	d88023c4 	addi	r2,sp,143
  805780:	df0022c4 	addi	fp,sp,139
  805784:	d8c03317 	ldw	r3,204(sp)
  805788:	1739c83a 	sub	fp,r2,fp
  80578c:	d9003317 	ldw	r4,204(sp)
  805790:	e0c7883a 	add	r3,fp,r3
  805794:	df003a15 	stw	fp,232(sp)
  805798:	d8c02e15 	stw	r3,184(sp)
  80579c:	00800044 	movi	r2,1
  8057a0:	1100b30e 	bge	r2,r4,805a70 <___vfprintf_internal_r+0x2110>
  8057a4:	d8c02e17 	ldw	r3,184(sp)
  8057a8:	18c00044 	addi	r3,r3,1
  8057ac:	d8c02e15 	stw	r3,184(sp)
  8057b0:	1805883a 	mov	r2,r3
  8057b4:	1800ac16 	blt	r3,zero,805a68 <___vfprintf_internal_r+0x2108>
  8057b8:	d8003215 	stw	zero,200(sp)
  8057bc:	003e5d06 	br	805134 <__alt_mem_onchip_mem+0xff785134>
  8057c0:	d9002c17 	ldw	r4,176(sp)
  8057c4:	d9801e04 	addi	r6,sp,120
  8057c8:	b80b883a 	mov	r5,r23
  8057cc:	0809bb80 	call	809bb8 <__sprint_r>
  8057d0:	1039651e 	bne	r2,zero,803d68 <__alt_mem_onchip_mem+0xff783d68>
  8057d4:	dc402617 	ldw	r17,152(sp)
  8057d8:	d8c02017 	ldw	r3,128(sp)
  8057dc:	d8801f17 	ldw	r2,124(sp)
  8057e0:	da000404 	addi	r8,sp,16
  8057e4:	003ed606 	br	805340 <__alt_mem_onchip_mem+0xff785340>
  8057e8:	582b883a 	mov	r21,r11
  8057ec:	d8002915 	stw	zero,164(sp)
  8057f0:	0038bd06 	br	803ae8 <__alt_mem_onchip_mem+0xff783ae8>
  8057f4:	d8802917 	ldw	r2,164(sp)
  8057f8:	103e071e 	bne	r2,zero,805018 <__alt_mem_onchip_mem+0xff785018>
  8057fc:	dc002915 	stw	r16,164(sp)
  805800:	003e0506 	br	805018 <__alt_mem_onchip_mem+0xff785018>
  805804:	d9002917 	ldw	r4,164(sp)
  805808:	20c00044 	addi	r3,r4,1
  80580c:	003e0f06 	br	80504c <__alt_mem_onchip_mem+0xff78504c>
  805810:	01400184 	movi	r5,6
  805814:	d9402915 	stw	r5,164(sp)
  805818:	003dff06 	br	805018 <__alt_mem_onchip_mem+0xff785018>
  80581c:	d8802104 	addi	r2,sp,132
  805820:	d8800315 	stw	r2,12(sp)
  805824:	d8802504 	addi	r2,sp,148
  805828:	d8800215 	stw	r2,8(sp)
  80582c:	d8802604 	addi	r2,sp,152
  805830:	d8800115 	stw	r2,4(sp)
  805834:	d8802917 	ldw	r2,164(sp)
  805838:	d9403617 	ldw	r5,216(sp)
  80583c:	d9002c17 	ldw	r4,176(sp)
  805840:	d8800015 	stw	r2,0(sp)
  805844:	01c000c4 	movi	r7,3
  805848:	980d883a 	mov	r6,r19
  80584c:	da003d15 	stw	r8,244(sp)
  805850:	08060380 	call	806038 <_dtoa_r>
  805854:	d8c02917 	ldw	r3,164(sp)
  805858:	da003d17 	ldw	r8,244(sp)
  80585c:	1021883a 	mov	r16,r2
  805860:	10f9883a 	add	fp,r2,r3
  805864:	81000007 	ldb	r4,0(r16)
  805868:	00800c04 	movi	r2,48
  80586c:	20805e26 	beq	r4,r2,8059e8 <___vfprintf_internal_r+0x2088>
  805870:	d8c02617 	ldw	r3,152(sp)
  805874:	e0f9883a 	add	fp,fp,r3
  805878:	003e0a06 	br	8050a4 <__alt_mem_onchip_mem+0xff7850a4>
  80587c:	00c00b44 	movi	r3,45
  805880:	24e0003c 	xorhi	r19,r4,32768
  805884:	d8c02a05 	stb	r3,168(sp)
  805888:	003de906 	br	805030 <__alt_mem_onchip_mem+0xff785030>
  80588c:	d8c03217 	ldw	r3,200(sp)
  805890:	00c07a0e 	bge	zero,r3,805a7c <___vfprintf_internal_r+0x211c>
  805894:	00800044 	movi	r2,1
  805898:	d9003317 	ldw	r4,204(sp)
  80589c:	1105883a 	add	r2,r2,r4
  8058a0:	d8802e15 	stw	r2,184(sp)
  8058a4:	10004e16 	blt	r2,zero,8059e0 <___vfprintf_internal_r+0x2080>
  8058a8:	044019c4 	movi	r17,103
  8058ac:	003e2106 	br	805134 <__alt_mem_onchip_mem+0xff785134>
  8058b0:	d9002917 	ldw	r4,164(sp)
  8058b4:	d8802104 	addi	r2,sp,132
  8058b8:	d8800315 	stw	r2,12(sp)
  8058bc:	d9000015 	stw	r4,0(sp)
  8058c0:	d8802504 	addi	r2,sp,148
  8058c4:	d9403617 	ldw	r5,216(sp)
  8058c8:	d9002c17 	ldw	r4,176(sp)
  8058cc:	d8800215 	stw	r2,8(sp)
  8058d0:	d8802604 	addi	r2,sp,152
  8058d4:	d8800115 	stw	r2,4(sp)
  8058d8:	01c000c4 	movi	r7,3
  8058dc:	980d883a 	mov	r6,r19
  8058e0:	da003d15 	stw	r8,244(sp)
  8058e4:	08060380 	call	806038 <_dtoa_r>
  8058e8:	d8c02917 	ldw	r3,164(sp)
  8058ec:	da003d17 	ldw	r8,244(sp)
  8058f0:	1021883a 	mov	r16,r2
  8058f4:	00801184 	movi	r2,70
  8058f8:	80f9883a 	add	fp,r16,r3
  8058fc:	88bfd926 	beq	r17,r2,805864 <__alt_mem_onchip_mem+0xff785864>
  805900:	003de806 	br	8050a4 <__alt_mem_onchip_mem+0xff7850a4>
  805904:	d9002917 	ldw	r4,164(sp)
  805908:	00c04d0e 	bge	zero,r3,805a40 <___vfprintf_internal_r+0x20e0>
  80590c:	2000441e 	bne	r4,zero,805a20 <___vfprintf_internal_r+0x20c0>
  805910:	9480004c 	andi	r18,r18,1
  805914:	9000421e 	bne	r18,zero,805a20 <___vfprintf_internal_r+0x20c0>
  805918:	1805883a 	mov	r2,r3
  80591c:	18007016 	blt	r3,zero,805ae0 <___vfprintf_internal_r+0x2180>
  805920:	d8c03217 	ldw	r3,200(sp)
  805924:	d8c02e15 	stw	r3,184(sp)
  805928:	003e0206 	br	805134 <__alt_mem_onchip_mem+0xff785134>
  80592c:	df0022c4 	addi	fp,sp,139
  805930:	dc002915 	stw	r16,164(sp)
  805934:	4027883a 	mov	r19,r8
  805938:	e021883a 	mov	r16,fp
  80593c:	b009883a 	mov	r4,r22
  805940:	01400284 	movi	r5,10
  805944:	080c2440 	call	80c244 <__modsi3>
  805948:	10800c04 	addi	r2,r2,48
  80594c:	843fffc4 	addi	r16,r16,-1
  805950:	b009883a 	mov	r4,r22
  805954:	01400284 	movi	r5,10
  805958:	80800005 	stb	r2,0(r16)
  80595c:	080c1c00 	call	80c1c0 <__divsi3>
  805960:	102d883a 	mov	r22,r2
  805964:	00800244 	movi	r2,9
  805968:	15bff416 	blt	r2,r22,80593c <__alt_mem_onchip_mem+0xff78593c>
  80596c:	9811883a 	mov	r8,r19
  805970:	b0800c04 	addi	r2,r22,48
  805974:	8027883a 	mov	r19,r16
  805978:	997fffc4 	addi	r5,r19,-1
  80597c:	98bfffc5 	stb	r2,-1(r19)
  805980:	dc002917 	ldw	r16,164(sp)
  805984:	2f006a2e 	bgeu	r5,fp,805b30 <___vfprintf_internal_r+0x21d0>
  805988:	d9c02384 	addi	r7,sp,142
  80598c:	3ccfc83a 	sub	r7,r7,r19
  805990:	d9002344 	addi	r4,sp,141
  805994:	e1cf883a 	add	r7,fp,r7
  805998:	00000106 	br	8059a0 <___vfprintf_internal_r+0x2040>
  80599c:	28800003 	ldbu	r2,0(r5)
  8059a0:	20800005 	stb	r2,0(r4)
  8059a4:	21000044 	addi	r4,r4,1
  8059a8:	29400044 	addi	r5,r5,1
  8059ac:	393ffb1e 	bne	r7,r4,80599c <__alt_mem_onchip_mem+0xff78599c>
  8059b0:	d8802304 	addi	r2,sp,140
  8059b4:	14c5c83a 	sub	r2,r2,r19
  8059b8:	d8c02344 	addi	r3,sp,141
  8059bc:	1885883a 	add	r2,r3,r2
  8059c0:	003f7006 	br	805784 <__alt_mem_onchip_mem+0xff785784>
  8059c4:	0005883a 	mov	r2,zero
  8059c8:	003f0f06 	br	805608 <__alt_mem_onchip_mem+0xff785608>
  8059cc:	d8c03217 	ldw	r3,200(sp)
  8059d0:	18c00044 	addi	r3,r3,1
  8059d4:	d8c02e15 	stw	r3,184(sp)
  8059d8:	1805883a 	mov	r2,r3
  8059dc:	183fb20e 	bge	r3,zero,8058a8 <__alt_mem_onchip_mem+0xff7858a8>
  8059e0:	0005883a 	mov	r2,zero
  8059e4:	003fb006 	br	8058a8 <__alt_mem_onchip_mem+0xff7858a8>
  8059e8:	d9003617 	ldw	r4,216(sp)
  8059ec:	000d883a 	mov	r6,zero
  8059f0:	000f883a 	mov	r7,zero
  8059f4:	980b883a 	mov	r5,r19
  8059f8:	d8c03c15 	stw	r3,240(sp)
  8059fc:	da003d15 	stw	r8,244(sp)
  805a00:	080d5080 	call	80d508 <__eqdf2>
  805a04:	d8c03c17 	ldw	r3,240(sp)
  805a08:	da003d17 	ldw	r8,244(sp)
  805a0c:	103f9826 	beq	r2,zero,805870 <__alt_mem_onchip_mem+0xff785870>
  805a10:	00800044 	movi	r2,1
  805a14:	10c7c83a 	sub	r3,r2,r3
  805a18:	d8c02615 	stw	r3,152(sp)
  805a1c:	003f9506 	br	805874 <__alt_mem_onchip_mem+0xff785874>
  805a20:	d9002917 	ldw	r4,164(sp)
  805a24:	d8c03217 	ldw	r3,200(sp)
  805a28:	20800044 	addi	r2,r4,1
  805a2c:	1885883a 	add	r2,r3,r2
  805a30:	d8802e15 	stw	r2,184(sp)
  805a34:	103dbf0e 	bge	r2,zero,805134 <__alt_mem_onchip_mem+0xff785134>
  805a38:	0005883a 	mov	r2,zero
  805a3c:	003dbd06 	br	805134 <__alt_mem_onchip_mem+0xff785134>
  805a40:	2000211e 	bne	r4,zero,805ac8 <___vfprintf_internal_r+0x2168>
  805a44:	9480004c 	andi	r18,r18,1
  805a48:	90001f1e 	bne	r18,zero,805ac8 <___vfprintf_internal_r+0x2168>
  805a4c:	00800044 	movi	r2,1
  805a50:	d8802e15 	stw	r2,184(sp)
  805a54:	003db706 	br	805134 <__alt_mem_onchip_mem+0xff785134>
  805a58:	00800b44 	movi	r2,45
  805a5c:	05adc83a 	sub	r22,zero,r22
  805a60:	d8802305 	stb	r2,140(sp)
  805a64:	003f3f06 	br	805764 <__alt_mem_onchip_mem+0xff785764>
  805a68:	0005883a 	mov	r2,zero
  805a6c:	003f5206 	br	8057b8 <__alt_mem_onchip_mem+0xff7857b8>
  805a70:	90a4703a 	and	r18,r18,r2
  805a74:	903f4e26 	beq	r18,zero,8057b0 <__alt_mem_onchip_mem+0xff7857b0>
  805a78:	003f4a06 	br	8057a4 <__alt_mem_onchip_mem+0xff7857a4>
  805a7c:	00800084 	movi	r2,2
  805a80:	10c5c83a 	sub	r2,r2,r3
  805a84:	003f8406 	br	805898 <__alt_mem_onchip_mem+0xff785898>
  805a88:	d8802d17 	ldw	r2,180(sp)
  805a8c:	d9002d17 	ldw	r4,180(sp)
  805a90:	ac400043 	ldbu	r17,1(r21)
  805a94:	10800017 	ldw	r2,0(r2)
  805a98:	582b883a 	mov	r21,r11
  805a9c:	d8802915 	stw	r2,164(sp)
  805aa0:	20800104 	addi	r2,r4,4
  805aa4:	d9002917 	ldw	r4,164(sp)
  805aa8:	d8802d15 	stw	r2,180(sp)
  805aac:	203e7a0e 	bge	r4,zero,805498 <__alt_mem_onchip_mem+0xff785498>
  805ab0:	8c403fcc 	andi	r17,r17,255
  805ab4:	00bfffc4 	movi	r2,-1
  805ab8:	8c40201c 	xori	r17,r17,128
  805abc:	d8802915 	stw	r2,164(sp)
  805ac0:	8c7fe004 	addi	r17,r17,-128
  805ac4:	00380706 	br	803ae4 <__alt_mem_onchip_mem+0xff783ae4>
  805ac8:	d8c02917 	ldw	r3,164(sp)
  805acc:	18c00084 	addi	r3,r3,2
  805ad0:	d8c02e15 	stw	r3,184(sp)
  805ad4:	1805883a 	mov	r2,r3
  805ad8:	183d960e 	bge	r3,zero,805134 <__alt_mem_onchip_mem+0xff785134>
  805adc:	003fd606 	br	805a38 <__alt_mem_onchip_mem+0xff785a38>
  805ae0:	0005883a 	mov	r2,zero
  805ae4:	003f8e06 	br	805920 <__alt_mem_onchip_mem+0xff785920>
  805ae8:	9080004c 	andi	r2,r18,1
  805aec:	103f811e 	bne	r2,zero,8058f4 <__alt_mem_onchip_mem+0xff7858f4>
  805af0:	d8802117 	ldw	r2,132(sp)
  805af4:	1405c83a 	sub	r2,r2,r16
  805af8:	d8803315 	stw	r2,204(sp)
  805afc:	b47ef326 	beq	r22,r17,8056cc <__alt_mem_onchip_mem+0xff7856cc>
  805b00:	dd802617 	ldw	r22,152(sp)
  805b04:	003f1106 	br	80574c <__alt_mem_onchip_mem+0xff78574c>
  805b08:	d9c02785 	stb	r7,158(sp)
  805b0c:	00390406 	br	803f20 <__alt_mem_onchip_mem+0xff783f20>
  805b10:	d9c02785 	stb	r7,158(sp)
  805b14:	0038d306 	br	803e64 <__alt_mem_onchip_mem+0xff783e64>
  805b18:	d9c02785 	stb	r7,158(sp)
  805b1c:	003a6106 	br	8044a4 <__alt_mem_onchip_mem+0xff7844a4>
  805b20:	d9c02785 	stb	r7,158(sp)
  805b24:	003af806 	br	804708 <__alt_mem_onchip_mem+0xff784708>
  805b28:	0005883a 	mov	r2,zero
  805b2c:	003d7e06 	br	805128 <__alt_mem_onchip_mem+0xff785128>
  805b30:	d8802344 	addi	r2,sp,141
  805b34:	003f1306 	br	805784 <__alt_mem_onchip_mem+0xff785784>
  805b38:	d9c02785 	stb	r7,158(sp)
  805b3c:	00392306 	br	803fcc <__alt_mem_onchip_mem+0xff783fcc>
  805b40:	d9c02785 	stb	r7,158(sp)
  805b44:	003aa906 	br	8045ec <__alt_mem_onchip_mem+0xff7845ec>
  805b48:	d9c02785 	stb	r7,158(sp)
  805b4c:	003a3d06 	br	804444 <__alt_mem_onchip_mem+0xff784444>
  805b50:	d9c02785 	stb	r7,158(sp)
  805b54:	003aca06 	br	804680 <__alt_mem_onchip_mem+0xff784680>

00805b58 <__vfprintf_internal>:
  805b58:	00802074 	movhi	r2,129
  805b5c:	10942504 	addi	r2,r2,20628
  805b60:	300f883a 	mov	r7,r6
  805b64:	280d883a 	mov	r6,r5
  805b68:	200b883a 	mov	r5,r4
  805b6c:	11000017 	ldw	r4,0(r2)
  805b70:	08039601 	jmpi	803960 <___vfprintf_internal_r>

00805b74 <__sbprintf>:
  805b74:	2880030b 	ldhu	r2,12(r5)
  805b78:	2ac01917 	ldw	r11,100(r5)
  805b7c:	2a80038b 	ldhu	r10,14(r5)
  805b80:	2a400717 	ldw	r9,28(r5)
  805b84:	2a000917 	ldw	r8,36(r5)
  805b88:	defee204 	addi	sp,sp,-1144
  805b8c:	00c10004 	movi	r3,1024
  805b90:	dc011a15 	stw	r16,1128(sp)
  805b94:	10bfff4c 	andi	r2,r2,65533
  805b98:	2821883a 	mov	r16,r5
  805b9c:	d8cb883a 	add	r5,sp,r3
  805ba0:	dc811c15 	stw	r18,1136(sp)
  805ba4:	dc411b15 	stw	r17,1132(sp)
  805ba8:	dfc11d15 	stw	ra,1140(sp)
  805bac:	2025883a 	mov	r18,r4
  805bb0:	d881030d 	sth	r2,1036(sp)
  805bb4:	dac11915 	stw	r11,1124(sp)
  805bb8:	da81038d 	sth	r10,1038(sp)
  805bbc:	da410715 	stw	r9,1052(sp)
  805bc0:	da010915 	stw	r8,1060(sp)
  805bc4:	dec10015 	stw	sp,1024(sp)
  805bc8:	dec10415 	stw	sp,1040(sp)
  805bcc:	d8c10215 	stw	r3,1032(sp)
  805bd0:	d8c10515 	stw	r3,1044(sp)
  805bd4:	d8010615 	stw	zero,1048(sp)
  805bd8:	08039600 	call	803960 <___vfprintf_internal_r>
  805bdc:	1023883a 	mov	r17,r2
  805be0:	10000416 	blt	r2,zero,805bf4 <__sbprintf+0x80>
  805be4:	d9410004 	addi	r5,sp,1024
  805be8:	9009883a 	mov	r4,r18
  805bec:	08012ec0 	call	8012ec <_fflush_r>
  805bf0:	10000d1e 	bne	r2,zero,805c28 <__sbprintf+0xb4>
  805bf4:	d881030b 	ldhu	r2,1036(sp)
  805bf8:	1080100c 	andi	r2,r2,64
  805bfc:	10000326 	beq	r2,zero,805c0c <__sbprintf+0x98>
  805c00:	8080030b 	ldhu	r2,12(r16)
  805c04:	10801014 	ori	r2,r2,64
  805c08:	8080030d 	sth	r2,12(r16)
  805c0c:	8805883a 	mov	r2,r17
  805c10:	dfc11d17 	ldw	ra,1140(sp)
  805c14:	dc811c17 	ldw	r18,1136(sp)
  805c18:	dc411b17 	ldw	r17,1132(sp)
  805c1c:	dc011a17 	ldw	r16,1128(sp)
  805c20:	dec11e04 	addi	sp,sp,1144
  805c24:	f800283a 	ret
  805c28:	047fffc4 	movi	r17,-1
  805c2c:	003ff106 	br	805bf4 <__alt_mem_onchip_mem+0xff785bf4>

00805c30 <_write_r>:
  805c30:	defffd04 	addi	sp,sp,-12
  805c34:	2805883a 	mov	r2,r5
  805c38:	dc000015 	stw	r16,0(sp)
  805c3c:	04002074 	movhi	r16,129
  805c40:	dc400115 	stw	r17,4(sp)
  805c44:	300b883a 	mov	r5,r6
  805c48:	841b8704 	addi	r16,r16,28188
  805c4c:	2023883a 	mov	r17,r4
  805c50:	380d883a 	mov	r6,r7
  805c54:	1009883a 	mov	r4,r2
  805c58:	dfc00215 	stw	ra,8(sp)
  805c5c:	80000015 	stw	zero,0(r16)
  805c60:	080f8cc0 	call	80f8cc <write>
  805c64:	00ffffc4 	movi	r3,-1
  805c68:	10c00526 	beq	r2,r3,805c80 <_write_r+0x50>
  805c6c:	dfc00217 	ldw	ra,8(sp)
  805c70:	dc400117 	ldw	r17,4(sp)
  805c74:	dc000017 	ldw	r16,0(sp)
  805c78:	dec00304 	addi	sp,sp,12
  805c7c:	f800283a 	ret
  805c80:	80c00017 	ldw	r3,0(r16)
  805c84:	183ff926 	beq	r3,zero,805c6c <__alt_mem_onchip_mem+0xff785c6c>
  805c88:	88c00015 	stw	r3,0(r17)
  805c8c:	003ff706 	br	805c6c <__alt_mem_onchip_mem+0xff785c6c>

00805c90 <__swsetup_r>:
  805c90:	00802074 	movhi	r2,129
  805c94:	defffd04 	addi	sp,sp,-12
  805c98:	10942504 	addi	r2,r2,20628
  805c9c:	dc400115 	stw	r17,4(sp)
  805ca0:	2023883a 	mov	r17,r4
  805ca4:	11000017 	ldw	r4,0(r2)
  805ca8:	dc000015 	stw	r16,0(sp)
  805cac:	dfc00215 	stw	ra,8(sp)
  805cb0:	2821883a 	mov	r16,r5
  805cb4:	20000226 	beq	r4,zero,805cc0 <__swsetup_r+0x30>
  805cb8:	20800e17 	ldw	r2,56(r4)
  805cbc:	10003126 	beq	r2,zero,805d84 <__swsetup_r+0xf4>
  805cc0:	8080030b 	ldhu	r2,12(r16)
  805cc4:	10c0020c 	andi	r3,r2,8
  805cc8:	1009883a 	mov	r4,r2
  805ccc:	18000f26 	beq	r3,zero,805d0c <__swsetup_r+0x7c>
  805cd0:	80c00417 	ldw	r3,16(r16)
  805cd4:	18001526 	beq	r3,zero,805d2c <__swsetup_r+0x9c>
  805cd8:	1100004c 	andi	r4,r2,1
  805cdc:	20001c1e 	bne	r4,zero,805d50 <__swsetup_r+0xc0>
  805ce0:	1080008c 	andi	r2,r2,2
  805ce4:	1000291e 	bne	r2,zero,805d8c <__swsetup_r+0xfc>
  805ce8:	80800517 	ldw	r2,20(r16)
  805cec:	80800215 	stw	r2,8(r16)
  805cf0:	18001c26 	beq	r3,zero,805d64 <__swsetup_r+0xd4>
  805cf4:	0005883a 	mov	r2,zero
  805cf8:	dfc00217 	ldw	ra,8(sp)
  805cfc:	dc400117 	ldw	r17,4(sp)
  805d00:	dc000017 	ldw	r16,0(sp)
  805d04:	dec00304 	addi	sp,sp,12
  805d08:	f800283a 	ret
  805d0c:	2080040c 	andi	r2,r4,16
  805d10:	10002e26 	beq	r2,zero,805dcc <__swsetup_r+0x13c>
  805d14:	2080010c 	andi	r2,r4,4
  805d18:	10001e1e 	bne	r2,zero,805d94 <__swsetup_r+0x104>
  805d1c:	80c00417 	ldw	r3,16(r16)
  805d20:	20800214 	ori	r2,r4,8
  805d24:	8080030d 	sth	r2,12(r16)
  805d28:	183feb1e 	bne	r3,zero,805cd8 <__alt_mem_onchip_mem+0xff785cd8>
  805d2c:	1100a00c 	andi	r4,r2,640
  805d30:	01408004 	movi	r5,512
  805d34:	217fe826 	beq	r4,r5,805cd8 <__alt_mem_onchip_mem+0xff785cd8>
  805d38:	800b883a 	mov	r5,r16
  805d3c:	8809883a 	mov	r4,r17
  805d40:	08025000 	call	802500 <__smakebuf_r>
  805d44:	8080030b 	ldhu	r2,12(r16)
  805d48:	80c00417 	ldw	r3,16(r16)
  805d4c:	003fe206 	br	805cd8 <__alt_mem_onchip_mem+0xff785cd8>
  805d50:	80800517 	ldw	r2,20(r16)
  805d54:	80000215 	stw	zero,8(r16)
  805d58:	0085c83a 	sub	r2,zero,r2
  805d5c:	80800615 	stw	r2,24(r16)
  805d60:	183fe41e 	bne	r3,zero,805cf4 <__alt_mem_onchip_mem+0xff785cf4>
  805d64:	80c0030b 	ldhu	r3,12(r16)
  805d68:	0005883a 	mov	r2,zero
  805d6c:	1900200c 	andi	r4,r3,128
  805d70:	203fe126 	beq	r4,zero,805cf8 <__alt_mem_onchip_mem+0xff785cf8>
  805d74:	18c01014 	ori	r3,r3,64
  805d78:	80c0030d 	sth	r3,12(r16)
  805d7c:	00bfffc4 	movi	r2,-1
  805d80:	003fdd06 	br	805cf8 <__alt_mem_onchip_mem+0xff785cf8>
  805d84:	08017c00 	call	8017c0 <__sinit>
  805d88:	003fcd06 	br	805cc0 <__alt_mem_onchip_mem+0xff785cc0>
  805d8c:	0005883a 	mov	r2,zero
  805d90:	003fd606 	br	805cec <__alt_mem_onchip_mem+0xff785cec>
  805d94:	81400c17 	ldw	r5,48(r16)
  805d98:	28000626 	beq	r5,zero,805db4 <__swsetup_r+0x124>
  805d9c:	80801004 	addi	r2,r16,64
  805da0:	28800326 	beq	r5,r2,805db0 <__swsetup_r+0x120>
  805da4:	8809883a 	mov	r4,r17
  805da8:	0801a8c0 	call	801a8c <_free_r>
  805dac:	8100030b 	ldhu	r4,12(r16)
  805db0:	80000c15 	stw	zero,48(r16)
  805db4:	80c00417 	ldw	r3,16(r16)
  805db8:	00bff6c4 	movi	r2,-37
  805dbc:	1108703a 	and	r4,r2,r4
  805dc0:	80000115 	stw	zero,4(r16)
  805dc4:	80c00015 	stw	r3,0(r16)
  805dc8:	003fd506 	br	805d20 <__alt_mem_onchip_mem+0xff785d20>
  805dcc:	00800244 	movi	r2,9
  805dd0:	88800015 	stw	r2,0(r17)
  805dd4:	20801014 	ori	r2,r4,64
  805dd8:	8080030d 	sth	r2,12(r16)
  805ddc:	00bfffc4 	movi	r2,-1
  805de0:	003fc506 	br	805cf8 <__alt_mem_onchip_mem+0xff785cf8>

00805de4 <_close_r>:
  805de4:	defffd04 	addi	sp,sp,-12
  805de8:	dc000015 	stw	r16,0(sp)
  805dec:	04002074 	movhi	r16,129
  805df0:	dc400115 	stw	r17,4(sp)
  805df4:	841b8704 	addi	r16,r16,28188
  805df8:	2023883a 	mov	r17,r4
  805dfc:	2809883a 	mov	r4,r5
  805e00:	dfc00215 	stw	ra,8(sp)
  805e04:	80000015 	stw	zero,0(r16)
  805e08:	080eb440 	call	80eb44 <close>
  805e0c:	00ffffc4 	movi	r3,-1
  805e10:	10c00526 	beq	r2,r3,805e28 <_close_r+0x44>
  805e14:	dfc00217 	ldw	ra,8(sp)
  805e18:	dc400117 	ldw	r17,4(sp)
  805e1c:	dc000017 	ldw	r16,0(sp)
  805e20:	dec00304 	addi	sp,sp,12
  805e24:	f800283a 	ret
  805e28:	80c00017 	ldw	r3,0(r16)
  805e2c:	183ff926 	beq	r3,zero,805e14 <__alt_mem_onchip_mem+0xff785e14>
  805e30:	88c00015 	stw	r3,0(r17)
  805e34:	003ff706 	br	805e14 <__alt_mem_onchip_mem+0xff785e14>

00805e38 <quorem>:
  805e38:	defff704 	addi	sp,sp,-36
  805e3c:	dc800215 	stw	r18,8(sp)
  805e40:	20800417 	ldw	r2,16(r4)
  805e44:	2c800417 	ldw	r18,16(r5)
  805e48:	dfc00815 	stw	ra,32(sp)
  805e4c:	ddc00715 	stw	r23,28(sp)
  805e50:	dd800615 	stw	r22,24(sp)
  805e54:	dd400515 	stw	r21,20(sp)
  805e58:	dd000415 	stw	r20,16(sp)
  805e5c:	dcc00315 	stw	r19,12(sp)
  805e60:	dc400115 	stw	r17,4(sp)
  805e64:	dc000015 	stw	r16,0(sp)
  805e68:	14807116 	blt	r2,r18,806030 <quorem+0x1f8>
  805e6c:	94bfffc4 	addi	r18,r18,-1
  805e70:	94ad883a 	add	r22,r18,r18
  805e74:	b5ad883a 	add	r22,r22,r22
  805e78:	2c400504 	addi	r17,r5,20
  805e7c:	8da9883a 	add	r20,r17,r22
  805e80:	25400504 	addi	r21,r4,20
  805e84:	282f883a 	mov	r23,r5
  805e88:	adad883a 	add	r22,r21,r22
  805e8c:	a1400017 	ldw	r5,0(r20)
  805e90:	2021883a 	mov	r16,r4
  805e94:	b1000017 	ldw	r4,0(r22)
  805e98:	29400044 	addi	r5,r5,1
  805e9c:	080c2b80 	call	80c2b8 <__udivsi3>
  805ea0:	1027883a 	mov	r19,r2
  805ea4:	10002c26 	beq	r2,zero,805f58 <quorem+0x120>
  805ea8:	a813883a 	mov	r9,r21
  805eac:	880b883a 	mov	r5,r17
  805eb0:	0009883a 	mov	r4,zero
  805eb4:	000d883a 	mov	r6,zero
  805eb8:	2a000017 	ldw	r8,0(r5)
  805ebc:	49c00017 	ldw	r7,0(r9)
  805ec0:	29400104 	addi	r5,r5,4
  805ec4:	40bfffcc 	andi	r2,r8,65535
  805ec8:	14c5383a 	mul	r2,r2,r19
  805ecc:	4010d43a 	srli	r8,r8,16
  805ed0:	38ffffcc 	andi	r3,r7,65535
  805ed4:	1105883a 	add	r2,r2,r4
  805ed8:	1008d43a 	srli	r4,r2,16
  805edc:	44d1383a 	mul	r8,r8,r19
  805ee0:	198d883a 	add	r6,r3,r6
  805ee4:	10ffffcc 	andi	r3,r2,65535
  805ee8:	30c7c83a 	sub	r3,r6,r3
  805eec:	380ed43a 	srli	r7,r7,16
  805ef0:	4105883a 	add	r2,r8,r4
  805ef4:	180dd43a 	srai	r6,r3,16
  805ef8:	113fffcc 	andi	r4,r2,65535
  805efc:	390fc83a 	sub	r7,r7,r4
  805f00:	398d883a 	add	r6,r7,r6
  805f04:	300e943a 	slli	r7,r6,16
  805f08:	18ffffcc 	andi	r3,r3,65535
  805f0c:	1008d43a 	srli	r4,r2,16
  805f10:	38ceb03a 	or	r7,r7,r3
  805f14:	49c00015 	stw	r7,0(r9)
  805f18:	300dd43a 	srai	r6,r6,16
  805f1c:	4a400104 	addi	r9,r9,4
  805f20:	a17fe52e 	bgeu	r20,r5,805eb8 <__alt_mem_onchip_mem+0xff785eb8>
  805f24:	b0800017 	ldw	r2,0(r22)
  805f28:	10000b1e 	bne	r2,zero,805f58 <quorem+0x120>
  805f2c:	b0bfff04 	addi	r2,r22,-4
  805f30:	a880082e 	bgeu	r21,r2,805f54 <quorem+0x11c>
  805f34:	b0ffff17 	ldw	r3,-4(r22)
  805f38:	18000326 	beq	r3,zero,805f48 <quorem+0x110>
  805f3c:	00000506 	br	805f54 <quorem+0x11c>
  805f40:	10c00017 	ldw	r3,0(r2)
  805f44:	1800031e 	bne	r3,zero,805f54 <quorem+0x11c>
  805f48:	10bfff04 	addi	r2,r2,-4
  805f4c:	94bfffc4 	addi	r18,r18,-1
  805f50:	a8bffb36 	bltu	r21,r2,805f40 <__alt_mem_onchip_mem+0xff785f40>
  805f54:	84800415 	stw	r18,16(r16)
  805f58:	b80b883a 	mov	r5,r23
  805f5c:	8009883a 	mov	r4,r16
  805f60:	0808b0c0 	call	808b0c <__mcmp>
  805f64:	10002616 	blt	r2,zero,806000 <quorem+0x1c8>
  805f68:	9cc00044 	addi	r19,r19,1
  805f6c:	a805883a 	mov	r2,r21
  805f70:	000b883a 	mov	r5,zero
  805f74:	11000017 	ldw	r4,0(r2)
  805f78:	89800017 	ldw	r6,0(r17)
  805f7c:	10800104 	addi	r2,r2,4
  805f80:	20ffffcc 	andi	r3,r4,65535
  805f84:	194b883a 	add	r5,r3,r5
  805f88:	30ffffcc 	andi	r3,r6,65535
  805f8c:	28c7c83a 	sub	r3,r5,r3
  805f90:	300cd43a 	srli	r6,r6,16
  805f94:	2008d43a 	srli	r4,r4,16
  805f98:	180bd43a 	srai	r5,r3,16
  805f9c:	18ffffcc 	andi	r3,r3,65535
  805fa0:	2189c83a 	sub	r4,r4,r6
  805fa4:	2149883a 	add	r4,r4,r5
  805fa8:	200c943a 	slli	r6,r4,16
  805fac:	8c400104 	addi	r17,r17,4
  805fb0:	200bd43a 	srai	r5,r4,16
  805fb4:	30c6b03a 	or	r3,r6,r3
  805fb8:	10ffff15 	stw	r3,-4(r2)
  805fbc:	a47fed2e 	bgeu	r20,r17,805f74 <__alt_mem_onchip_mem+0xff785f74>
  805fc0:	9485883a 	add	r2,r18,r18
  805fc4:	1085883a 	add	r2,r2,r2
  805fc8:	a887883a 	add	r3,r21,r2
  805fcc:	18800017 	ldw	r2,0(r3)
  805fd0:	10000b1e 	bne	r2,zero,806000 <quorem+0x1c8>
  805fd4:	18bfff04 	addi	r2,r3,-4
  805fd8:	a880082e 	bgeu	r21,r2,805ffc <quorem+0x1c4>
  805fdc:	18ffff17 	ldw	r3,-4(r3)
  805fe0:	18000326 	beq	r3,zero,805ff0 <quorem+0x1b8>
  805fe4:	00000506 	br	805ffc <quorem+0x1c4>
  805fe8:	10c00017 	ldw	r3,0(r2)
  805fec:	1800031e 	bne	r3,zero,805ffc <quorem+0x1c4>
  805ff0:	10bfff04 	addi	r2,r2,-4
  805ff4:	94bfffc4 	addi	r18,r18,-1
  805ff8:	a8bffb36 	bltu	r21,r2,805fe8 <__alt_mem_onchip_mem+0xff785fe8>
  805ffc:	84800415 	stw	r18,16(r16)
  806000:	9805883a 	mov	r2,r19
  806004:	dfc00817 	ldw	ra,32(sp)
  806008:	ddc00717 	ldw	r23,28(sp)
  80600c:	dd800617 	ldw	r22,24(sp)
  806010:	dd400517 	ldw	r21,20(sp)
  806014:	dd000417 	ldw	r20,16(sp)
  806018:	dcc00317 	ldw	r19,12(sp)
  80601c:	dc800217 	ldw	r18,8(sp)
  806020:	dc400117 	ldw	r17,4(sp)
  806024:	dc000017 	ldw	r16,0(sp)
  806028:	dec00904 	addi	sp,sp,36
  80602c:	f800283a 	ret
  806030:	0005883a 	mov	r2,zero
  806034:	003ff306 	br	806004 <__alt_mem_onchip_mem+0xff786004>

00806038 <_dtoa_r>:
  806038:	20801017 	ldw	r2,64(r4)
  80603c:	deffde04 	addi	sp,sp,-136
  806040:	df002015 	stw	fp,128(sp)
  806044:	dcc01b15 	stw	r19,108(sp)
  806048:	dc801a15 	stw	r18,104(sp)
  80604c:	dc401915 	stw	r17,100(sp)
  806050:	dc001815 	stw	r16,96(sp)
  806054:	dfc02115 	stw	ra,132(sp)
  806058:	ddc01f15 	stw	r23,124(sp)
  80605c:	dd801e15 	stw	r22,120(sp)
  806060:	dd401d15 	stw	r21,116(sp)
  806064:	dd001c15 	stw	r20,112(sp)
  806068:	d9c00315 	stw	r7,12(sp)
  80606c:	2039883a 	mov	fp,r4
  806070:	3023883a 	mov	r17,r6
  806074:	2825883a 	mov	r18,r5
  806078:	dc002417 	ldw	r16,144(sp)
  80607c:	3027883a 	mov	r19,r6
  806080:	10000826 	beq	r2,zero,8060a4 <_dtoa_r+0x6c>
  806084:	21801117 	ldw	r6,68(r4)
  806088:	00c00044 	movi	r3,1
  80608c:	100b883a 	mov	r5,r2
  806090:	1986983a 	sll	r3,r3,r6
  806094:	11800115 	stw	r6,4(r2)
  806098:	10c00215 	stw	r3,8(r2)
  80609c:	08082ec0 	call	8082ec <_Bfree>
  8060a0:	e0001015 	stw	zero,64(fp)
  8060a4:	88002e16 	blt	r17,zero,806160 <_dtoa_r+0x128>
  8060a8:	80000015 	stw	zero,0(r16)
  8060ac:	889ffc2c 	andhi	r2,r17,32752
  8060b0:	00dffc34 	movhi	r3,32752
  8060b4:	10c01c26 	beq	r2,r3,806128 <_dtoa_r+0xf0>
  8060b8:	000d883a 	mov	r6,zero
  8060bc:	000f883a 	mov	r7,zero
  8060c0:	9009883a 	mov	r4,r18
  8060c4:	980b883a 	mov	r5,r19
  8060c8:	080d5080 	call	80d508 <__eqdf2>
  8060cc:	10002b1e 	bne	r2,zero,80617c <_dtoa_r+0x144>
  8060d0:	d9c02317 	ldw	r7,140(sp)
  8060d4:	00800044 	movi	r2,1
  8060d8:	38800015 	stw	r2,0(r7)
  8060dc:	d8802517 	ldw	r2,148(sp)
  8060e0:	10019e26 	beq	r2,zero,80675c <_dtoa_r+0x724>
  8060e4:	d8c02517 	ldw	r3,148(sp)
  8060e8:	00802074 	movhi	r2,129
  8060ec:	108ba344 	addi	r2,r2,11917
  8060f0:	18800015 	stw	r2,0(r3)
  8060f4:	10bfffc4 	addi	r2,r2,-1
  8060f8:	dfc02117 	ldw	ra,132(sp)
  8060fc:	df002017 	ldw	fp,128(sp)
  806100:	ddc01f17 	ldw	r23,124(sp)
  806104:	dd801e17 	ldw	r22,120(sp)
  806108:	dd401d17 	ldw	r21,116(sp)
  80610c:	dd001c17 	ldw	r20,112(sp)
  806110:	dcc01b17 	ldw	r19,108(sp)
  806114:	dc801a17 	ldw	r18,104(sp)
  806118:	dc401917 	ldw	r17,100(sp)
  80611c:	dc001817 	ldw	r16,96(sp)
  806120:	dec02204 	addi	sp,sp,136
  806124:	f800283a 	ret
  806128:	d8c02317 	ldw	r3,140(sp)
  80612c:	0089c3c4 	movi	r2,9999
  806130:	18800015 	stw	r2,0(r3)
  806134:	90017726 	beq	r18,zero,806714 <_dtoa_r+0x6dc>
  806138:	00802074 	movhi	r2,129
  80613c:	108c4f04 	addi	r2,r2,12604
  806140:	d9002517 	ldw	r4,148(sp)
  806144:	203fec26 	beq	r4,zero,8060f8 <__alt_mem_onchip_mem+0xff7860f8>
  806148:	10c000c7 	ldb	r3,3(r2)
  80614c:	1801781e 	bne	r3,zero,806730 <_dtoa_r+0x6f8>
  806150:	10c000c4 	addi	r3,r2,3
  806154:	d9802517 	ldw	r6,148(sp)
  806158:	30c00015 	stw	r3,0(r6)
  80615c:	003fe606 	br	8060f8 <__alt_mem_onchip_mem+0xff7860f8>
  806160:	04e00034 	movhi	r19,32768
  806164:	9cffffc4 	addi	r19,r19,-1
  806168:	00800044 	movi	r2,1
  80616c:	8ce6703a 	and	r19,r17,r19
  806170:	80800015 	stw	r2,0(r16)
  806174:	9823883a 	mov	r17,r19
  806178:	003fcc06 	br	8060ac <__alt_mem_onchip_mem+0xff7860ac>
  80617c:	d8800204 	addi	r2,sp,8
  806180:	d8800015 	stw	r2,0(sp)
  806184:	d9c00104 	addi	r7,sp,4
  806188:	900b883a 	mov	r5,r18
  80618c:	980d883a 	mov	r6,r19
  806190:	e009883a 	mov	r4,fp
  806194:	8820d53a 	srli	r16,r17,20
  806198:	0808ed80 	call	808ed8 <__d2b>
  80619c:	d8800915 	stw	r2,36(sp)
  8061a0:	8001651e 	bne	r16,zero,806738 <_dtoa_r+0x700>
  8061a4:	dd800217 	ldw	r22,8(sp)
  8061a8:	dc000117 	ldw	r16,4(sp)
  8061ac:	00800804 	movi	r2,32
  8061b0:	b421883a 	add	r16,r22,r16
  8061b4:	80c10c84 	addi	r3,r16,1074
  8061b8:	10c2d10e 	bge	r2,r3,806d00 <_dtoa_r+0xcc8>
  8061bc:	00801004 	movi	r2,64
  8061c0:	81010484 	addi	r4,r16,1042
  8061c4:	10c7c83a 	sub	r3,r2,r3
  8061c8:	9108d83a 	srl	r4,r18,r4
  8061cc:	88e2983a 	sll	r17,r17,r3
  8061d0:	2448b03a 	or	r4,r4,r17
  8061d4:	080e8d00 	call	80e8d0 <__floatunsidf>
  8061d8:	017f8434 	movhi	r5,65040
  8061dc:	01800044 	movi	r6,1
  8061e0:	1009883a 	mov	r4,r2
  8061e4:	194b883a 	add	r5,r3,r5
  8061e8:	843fffc4 	addi	r16,r16,-1
  8061ec:	d9801115 	stw	r6,68(sp)
  8061f0:	000d883a 	mov	r6,zero
  8061f4:	01cffe34 	movhi	r7,16376
  8061f8:	080de780 	call	80de78 <__subdf3>
  8061fc:	0198dbf4 	movhi	r6,25455
  806200:	01cff4f4 	movhi	r7,16339
  806204:	3190d844 	addi	r6,r6,17249
  806208:	39e1e9c4 	addi	r7,r7,-30809
  80620c:	1009883a 	mov	r4,r2
  806210:	180b883a 	mov	r5,r3
  806214:	080d7600 	call	80d760 <__muldf3>
  806218:	01a2d874 	movhi	r6,35681
  80621c:	01cff1f4 	movhi	r7,16327
  806220:	31b22cc4 	addi	r6,r6,-14157
  806224:	39e28a04 	addi	r7,r7,-30168
  806228:	180b883a 	mov	r5,r3
  80622c:	1009883a 	mov	r4,r2
  806230:	080c3740 	call	80c374 <__adddf3>
  806234:	8009883a 	mov	r4,r16
  806238:	1029883a 	mov	r20,r2
  80623c:	1823883a 	mov	r17,r3
  806240:	080e7f40 	call	80e7f4 <__floatsidf>
  806244:	019427f4 	movhi	r6,20639
  806248:	01cff4f4 	movhi	r7,16339
  80624c:	319e7ec4 	addi	r6,r6,31227
  806250:	39d104c4 	addi	r7,r7,17427
  806254:	1009883a 	mov	r4,r2
  806258:	180b883a 	mov	r5,r3
  80625c:	080d7600 	call	80d760 <__muldf3>
  806260:	100d883a 	mov	r6,r2
  806264:	180f883a 	mov	r7,r3
  806268:	a009883a 	mov	r4,r20
  80626c:	880b883a 	mov	r5,r17
  806270:	080c3740 	call	80c374 <__adddf3>
  806274:	1009883a 	mov	r4,r2
  806278:	180b883a 	mov	r5,r3
  80627c:	1029883a 	mov	r20,r2
  806280:	1823883a 	mov	r17,r3
  806284:	080e7740 	call	80e774 <__fixdfsi>
  806288:	000d883a 	mov	r6,zero
  80628c:	000f883a 	mov	r7,zero
  806290:	a009883a 	mov	r4,r20
  806294:	880b883a 	mov	r5,r17
  806298:	d8800515 	stw	r2,20(sp)
  80629c:	080d66c0 	call	80d66c <__ledf2>
  8062a0:	10028716 	blt	r2,zero,806cc0 <_dtoa_r+0xc88>
  8062a4:	d8c00517 	ldw	r3,20(sp)
  8062a8:	00800584 	movi	r2,22
  8062ac:	10c27536 	bltu	r2,r3,806c84 <_dtoa_r+0xc4c>
  8062b0:	180490fa 	slli	r2,r3,3
  8062b4:	00c02074 	movhi	r3,129
  8062b8:	18cc6a04 	addi	r3,r3,12712
  8062bc:	1885883a 	add	r2,r3,r2
  8062c0:	11000017 	ldw	r4,0(r2)
  8062c4:	11400117 	ldw	r5,4(r2)
  8062c8:	900d883a 	mov	r6,r18
  8062cc:	980f883a 	mov	r7,r19
  8062d0:	080d5900 	call	80d590 <__gedf2>
  8062d4:	00828d0e 	bge	zero,r2,806d0c <_dtoa_r+0xcd4>
  8062d8:	d9000517 	ldw	r4,20(sp)
  8062dc:	d8000e15 	stw	zero,56(sp)
  8062e0:	213fffc4 	addi	r4,r4,-1
  8062e4:	d9000515 	stw	r4,20(sp)
  8062e8:	b42dc83a 	sub	r22,r22,r16
  8062ec:	b5bfffc4 	addi	r22,r22,-1
  8062f0:	b0026f16 	blt	r22,zero,806cb0 <_dtoa_r+0xc78>
  8062f4:	d8000815 	stw	zero,32(sp)
  8062f8:	d9c00517 	ldw	r7,20(sp)
  8062fc:	38026416 	blt	r7,zero,806c90 <_dtoa_r+0xc58>
  806300:	b1ed883a 	add	r22,r22,r7
  806304:	d9c00d15 	stw	r7,52(sp)
  806308:	d8000a15 	stw	zero,40(sp)
  80630c:	d9800317 	ldw	r6,12(sp)
  806310:	00800244 	movi	r2,9
  806314:	11811436 	bltu	r2,r6,806768 <_dtoa_r+0x730>
  806318:	00800144 	movi	r2,5
  80631c:	1184e10e 	bge	r2,r6,8076a4 <_dtoa_r+0x166c>
  806320:	31bfff04 	addi	r6,r6,-4
  806324:	d9800315 	stw	r6,12(sp)
  806328:	0023883a 	mov	r17,zero
  80632c:	d9800317 	ldw	r6,12(sp)
  806330:	008000c4 	movi	r2,3
  806334:	30836726 	beq	r6,r2,8070d4 <_dtoa_r+0x109c>
  806338:	1183410e 	bge	r2,r6,807040 <_dtoa_r+0x1008>
  80633c:	d9c00317 	ldw	r7,12(sp)
  806340:	00800104 	movi	r2,4
  806344:	38827c26 	beq	r7,r2,806d38 <_dtoa_r+0xd00>
  806348:	00800144 	movi	r2,5
  80634c:	3884c41e 	bne	r7,r2,807660 <_dtoa_r+0x1628>
  806350:	00800044 	movi	r2,1
  806354:	d8800b15 	stw	r2,44(sp)
  806358:	d8c00517 	ldw	r3,20(sp)
  80635c:	d9002217 	ldw	r4,136(sp)
  806360:	1907883a 	add	r3,r3,r4
  806364:	19800044 	addi	r6,r3,1
  806368:	d8c00c15 	stw	r3,48(sp)
  80636c:	d9800615 	stw	r6,24(sp)
  806370:	0183a40e 	bge	zero,r6,807204 <_dtoa_r+0x11cc>
  806374:	d9800617 	ldw	r6,24(sp)
  806378:	3021883a 	mov	r16,r6
  80637c:	e0001115 	stw	zero,68(fp)
  806380:	008005c4 	movi	r2,23
  806384:	1184c92e 	bgeu	r2,r6,8076ac <_dtoa_r+0x1674>
  806388:	00c00044 	movi	r3,1
  80638c:	00800104 	movi	r2,4
  806390:	1085883a 	add	r2,r2,r2
  806394:	11000504 	addi	r4,r2,20
  806398:	180b883a 	mov	r5,r3
  80639c:	18c00044 	addi	r3,r3,1
  8063a0:	313ffb2e 	bgeu	r6,r4,806390 <__alt_mem_onchip_mem+0xff786390>
  8063a4:	e1401115 	stw	r5,68(fp)
  8063a8:	e009883a 	mov	r4,fp
  8063ac:	08082440 	call	808244 <_Balloc>
  8063b0:	d8800715 	stw	r2,28(sp)
  8063b4:	e0801015 	stw	r2,64(fp)
  8063b8:	00800384 	movi	r2,14
  8063bc:	1400f736 	bltu	r2,r16,80679c <_dtoa_r+0x764>
  8063c0:	8800f626 	beq	r17,zero,80679c <_dtoa_r+0x764>
  8063c4:	d9c00517 	ldw	r7,20(sp)
  8063c8:	01c39a0e 	bge	zero,r7,807234 <_dtoa_r+0x11fc>
  8063cc:	388003cc 	andi	r2,r7,15
  8063d0:	100490fa 	slli	r2,r2,3
  8063d4:	382bd13a 	srai	r21,r7,4
  8063d8:	00c02074 	movhi	r3,129
  8063dc:	18cc6a04 	addi	r3,r3,12712
  8063e0:	1885883a 	add	r2,r3,r2
  8063e4:	a8c0040c 	andi	r3,r21,16
  8063e8:	12400017 	ldw	r9,0(r2)
  8063ec:	12000117 	ldw	r8,4(r2)
  8063f0:	18037926 	beq	r3,zero,8071d8 <_dtoa_r+0x11a0>
  8063f4:	00802074 	movhi	r2,129
  8063f8:	108c6004 	addi	r2,r2,12672
  8063fc:	11800817 	ldw	r6,32(r2)
  806400:	11c00917 	ldw	r7,36(r2)
  806404:	9009883a 	mov	r4,r18
  806408:	980b883a 	mov	r5,r19
  80640c:	da001715 	stw	r8,92(sp)
  806410:	da401615 	stw	r9,88(sp)
  806414:	080cc200 	call	80cc20 <__divdf3>
  806418:	da001717 	ldw	r8,92(sp)
  80641c:	da401617 	ldw	r9,88(sp)
  806420:	ad4003cc 	andi	r21,r21,15
  806424:	040000c4 	movi	r16,3
  806428:	1023883a 	mov	r17,r2
  80642c:	1829883a 	mov	r20,r3
  806430:	a8001126 	beq	r21,zero,806478 <_dtoa_r+0x440>
  806434:	05c02074 	movhi	r23,129
  806438:	bdcc6004 	addi	r23,r23,12672
  80643c:	4805883a 	mov	r2,r9
  806440:	4007883a 	mov	r3,r8
  806444:	a980004c 	andi	r6,r21,1
  806448:	1009883a 	mov	r4,r2
  80644c:	a82bd07a 	srai	r21,r21,1
  806450:	180b883a 	mov	r5,r3
  806454:	30000426 	beq	r6,zero,806468 <_dtoa_r+0x430>
  806458:	b9800017 	ldw	r6,0(r23)
  80645c:	b9c00117 	ldw	r7,4(r23)
  806460:	84000044 	addi	r16,r16,1
  806464:	080d7600 	call	80d760 <__muldf3>
  806468:	bdc00204 	addi	r23,r23,8
  80646c:	a83ff51e 	bne	r21,zero,806444 <__alt_mem_onchip_mem+0xff786444>
  806470:	1013883a 	mov	r9,r2
  806474:	1811883a 	mov	r8,r3
  806478:	480d883a 	mov	r6,r9
  80647c:	400f883a 	mov	r7,r8
  806480:	8809883a 	mov	r4,r17
  806484:	a00b883a 	mov	r5,r20
  806488:	080cc200 	call	80cc20 <__divdf3>
  80648c:	d8800f15 	stw	r2,60(sp)
  806490:	d8c01015 	stw	r3,64(sp)
  806494:	d8c00e17 	ldw	r3,56(sp)
  806498:	18000626 	beq	r3,zero,8064b4 <_dtoa_r+0x47c>
  80649c:	d9000f17 	ldw	r4,60(sp)
  8064a0:	d9401017 	ldw	r5,64(sp)
  8064a4:	000d883a 	mov	r6,zero
  8064a8:	01cffc34 	movhi	r7,16368
  8064ac:	080d66c0 	call	80d66c <__ledf2>
  8064b0:	10040b16 	blt	r2,zero,8074e0 <_dtoa_r+0x14a8>
  8064b4:	8009883a 	mov	r4,r16
  8064b8:	080e7f40 	call	80e7f4 <__floatsidf>
  8064bc:	d9800f17 	ldw	r6,60(sp)
  8064c0:	d9c01017 	ldw	r7,64(sp)
  8064c4:	1009883a 	mov	r4,r2
  8064c8:	180b883a 	mov	r5,r3
  8064cc:	080d7600 	call	80d760 <__muldf3>
  8064d0:	000d883a 	mov	r6,zero
  8064d4:	01d00734 	movhi	r7,16412
  8064d8:	1009883a 	mov	r4,r2
  8064dc:	180b883a 	mov	r5,r3
  8064e0:	080c3740 	call	80c374 <__adddf3>
  8064e4:	1021883a 	mov	r16,r2
  8064e8:	d8800617 	ldw	r2,24(sp)
  8064ec:	047f3034 	movhi	r17,64704
  8064f0:	1c63883a 	add	r17,r3,r17
  8064f4:	10031826 	beq	r2,zero,807158 <_dtoa_r+0x1120>
  8064f8:	d8c00517 	ldw	r3,20(sp)
  8064fc:	db000617 	ldw	r12,24(sp)
  806500:	d8c01315 	stw	r3,76(sp)
  806504:	d9000b17 	ldw	r4,44(sp)
  806508:	20038f26 	beq	r4,zero,807348 <_dtoa_r+0x1310>
  80650c:	60bfffc4 	addi	r2,r12,-1
  806510:	100490fa 	slli	r2,r2,3
  806514:	00c02074 	movhi	r3,129
  806518:	18cc6a04 	addi	r3,r3,12712
  80651c:	1885883a 	add	r2,r3,r2
  806520:	11800017 	ldw	r6,0(r2)
  806524:	11c00117 	ldw	r7,4(r2)
  806528:	d8800717 	ldw	r2,28(sp)
  80652c:	0009883a 	mov	r4,zero
  806530:	014ff834 	movhi	r5,16352
  806534:	db001615 	stw	r12,88(sp)
  806538:	15c00044 	addi	r23,r2,1
  80653c:	080cc200 	call	80cc20 <__divdf3>
  806540:	800d883a 	mov	r6,r16
  806544:	880f883a 	mov	r7,r17
  806548:	1009883a 	mov	r4,r2
  80654c:	180b883a 	mov	r5,r3
  806550:	080de780 	call	80de78 <__subdf3>
  806554:	d9401017 	ldw	r5,64(sp)
  806558:	d9000f17 	ldw	r4,60(sp)
  80655c:	102b883a 	mov	r21,r2
  806560:	d8c01215 	stw	r3,72(sp)
  806564:	080e7740 	call	80e774 <__fixdfsi>
  806568:	1009883a 	mov	r4,r2
  80656c:	1029883a 	mov	r20,r2
  806570:	080e7f40 	call	80e7f4 <__floatsidf>
  806574:	d9000f17 	ldw	r4,60(sp)
  806578:	d9401017 	ldw	r5,64(sp)
  80657c:	100d883a 	mov	r6,r2
  806580:	180f883a 	mov	r7,r3
  806584:	080de780 	call	80de78 <__subdf3>
  806588:	1823883a 	mov	r17,r3
  80658c:	d8c00717 	ldw	r3,28(sp)
  806590:	d9401217 	ldw	r5,72(sp)
  806594:	a2000c04 	addi	r8,r20,48
  806598:	1021883a 	mov	r16,r2
  80659c:	1a000005 	stb	r8,0(r3)
  8065a0:	800d883a 	mov	r6,r16
  8065a4:	880f883a 	mov	r7,r17
  8065a8:	a809883a 	mov	r4,r21
  8065ac:	4029883a 	mov	r20,r8
  8065b0:	080d5900 	call	80d590 <__gedf2>
  8065b4:	00841d16 	blt	zero,r2,80762c <_dtoa_r+0x15f4>
  8065b8:	800d883a 	mov	r6,r16
  8065bc:	880f883a 	mov	r7,r17
  8065c0:	0009883a 	mov	r4,zero
  8065c4:	014ffc34 	movhi	r5,16368
  8065c8:	080de780 	call	80de78 <__subdf3>
  8065cc:	d9401217 	ldw	r5,72(sp)
  8065d0:	100d883a 	mov	r6,r2
  8065d4:	180f883a 	mov	r7,r3
  8065d8:	a809883a 	mov	r4,r21
  8065dc:	080d5900 	call	80d590 <__gedf2>
  8065e0:	db001617 	ldw	r12,88(sp)
  8065e4:	00840e16 	blt	zero,r2,807620 <_dtoa_r+0x15e8>
  8065e8:	00800044 	movi	r2,1
  8065ec:	13006b0e 	bge	r2,r12,80679c <_dtoa_r+0x764>
  8065f0:	d9000717 	ldw	r4,28(sp)
  8065f4:	dd800f15 	stw	r22,60(sp)
  8065f8:	dcc01015 	stw	r19,64(sp)
  8065fc:	2319883a 	add	r12,r4,r12
  806600:	dcc01217 	ldw	r19,72(sp)
  806604:	602d883a 	mov	r22,r12
  806608:	dc801215 	stw	r18,72(sp)
  80660c:	b825883a 	mov	r18,r23
  806610:	00000906 	br	806638 <_dtoa_r+0x600>
  806614:	080de780 	call	80de78 <__subdf3>
  806618:	a80d883a 	mov	r6,r21
  80661c:	980f883a 	mov	r7,r19
  806620:	1009883a 	mov	r4,r2
  806624:	180b883a 	mov	r5,r3
  806628:	080d66c0 	call	80d66c <__ledf2>
  80662c:	1003e816 	blt	r2,zero,8075d0 <_dtoa_r+0x1598>
  806630:	b825883a 	mov	r18,r23
  806634:	bd83e926 	beq	r23,r22,8075dc <_dtoa_r+0x15a4>
  806638:	a809883a 	mov	r4,r21
  80663c:	980b883a 	mov	r5,r19
  806640:	000d883a 	mov	r6,zero
  806644:	01d00934 	movhi	r7,16420
  806648:	080d7600 	call	80d760 <__muldf3>
  80664c:	000d883a 	mov	r6,zero
  806650:	01d00934 	movhi	r7,16420
  806654:	8009883a 	mov	r4,r16
  806658:	880b883a 	mov	r5,r17
  80665c:	102b883a 	mov	r21,r2
  806660:	1827883a 	mov	r19,r3
  806664:	080d7600 	call	80d760 <__muldf3>
  806668:	180b883a 	mov	r5,r3
  80666c:	1009883a 	mov	r4,r2
  806670:	1821883a 	mov	r16,r3
  806674:	1023883a 	mov	r17,r2
  806678:	080e7740 	call	80e774 <__fixdfsi>
  80667c:	1009883a 	mov	r4,r2
  806680:	1029883a 	mov	r20,r2
  806684:	080e7f40 	call	80e7f4 <__floatsidf>
  806688:	8809883a 	mov	r4,r17
  80668c:	800b883a 	mov	r5,r16
  806690:	100d883a 	mov	r6,r2
  806694:	180f883a 	mov	r7,r3
  806698:	080de780 	call	80de78 <__subdf3>
  80669c:	a5000c04 	addi	r20,r20,48
  8066a0:	a80d883a 	mov	r6,r21
  8066a4:	980f883a 	mov	r7,r19
  8066a8:	1009883a 	mov	r4,r2
  8066ac:	180b883a 	mov	r5,r3
  8066b0:	95000005 	stb	r20,0(r18)
  8066b4:	1021883a 	mov	r16,r2
  8066b8:	1823883a 	mov	r17,r3
  8066bc:	080d66c0 	call	80d66c <__ledf2>
  8066c0:	bdc00044 	addi	r23,r23,1
  8066c4:	800d883a 	mov	r6,r16
  8066c8:	880f883a 	mov	r7,r17
  8066cc:	0009883a 	mov	r4,zero
  8066d0:	014ffc34 	movhi	r5,16368
  8066d4:	103fcf0e 	bge	r2,zero,806614 <__alt_mem_onchip_mem+0xff786614>
  8066d8:	d8c01317 	ldw	r3,76(sp)
  8066dc:	d8c00515 	stw	r3,20(sp)
  8066e0:	d9400917 	ldw	r5,36(sp)
  8066e4:	e009883a 	mov	r4,fp
  8066e8:	08082ec0 	call	8082ec <_Bfree>
  8066ec:	d9000517 	ldw	r4,20(sp)
  8066f0:	d9802317 	ldw	r6,140(sp)
  8066f4:	d9c02517 	ldw	r7,148(sp)
  8066f8:	b8000005 	stb	zero,0(r23)
  8066fc:	20800044 	addi	r2,r4,1
  806700:	30800015 	stw	r2,0(r6)
  806704:	3802aa26 	beq	r7,zero,8071b0 <_dtoa_r+0x1178>
  806708:	3dc00015 	stw	r23,0(r7)
  80670c:	d8800717 	ldw	r2,28(sp)
  806710:	003e7906 	br	8060f8 <__alt_mem_onchip_mem+0xff7860f8>
  806714:	00800434 	movhi	r2,16
  806718:	10bfffc4 	addi	r2,r2,-1
  80671c:	88a2703a 	and	r17,r17,r2
  806720:	883e851e 	bne	r17,zero,806138 <__alt_mem_onchip_mem+0xff786138>
  806724:	00802074 	movhi	r2,129
  806728:	108c4c04 	addi	r2,r2,12592
  80672c:	003e8406 	br	806140 <__alt_mem_onchip_mem+0xff786140>
  806730:	10c00204 	addi	r3,r2,8
  806734:	003e8706 	br	806154 <__alt_mem_onchip_mem+0xff786154>
  806738:	01400434 	movhi	r5,16
  80673c:	297fffc4 	addi	r5,r5,-1
  806740:	994a703a 	and	r5,r19,r5
  806744:	9009883a 	mov	r4,r18
  806748:	843f0044 	addi	r16,r16,-1023
  80674c:	294ffc34 	orhi	r5,r5,16368
  806750:	dd800217 	ldw	r22,8(sp)
  806754:	d8001115 	stw	zero,68(sp)
  806758:	003ea506 	br	8061f0 <__alt_mem_onchip_mem+0xff7861f0>
  80675c:	00802074 	movhi	r2,129
  806760:	108ba304 	addi	r2,r2,11916
  806764:	003e6406 	br	8060f8 <__alt_mem_onchip_mem+0xff7860f8>
  806768:	e0001115 	stw	zero,68(fp)
  80676c:	000b883a 	mov	r5,zero
  806770:	e009883a 	mov	r4,fp
  806774:	08082440 	call	808244 <_Balloc>
  806778:	01bfffc4 	movi	r6,-1
  80677c:	01c00044 	movi	r7,1
  806780:	d8800715 	stw	r2,28(sp)
  806784:	d9800c15 	stw	r6,48(sp)
  806788:	e0801015 	stw	r2,64(fp)
  80678c:	d8000315 	stw	zero,12(sp)
  806790:	d9c00b15 	stw	r7,44(sp)
  806794:	d9800615 	stw	r6,24(sp)
  806798:	d8002215 	stw	zero,136(sp)
  80679c:	d8800117 	ldw	r2,4(sp)
  8067a0:	10008916 	blt	r2,zero,8069c8 <_dtoa_r+0x990>
  8067a4:	d9000517 	ldw	r4,20(sp)
  8067a8:	00c00384 	movi	r3,14
  8067ac:	19008616 	blt	r3,r4,8069c8 <_dtoa_r+0x990>
  8067b0:	200490fa 	slli	r2,r4,3
  8067b4:	00c02074 	movhi	r3,129
  8067b8:	d9802217 	ldw	r6,136(sp)
  8067bc:	18cc6a04 	addi	r3,r3,12712
  8067c0:	1885883a 	add	r2,r3,r2
  8067c4:	14000017 	ldw	r16,0(r2)
  8067c8:	14400117 	ldw	r17,4(r2)
  8067cc:	30016316 	blt	r6,zero,806d5c <_dtoa_r+0xd24>
  8067d0:	800d883a 	mov	r6,r16
  8067d4:	880f883a 	mov	r7,r17
  8067d8:	9009883a 	mov	r4,r18
  8067dc:	980b883a 	mov	r5,r19
  8067e0:	080cc200 	call	80cc20 <__divdf3>
  8067e4:	180b883a 	mov	r5,r3
  8067e8:	1009883a 	mov	r4,r2
  8067ec:	080e7740 	call	80e774 <__fixdfsi>
  8067f0:	1009883a 	mov	r4,r2
  8067f4:	102b883a 	mov	r21,r2
  8067f8:	080e7f40 	call	80e7f4 <__floatsidf>
  8067fc:	800d883a 	mov	r6,r16
  806800:	880f883a 	mov	r7,r17
  806804:	1009883a 	mov	r4,r2
  806808:	180b883a 	mov	r5,r3
  80680c:	080d7600 	call	80d760 <__muldf3>
  806810:	100d883a 	mov	r6,r2
  806814:	180f883a 	mov	r7,r3
  806818:	9009883a 	mov	r4,r18
  80681c:	980b883a 	mov	r5,r19
  806820:	080de780 	call	80de78 <__subdf3>
  806824:	d9c00717 	ldw	r7,28(sp)
  806828:	1009883a 	mov	r4,r2
  80682c:	a8800c04 	addi	r2,r21,48
  806830:	38800005 	stb	r2,0(r7)
  806834:	3dc00044 	addi	r23,r7,1
  806838:	d9c00617 	ldw	r7,24(sp)
  80683c:	01800044 	movi	r6,1
  806840:	180b883a 	mov	r5,r3
  806844:	2005883a 	mov	r2,r4
  806848:	39803826 	beq	r7,r6,80692c <_dtoa_r+0x8f4>
  80684c:	000d883a 	mov	r6,zero
  806850:	01d00934 	movhi	r7,16420
  806854:	080d7600 	call	80d760 <__muldf3>
  806858:	000d883a 	mov	r6,zero
  80685c:	000f883a 	mov	r7,zero
  806860:	1009883a 	mov	r4,r2
  806864:	180b883a 	mov	r5,r3
  806868:	1025883a 	mov	r18,r2
  80686c:	1827883a 	mov	r19,r3
  806870:	080d5080 	call	80d508 <__eqdf2>
  806874:	103f9a26 	beq	r2,zero,8066e0 <__alt_mem_onchip_mem+0xff7866e0>
  806878:	d9c00617 	ldw	r7,24(sp)
  80687c:	d8c00717 	ldw	r3,28(sp)
  806880:	b829883a 	mov	r20,r23
  806884:	38bfffc4 	addi	r2,r7,-1
  806888:	18ad883a 	add	r22,r3,r2
  80688c:	00000a06 	br	8068b8 <_dtoa_r+0x880>
  806890:	080d7600 	call	80d760 <__muldf3>
  806894:	000d883a 	mov	r6,zero
  806898:	000f883a 	mov	r7,zero
  80689c:	1009883a 	mov	r4,r2
  8068a0:	180b883a 	mov	r5,r3
  8068a4:	1025883a 	mov	r18,r2
  8068a8:	1827883a 	mov	r19,r3
  8068ac:	b829883a 	mov	r20,r23
  8068b0:	080d5080 	call	80d508 <__eqdf2>
  8068b4:	103f8a26 	beq	r2,zero,8066e0 <__alt_mem_onchip_mem+0xff7866e0>
  8068b8:	800d883a 	mov	r6,r16
  8068bc:	880f883a 	mov	r7,r17
  8068c0:	9009883a 	mov	r4,r18
  8068c4:	980b883a 	mov	r5,r19
  8068c8:	080cc200 	call	80cc20 <__divdf3>
  8068cc:	180b883a 	mov	r5,r3
  8068d0:	1009883a 	mov	r4,r2
  8068d4:	080e7740 	call	80e774 <__fixdfsi>
  8068d8:	1009883a 	mov	r4,r2
  8068dc:	102b883a 	mov	r21,r2
  8068e0:	080e7f40 	call	80e7f4 <__floatsidf>
  8068e4:	800d883a 	mov	r6,r16
  8068e8:	880f883a 	mov	r7,r17
  8068ec:	1009883a 	mov	r4,r2
  8068f0:	180b883a 	mov	r5,r3
  8068f4:	080d7600 	call	80d760 <__muldf3>
  8068f8:	100d883a 	mov	r6,r2
  8068fc:	180f883a 	mov	r7,r3
  806900:	9009883a 	mov	r4,r18
  806904:	980b883a 	mov	r5,r19
  806908:	080de780 	call	80de78 <__subdf3>
  80690c:	aa000c04 	addi	r8,r21,48
  806910:	a2000005 	stb	r8,0(r20)
  806914:	000d883a 	mov	r6,zero
  806918:	01d00934 	movhi	r7,16420
  80691c:	1009883a 	mov	r4,r2
  806920:	180b883a 	mov	r5,r3
  806924:	a5c00044 	addi	r23,r20,1
  806928:	b53fd91e 	bne	r22,r20,806890 <__alt_mem_onchip_mem+0xff786890>
  80692c:	100d883a 	mov	r6,r2
  806930:	180f883a 	mov	r7,r3
  806934:	1009883a 	mov	r4,r2
  806938:	180b883a 	mov	r5,r3
  80693c:	080c3740 	call	80c374 <__adddf3>
  806940:	100d883a 	mov	r6,r2
  806944:	180f883a 	mov	r7,r3
  806948:	8009883a 	mov	r4,r16
  80694c:	880b883a 	mov	r5,r17
  806950:	1027883a 	mov	r19,r2
  806954:	1825883a 	mov	r18,r3
  806958:	080d66c0 	call	80d66c <__ledf2>
  80695c:	10000816 	blt	r2,zero,806980 <_dtoa_r+0x948>
  806960:	980d883a 	mov	r6,r19
  806964:	900f883a 	mov	r7,r18
  806968:	8009883a 	mov	r4,r16
  80696c:	880b883a 	mov	r5,r17
  806970:	080d5080 	call	80d508 <__eqdf2>
  806974:	103f5a1e 	bne	r2,zero,8066e0 <__alt_mem_onchip_mem+0xff7866e0>
  806978:	ad40004c 	andi	r21,r21,1
  80697c:	a83f5826 	beq	r21,zero,8066e0 <__alt_mem_onchip_mem+0xff7866e0>
  806980:	bd3fffc3 	ldbu	r20,-1(r23)
  806984:	b8bfffc4 	addi	r2,r23,-1
  806988:	1007883a 	mov	r3,r2
  80698c:	01400e44 	movi	r5,57
  806990:	d9800717 	ldw	r6,28(sp)
  806994:	00000506 	br	8069ac <_dtoa_r+0x974>
  806998:	18ffffc4 	addi	r3,r3,-1
  80699c:	11824726 	beq	r2,r6,8072bc <_dtoa_r+0x1284>
  8069a0:	1d000003 	ldbu	r20,0(r3)
  8069a4:	102f883a 	mov	r23,r2
  8069a8:	10bfffc4 	addi	r2,r2,-1
  8069ac:	a1003fcc 	andi	r4,r20,255
  8069b0:	2100201c 	xori	r4,r4,128
  8069b4:	213fe004 	addi	r4,r4,-128
  8069b8:	217ff726 	beq	r4,r5,806998 <__alt_mem_onchip_mem+0xff786998>
  8069bc:	a2000044 	addi	r8,r20,1
  8069c0:	12000005 	stb	r8,0(r2)
  8069c4:	003f4606 	br	8066e0 <__alt_mem_onchip_mem+0xff7866e0>
  8069c8:	d9000b17 	ldw	r4,44(sp)
  8069cc:	2000c826 	beq	r4,zero,806cf0 <_dtoa_r+0xcb8>
  8069d0:	d9800317 	ldw	r6,12(sp)
  8069d4:	00c00044 	movi	r3,1
  8069d8:	1980f90e 	bge	r3,r6,806dc0 <_dtoa_r+0xd88>
  8069dc:	d8800617 	ldw	r2,24(sp)
  8069e0:	d8c00a17 	ldw	r3,40(sp)
  8069e4:	157fffc4 	addi	r21,r2,-1
  8069e8:	1d41f316 	blt	r3,r21,8071b8 <_dtoa_r+0x1180>
  8069ec:	1d6bc83a 	sub	r21,r3,r21
  8069f0:	d9c00617 	ldw	r7,24(sp)
  8069f4:	3802aa16 	blt	r7,zero,8074a0 <_dtoa_r+0x1468>
  8069f8:	dd000817 	ldw	r20,32(sp)
  8069fc:	d8800617 	ldw	r2,24(sp)
  806a00:	d8c00817 	ldw	r3,32(sp)
  806a04:	01400044 	movi	r5,1
  806a08:	e009883a 	mov	r4,fp
  806a0c:	1887883a 	add	r3,r3,r2
  806a10:	d8c00815 	stw	r3,32(sp)
  806a14:	b0ad883a 	add	r22,r22,r2
  806a18:	08086500 	call	808650 <__i2b>
  806a1c:	1023883a 	mov	r17,r2
  806a20:	a0000826 	beq	r20,zero,806a44 <_dtoa_r+0xa0c>
  806a24:	0580070e 	bge	zero,r22,806a44 <_dtoa_r+0xa0c>
  806a28:	a005883a 	mov	r2,r20
  806a2c:	b500b916 	blt	r22,r20,806d14 <_dtoa_r+0xcdc>
  806a30:	d9000817 	ldw	r4,32(sp)
  806a34:	a0a9c83a 	sub	r20,r20,r2
  806a38:	b0adc83a 	sub	r22,r22,r2
  806a3c:	2089c83a 	sub	r4,r4,r2
  806a40:	d9000815 	stw	r4,32(sp)
  806a44:	d9800a17 	ldw	r6,40(sp)
  806a48:	0181810e 	bge	zero,r6,807050 <_dtoa_r+0x1018>
  806a4c:	d9c00b17 	ldw	r7,44(sp)
  806a50:	3800b326 	beq	r7,zero,806d20 <_dtoa_r+0xce8>
  806a54:	a800b226 	beq	r21,zero,806d20 <_dtoa_r+0xce8>
  806a58:	880b883a 	mov	r5,r17
  806a5c:	a80d883a 	mov	r6,r21
  806a60:	e009883a 	mov	r4,fp
  806a64:	08088840 	call	808884 <__pow5mult>
  806a68:	d9800917 	ldw	r6,36(sp)
  806a6c:	100b883a 	mov	r5,r2
  806a70:	e009883a 	mov	r4,fp
  806a74:	1023883a 	mov	r17,r2
  806a78:	080868c0 	call	80868c <__multiply>
  806a7c:	1021883a 	mov	r16,r2
  806a80:	d8800a17 	ldw	r2,40(sp)
  806a84:	d9400917 	ldw	r5,36(sp)
  806a88:	e009883a 	mov	r4,fp
  806a8c:	1545c83a 	sub	r2,r2,r21
  806a90:	d8800a15 	stw	r2,40(sp)
  806a94:	08082ec0 	call	8082ec <_Bfree>
  806a98:	d8c00a17 	ldw	r3,40(sp)
  806a9c:	18009f1e 	bne	r3,zero,806d1c <_dtoa_r+0xce4>
  806aa0:	05c00044 	movi	r23,1
  806aa4:	e009883a 	mov	r4,fp
  806aa8:	b80b883a 	mov	r5,r23
  806aac:	08086500 	call	808650 <__i2b>
  806ab0:	d9000d17 	ldw	r4,52(sp)
  806ab4:	102b883a 	mov	r21,r2
  806ab8:	2000ce26 	beq	r4,zero,806df4 <_dtoa_r+0xdbc>
  806abc:	200d883a 	mov	r6,r4
  806ac0:	100b883a 	mov	r5,r2
  806ac4:	e009883a 	mov	r4,fp
  806ac8:	08088840 	call	808884 <__pow5mult>
  806acc:	d9800317 	ldw	r6,12(sp)
  806ad0:	102b883a 	mov	r21,r2
  806ad4:	b981810e 	bge	r23,r6,8070dc <_dtoa_r+0x10a4>
  806ad8:	0027883a 	mov	r19,zero
  806adc:	a8800417 	ldw	r2,16(r21)
  806ae0:	05c00804 	movi	r23,32
  806ae4:	10800104 	addi	r2,r2,4
  806ae8:	1085883a 	add	r2,r2,r2
  806aec:	1085883a 	add	r2,r2,r2
  806af0:	a885883a 	add	r2,r21,r2
  806af4:	11000017 	ldw	r4,0(r2)
  806af8:	08085380 	call	808538 <__hi0bits>
  806afc:	b885c83a 	sub	r2,r23,r2
  806b00:	1585883a 	add	r2,r2,r22
  806b04:	108007cc 	andi	r2,r2,31
  806b08:	1000b326 	beq	r2,zero,806dd8 <_dtoa_r+0xda0>
  806b0c:	00c00804 	movi	r3,32
  806b10:	1887c83a 	sub	r3,r3,r2
  806b14:	01000104 	movi	r4,4
  806b18:	20c2cd0e 	bge	r4,r3,807650 <_dtoa_r+0x1618>
  806b1c:	00c00704 	movi	r3,28
  806b20:	1885c83a 	sub	r2,r3,r2
  806b24:	d8c00817 	ldw	r3,32(sp)
  806b28:	a0a9883a 	add	r20,r20,r2
  806b2c:	b0ad883a 	add	r22,r22,r2
  806b30:	1887883a 	add	r3,r3,r2
  806b34:	d8c00815 	stw	r3,32(sp)
  806b38:	d9800817 	ldw	r6,32(sp)
  806b3c:	0180040e 	bge	zero,r6,806b50 <_dtoa_r+0xb18>
  806b40:	800b883a 	mov	r5,r16
  806b44:	e009883a 	mov	r4,fp
  806b48:	08089c40 	call	8089c4 <__lshift>
  806b4c:	1021883a 	mov	r16,r2
  806b50:	0580050e 	bge	zero,r22,806b68 <_dtoa_r+0xb30>
  806b54:	a80b883a 	mov	r5,r21
  806b58:	b00d883a 	mov	r6,r22
  806b5c:	e009883a 	mov	r4,fp
  806b60:	08089c40 	call	8089c4 <__lshift>
  806b64:	102b883a 	mov	r21,r2
  806b68:	d9c00e17 	ldw	r7,56(sp)
  806b6c:	3801211e 	bne	r7,zero,806ff4 <_dtoa_r+0xfbc>
  806b70:	d9800617 	ldw	r6,24(sp)
  806b74:	0181380e 	bge	zero,r6,807058 <_dtoa_r+0x1020>
  806b78:	d8c00b17 	ldw	r3,44(sp)
  806b7c:	1800ab1e 	bne	r3,zero,806e2c <_dtoa_r+0xdf4>
  806b80:	dc800717 	ldw	r18,28(sp)
  806b84:	dcc00617 	ldw	r19,24(sp)
  806b88:	9029883a 	mov	r20,r18
  806b8c:	00000206 	br	806b98 <_dtoa_r+0xb60>
  806b90:	08083140 	call	808314 <__multadd>
  806b94:	1021883a 	mov	r16,r2
  806b98:	a80b883a 	mov	r5,r21
  806b9c:	8009883a 	mov	r4,r16
  806ba0:	0805e380 	call	805e38 <quorem>
  806ba4:	10800c04 	addi	r2,r2,48
  806ba8:	90800005 	stb	r2,0(r18)
  806bac:	94800044 	addi	r18,r18,1
  806bb0:	9507c83a 	sub	r3,r18,r20
  806bb4:	000f883a 	mov	r7,zero
  806bb8:	01800284 	movi	r6,10
  806bbc:	800b883a 	mov	r5,r16
  806bc0:	e009883a 	mov	r4,fp
  806bc4:	1cfff216 	blt	r3,r19,806b90 <__alt_mem_onchip_mem+0xff786b90>
  806bc8:	1011883a 	mov	r8,r2
  806bcc:	d8800617 	ldw	r2,24(sp)
  806bd0:	0082370e 	bge	zero,r2,8074b0 <_dtoa_r+0x1478>
  806bd4:	d9000717 	ldw	r4,28(sp)
  806bd8:	0025883a 	mov	r18,zero
  806bdc:	20af883a 	add	r23,r4,r2
  806be0:	01800044 	movi	r6,1
  806be4:	800b883a 	mov	r5,r16
  806be8:	e009883a 	mov	r4,fp
  806bec:	da001715 	stw	r8,92(sp)
  806bf0:	08089c40 	call	8089c4 <__lshift>
  806bf4:	a80b883a 	mov	r5,r21
  806bf8:	1009883a 	mov	r4,r2
  806bfc:	d8800915 	stw	r2,36(sp)
  806c00:	0808b0c0 	call	808b0c <__mcmp>
  806c04:	da001717 	ldw	r8,92(sp)
  806c08:	0081800e 	bge	zero,r2,80720c <_dtoa_r+0x11d4>
  806c0c:	b93fffc3 	ldbu	r4,-1(r23)
  806c10:	b8bfffc4 	addi	r2,r23,-1
  806c14:	1007883a 	mov	r3,r2
  806c18:	01800e44 	movi	r6,57
  806c1c:	d9c00717 	ldw	r7,28(sp)
  806c20:	00000506 	br	806c38 <_dtoa_r+0xc00>
  806c24:	18ffffc4 	addi	r3,r3,-1
  806c28:	11c12326 	beq	r2,r7,8070b8 <_dtoa_r+0x1080>
  806c2c:	19000003 	ldbu	r4,0(r3)
  806c30:	102f883a 	mov	r23,r2
  806c34:	10bfffc4 	addi	r2,r2,-1
  806c38:	21403fcc 	andi	r5,r4,255
  806c3c:	2940201c 	xori	r5,r5,128
  806c40:	297fe004 	addi	r5,r5,-128
  806c44:	29bff726 	beq	r5,r6,806c24 <__alt_mem_onchip_mem+0xff786c24>
  806c48:	21000044 	addi	r4,r4,1
  806c4c:	11000005 	stb	r4,0(r2)
  806c50:	a80b883a 	mov	r5,r21
  806c54:	e009883a 	mov	r4,fp
  806c58:	08082ec0 	call	8082ec <_Bfree>
  806c5c:	883ea026 	beq	r17,zero,8066e0 <__alt_mem_onchip_mem+0xff7866e0>
  806c60:	90000426 	beq	r18,zero,806c74 <_dtoa_r+0xc3c>
  806c64:	94400326 	beq	r18,r17,806c74 <_dtoa_r+0xc3c>
  806c68:	900b883a 	mov	r5,r18
  806c6c:	e009883a 	mov	r4,fp
  806c70:	08082ec0 	call	8082ec <_Bfree>
  806c74:	880b883a 	mov	r5,r17
  806c78:	e009883a 	mov	r4,fp
  806c7c:	08082ec0 	call	8082ec <_Bfree>
  806c80:	003e9706 	br	8066e0 <__alt_mem_onchip_mem+0xff7866e0>
  806c84:	01800044 	movi	r6,1
  806c88:	d9800e15 	stw	r6,56(sp)
  806c8c:	003d9606 	br	8062e8 <__alt_mem_onchip_mem+0xff7862e8>
  806c90:	d8800817 	ldw	r2,32(sp)
  806c94:	d8c00517 	ldw	r3,20(sp)
  806c98:	d8000d15 	stw	zero,52(sp)
  806c9c:	10c5c83a 	sub	r2,r2,r3
  806ca0:	00c9c83a 	sub	r4,zero,r3
  806ca4:	d8800815 	stw	r2,32(sp)
  806ca8:	d9000a15 	stw	r4,40(sp)
  806cac:	003d9706 	br	80630c <__alt_mem_onchip_mem+0xff78630c>
  806cb0:	05adc83a 	sub	r22,zero,r22
  806cb4:	dd800815 	stw	r22,32(sp)
  806cb8:	002d883a 	mov	r22,zero
  806cbc:	003d8e06 	br	8062f8 <__alt_mem_onchip_mem+0xff7862f8>
  806cc0:	d9000517 	ldw	r4,20(sp)
  806cc4:	080e7f40 	call	80e7f4 <__floatsidf>
  806cc8:	100d883a 	mov	r6,r2
  806ccc:	180f883a 	mov	r7,r3
  806cd0:	a009883a 	mov	r4,r20
  806cd4:	880b883a 	mov	r5,r17
  806cd8:	080d5080 	call	80d508 <__eqdf2>
  806cdc:	103d7126 	beq	r2,zero,8062a4 <__alt_mem_onchip_mem+0xff7862a4>
  806ce0:	d9c00517 	ldw	r7,20(sp)
  806ce4:	39ffffc4 	addi	r7,r7,-1
  806ce8:	d9c00515 	stw	r7,20(sp)
  806cec:	003d6d06 	br	8062a4 <__alt_mem_onchip_mem+0xff7862a4>
  806cf0:	dd400a17 	ldw	r21,40(sp)
  806cf4:	dd000817 	ldw	r20,32(sp)
  806cf8:	0023883a 	mov	r17,zero
  806cfc:	003f4806 	br	806a20 <__alt_mem_onchip_mem+0xff786a20>
  806d00:	10e3c83a 	sub	r17,r2,r3
  806d04:	9448983a 	sll	r4,r18,r17
  806d08:	003d3206 	br	8061d4 <__alt_mem_onchip_mem+0xff7861d4>
  806d0c:	d8000e15 	stw	zero,56(sp)
  806d10:	003d7506 	br	8062e8 <__alt_mem_onchip_mem+0xff7862e8>
  806d14:	b005883a 	mov	r2,r22
  806d18:	003f4506 	br	806a30 <__alt_mem_onchip_mem+0xff786a30>
  806d1c:	dc000915 	stw	r16,36(sp)
  806d20:	d9800a17 	ldw	r6,40(sp)
  806d24:	d9400917 	ldw	r5,36(sp)
  806d28:	e009883a 	mov	r4,fp
  806d2c:	08088840 	call	808884 <__pow5mult>
  806d30:	1021883a 	mov	r16,r2
  806d34:	003f5a06 	br	806aa0 <__alt_mem_onchip_mem+0xff786aa0>
  806d38:	01c00044 	movi	r7,1
  806d3c:	d9c00b15 	stw	r7,44(sp)
  806d40:	d8802217 	ldw	r2,136(sp)
  806d44:	0081280e 	bge	zero,r2,8071e8 <_dtoa_r+0x11b0>
  806d48:	100d883a 	mov	r6,r2
  806d4c:	1021883a 	mov	r16,r2
  806d50:	d8800c15 	stw	r2,48(sp)
  806d54:	d8800615 	stw	r2,24(sp)
  806d58:	003d8806 	br	80637c <__alt_mem_onchip_mem+0xff78637c>
  806d5c:	d8800617 	ldw	r2,24(sp)
  806d60:	00be9b16 	blt	zero,r2,8067d0 <__alt_mem_onchip_mem+0xff7867d0>
  806d64:	10010f1e 	bne	r2,zero,8071a4 <_dtoa_r+0x116c>
  806d68:	880b883a 	mov	r5,r17
  806d6c:	000d883a 	mov	r6,zero
  806d70:	01d00534 	movhi	r7,16404
  806d74:	8009883a 	mov	r4,r16
  806d78:	080d7600 	call	80d760 <__muldf3>
  806d7c:	900d883a 	mov	r6,r18
  806d80:	980f883a 	mov	r7,r19
  806d84:	1009883a 	mov	r4,r2
  806d88:	180b883a 	mov	r5,r3
  806d8c:	080d5900 	call	80d590 <__gedf2>
  806d90:	002b883a 	mov	r21,zero
  806d94:	0023883a 	mov	r17,zero
  806d98:	1000bf16 	blt	r2,zero,807098 <_dtoa_r+0x1060>
  806d9c:	d9802217 	ldw	r6,136(sp)
  806da0:	ddc00717 	ldw	r23,28(sp)
  806da4:	018c303a 	nor	r6,zero,r6
  806da8:	d9800515 	stw	r6,20(sp)
  806dac:	a80b883a 	mov	r5,r21
  806db0:	e009883a 	mov	r4,fp
  806db4:	08082ec0 	call	8082ec <_Bfree>
  806db8:	883e4926 	beq	r17,zero,8066e0 <__alt_mem_onchip_mem+0xff7866e0>
  806dbc:	003fad06 	br	806c74 <__alt_mem_onchip_mem+0xff786c74>
  806dc0:	d9c01117 	ldw	r7,68(sp)
  806dc4:	3801bc26 	beq	r7,zero,8074b8 <_dtoa_r+0x1480>
  806dc8:	10810cc4 	addi	r2,r2,1075
  806dcc:	dd400a17 	ldw	r21,40(sp)
  806dd0:	dd000817 	ldw	r20,32(sp)
  806dd4:	003f0a06 	br	806a00 <__alt_mem_onchip_mem+0xff786a00>
  806dd8:	00800704 	movi	r2,28
  806ddc:	d9000817 	ldw	r4,32(sp)
  806de0:	a0a9883a 	add	r20,r20,r2
  806de4:	b0ad883a 	add	r22,r22,r2
  806de8:	2089883a 	add	r4,r4,r2
  806dec:	d9000815 	stw	r4,32(sp)
  806df0:	003f5106 	br	806b38 <__alt_mem_onchip_mem+0xff786b38>
  806df4:	d8c00317 	ldw	r3,12(sp)
  806df8:	b8c1fc0e 	bge	r23,r3,8075ec <_dtoa_r+0x15b4>
  806dfc:	0027883a 	mov	r19,zero
  806e00:	b805883a 	mov	r2,r23
  806e04:	003f3e06 	br	806b00 <__alt_mem_onchip_mem+0xff786b00>
  806e08:	880b883a 	mov	r5,r17
  806e0c:	e009883a 	mov	r4,fp
  806e10:	000f883a 	mov	r7,zero
  806e14:	01800284 	movi	r6,10
  806e18:	08083140 	call	808314 <__multadd>
  806e1c:	d9000c17 	ldw	r4,48(sp)
  806e20:	1023883a 	mov	r17,r2
  806e24:	0102040e 	bge	zero,r4,807638 <_dtoa_r+0x1600>
  806e28:	d9000615 	stw	r4,24(sp)
  806e2c:	0500050e 	bge	zero,r20,806e44 <_dtoa_r+0xe0c>
  806e30:	880b883a 	mov	r5,r17
  806e34:	a00d883a 	mov	r6,r20
  806e38:	e009883a 	mov	r4,fp
  806e3c:	08089c40 	call	8089c4 <__lshift>
  806e40:	1023883a 	mov	r17,r2
  806e44:	9801241e 	bne	r19,zero,8072d8 <_dtoa_r+0x12a0>
  806e48:	8829883a 	mov	r20,r17
  806e4c:	d9000617 	ldw	r4,24(sp)
  806e50:	dcc00717 	ldw	r19,28(sp)
  806e54:	9480004c 	andi	r18,r18,1
  806e58:	20bfffc4 	addi	r2,r4,-1
  806e5c:	9885883a 	add	r2,r19,r2
  806e60:	d8800415 	stw	r2,16(sp)
  806e64:	dc800615 	stw	r18,24(sp)
  806e68:	a80b883a 	mov	r5,r21
  806e6c:	8009883a 	mov	r4,r16
  806e70:	0805e380 	call	805e38 <quorem>
  806e74:	880b883a 	mov	r5,r17
  806e78:	8009883a 	mov	r4,r16
  806e7c:	102f883a 	mov	r23,r2
  806e80:	0808b0c0 	call	808b0c <__mcmp>
  806e84:	a80b883a 	mov	r5,r21
  806e88:	a00d883a 	mov	r6,r20
  806e8c:	e009883a 	mov	r4,fp
  806e90:	102d883a 	mov	r22,r2
  806e94:	0808b6c0 	call	808b6c <__mdiff>
  806e98:	1007883a 	mov	r3,r2
  806e9c:	10800317 	ldw	r2,12(r2)
  806ea0:	bc800c04 	addi	r18,r23,48
  806ea4:	180b883a 	mov	r5,r3
  806ea8:	10004e1e 	bne	r2,zero,806fe4 <_dtoa_r+0xfac>
  806eac:	8009883a 	mov	r4,r16
  806eb0:	d8c01615 	stw	r3,88(sp)
  806eb4:	0808b0c0 	call	808b0c <__mcmp>
  806eb8:	d8c01617 	ldw	r3,88(sp)
  806ebc:	e009883a 	mov	r4,fp
  806ec0:	d8801615 	stw	r2,88(sp)
  806ec4:	180b883a 	mov	r5,r3
  806ec8:	08082ec0 	call	8082ec <_Bfree>
  806ecc:	d8801617 	ldw	r2,88(sp)
  806ed0:	1000041e 	bne	r2,zero,806ee4 <_dtoa_r+0xeac>
  806ed4:	d9800317 	ldw	r6,12(sp)
  806ed8:	3000021e 	bne	r6,zero,806ee4 <_dtoa_r+0xeac>
  806edc:	d8c00617 	ldw	r3,24(sp)
  806ee0:	18003726 	beq	r3,zero,806fc0 <_dtoa_r+0xf88>
  806ee4:	b0002016 	blt	r22,zero,806f68 <_dtoa_r+0xf30>
  806ee8:	b000041e 	bne	r22,zero,806efc <_dtoa_r+0xec4>
  806eec:	d9000317 	ldw	r4,12(sp)
  806ef0:	2000021e 	bne	r4,zero,806efc <_dtoa_r+0xec4>
  806ef4:	d8c00617 	ldw	r3,24(sp)
  806ef8:	18001b26 	beq	r3,zero,806f68 <_dtoa_r+0xf30>
  806efc:	00810716 	blt	zero,r2,80731c <_dtoa_r+0x12e4>
  806f00:	d8c00417 	ldw	r3,16(sp)
  806f04:	9d800044 	addi	r22,r19,1
  806f08:	9c800005 	stb	r18,0(r19)
  806f0c:	b02f883a 	mov	r23,r22
  806f10:	98c10626 	beq	r19,r3,80732c <_dtoa_r+0x12f4>
  806f14:	800b883a 	mov	r5,r16
  806f18:	000f883a 	mov	r7,zero
  806f1c:	01800284 	movi	r6,10
  806f20:	e009883a 	mov	r4,fp
  806f24:	08083140 	call	808314 <__multadd>
  806f28:	1021883a 	mov	r16,r2
  806f2c:	000f883a 	mov	r7,zero
  806f30:	01800284 	movi	r6,10
  806f34:	880b883a 	mov	r5,r17
  806f38:	e009883a 	mov	r4,fp
  806f3c:	8d002526 	beq	r17,r20,806fd4 <_dtoa_r+0xf9c>
  806f40:	08083140 	call	808314 <__multadd>
  806f44:	a00b883a 	mov	r5,r20
  806f48:	000f883a 	mov	r7,zero
  806f4c:	01800284 	movi	r6,10
  806f50:	e009883a 	mov	r4,fp
  806f54:	1023883a 	mov	r17,r2
  806f58:	08083140 	call	808314 <__multadd>
  806f5c:	1029883a 	mov	r20,r2
  806f60:	b027883a 	mov	r19,r22
  806f64:	003fc006 	br	806e68 <__alt_mem_onchip_mem+0xff786e68>
  806f68:	9011883a 	mov	r8,r18
  806f6c:	00800e0e 	bge	zero,r2,806fa8 <_dtoa_r+0xf70>
  806f70:	800b883a 	mov	r5,r16
  806f74:	01800044 	movi	r6,1
  806f78:	e009883a 	mov	r4,fp
  806f7c:	da001715 	stw	r8,92(sp)
  806f80:	08089c40 	call	8089c4 <__lshift>
  806f84:	a80b883a 	mov	r5,r21
  806f88:	1009883a 	mov	r4,r2
  806f8c:	1021883a 	mov	r16,r2
  806f90:	0808b0c0 	call	808b0c <__mcmp>
  806f94:	da001717 	ldw	r8,92(sp)
  806f98:	0081960e 	bge	zero,r2,8075f4 <_dtoa_r+0x15bc>
  806f9c:	00800e44 	movi	r2,57
  806fa0:	40817026 	beq	r8,r2,807564 <_dtoa_r+0x152c>
  806fa4:	ba000c44 	addi	r8,r23,49
  806fa8:	8825883a 	mov	r18,r17
  806fac:	9dc00044 	addi	r23,r19,1
  806fb0:	9a000005 	stb	r8,0(r19)
  806fb4:	a023883a 	mov	r17,r20
  806fb8:	dc000915 	stw	r16,36(sp)
  806fbc:	003f2406 	br	806c50 <__alt_mem_onchip_mem+0xff786c50>
  806fc0:	00800e44 	movi	r2,57
  806fc4:	9011883a 	mov	r8,r18
  806fc8:	90816626 	beq	r18,r2,807564 <_dtoa_r+0x152c>
  806fcc:	05bff516 	blt	zero,r22,806fa4 <__alt_mem_onchip_mem+0xff786fa4>
  806fd0:	003ff506 	br	806fa8 <__alt_mem_onchip_mem+0xff786fa8>
  806fd4:	08083140 	call	808314 <__multadd>
  806fd8:	1023883a 	mov	r17,r2
  806fdc:	1029883a 	mov	r20,r2
  806fe0:	003fdf06 	br	806f60 <__alt_mem_onchip_mem+0xff786f60>
  806fe4:	e009883a 	mov	r4,fp
  806fe8:	08082ec0 	call	8082ec <_Bfree>
  806fec:	00800044 	movi	r2,1
  806ff0:	003fbc06 	br	806ee4 <__alt_mem_onchip_mem+0xff786ee4>
  806ff4:	a80b883a 	mov	r5,r21
  806ff8:	8009883a 	mov	r4,r16
  806ffc:	0808b0c0 	call	808b0c <__mcmp>
  807000:	103edb0e 	bge	r2,zero,806b70 <__alt_mem_onchip_mem+0xff786b70>
  807004:	800b883a 	mov	r5,r16
  807008:	000f883a 	mov	r7,zero
  80700c:	01800284 	movi	r6,10
  807010:	e009883a 	mov	r4,fp
  807014:	08083140 	call	808314 <__multadd>
  807018:	1021883a 	mov	r16,r2
  80701c:	d8800517 	ldw	r2,20(sp)
  807020:	d8c00b17 	ldw	r3,44(sp)
  807024:	10bfffc4 	addi	r2,r2,-1
  807028:	d8800515 	stw	r2,20(sp)
  80702c:	183f761e 	bne	r3,zero,806e08 <__alt_mem_onchip_mem+0xff786e08>
  807030:	d9000c17 	ldw	r4,48(sp)
  807034:	0101730e 	bge	zero,r4,807604 <_dtoa_r+0x15cc>
  807038:	d9000615 	stw	r4,24(sp)
  80703c:	003ed006 	br	806b80 <__alt_mem_onchip_mem+0xff786b80>
  807040:	00800084 	movi	r2,2
  807044:	3081861e 	bne	r6,r2,807660 <_dtoa_r+0x1628>
  807048:	d8000b15 	stw	zero,44(sp)
  80704c:	003f3c06 	br	806d40 <__alt_mem_onchip_mem+0xff786d40>
  807050:	dc000917 	ldw	r16,36(sp)
  807054:	003e9206 	br	806aa0 <__alt_mem_onchip_mem+0xff786aa0>
  807058:	d9c00317 	ldw	r7,12(sp)
  80705c:	00800084 	movi	r2,2
  807060:	11fec50e 	bge	r2,r7,806b78 <__alt_mem_onchip_mem+0xff786b78>
  807064:	d9000617 	ldw	r4,24(sp)
  807068:	20013c1e 	bne	r4,zero,80755c <_dtoa_r+0x1524>
  80706c:	a80b883a 	mov	r5,r21
  807070:	000f883a 	mov	r7,zero
  807074:	01800144 	movi	r6,5
  807078:	e009883a 	mov	r4,fp
  80707c:	08083140 	call	808314 <__multadd>
  807080:	100b883a 	mov	r5,r2
  807084:	8009883a 	mov	r4,r16
  807088:	102b883a 	mov	r21,r2
  80708c:	0808b0c0 	call	808b0c <__mcmp>
  807090:	dc000915 	stw	r16,36(sp)
  807094:	00bf410e 	bge	zero,r2,806d9c <__alt_mem_onchip_mem+0xff786d9c>
  807098:	d9c00717 	ldw	r7,28(sp)
  80709c:	00800c44 	movi	r2,49
  8070a0:	38800005 	stb	r2,0(r7)
  8070a4:	d8800517 	ldw	r2,20(sp)
  8070a8:	3dc00044 	addi	r23,r7,1
  8070ac:	10800044 	addi	r2,r2,1
  8070b0:	d8800515 	stw	r2,20(sp)
  8070b4:	003f3d06 	br	806dac <__alt_mem_onchip_mem+0xff786dac>
  8070b8:	d9800517 	ldw	r6,20(sp)
  8070bc:	d9c00717 	ldw	r7,28(sp)
  8070c0:	00800c44 	movi	r2,49
  8070c4:	31800044 	addi	r6,r6,1
  8070c8:	d9800515 	stw	r6,20(sp)
  8070cc:	38800005 	stb	r2,0(r7)
  8070d0:	003edf06 	br	806c50 <__alt_mem_onchip_mem+0xff786c50>
  8070d4:	d8000b15 	stw	zero,44(sp)
  8070d8:	003c9f06 	br	806358 <__alt_mem_onchip_mem+0xff786358>
  8070dc:	903e7e1e 	bne	r18,zero,806ad8 <__alt_mem_onchip_mem+0xff786ad8>
  8070e0:	00800434 	movhi	r2,16
  8070e4:	10bfffc4 	addi	r2,r2,-1
  8070e8:	9884703a 	and	r2,r19,r2
  8070ec:	1000ea1e 	bne	r2,zero,807498 <_dtoa_r+0x1460>
  8070f0:	9cdffc2c 	andhi	r19,r19,32752
  8070f4:	9800e826 	beq	r19,zero,807498 <_dtoa_r+0x1460>
  8070f8:	d9c00817 	ldw	r7,32(sp)
  8070fc:	b5800044 	addi	r22,r22,1
  807100:	04c00044 	movi	r19,1
  807104:	39c00044 	addi	r7,r7,1
  807108:	d9c00815 	stw	r7,32(sp)
  80710c:	d8800d17 	ldw	r2,52(sp)
  807110:	103e721e 	bne	r2,zero,806adc <__alt_mem_onchip_mem+0xff786adc>
  807114:	00800044 	movi	r2,1
  807118:	003e7906 	br	806b00 <__alt_mem_onchip_mem+0xff786b00>
  80711c:	8009883a 	mov	r4,r16
  807120:	080e7f40 	call	80e7f4 <__floatsidf>
  807124:	d9800f17 	ldw	r6,60(sp)
  807128:	d9c01017 	ldw	r7,64(sp)
  80712c:	1009883a 	mov	r4,r2
  807130:	180b883a 	mov	r5,r3
  807134:	080d7600 	call	80d760 <__muldf3>
  807138:	000d883a 	mov	r6,zero
  80713c:	01d00734 	movhi	r7,16412
  807140:	1009883a 	mov	r4,r2
  807144:	180b883a 	mov	r5,r3
  807148:	080c3740 	call	80c374 <__adddf3>
  80714c:	047f3034 	movhi	r17,64704
  807150:	1021883a 	mov	r16,r2
  807154:	1c63883a 	add	r17,r3,r17
  807158:	d9000f17 	ldw	r4,60(sp)
  80715c:	d9401017 	ldw	r5,64(sp)
  807160:	000d883a 	mov	r6,zero
  807164:	01d00534 	movhi	r7,16404
  807168:	080de780 	call	80de78 <__subdf3>
  80716c:	800d883a 	mov	r6,r16
  807170:	880f883a 	mov	r7,r17
  807174:	1009883a 	mov	r4,r2
  807178:	180b883a 	mov	r5,r3
  80717c:	102b883a 	mov	r21,r2
  807180:	1829883a 	mov	r20,r3
  807184:	080d5900 	call	80d590 <__gedf2>
  807188:	00806c16 	blt	zero,r2,80733c <_dtoa_r+0x1304>
  80718c:	89e0003c 	xorhi	r7,r17,32768
  807190:	800d883a 	mov	r6,r16
  807194:	a809883a 	mov	r4,r21
  807198:	a00b883a 	mov	r5,r20
  80719c:	080d66c0 	call	80d66c <__ledf2>
  8071a0:	103d7e0e 	bge	r2,zero,80679c <__alt_mem_onchip_mem+0xff78679c>
  8071a4:	002b883a 	mov	r21,zero
  8071a8:	0023883a 	mov	r17,zero
  8071ac:	003efb06 	br	806d9c <__alt_mem_onchip_mem+0xff786d9c>
  8071b0:	d8800717 	ldw	r2,28(sp)
  8071b4:	003bd006 	br	8060f8 <__alt_mem_onchip_mem+0xff7860f8>
  8071b8:	d9000a17 	ldw	r4,40(sp)
  8071bc:	d9800d17 	ldw	r6,52(sp)
  8071c0:	dd400a15 	stw	r21,40(sp)
  8071c4:	a905c83a 	sub	r2,r21,r4
  8071c8:	308d883a 	add	r6,r6,r2
  8071cc:	d9800d15 	stw	r6,52(sp)
  8071d0:	002b883a 	mov	r21,zero
  8071d4:	003e0606 	br	8069f0 <__alt_mem_onchip_mem+0xff7869f0>
  8071d8:	9023883a 	mov	r17,r18
  8071dc:	9829883a 	mov	r20,r19
  8071e0:	04000084 	movi	r16,2
  8071e4:	003c9206 	br	806430 <__alt_mem_onchip_mem+0xff786430>
  8071e8:	04000044 	movi	r16,1
  8071ec:	dc000c15 	stw	r16,48(sp)
  8071f0:	dc000615 	stw	r16,24(sp)
  8071f4:	dc002215 	stw	r16,136(sp)
  8071f8:	e0001115 	stw	zero,68(fp)
  8071fc:	000b883a 	mov	r5,zero
  807200:	003c6906 	br	8063a8 <__alt_mem_onchip_mem+0xff7863a8>
  807204:	3021883a 	mov	r16,r6
  807208:	003ffb06 	br	8071f8 <__alt_mem_onchip_mem+0xff7871f8>
  80720c:	1000021e 	bne	r2,zero,807218 <_dtoa_r+0x11e0>
  807210:	4200004c 	andi	r8,r8,1
  807214:	403e7d1e 	bne	r8,zero,806c0c <__alt_mem_onchip_mem+0xff786c0c>
  807218:	01000c04 	movi	r4,48
  80721c:	00000106 	br	807224 <_dtoa_r+0x11ec>
  807220:	102f883a 	mov	r23,r2
  807224:	b8bfffc4 	addi	r2,r23,-1
  807228:	10c00007 	ldb	r3,0(r2)
  80722c:	193ffc26 	beq	r3,r4,807220 <__alt_mem_onchip_mem+0xff787220>
  807230:	003e8706 	br	806c50 <__alt_mem_onchip_mem+0xff786c50>
  807234:	d8800517 	ldw	r2,20(sp)
  807238:	00a3c83a 	sub	r17,zero,r2
  80723c:	8800a426 	beq	r17,zero,8074d0 <_dtoa_r+0x1498>
  807240:	888003cc 	andi	r2,r17,15
  807244:	100490fa 	slli	r2,r2,3
  807248:	00c02074 	movhi	r3,129
  80724c:	18cc6a04 	addi	r3,r3,12712
  807250:	1885883a 	add	r2,r3,r2
  807254:	11800017 	ldw	r6,0(r2)
  807258:	11c00117 	ldw	r7,4(r2)
  80725c:	9009883a 	mov	r4,r18
  807260:	980b883a 	mov	r5,r19
  807264:	8823d13a 	srai	r17,r17,4
  807268:	080d7600 	call	80d760 <__muldf3>
  80726c:	d8800f15 	stw	r2,60(sp)
  807270:	d8c01015 	stw	r3,64(sp)
  807274:	8800e826 	beq	r17,zero,807618 <_dtoa_r+0x15e0>
  807278:	05002074 	movhi	r20,129
  80727c:	a50c6004 	addi	r20,r20,12672
  807280:	04000084 	movi	r16,2
  807284:	8980004c 	andi	r6,r17,1
  807288:	1009883a 	mov	r4,r2
  80728c:	8823d07a 	srai	r17,r17,1
  807290:	180b883a 	mov	r5,r3
  807294:	30000426 	beq	r6,zero,8072a8 <_dtoa_r+0x1270>
  807298:	a1800017 	ldw	r6,0(r20)
  80729c:	a1c00117 	ldw	r7,4(r20)
  8072a0:	84000044 	addi	r16,r16,1
  8072a4:	080d7600 	call	80d760 <__muldf3>
  8072a8:	a5000204 	addi	r20,r20,8
  8072ac:	883ff51e 	bne	r17,zero,807284 <__alt_mem_onchip_mem+0xff787284>
  8072b0:	d8800f15 	stw	r2,60(sp)
  8072b4:	d8c01015 	stw	r3,64(sp)
  8072b8:	003c7606 	br	806494 <__alt_mem_onchip_mem+0xff786494>
  8072bc:	00c00c04 	movi	r3,48
  8072c0:	10c00005 	stb	r3,0(r2)
  8072c4:	d8c00517 	ldw	r3,20(sp)
  8072c8:	bd3fffc3 	ldbu	r20,-1(r23)
  8072cc:	18c00044 	addi	r3,r3,1
  8072d0:	d8c00515 	stw	r3,20(sp)
  8072d4:	003db906 	br	8069bc <__alt_mem_onchip_mem+0xff7869bc>
  8072d8:	89400117 	ldw	r5,4(r17)
  8072dc:	e009883a 	mov	r4,fp
  8072e0:	08082440 	call	808244 <_Balloc>
  8072e4:	89800417 	ldw	r6,16(r17)
  8072e8:	89400304 	addi	r5,r17,12
  8072ec:	11000304 	addi	r4,r2,12
  8072f0:	31800084 	addi	r6,r6,2
  8072f4:	318d883a 	add	r6,r6,r6
  8072f8:	318d883a 	add	r6,r6,r6
  8072fc:	1027883a 	mov	r19,r2
  807300:	0807fa00 	call	807fa0 <memcpy>
  807304:	01800044 	movi	r6,1
  807308:	980b883a 	mov	r5,r19
  80730c:	e009883a 	mov	r4,fp
  807310:	08089c40 	call	8089c4 <__lshift>
  807314:	1029883a 	mov	r20,r2
  807318:	003ecc06 	br	806e4c <__alt_mem_onchip_mem+0xff786e4c>
  80731c:	00800e44 	movi	r2,57
  807320:	90809026 	beq	r18,r2,807564 <_dtoa_r+0x152c>
  807324:	92000044 	addi	r8,r18,1
  807328:	003f1f06 	br	806fa8 <__alt_mem_onchip_mem+0xff786fa8>
  80732c:	9011883a 	mov	r8,r18
  807330:	8825883a 	mov	r18,r17
  807334:	a023883a 	mov	r17,r20
  807338:	003e2906 	br	806be0 <__alt_mem_onchip_mem+0xff786be0>
  80733c:	002b883a 	mov	r21,zero
  807340:	0023883a 	mov	r17,zero
  807344:	003f5406 	br	807098 <__alt_mem_onchip_mem+0xff787098>
  807348:	61bfffc4 	addi	r6,r12,-1
  80734c:	300490fa 	slli	r2,r6,3
  807350:	00c02074 	movhi	r3,129
  807354:	18cc6a04 	addi	r3,r3,12712
  807358:	1885883a 	add	r2,r3,r2
  80735c:	11000017 	ldw	r4,0(r2)
  807360:	11400117 	ldw	r5,4(r2)
  807364:	d8800717 	ldw	r2,28(sp)
  807368:	880f883a 	mov	r7,r17
  80736c:	d9801215 	stw	r6,72(sp)
  807370:	800d883a 	mov	r6,r16
  807374:	db001615 	stw	r12,88(sp)
  807378:	15c00044 	addi	r23,r2,1
  80737c:	080d7600 	call	80d760 <__muldf3>
  807380:	d9401017 	ldw	r5,64(sp)
  807384:	d9000f17 	ldw	r4,60(sp)
  807388:	d8c01515 	stw	r3,84(sp)
  80738c:	d8801415 	stw	r2,80(sp)
  807390:	080e7740 	call	80e774 <__fixdfsi>
  807394:	1009883a 	mov	r4,r2
  807398:	1021883a 	mov	r16,r2
  80739c:	080e7f40 	call	80e7f4 <__floatsidf>
  8073a0:	d9000f17 	ldw	r4,60(sp)
  8073a4:	d9401017 	ldw	r5,64(sp)
  8073a8:	100d883a 	mov	r6,r2
  8073ac:	180f883a 	mov	r7,r3
  8073b0:	080de780 	call	80de78 <__subdf3>
  8073b4:	1829883a 	mov	r20,r3
  8073b8:	d8c00717 	ldw	r3,28(sp)
  8073bc:	84000c04 	addi	r16,r16,48
  8073c0:	1023883a 	mov	r17,r2
  8073c4:	1c000005 	stb	r16,0(r3)
  8073c8:	db001617 	ldw	r12,88(sp)
  8073cc:	00800044 	movi	r2,1
  8073d0:	60802226 	beq	r12,r2,80745c <_dtoa_r+0x1424>
  8073d4:	d9c00717 	ldw	r7,28(sp)
  8073d8:	8805883a 	mov	r2,r17
  8073dc:	b82b883a 	mov	r21,r23
  8073e0:	3b19883a 	add	r12,r7,r12
  8073e4:	6023883a 	mov	r17,r12
  8073e8:	a007883a 	mov	r3,r20
  8073ec:	dc800f15 	stw	r18,60(sp)
  8073f0:	000d883a 	mov	r6,zero
  8073f4:	01d00934 	movhi	r7,16420
  8073f8:	1009883a 	mov	r4,r2
  8073fc:	180b883a 	mov	r5,r3
  807400:	080d7600 	call	80d760 <__muldf3>
  807404:	180b883a 	mov	r5,r3
  807408:	1009883a 	mov	r4,r2
  80740c:	1829883a 	mov	r20,r3
  807410:	1025883a 	mov	r18,r2
  807414:	080e7740 	call	80e774 <__fixdfsi>
  807418:	1009883a 	mov	r4,r2
  80741c:	1021883a 	mov	r16,r2
  807420:	080e7f40 	call	80e7f4 <__floatsidf>
  807424:	100d883a 	mov	r6,r2
  807428:	180f883a 	mov	r7,r3
  80742c:	9009883a 	mov	r4,r18
  807430:	a00b883a 	mov	r5,r20
  807434:	84000c04 	addi	r16,r16,48
  807438:	080de780 	call	80de78 <__subdf3>
  80743c:	ad400044 	addi	r21,r21,1
  807440:	ac3fffc5 	stb	r16,-1(r21)
  807444:	ac7fea1e 	bne	r21,r17,8073f0 <__alt_mem_onchip_mem+0xff7873f0>
  807448:	1023883a 	mov	r17,r2
  80744c:	d8801217 	ldw	r2,72(sp)
  807450:	dc800f17 	ldw	r18,60(sp)
  807454:	1829883a 	mov	r20,r3
  807458:	b8af883a 	add	r23,r23,r2
  80745c:	d9001417 	ldw	r4,80(sp)
  807460:	d9401517 	ldw	r5,84(sp)
  807464:	000d883a 	mov	r6,zero
  807468:	01cff834 	movhi	r7,16352
  80746c:	080c3740 	call	80c374 <__adddf3>
  807470:	880d883a 	mov	r6,r17
  807474:	a00f883a 	mov	r7,r20
  807478:	1009883a 	mov	r4,r2
  80747c:	180b883a 	mov	r5,r3
  807480:	080d66c0 	call	80d66c <__ledf2>
  807484:	10003e0e 	bge	r2,zero,807580 <_dtoa_r+0x1548>
  807488:	d9001317 	ldw	r4,76(sp)
  80748c:	bd3fffc3 	ldbu	r20,-1(r23)
  807490:	d9000515 	stw	r4,20(sp)
  807494:	003d3b06 	br	806984 <__alt_mem_onchip_mem+0xff786984>
  807498:	0027883a 	mov	r19,zero
  80749c:	003f1b06 	br	80710c <__alt_mem_onchip_mem+0xff78710c>
  8074a0:	d8800817 	ldw	r2,32(sp)
  8074a4:	11e9c83a 	sub	r20,r2,r7
  8074a8:	0005883a 	mov	r2,zero
  8074ac:	003d5406 	br	806a00 <__alt_mem_onchip_mem+0xff786a00>
  8074b0:	00800044 	movi	r2,1
  8074b4:	003dc706 	br	806bd4 <__alt_mem_onchip_mem+0xff786bd4>
  8074b8:	d8c00217 	ldw	r3,8(sp)
  8074bc:	00800d84 	movi	r2,54
  8074c0:	dd400a17 	ldw	r21,40(sp)
  8074c4:	10c5c83a 	sub	r2,r2,r3
  8074c8:	dd000817 	ldw	r20,32(sp)
  8074cc:	003d4c06 	br	806a00 <__alt_mem_onchip_mem+0xff786a00>
  8074d0:	dc800f15 	stw	r18,60(sp)
  8074d4:	dcc01015 	stw	r19,64(sp)
  8074d8:	04000084 	movi	r16,2
  8074dc:	003bed06 	br	806494 <__alt_mem_onchip_mem+0xff786494>
  8074e0:	d9000617 	ldw	r4,24(sp)
  8074e4:	203f0d26 	beq	r4,zero,80711c <__alt_mem_onchip_mem+0xff78711c>
  8074e8:	d9800c17 	ldw	r6,48(sp)
  8074ec:	01bcab0e 	bge	zero,r6,80679c <__alt_mem_onchip_mem+0xff78679c>
  8074f0:	d9401017 	ldw	r5,64(sp)
  8074f4:	d9000f17 	ldw	r4,60(sp)
  8074f8:	000d883a 	mov	r6,zero
  8074fc:	01d00934 	movhi	r7,16420
  807500:	080d7600 	call	80d760 <__muldf3>
  807504:	81000044 	addi	r4,r16,1
  807508:	d8800f15 	stw	r2,60(sp)
  80750c:	d8c01015 	stw	r3,64(sp)
  807510:	080e7f40 	call	80e7f4 <__floatsidf>
  807514:	d9800f17 	ldw	r6,60(sp)
  807518:	d9c01017 	ldw	r7,64(sp)
  80751c:	1009883a 	mov	r4,r2
  807520:	180b883a 	mov	r5,r3
  807524:	080d7600 	call	80d760 <__muldf3>
  807528:	01d00734 	movhi	r7,16412
  80752c:	000d883a 	mov	r6,zero
  807530:	1009883a 	mov	r4,r2
  807534:	180b883a 	mov	r5,r3
  807538:	080c3740 	call	80c374 <__adddf3>
  80753c:	d9c00517 	ldw	r7,20(sp)
  807540:	047f3034 	movhi	r17,64704
  807544:	1021883a 	mov	r16,r2
  807548:	39ffffc4 	addi	r7,r7,-1
  80754c:	d9c01315 	stw	r7,76(sp)
  807550:	1c63883a 	add	r17,r3,r17
  807554:	db000c17 	ldw	r12,48(sp)
  807558:	003bea06 	br	806504 <__alt_mem_onchip_mem+0xff786504>
  80755c:	dc000915 	stw	r16,36(sp)
  807560:	003e0e06 	br	806d9c <__alt_mem_onchip_mem+0xff786d9c>
  807564:	01000e44 	movi	r4,57
  807568:	8825883a 	mov	r18,r17
  80756c:	9dc00044 	addi	r23,r19,1
  807570:	99000005 	stb	r4,0(r19)
  807574:	a023883a 	mov	r17,r20
  807578:	dc000915 	stw	r16,36(sp)
  80757c:	003da406 	br	806c10 <__alt_mem_onchip_mem+0xff786c10>
  807580:	d9801417 	ldw	r6,80(sp)
  807584:	d9c01517 	ldw	r7,84(sp)
  807588:	0009883a 	mov	r4,zero
  80758c:	014ff834 	movhi	r5,16352
  807590:	080de780 	call	80de78 <__subdf3>
  807594:	880d883a 	mov	r6,r17
  807598:	a00f883a 	mov	r7,r20
  80759c:	1009883a 	mov	r4,r2
  8075a0:	180b883a 	mov	r5,r3
  8075a4:	080d5900 	call	80d590 <__gedf2>
  8075a8:	00bc7c0e 	bge	zero,r2,80679c <__alt_mem_onchip_mem+0xff78679c>
  8075ac:	01000c04 	movi	r4,48
  8075b0:	00000106 	br	8075b8 <_dtoa_r+0x1580>
  8075b4:	102f883a 	mov	r23,r2
  8075b8:	b8bfffc4 	addi	r2,r23,-1
  8075bc:	10c00007 	ldb	r3,0(r2)
  8075c0:	193ffc26 	beq	r3,r4,8075b4 <__alt_mem_onchip_mem+0xff7875b4>
  8075c4:	d9801317 	ldw	r6,76(sp)
  8075c8:	d9800515 	stw	r6,20(sp)
  8075cc:	003c4406 	br	8066e0 <__alt_mem_onchip_mem+0xff7866e0>
  8075d0:	d9801317 	ldw	r6,76(sp)
  8075d4:	d9800515 	stw	r6,20(sp)
  8075d8:	003cea06 	br	806984 <__alt_mem_onchip_mem+0xff786984>
  8075dc:	dd800f17 	ldw	r22,60(sp)
  8075e0:	dcc01017 	ldw	r19,64(sp)
  8075e4:	dc801217 	ldw	r18,72(sp)
  8075e8:	003c6c06 	br	80679c <__alt_mem_onchip_mem+0xff78679c>
  8075ec:	903e031e 	bne	r18,zero,806dfc <__alt_mem_onchip_mem+0xff786dfc>
  8075f0:	003ebb06 	br	8070e0 <__alt_mem_onchip_mem+0xff7870e0>
  8075f4:	103e6c1e 	bne	r2,zero,806fa8 <__alt_mem_onchip_mem+0xff786fa8>
  8075f8:	4080004c 	andi	r2,r8,1
  8075fc:	103e6a26 	beq	r2,zero,806fa8 <__alt_mem_onchip_mem+0xff786fa8>
  807600:	003e6606 	br	806f9c <__alt_mem_onchip_mem+0xff786f9c>
  807604:	d8c00317 	ldw	r3,12(sp)
  807608:	00800084 	movi	r2,2
  80760c:	10c02916 	blt	r2,r3,8076b4 <_dtoa_r+0x167c>
  807610:	d9000c17 	ldw	r4,48(sp)
  807614:	003e8806 	br	807038 <__alt_mem_onchip_mem+0xff787038>
  807618:	04000084 	movi	r16,2
  80761c:	003b9d06 	br	806494 <__alt_mem_onchip_mem+0xff786494>
  807620:	d9001317 	ldw	r4,76(sp)
  807624:	d9000515 	stw	r4,20(sp)
  807628:	003cd606 	br	806984 <__alt_mem_onchip_mem+0xff786984>
  80762c:	d8801317 	ldw	r2,76(sp)
  807630:	d8800515 	stw	r2,20(sp)
  807634:	003c2a06 	br	8066e0 <__alt_mem_onchip_mem+0xff7866e0>
  807638:	d9800317 	ldw	r6,12(sp)
  80763c:	00800084 	movi	r2,2
  807640:	11801516 	blt	r2,r6,807698 <_dtoa_r+0x1660>
  807644:	d9c00c17 	ldw	r7,48(sp)
  807648:	d9c00615 	stw	r7,24(sp)
  80764c:	003df706 	br	806e2c <__alt_mem_onchip_mem+0xff786e2c>
  807650:	193d3926 	beq	r3,r4,806b38 <__alt_mem_onchip_mem+0xff786b38>
  807654:	00c00f04 	movi	r3,60
  807658:	1885c83a 	sub	r2,r3,r2
  80765c:	003ddf06 	br	806ddc <__alt_mem_onchip_mem+0xff786ddc>
  807660:	e009883a 	mov	r4,fp
  807664:	e0001115 	stw	zero,68(fp)
  807668:	000b883a 	mov	r5,zero
  80766c:	08082440 	call	808244 <_Balloc>
  807670:	d8800715 	stw	r2,28(sp)
  807674:	d8c00717 	ldw	r3,28(sp)
  807678:	00bfffc4 	movi	r2,-1
  80767c:	01000044 	movi	r4,1
  807680:	d8800c15 	stw	r2,48(sp)
  807684:	e0c01015 	stw	r3,64(fp)
  807688:	d9000b15 	stw	r4,44(sp)
  80768c:	d8800615 	stw	r2,24(sp)
  807690:	d8002215 	stw	zero,136(sp)
  807694:	003c4106 	br	80679c <__alt_mem_onchip_mem+0xff78679c>
  807698:	d8c00c17 	ldw	r3,48(sp)
  80769c:	d8c00615 	stw	r3,24(sp)
  8076a0:	003e7006 	br	807064 <__alt_mem_onchip_mem+0xff787064>
  8076a4:	04400044 	movi	r17,1
  8076a8:	003b2006 	br	80632c <__alt_mem_onchip_mem+0xff78632c>
  8076ac:	000b883a 	mov	r5,zero
  8076b0:	003b3d06 	br	8063a8 <__alt_mem_onchip_mem+0xff7863a8>
  8076b4:	d8800c17 	ldw	r2,48(sp)
  8076b8:	d8800615 	stw	r2,24(sp)
  8076bc:	003e6906 	br	807064 <__alt_mem_onchip_mem+0xff787064>

008076c0 <_fclose_r>:
  8076c0:	28003926 	beq	r5,zero,8077a8 <_fclose_r+0xe8>
  8076c4:	defffc04 	addi	sp,sp,-16
  8076c8:	dc400115 	stw	r17,4(sp)
  8076cc:	dc000015 	stw	r16,0(sp)
  8076d0:	dfc00315 	stw	ra,12(sp)
  8076d4:	dc800215 	stw	r18,8(sp)
  8076d8:	2023883a 	mov	r17,r4
  8076dc:	2821883a 	mov	r16,r5
  8076e0:	20000226 	beq	r4,zero,8076ec <_fclose_r+0x2c>
  8076e4:	20800e17 	ldw	r2,56(r4)
  8076e8:	10002726 	beq	r2,zero,807788 <_fclose_r+0xc8>
  8076ec:	8080030f 	ldh	r2,12(r16)
  8076f0:	1000071e 	bne	r2,zero,807710 <_fclose_r+0x50>
  8076f4:	0005883a 	mov	r2,zero
  8076f8:	dfc00317 	ldw	ra,12(sp)
  8076fc:	dc800217 	ldw	r18,8(sp)
  807700:	dc400117 	ldw	r17,4(sp)
  807704:	dc000017 	ldw	r16,0(sp)
  807708:	dec00404 	addi	sp,sp,16
  80770c:	f800283a 	ret
  807710:	800b883a 	mov	r5,r16
  807714:	8809883a 	mov	r4,r17
  807718:	08010d00 	call	8010d0 <__sflush_r>
  80771c:	1025883a 	mov	r18,r2
  807720:	80800b17 	ldw	r2,44(r16)
  807724:	10000426 	beq	r2,zero,807738 <_fclose_r+0x78>
  807728:	81400717 	ldw	r5,28(r16)
  80772c:	8809883a 	mov	r4,r17
  807730:	103ee83a 	callr	r2
  807734:	10001616 	blt	r2,zero,807790 <_fclose_r+0xd0>
  807738:	8080030b 	ldhu	r2,12(r16)
  80773c:	1080200c 	andi	r2,r2,128
  807740:	1000151e 	bne	r2,zero,807798 <_fclose_r+0xd8>
  807744:	81400c17 	ldw	r5,48(r16)
  807748:	28000526 	beq	r5,zero,807760 <_fclose_r+0xa0>
  80774c:	80801004 	addi	r2,r16,64
  807750:	28800226 	beq	r5,r2,80775c <_fclose_r+0x9c>
  807754:	8809883a 	mov	r4,r17
  807758:	0801a8c0 	call	801a8c <_free_r>
  80775c:	80000c15 	stw	zero,48(r16)
  807760:	81401117 	ldw	r5,68(r16)
  807764:	28000326 	beq	r5,zero,807774 <_fclose_r+0xb4>
  807768:	8809883a 	mov	r4,r17
  80776c:	0801a8c0 	call	801a8c <_free_r>
  807770:	80001115 	stw	zero,68(r16)
  807774:	08017d00 	call	8017d0 <__sfp_lock_acquire>
  807778:	8000030d 	sth	zero,12(r16)
  80777c:	08017d40 	call	8017d4 <__sfp_lock_release>
  807780:	9005883a 	mov	r2,r18
  807784:	003fdc06 	br	8076f8 <__alt_mem_onchip_mem+0xff7876f8>
  807788:	08017c00 	call	8017c0 <__sinit>
  80778c:	003fd706 	br	8076ec <__alt_mem_onchip_mem+0xff7876ec>
  807790:	04bfffc4 	movi	r18,-1
  807794:	003fe806 	br	807738 <__alt_mem_onchip_mem+0xff787738>
  807798:	81400417 	ldw	r5,16(r16)
  80779c:	8809883a 	mov	r4,r17
  8077a0:	0801a8c0 	call	801a8c <_free_r>
  8077a4:	003fe706 	br	807744 <__alt_mem_onchip_mem+0xff787744>
  8077a8:	0005883a 	mov	r2,zero
  8077ac:	f800283a 	ret

008077b0 <fclose>:
  8077b0:	00802074 	movhi	r2,129
  8077b4:	10942504 	addi	r2,r2,20628
  8077b8:	200b883a 	mov	r5,r4
  8077bc:	11000017 	ldw	r4,0(r2)
  8077c0:	08076c01 	jmpi	8076c0 <_fclose_r>

008077c4 <__sflags>:
  8077c4:	28800007 	ldb	r2,0(r5)
  8077c8:	00c01c84 	movi	r3,114
  8077cc:	10c02426 	beq	r2,r3,807860 <__sflags+0x9c>
  8077d0:	00c01dc4 	movi	r3,119
  8077d4:	10c01e26 	beq	r2,r3,807850 <__sflags+0x8c>
  8077d8:	00c01844 	movi	r3,97
  8077dc:	10c00426 	beq	r2,r3,8077f0 <__sflags+0x2c>
  8077e0:	00800584 	movi	r2,22
  8077e4:	20800015 	stw	r2,0(r4)
  8077e8:	0005883a 	mov	r2,zero
  8077ec:	f800283a 	ret
  8077f0:	02c08204 	movi	r11,520
  8077f4:	01000044 	movi	r4,1
  8077f8:	00804204 	movi	r2,264
  8077fc:	01c00ac4 	movi	r7,43
  807800:	02bff8c4 	movi	r10,-29
  807804:	027fff04 	movi	r9,-4
  807808:	02001e04 	movi	r8,120
  80780c:	29400044 	addi	r5,r5,1
  807810:	28c00007 	ldb	r3,0(r5)
  807814:	18000626 	beq	r3,zero,807830 <__sflags+0x6c>
  807818:	19c00826 	beq	r3,r7,80783c <__sflags+0x78>
  80781c:	1a3ffb1e 	bne	r3,r8,80780c <__alt_mem_onchip_mem+0xff78780c>
  807820:	29400044 	addi	r5,r5,1
  807824:	28c00007 	ldb	r3,0(r5)
  807828:	21020014 	ori	r4,r4,2048
  80782c:	183ffa1e 	bne	r3,zero,807818 <__alt_mem_onchip_mem+0xff787818>
  807830:	22c8b03a 	or	r4,r4,r11
  807834:	31000015 	stw	r4,0(r6)
  807838:	f800283a 	ret
  80783c:	1284703a 	and	r2,r2,r10
  807840:	2248703a 	and	r4,r4,r9
  807844:	10800414 	ori	r2,r2,16
  807848:	21000094 	ori	r4,r4,2
  80784c:	003fef06 	br	80780c <__alt_mem_onchip_mem+0xff78780c>
  807850:	02c18004 	movi	r11,1536
  807854:	01000044 	movi	r4,1
  807858:	00800204 	movi	r2,8
  80785c:	003fe706 	br	8077fc <__alt_mem_onchip_mem+0xff7877fc>
  807860:	0017883a 	mov	r11,zero
  807864:	0009883a 	mov	r4,zero
  807868:	00800104 	movi	r2,4
  80786c:	003fe306 	br	8077fc <__alt_mem_onchip_mem+0xff7877fc>

00807870 <__sfvwrite_r>:
  807870:	30800217 	ldw	r2,8(r6)
  807874:	10006726 	beq	r2,zero,807a14 <__sfvwrite_r+0x1a4>
  807878:	28c0030b 	ldhu	r3,12(r5)
  80787c:	defff404 	addi	sp,sp,-48
  807880:	dd400715 	stw	r21,28(sp)
  807884:	dd000615 	stw	r20,24(sp)
  807888:	dc000215 	stw	r16,8(sp)
  80788c:	dfc00b15 	stw	ra,44(sp)
  807890:	df000a15 	stw	fp,40(sp)
  807894:	ddc00915 	stw	r23,36(sp)
  807898:	dd800815 	stw	r22,32(sp)
  80789c:	dcc00515 	stw	r19,20(sp)
  8078a0:	dc800415 	stw	r18,16(sp)
  8078a4:	dc400315 	stw	r17,12(sp)
  8078a8:	1880020c 	andi	r2,r3,8
  8078ac:	2821883a 	mov	r16,r5
  8078b0:	202b883a 	mov	r21,r4
  8078b4:	3029883a 	mov	r20,r6
  8078b8:	10002726 	beq	r2,zero,807958 <__sfvwrite_r+0xe8>
  8078bc:	28800417 	ldw	r2,16(r5)
  8078c0:	10002526 	beq	r2,zero,807958 <__sfvwrite_r+0xe8>
  8078c4:	1880008c 	andi	r2,r3,2
  8078c8:	a4400017 	ldw	r17,0(r20)
  8078cc:	10002a26 	beq	r2,zero,807978 <__sfvwrite_r+0x108>
  8078d0:	05a00034 	movhi	r22,32768
  8078d4:	0027883a 	mov	r19,zero
  8078d8:	0025883a 	mov	r18,zero
  8078dc:	b5bf0004 	addi	r22,r22,-1024
  8078e0:	980d883a 	mov	r6,r19
  8078e4:	a809883a 	mov	r4,r21
  8078e8:	90004626 	beq	r18,zero,807a04 <__sfvwrite_r+0x194>
  8078ec:	900f883a 	mov	r7,r18
  8078f0:	b480022e 	bgeu	r22,r18,8078fc <__sfvwrite_r+0x8c>
  8078f4:	01e00034 	movhi	r7,32768
  8078f8:	39ff0004 	addi	r7,r7,-1024
  8078fc:	80800917 	ldw	r2,36(r16)
  807900:	81400717 	ldw	r5,28(r16)
  807904:	103ee83a 	callr	r2
  807908:	0080570e 	bge	zero,r2,807a68 <__sfvwrite_r+0x1f8>
  80790c:	a0c00217 	ldw	r3,8(r20)
  807910:	98a7883a 	add	r19,r19,r2
  807914:	90a5c83a 	sub	r18,r18,r2
  807918:	1885c83a 	sub	r2,r3,r2
  80791c:	a0800215 	stw	r2,8(r20)
  807920:	103fef1e 	bne	r2,zero,8078e0 <__alt_mem_onchip_mem+0xff7878e0>
  807924:	0005883a 	mov	r2,zero
  807928:	dfc00b17 	ldw	ra,44(sp)
  80792c:	df000a17 	ldw	fp,40(sp)
  807930:	ddc00917 	ldw	r23,36(sp)
  807934:	dd800817 	ldw	r22,32(sp)
  807938:	dd400717 	ldw	r21,28(sp)
  80793c:	dd000617 	ldw	r20,24(sp)
  807940:	dcc00517 	ldw	r19,20(sp)
  807944:	dc800417 	ldw	r18,16(sp)
  807948:	dc400317 	ldw	r17,12(sp)
  80794c:	dc000217 	ldw	r16,8(sp)
  807950:	dec00c04 	addi	sp,sp,48
  807954:	f800283a 	ret
  807958:	800b883a 	mov	r5,r16
  80795c:	a809883a 	mov	r4,r21
  807960:	0805c900 	call	805c90 <__swsetup_r>
  807964:	1000eb1e 	bne	r2,zero,807d14 <__sfvwrite_r+0x4a4>
  807968:	80c0030b 	ldhu	r3,12(r16)
  80796c:	a4400017 	ldw	r17,0(r20)
  807970:	1880008c 	andi	r2,r3,2
  807974:	103fd61e 	bne	r2,zero,8078d0 <__alt_mem_onchip_mem+0xff7878d0>
  807978:	1880004c 	andi	r2,r3,1
  80797c:	10003f1e 	bne	r2,zero,807a7c <__sfvwrite_r+0x20c>
  807980:	0039883a 	mov	fp,zero
  807984:	0025883a 	mov	r18,zero
  807988:	90001a26 	beq	r18,zero,8079f4 <__sfvwrite_r+0x184>
  80798c:	1880800c 	andi	r2,r3,512
  807990:	84c00217 	ldw	r19,8(r16)
  807994:	10002126 	beq	r2,zero,807a1c <__sfvwrite_r+0x1ac>
  807998:	982f883a 	mov	r23,r19
  80799c:	94c09336 	bltu	r18,r19,807bec <__sfvwrite_r+0x37c>
  8079a0:	1881200c 	andi	r2,r3,1152
  8079a4:	10009e1e 	bne	r2,zero,807c20 <__sfvwrite_r+0x3b0>
  8079a8:	81000017 	ldw	r4,0(r16)
  8079ac:	b80d883a 	mov	r6,r23
  8079b0:	e00b883a 	mov	r5,fp
  8079b4:	08080e80 	call	8080e8 <memmove>
  8079b8:	80c00217 	ldw	r3,8(r16)
  8079bc:	81000017 	ldw	r4,0(r16)
  8079c0:	9005883a 	mov	r2,r18
  8079c4:	1ce7c83a 	sub	r19,r3,r19
  8079c8:	25cf883a 	add	r7,r4,r23
  8079cc:	84c00215 	stw	r19,8(r16)
  8079d0:	81c00015 	stw	r7,0(r16)
  8079d4:	a0c00217 	ldw	r3,8(r20)
  8079d8:	e0b9883a 	add	fp,fp,r2
  8079dc:	90a5c83a 	sub	r18,r18,r2
  8079e0:	18a7c83a 	sub	r19,r3,r2
  8079e4:	a4c00215 	stw	r19,8(r20)
  8079e8:	983fce26 	beq	r19,zero,807924 <__alt_mem_onchip_mem+0xff787924>
  8079ec:	80c0030b 	ldhu	r3,12(r16)
  8079f0:	903fe61e 	bne	r18,zero,80798c <__alt_mem_onchip_mem+0xff78798c>
  8079f4:	8f000017 	ldw	fp,0(r17)
  8079f8:	8c800117 	ldw	r18,4(r17)
  8079fc:	8c400204 	addi	r17,r17,8
  807a00:	003fe106 	br	807988 <__alt_mem_onchip_mem+0xff787988>
  807a04:	8cc00017 	ldw	r19,0(r17)
  807a08:	8c800117 	ldw	r18,4(r17)
  807a0c:	8c400204 	addi	r17,r17,8
  807a10:	003fb306 	br	8078e0 <__alt_mem_onchip_mem+0xff7878e0>
  807a14:	0005883a 	mov	r2,zero
  807a18:	f800283a 	ret
  807a1c:	81000017 	ldw	r4,0(r16)
  807a20:	80800417 	ldw	r2,16(r16)
  807a24:	11005736 	bltu	r2,r4,807b84 <__sfvwrite_r+0x314>
  807a28:	85c00517 	ldw	r23,20(r16)
  807a2c:	95c05536 	bltu	r18,r23,807b84 <__sfvwrite_r+0x314>
  807a30:	00a00034 	movhi	r2,32768
  807a34:	10bfffc4 	addi	r2,r2,-1
  807a38:	9009883a 	mov	r4,r18
  807a3c:	1480012e 	bgeu	r2,r18,807a44 <__sfvwrite_r+0x1d4>
  807a40:	1009883a 	mov	r4,r2
  807a44:	b80b883a 	mov	r5,r23
  807a48:	080c1c00 	call	80c1c0 <__divsi3>
  807a4c:	15cf383a 	mul	r7,r2,r23
  807a50:	81400717 	ldw	r5,28(r16)
  807a54:	80800917 	ldw	r2,36(r16)
  807a58:	e00d883a 	mov	r6,fp
  807a5c:	a809883a 	mov	r4,r21
  807a60:	103ee83a 	callr	r2
  807a64:	00bfdb16 	blt	zero,r2,8079d4 <__alt_mem_onchip_mem+0xff7879d4>
  807a68:	8080030b 	ldhu	r2,12(r16)
  807a6c:	10801014 	ori	r2,r2,64
  807a70:	8080030d 	sth	r2,12(r16)
  807a74:	00bfffc4 	movi	r2,-1
  807a78:	003fab06 	br	807928 <__alt_mem_onchip_mem+0xff787928>
  807a7c:	0027883a 	mov	r19,zero
  807a80:	0011883a 	mov	r8,zero
  807a84:	0039883a 	mov	fp,zero
  807a88:	0025883a 	mov	r18,zero
  807a8c:	90001f26 	beq	r18,zero,807b0c <__sfvwrite_r+0x29c>
  807a90:	40005a26 	beq	r8,zero,807bfc <__sfvwrite_r+0x38c>
  807a94:	982d883a 	mov	r22,r19
  807a98:	94c0012e 	bgeu	r18,r19,807aa0 <__sfvwrite_r+0x230>
  807a9c:	902d883a 	mov	r22,r18
  807aa0:	81000017 	ldw	r4,0(r16)
  807aa4:	80800417 	ldw	r2,16(r16)
  807aa8:	b02f883a 	mov	r23,r22
  807aac:	81c00517 	ldw	r7,20(r16)
  807ab0:	1100032e 	bgeu	r2,r4,807ac0 <__sfvwrite_r+0x250>
  807ab4:	80c00217 	ldw	r3,8(r16)
  807ab8:	38c7883a 	add	r3,r7,r3
  807abc:	1d801816 	blt	r3,r22,807b20 <__sfvwrite_r+0x2b0>
  807ac0:	b1c03e16 	blt	r22,r7,807bbc <__sfvwrite_r+0x34c>
  807ac4:	80800917 	ldw	r2,36(r16)
  807ac8:	81400717 	ldw	r5,28(r16)
  807acc:	e00d883a 	mov	r6,fp
  807ad0:	da000115 	stw	r8,4(sp)
  807ad4:	a809883a 	mov	r4,r21
  807ad8:	103ee83a 	callr	r2
  807adc:	102f883a 	mov	r23,r2
  807ae0:	da000117 	ldw	r8,4(sp)
  807ae4:	00bfe00e 	bge	zero,r2,807a68 <__alt_mem_onchip_mem+0xff787a68>
  807ae8:	9de7c83a 	sub	r19,r19,r23
  807aec:	98001f26 	beq	r19,zero,807b6c <__sfvwrite_r+0x2fc>
  807af0:	a0800217 	ldw	r2,8(r20)
  807af4:	e5f9883a 	add	fp,fp,r23
  807af8:	95e5c83a 	sub	r18,r18,r23
  807afc:	15efc83a 	sub	r23,r2,r23
  807b00:	a5c00215 	stw	r23,8(r20)
  807b04:	b83f8726 	beq	r23,zero,807924 <__alt_mem_onchip_mem+0xff787924>
  807b08:	903fe11e 	bne	r18,zero,807a90 <__alt_mem_onchip_mem+0xff787a90>
  807b0c:	8f000017 	ldw	fp,0(r17)
  807b10:	8c800117 	ldw	r18,4(r17)
  807b14:	0011883a 	mov	r8,zero
  807b18:	8c400204 	addi	r17,r17,8
  807b1c:	003fdb06 	br	807a8c <__alt_mem_onchip_mem+0xff787a8c>
  807b20:	180d883a 	mov	r6,r3
  807b24:	e00b883a 	mov	r5,fp
  807b28:	da000115 	stw	r8,4(sp)
  807b2c:	d8c00015 	stw	r3,0(sp)
  807b30:	08080e80 	call	8080e8 <memmove>
  807b34:	d8c00017 	ldw	r3,0(sp)
  807b38:	80800017 	ldw	r2,0(r16)
  807b3c:	800b883a 	mov	r5,r16
  807b40:	a809883a 	mov	r4,r21
  807b44:	10c5883a 	add	r2,r2,r3
  807b48:	80800015 	stw	r2,0(r16)
  807b4c:	d8c00015 	stw	r3,0(sp)
  807b50:	08012ec0 	call	8012ec <_fflush_r>
  807b54:	d8c00017 	ldw	r3,0(sp)
  807b58:	da000117 	ldw	r8,4(sp)
  807b5c:	103fc21e 	bne	r2,zero,807a68 <__alt_mem_onchip_mem+0xff787a68>
  807b60:	182f883a 	mov	r23,r3
  807b64:	9de7c83a 	sub	r19,r19,r23
  807b68:	983fe11e 	bne	r19,zero,807af0 <__alt_mem_onchip_mem+0xff787af0>
  807b6c:	800b883a 	mov	r5,r16
  807b70:	a809883a 	mov	r4,r21
  807b74:	08012ec0 	call	8012ec <_fflush_r>
  807b78:	103fbb1e 	bne	r2,zero,807a68 <__alt_mem_onchip_mem+0xff787a68>
  807b7c:	0011883a 	mov	r8,zero
  807b80:	003fdb06 	br	807af0 <__alt_mem_onchip_mem+0xff787af0>
  807b84:	94c0012e 	bgeu	r18,r19,807b8c <__sfvwrite_r+0x31c>
  807b88:	9027883a 	mov	r19,r18
  807b8c:	980d883a 	mov	r6,r19
  807b90:	e00b883a 	mov	r5,fp
  807b94:	08080e80 	call	8080e8 <memmove>
  807b98:	80800217 	ldw	r2,8(r16)
  807b9c:	80c00017 	ldw	r3,0(r16)
  807ba0:	14c5c83a 	sub	r2,r2,r19
  807ba4:	1cc7883a 	add	r3,r3,r19
  807ba8:	80800215 	stw	r2,8(r16)
  807bac:	80c00015 	stw	r3,0(r16)
  807bb0:	10004326 	beq	r2,zero,807cc0 <__sfvwrite_r+0x450>
  807bb4:	9805883a 	mov	r2,r19
  807bb8:	003f8606 	br	8079d4 <__alt_mem_onchip_mem+0xff7879d4>
  807bbc:	b00d883a 	mov	r6,r22
  807bc0:	e00b883a 	mov	r5,fp
  807bc4:	da000115 	stw	r8,4(sp)
  807bc8:	08080e80 	call	8080e8 <memmove>
  807bcc:	80800217 	ldw	r2,8(r16)
  807bd0:	80c00017 	ldw	r3,0(r16)
  807bd4:	da000117 	ldw	r8,4(sp)
  807bd8:	1585c83a 	sub	r2,r2,r22
  807bdc:	1dad883a 	add	r22,r3,r22
  807be0:	80800215 	stw	r2,8(r16)
  807be4:	85800015 	stw	r22,0(r16)
  807be8:	003fbf06 	br	807ae8 <__alt_mem_onchip_mem+0xff787ae8>
  807bec:	81000017 	ldw	r4,0(r16)
  807bf0:	9027883a 	mov	r19,r18
  807bf4:	902f883a 	mov	r23,r18
  807bf8:	003f6c06 	br	8079ac <__alt_mem_onchip_mem+0xff7879ac>
  807bfc:	900d883a 	mov	r6,r18
  807c00:	01400284 	movi	r5,10
  807c04:	e009883a 	mov	r4,fp
  807c08:	0807ebc0 	call	807ebc <memchr>
  807c0c:	10003e26 	beq	r2,zero,807d08 <__sfvwrite_r+0x498>
  807c10:	10800044 	addi	r2,r2,1
  807c14:	1727c83a 	sub	r19,r2,fp
  807c18:	02000044 	movi	r8,1
  807c1c:	003f9d06 	br	807a94 <__alt_mem_onchip_mem+0xff787a94>
  807c20:	80800517 	ldw	r2,20(r16)
  807c24:	81400417 	ldw	r5,16(r16)
  807c28:	81c00017 	ldw	r7,0(r16)
  807c2c:	10a7883a 	add	r19,r2,r2
  807c30:	9885883a 	add	r2,r19,r2
  807c34:	1026d7fa 	srli	r19,r2,31
  807c38:	396dc83a 	sub	r22,r7,r5
  807c3c:	b1000044 	addi	r4,r22,1
  807c40:	9885883a 	add	r2,r19,r2
  807c44:	1027d07a 	srai	r19,r2,1
  807c48:	2485883a 	add	r2,r4,r18
  807c4c:	980d883a 	mov	r6,r19
  807c50:	9880022e 	bgeu	r19,r2,807c5c <__sfvwrite_r+0x3ec>
  807c54:	1027883a 	mov	r19,r2
  807c58:	100d883a 	mov	r6,r2
  807c5c:	18c1000c 	andi	r3,r3,1024
  807c60:	18001c26 	beq	r3,zero,807cd4 <__sfvwrite_r+0x464>
  807c64:	300b883a 	mov	r5,r6
  807c68:	a809883a 	mov	r4,r21
  807c6c:	08026bc0 	call	8026bc <_malloc_r>
  807c70:	102f883a 	mov	r23,r2
  807c74:	10002926 	beq	r2,zero,807d1c <__sfvwrite_r+0x4ac>
  807c78:	81400417 	ldw	r5,16(r16)
  807c7c:	b00d883a 	mov	r6,r22
  807c80:	1009883a 	mov	r4,r2
  807c84:	0807fa00 	call	807fa0 <memcpy>
  807c88:	8080030b 	ldhu	r2,12(r16)
  807c8c:	00fedfc4 	movi	r3,-1153
  807c90:	10c4703a 	and	r2,r2,r3
  807c94:	10802014 	ori	r2,r2,128
  807c98:	8080030d 	sth	r2,12(r16)
  807c9c:	bd89883a 	add	r4,r23,r22
  807ca0:	9d8fc83a 	sub	r7,r19,r22
  807ca4:	85c00415 	stw	r23,16(r16)
  807ca8:	84c00515 	stw	r19,20(r16)
  807cac:	81000015 	stw	r4,0(r16)
  807cb0:	9027883a 	mov	r19,r18
  807cb4:	81c00215 	stw	r7,8(r16)
  807cb8:	902f883a 	mov	r23,r18
  807cbc:	003f3b06 	br	8079ac <__alt_mem_onchip_mem+0xff7879ac>
  807cc0:	800b883a 	mov	r5,r16
  807cc4:	a809883a 	mov	r4,r21
  807cc8:	08012ec0 	call	8012ec <_fflush_r>
  807ccc:	103fb926 	beq	r2,zero,807bb4 <__alt_mem_onchip_mem+0xff787bb4>
  807cd0:	003f6506 	br	807a68 <__alt_mem_onchip_mem+0xff787a68>
  807cd4:	a809883a 	mov	r4,r21
  807cd8:	08094080 	call	809408 <_realloc_r>
  807cdc:	102f883a 	mov	r23,r2
  807ce0:	103fee1e 	bne	r2,zero,807c9c <__alt_mem_onchip_mem+0xff787c9c>
  807ce4:	81400417 	ldw	r5,16(r16)
  807ce8:	a809883a 	mov	r4,r21
  807cec:	0801a8c0 	call	801a8c <_free_r>
  807cf0:	8080030b 	ldhu	r2,12(r16)
  807cf4:	00ffdfc4 	movi	r3,-129
  807cf8:	1884703a 	and	r2,r3,r2
  807cfc:	00c00304 	movi	r3,12
  807d00:	a8c00015 	stw	r3,0(r21)
  807d04:	003f5906 	br	807a6c <__alt_mem_onchip_mem+0xff787a6c>
  807d08:	94c00044 	addi	r19,r18,1
  807d0c:	02000044 	movi	r8,1
  807d10:	003f6006 	br	807a94 <__alt_mem_onchip_mem+0xff787a94>
  807d14:	00bfffc4 	movi	r2,-1
  807d18:	003f0306 	br	807928 <__alt_mem_onchip_mem+0xff787928>
  807d1c:	00800304 	movi	r2,12
  807d20:	a8800015 	stw	r2,0(r21)
  807d24:	8080030b 	ldhu	r2,12(r16)
  807d28:	003f5006 	br	807a6c <__alt_mem_onchip_mem+0xff787a6c>

00807d2c <_isatty_r>:
  807d2c:	defffd04 	addi	sp,sp,-12
  807d30:	dc000015 	stw	r16,0(sp)
  807d34:	04002074 	movhi	r16,129
  807d38:	dc400115 	stw	r17,4(sp)
  807d3c:	841b8704 	addi	r16,r16,28188
  807d40:	2023883a 	mov	r17,r4
  807d44:	2809883a 	mov	r4,r5
  807d48:	dfc00215 	stw	ra,8(sp)
  807d4c:	80000015 	stw	zero,0(r16)
  807d50:	080eee80 	call	80eee8 <isatty>
  807d54:	00ffffc4 	movi	r3,-1
  807d58:	10c00526 	beq	r2,r3,807d70 <_isatty_r+0x44>
  807d5c:	dfc00217 	ldw	ra,8(sp)
  807d60:	dc400117 	ldw	r17,4(sp)
  807d64:	dc000017 	ldw	r16,0(sp)
  807d68:	dec00304 	addi	sp,sp,12
  807d6c:	f800283a 	ret
  807d70:	80c00017 	ldw	r3,0(r16)
  807d74:	183ff926 	beq	r3,zero,807d5c <__alt_mem_onchip_mem+0xff787d5c>
  807d78:	88c00015 	stw	r3,0(r17)
  807d7c:	003ff706 	br	807d5c <__alt_mem_onchip_mem+0xff787d5c>

00807d80 <_setlocale_r>:
  807d80:	30001b26 	beq	r6,zero,807df0 <_setlocale_r+0x70>
  807d84:	01402074 	movhi	r5,129
  807d88:	defffe04 	addi	sp,sp,-8
  807d8c:	294c5004 	addi	r5,r5,12608
  807d90:	3009883a 	mov	r4,r6
  807d94:	dc000015 	stw	r16,0(sp)
  807d98:	dfc00115 	stw	ra,4(sp)
  807d9c:	3021883a 	mov	r16,r6
  807da0:	08099e00 	call	8099e0 <strcmp>
  807da4:	1000061e 	bne	r2,zero,807dc0 <_setlocale_r+0x40>
  807da8:	00802074 	movhi	r2,129
  807dac:	108b9104 	addi	r2,r2,11844
  807db0:	dfc00117 	ldw	ra,4(sp)
  807db4:	dc000017 	ldw	r16,0(sp)
  807db8:	dec00204 	addi	sp,sp,8
  807dbc:	f800283a 	ret
  807dc0:	01402074 	movhi	r5,129
  807dc4:	294b9104 	addi	r5,r5,11844
  807dc8:	8009883a 	mov	r4,r16
  807dcc:	08099e00 	call	8099e0 <strcmp>
  807dd0:	103ff526 	beq	r2,zero,807da8 <__alt_mem_onchip_mem+0xff787da8>
  807dd4:	01402074 	movhi	r5,129
  807dd8:	294b9b04 	addi	r5,r5,11884
  807ddc:	8009883a 	mov	r4,r16
  807de0:	08099e00 	call	8099e0 <strcmp>
  807de4:	103ff026 	beq	r2,zero,807da8 <__alt_mem_onchip_mem+0xff787da8>
  807de8:	0005883a 	mov	r2,zero
  807dec:	003ff006 	br	807db0 <__alt_mem_onchip_mem+0xff787db0>
  807df0:	00802074 	movhi	r2,129
  807df4:	108b9104 	addi	r2,r2,11844
  807df8:	f800283a 	ret

00807dfc <__locale_charset>:
  807dfc:	00802074 	movhi	r2,129
  807e00:	108f1104 	addi	r2,r2,15428
  807e04:	f800283a 	ret

00807e08 <__locale_mb_cur_max>:
  807e08:	00802074 	movhi	r2,129
  807e0c:	10942904 	addi	r2,r2,20644
  807e10:	10800017 	ldw	r2,0(r2)
  807e14:	f800283a 	ret

00807e18 <__locale_msgcharset>:
  807e18:	00802074 	movhi	r2,129
  807e1c:	108f0904 	addi	r2,r2,15396
  807e20:	f800283a 	ret

00807e24 <__locale_cjk_lang>:
  807e24:	0005883a 	mov	r2,zero
  807e28:	f800283a 	ret

00807e2c <_localeconv_r>:
  807e2c:	00802074 	movhi	r2,129
  807e30:	108f1904 	addi	r2,r2,15460
  807e34:	f800283a 	ret

00807e38 <setlocale>:
  807e38:	00802074 	movhi	r2,129
  807e3c:	10942504 	addi	r2,r2,20628
  807e40:	280d883a 	mov	r6,r5
  807e44:	200b883a 	mov	r5,r4
  807e48:	11000017 	ldw	r4,0(r2)
  807e4c:	0807d801 	jmpi	807d80 <_setlocale_r>

00807e50 <localeconv>:
  807e50:	00802074 	movhi	r2,129
  807e54:	108f1904 	addi	r2,r2,15460
  807e58:	f800283a 	ret

00807e5c <_lseek_r>:
  807e5c:	defffd04 	addi	sp,sp,-12
  807e60:	2805883a 	mov	r2,r5
  807e64:	dc000015 	stw	r16,0(sp)
  807e68:	04002074 	movhi	r16,129
  807e6c:	dc400115 	stw	r17,4(sp)
  807e70:	300b883a 	mov	r5,r6
  807e74:	841b8704 	addi	r16,r16,28188
  807e78:	2023883a 	mov	r17,r4
  807e7c:	380d883a 	mov	r6,r7
  807e80:	1009883a 	mov	r4,r2
  807e84:	dfc00215 	stw	ra,8(sp)
  807e88:	80000015 	stw	zero,0(r16)
  807e8c:	080f0b40 	call	80f0b4 <lseek>
  807e90:	00ffffc4 	movi	r3,-1
  807e94:	10c00526 	beq	r2,r3,807eac <_lseek_r+0x50>
  807e98:	dfc00217 	ldw	ra,8(sp)
  807e9c:	dc400117 	ldw	r17,4(sp)
  807ea0:	dc000017 	ldw	r16,0(sp)
  807ea4:	dec00304 	addi	sp,sp,12
  807ea8:	f800283a 	ret
  807eac:	80c00017 	ldw	r3,0(r16)
  807eb0:	183ff926 	beq	r3,zero,807e98 <__alt_mem_onchip_mem+0xff787e98>
  807eb4:	88c00015 	stw	r3,0(r17)
  807eb8:	003ff706 	br	807e98 <__alt_mem_onchip_mem+0xff787e98>

00807ebc <memchr>:
  807ebc:	208000cc 	andi	r2,r4,3
  807ec0:	280f883a 	mov	r7,r5
  807ec4:	10003426 	beq	r2,zero,807f98 <memchr+0xdc>
  807ec8:	30bfffc4 	addi	r2,r6,-1
  807ecc:	30001a26 	beq	r6,zero,807f38 <memchr+0x7c>
  807ed0:	20c00003 	ldbu	r3,0(r4)
  807ed4:	29803fcc 	andi	r6,r5,255
  807ed8:	30c0051e 	bne	r6,r3,807ef0 <memchr+0x34>
  807edc:	00001806 	br	807f40 <memchr+0x84>
  807ee0:	10001526 	beq	r2,zero,807f38 <memchr+0x7c>
  807ee4:	20c00003 	ldbu	r3,0(r4)
  807ee8:	10bfffc4 	addi	r2,r2,-1
  807eec:	30c01426 	beq	r6,r3,807f40 <memchr+0x84>
  807ef0:	21000044 	addi	r4,r4,1
  807ef4:	20c000cc 	andi	r3,r4,3
  807ef8:	183ff91e 	bne	r3,zero,807ee0 <__alt_mem_onchip_mem+0xff787ee0>
  807efc:	020000c4 	movi	r8,3
  807f00:	40801136 	bltu	r8,r2,807f48 <memchr+0x8c>
  807f04:	10000c26 	beq	r2,zero,807f38 <memchr+0x7c>
  807f08:	20c00003 	ldbu	r3,0(r4)
  807f0c:	29403fcc 	andi	r5,r5,255
  807f10:	28c00b26 	beq	r5,r3,807f40 <memchr+0x84>
  807f14:	20c00044 	addi	r3,r4,1
  807f18:	39803fcc 	andi	r6,r7,255
  807f1c:	2089883a 	add	r4,r4,r2
  807f20:	00000306 	br	807f30 <memchr+0x74>
  807f24:	18c00044 	addi	r3,r3,1
  807f28:	197fffc3 	ldbu	r5,-1(r3)
  807f2c:	31400526 	beq	r6,r5,807f44 <memchr+0x88>
  807f30:	1805883a 	mov	r2,r3
  807f34:	20fffb1e 	bne	r4,r3,807f24 <__alt_mem_onchip_mem+0xff787f24>
  807f38:	0005883a 	mov	r2,zero
  807f3c:	f800283a 	ret
  807f40:	2005883a 	mov	r2,r4
  807f44:	f800283a 	ret
  807f48:	28c03fcc 	andi	r3,r5,255
  807f4c:	1812923a 	slli	r9,r3,8
  807f50:	02ffbff4 	movhi	r11,65279
  807f54:	02a02074 	movhi	r10,32897
  807f58:	48d2b03a 	or	r9,r9,r3
  807f5c:	4806943a 	slli	r3,r9,16
  807f60:	5affbfc4 	addi	r11,r11,-257
  807f64:	52a02004 	addi	r10,r10,-32640
  807f68:	48d2b03a 	or	r9,r9,r3
  807f6c:	20c00017 	ldw	r3,0(r4)
  807f70:	48c6f03a 	xor	r3,r9,r3
  807f74:	1acd883a 	add	r6,r3,r11
  807f78:	00c6303a 	nor	r3,zero,r3
  807f7c:	30c6703a 	and	r3,r6,r3
  807f80:	1a86703a 	and	r3,r3,r10
  807f84:	183fe01e 	bne	r3,zero,807f08 <__alt_mem_onchip_mem+0xff787f08>
  807f88:	10bfff04 	addi	r2,r2,-4
  807f8c:	21000104 	addi	r4,r4,4
  807f90:	40bff636 	bltu	r8,r2,807f6c <__alt_mem_onchip_mem+0xff787f6c>
  807f94:	003fdb06 	br	807f04 <__alt_mem_onchip_mem+0xff787f04>
  807f98:	3005883a 	mov	r2,r6
  807f9c:	003fd706 	br	807efc <__alt_mem_onchip_mem+0xff787efc>

00807fa0 <memcpy>:
  807fa0:	defffd04 	addi	sp,sp,-12
  807fa4:	dfc00215 	stw	ra,8(sp)
  807fa8:	dc400115 	stw	r17,4(sp)
  807fac:	dc000015 	stw	r16,0(sp)
  807fb0:	00c003c4 	movi	r3,15
  807fb4:	2005883a 	mov	r2,r4
  807fb8:	1980452e 	bgeu	r3,r6,8080d0 <memcpy+0x130>
  807fbc:	2906b03a 	or	r3,r5,r4
  807fc0:	18c000cc 	andi	r3,r3,3
  807fc4:	1800441e 	bne	r3,zero,8080d8 <memcpy+0x138>
  807fc8:	347ffc04 	addi	r17,r6,-16
  807fcc:	8822d13a 	srli	r17,r17,4
  807fd0:	28c00104 	addi	r3,r5,4
  807fd4:	23400104 	addi	r13,r4,4
  807fd8:	8820913a 	slli	r16,r17,4
  807fdc:	2b000204 	addi	r12,r5,8
  807fe0:	22c00204 	addi	r11,r4,8
  807fe4:	84000504 	addi	r16,r16,20
  807fe8:	2a800304 	addi	r10,r5,12
  807fec:	22400304 	addi	r9,r4,12
  807ff0:	2c21883a 	add	r16,r5,r16
  807ff4:	2811883a 	mov	r8,r5
  807ff8:	200f883a 	mov	r7,r4
  807ffc:	41000017 	ldw	r4,0(r8)
  808000:	1fc00017 	ldw	ra,0(r3)
  808004:	63c00017 	ldw	r15,0(r12)
  808008:	39000015 	stw	r4,0(r7)
  80800c:	53800017 	ldw	r14,0(r10)
  808010:	6fc00015 	stw	ra,0(r13)
  808014:	5bc00015 	stw	r15,0(r11)
  808018:	4b800015 	stw	r14,0(r9)
  80801c:	18c00404 	addi	r3,r3,16
  808020:	39c00404 	addi	r7,r7,16
  808024:	42000404 	addi	r8,r8,16
  808028:	6b400404 	addi	r13,r13,16
  80802c:	63000404 	addi	r12,r12,16
  808030:	5ac00404 	addi	r11,r11,16
  808034:	52800404 	addi	r10,r10,16
  808038:	4a400404 	addi	r9,r9,16
  80803c:	1c3fef1e 	bne	r3,r16,807ffc <__alt_mem_onchip_mem+0xff787ffc>
  808040:	89c00044 	addi	r7,r17,1
  808044:	380e913a 	slli	r7,r7,4
  808048:	310003cc 	andi	r4,r6,15
  80804c:	02c000c4 	movi	r11,3
  808050:	11c7883a 	add	r3,r2,r7
  808054:	29cb883a 	add	r5,r5,r7
  808058:	5900212e 	bgeu	r11,r4,8080e0 <memcpy+0x140>
  80805c:	1813883a 	mov	r9,r3
  808060:	2811883a 	mov	r8,r5
  808064:	200f883a 	mov	r7,r4
  808068:	42800017 	ldw	r10,0(r8)
  80806c:	4a400104 	addi	r9,r9,4
  808070:	39ffff04 	addi	r7,r7,-4
  808074:	4abfff15 	stw	r10,-4(r9)
  808078:	42000104 	addi	r8,r8,4
  80807c:	59fffa36 	bltu	r11,r7,808068 <__alt_mem_onchip_mem+0xff788068>
  808080:	213fff04 	addi	r4,r4,-4
  808084:	2008d0ba 	srli	r4,r4,2
  808088:	318000cc 	andi	r6,r6,3
  80808c:	21000044 	addi	r4,r4,1
  808090:	2109883a 	add	r4,r4,r4
  808094:	2109883a 	add	r4,r4,r4
  808098:	1907883a 	add	r3,r3,r4
  80809c:	290b883a 	add	r5,r5,r4
  8080a0:	30000626 	beq	r6,zero,8080bc <memcpy+0x11c>
  8080a4:	198d883a 	add	r6,r3,r6
  8080a8:	29c00003 	ldbu	r7,0(r5)
  8080ac:	18c00044 	addi	r3,r3,1
  8080b0:	29400044 	addi	r5,r5,1
  8080b4:	19ffffc5 	stb	r7,-1(r3)
  8080b8:	19bffb1e 	bne	r3,r6,8080a8 <__alt_mem_onchip_mem+0xff7880a8>
  8080bc:	dfc00217 	ldw	ra,8(sp)
  8080c0:	dc400117 	ldw	r17,4(sp)
  8080c4:	dc000017 	ldw	r16,0(sp)
  8080c8:	dec00304 	addi	sp,sp,12
  8080cc:	f800283a 	ret
  8080d0:	2007883a 	mov	r3,r4
  8080d4:	003ff206 	br	8080a0 <__alt_mem_onchip_mem+0xff7880a0>
  8080d8:	2007883a 	mov	r3,r4
  8080dc:	003ff106 	br	8080a4 <__alt_mem_onchip_mem+0xff7880a4>
  8080e0:	200d883a 	mov	r6,r4
  8080e4:	003fee06 	br	8080a0 <__alt_mem_onchip_mem+0xff7880a0>

008080e8 <memmove>:
  8080e8:	2005883a 	mov	r2,r4
  8080ec:	29000b2e 	bgeu	r5,r4,80811c <memmove+0x34>
  8080f0:	298f883a 	add	r7,r5,r6
  8080f4:	21c0092e 	bgeu	r4,r7,80811c <memmove+0x34>
  8080f8:	2187883a 	add	r3,r4,r6
  8080fc:	198bc83a 	sub	r5,r3,r6
  808100:	30004826 	beq	r6,zero,808224 <memmove+0x13c>
  808104:	39ffffc4 	addi	r7,r7,-1
  808108:	39000003 	ldbu	r4,0(r7)
  80810c:	18ffffc4 	addi	r3,r3,-1
  808110:	19000005 	stb	r4,0(r3)
  808114:	28fffb1e 	bne	r5,r3,808104 <__alt_mem_onchip_mem+0xff788104>
  808118:	f800283a 	ret
  80811c:	00c003c4 	movi	r3,15
  808120:	1980412e 	bgeu	r3,r6,808228 <memmove+0x140>
  808124:	2886b03a 	or	r3,r5,r2
  808128:	18c000cc 	andi	r3,r3,3
  80812c:	1800401e 	bne	r3,zero,808230 <memmove+0x148>
  808130:	33fffc04 	addi	r15,r6,-16
  808134:	781ed13a 	srli	r15,r15,4
  808138:	28c00104 	addi	r3,r5,4
  80813c:	13400104 	addi	r13,r2,4
  808140:	781c913a 	slli	r14,r15,4
  808144:	2b000204 	addi	r12,r5,8
  808148:	12c00204 	addi	r11,r2,8
  80814c:	73800504 	addi	r14,r14,20
  808150:	2a800304 	addi	r10,r5,12
  808154:	12400304 	addi	r9,r2,12
  808158:	2b9d883a 	add	r14,r5,r14
  80815c:	2811883a 	mov	r8,r5
  808160:	100f883a 	mov	r7,r2
  808164:	41000017 	ldw	r4,0(r8)
  808168:	39c00404 	addi	r7,r7,16
  80816c:	18c00404 	addi	r3,r3,16
  808170:	393ffc15 	stw	r4,-16(r7)
  808174:	193ffc17 	ldw	r4,-16(r3)
  808178:	6b400404 	addi	r13,r13,16
  80817c:	5ac00404 	addi	r11,r11,16
  808180:	693ffc15 	stw	r4,-16(r13)
  808184:	61000017 	ldw	r4,0(r12)
  808188:	4a400404 	addi	r9,r9,16
  80818c:	42000404 	addi	r8,r8,16
  808190:	593ffc15 	stw	r4,-16(r11)
  808194:	51000017 	ldw	r4,0(r10)
  808198:	63000404 	addi	r12,r12,16
  80819c:	52800404 	addi	r10,r10,16
  8081a0:	493ffc15 	stw	r4,-16(r9)
  8081a4:	1bbfef1e 	bne	r3,r14,808164 <__alt_mem_onchip_mem+0xff788164>
  8081a8:	79000044 	addi	r4,r15,1
  8081ac:	2008913a 	slli	r4,r4,4
  8081b0:	328003cc 	andi	r10,r6,15
  8081b4:	02c000c4 	movi	r11,3
  8081b8:	1107883a 	add	r3,r2,r4
  8081bc:	290b883a 	add	r5,r5,r4
  8081c0:	5a801e2e 	bgeu	r11,r10,80823c <memmove+0x154>
  8081c4:	1813883a 	mov	r9,r3
  8081c8:	2811883a 	mov	r8,r5
  8081cc:	500f883a 	mov	r7,r10
  8081d0:	41000017 	ldw	r4,0(r8)
  8081d4:	4a400104 	addi	r9,r9,4
  8081d8:	39ffff04 	addi	r7,r7,-4
  8081dc:	493fff15 	stw	r4,-4(r9)
  8081e0:	42000104 	addi	r8,r8,4
  8081e4:	59fffa36 	bltu	r11,r7,8081d0 <__alt_mem_onchip_mem+0xff7881d0>
  8081e8:	513fff04 	addi	r4,r10,-4
  8081ec:	2008d0ba 	srli	r4,r4,2
  8081f0:	318000cc 	andi	r6,r6,3
  8081f4:	21000044 	addi	r4,r4,1
  8081f8:	2109883a 	add	r4,r4,r4
  8081fc:	2109883a 	add	r4,r4,r4
  808200:	1907883a 	add	r3,r3,r4
  808204:	290b883a 	add	r5,r5,r4
  808208:	30000b26 	beq	r6,zero,808238 <memmove+0x150>
  80820c:	198d883a 	add	r6,r3,r6
  808210:	29c00003 	ldbu	r7,0(r5)
  808214:	18c00044 	addi	r3,r3,1
  808218:	29400044 	addi	r5,r5,1
  80821c:	19ffffc5 	stb	r7,-1(r3)
  808220:	19bffb1e 	bne	r3,r6,808210 <__alt_mem_onchip_mem+0xff788210>
  808224:	f800283a 	ret
  808228:	1007883a 	mov	r3,r2
  80822c:	003ff606 	br	808208 <__alt_mem_onchip_mem+0xff788208>
  808230:	1007883a 	mov	r3,r2
  808234:	003ff506 	br	80820c <__alt_mem_onchip_mem+0xff78820c>
  808238:	f800283a 	ret
  80823c:	500d883a 	mov	r6,r10
  808240:	003ff106 	br	808208 <__alt_mem_onchip_mem+0xff788208>

00808244 <_Balloc>:
  808244:	20801317 	ldw	r2,76(r4)
  808248:	defffc04 	addi	sp,sp,-16
  80824c:	dc400115 	stw	r17,4(sp)
  808250:	dc000015 	stw	r16,0(sp)
  808254:	dfc00315 	stw	ra,12(sp)
  808258:	dc800215 	stw	r18,8(sp)
  80825c:	2023883a 	mov	r17,r4
  808260:	2821883a 	mov	r16,r5
  808264:	10000f26 	beq	r2,zero,8082a4 <_Balloc+0x60>
  808268:	8407883a 	add	r3,r16,r16
  80826c:	18c7883a 	add	r3,r3,r3
  808270:	10c7883a 	add	r3,r2,r3
  808274:	18800017 	ldw	r2,0(r3)
  808278:	10001126 	beq	r2,zero,8082c0 <_Balloc+0x7c>
  80827c:	11000017 	ldw	r4,0(r2)
  808280:	19000015 	stw	r4,0(r3)
  808284:	10000415 	stw	zero,16(r2)
  808288:	10000315 	stw	zero,12(r2)
  80828c:	dfc00317 	ldw	ra,12(sp)
  808290:	dc800217 	ldw	r18,8(sp)
  808294:	dc400117 	ldw	r17,4(sp)
  808298:	dc000017 	ldw	r16,0(sp)
  80829c:	dec00404 	addi	sp,sp,16
  8082a0:	f800283a 	ret
  8082a4:	01800844 	movi	r6,33
  8082a8:	01400104 	movi	r5,4
  8082ac:	080b25c0 	call	80b25c <_calloc_r>
  8082b0:	88801315 	stw	r2,76(r17)
  8082b4:	103fec1e 	bne	r2,zero,808268 <__alt_mem_onchip_mem+0xff788268>
  8082b8:	0005883a 	mov	r2,zero
  8082bc:	003ff306 	br	80828c <__alt_mem_onchip_mem+0xff78828c>
  8082c0:	01400044 	movi	r5,1
  8082c4:	2c24983a 	sll	r18,r5,r16
  8082c8:	8809883a 	mov	r4,r17
  8082cc:	91800144 	addi	r6,r18,5
  8082d0:	318d883a 	add	r6,r6,r6
  8082d4:	318d883a 	add	r6,r6,r6
  8082d8:	080b25c0 	call	80b25c <_calloc_r>
  8082dc:	103ff626 	beq	r2,zero,8082b8 <__alt_mem_onchip_mem+0xff7882b8>
  8082e0:	14000115 	stw	r16,4(r2)
  8082e4:	14800215 	stw	r18,8(r2)
  8082e8:	003fe606 	br	808284 <__alt_mem_onchip_mem+0xff788284>

008082ec <_Bfree>:
  8082ec:	28000826 	beq	r5,zero,808310 <_Bfree+0x24>
  8082f0:	28c00117 	ldw	r3,4(r5)
  8082f4:	20801317 	ldw	r2,76(r4)
  8082f8:	18c7883a 	add	r3,r3,r3
  8082fc:	18c7883a 	add	r3,r3,r3
  808300:	10c5883a 	add	r2,r2,r3
  808304:	10c00017 	ldw	r3,0(r2)
  808308:	28c00015 	stw	r3,0(r5)
  80830c:	11400015 	stw	r5,0(r2)
  808310:	f800283a 	ret

00808314 <__multadd>:
  808314:	defffa04 	addi	sp,sp,-24
  808318:	dc800315 	stw	r18,12(sp)
  80831c:	dc400215 	stw	r17,8(sp)
  808320:	dc000115 	stw	r16,4(sp)
  808324:	2823883a 	mov	r17,r5
  808328:	2c000417 	ldw	r16,16(r5)
  80832c:	dfc00515 	stw	ra,20(sp)
  808330:	dcc00415 	stw	r19,16(sp)
  808334:	2025883a 	mov	r18,r4
  808338:	29400504 	addi	r5,r5,20
  80833c:	0011883a 	mov	r8,zero
  808340:	28c00017 	ldw	r3,0(r5)
  808344:	29400104 	addi	r5,r5,4
  808348:	42000044 	addi	r8,r8,1
  80834c:	18bfffcc 	andi	r2,r3,65535
  808350:	1185383a 	mul	r2,r2,r6
  808354:	1806d43a 	srli	r3,r3,16
  808358:	11cf883a 	add	r7,r2,r7
  80835c:	3808d43a 	srli	r4,r7,16
  808360:	1987383a 	mul	r3,r3,r6
  808364:	38bfffcc 	andi	r2,r7,65535
  808368:	1907883a 	add	r3,r3,r4
  80836c:	1808943a 	slli	r4,r3,16
  808370:	180ed43a 	srli	r7,r3,16
  808374:	2085883a 	add	r2,r4,r2
  808378:	28bfff15 	stw	r2,-4(r5)
  80837c:	443ff016 	blt	r8,r16,808340 <__alt_mem_onchip_mem+0xff788340>
  808380:	38000926 	beq	r7,zero,8083a8 <__multadd+0x94>
  808384:	88800217 	ldw	r2,8(r17)
  808388:	80800f0e 	bge	r16,r2,8083c8 <__multadd+0xb4>
  80838c:	80800144 	addi	r2,r16,5
  808390:	1085883a 	add	r2,r2,r2
  808394:	1085883a 	add	r2,r2,r2
  808398:	8885883a 	add	r2,r17,r2
  80839c:	11c00015 	stw	r7,0(r2)
  8083a0:	84000044 	addi	r16,r16,1
  8083a4:	8c000415 	stw	r16,16(r17)
  8083a8:	8805883a 	mov	r2,r17
  8083ac:	dfc00517 	ldw	ra,20(sp)
  8083b0:	dcc00417 	ldw	r19,16(sp)
  8083b4:	dc800317 	ldw	r18,12(sp)
  8083b8:	dc400217 	ldw	r17,8(sp)
  8083bc:	dc000117 	ldw	r16,4(sp)
  8083c0:	dec00604 	addi	sp,sp,24
  8083c4:	f800283a 	ret
  8083c8:	89400117 	ldw	r5,4(r17)
  8083cc:	9009883a 	mov	r4,r18
  8083d0:	d9c00015 	stw	r7,0(sp)
  8083d4:	29400044 	addi	r5,r5,1
  8083d8:	08082440 	call	808244 <_Balloc>
  8083dc:	89800417 	ldw	r6,16(r17)
  8083e0:	89400304 	addi	r5,r17,12
  8083e4:	11000304 	addi	r4,r2,12
  8083e8:	31800084 	addi	r6,r6,2
  8083ec:	318d883a 	add	r6,r6,r6
  8083f0:	318d883a 	add	r6,r6,r6
  8083f4:	1027883a 	mov	r19,r2
  8083f8:	0807fa00 	call	807fa0 <memcpy>
  8083fc:	d9c00017 	ldw	r7,0(sp)
  808400:	88000a26 	beq	r17,zero,80842c <__multadd+0x118>
  808404:	88c00117 	ldw	r3,4(r17)
  808408:	90801317 	ldw	r2,76(r18)
  80840c:	18c7883a 	add	r3,r3,r3
  808410:	18c7883a 	add	r3,r3,r3
  808414:	10c5883a 	add	r2,r2,r3
  808418:	10c00017 	ldw	r3,0(r2)
  80841c:	88c00015 	stw	r3,0(r17)
  808420:	14400015 	stw	r17,0(r2)
  808424:	9823883a 	mov	r17,r19
  808428:	003fd806 	br	80838c <__alt_mem_onchip_mem+0xff78838c>
  80842c:	9823883a 	mov	r17,r19
  808430:	003fd606 	br	80838c <__alt_mem_onchip_mem+0xff78838c>

00808434 <__s2b>:
  808434:	defff904 	addi	sp,sp,-28
  808438:	dc400115 	stw	r17,4(sp)
  80843c:	dc000015 	stw	r16,0(sp)
  808440:	2023883a 	mov	r17,r4
  808444:	2821883a 	mov	r16,r5
  808448:	39000204 	addi	r4,r7,8
  80844c:	01400244 	movi	r5,9
  808450:	dcc00315 	stw	r19,12(sp)
  808454:	dc800215 	stw	r18,8(sp)
  808458:	dfc00615 	stw	ra,24(sp)
  80845c:	dd400515 	stw	r21,20(sp)
  808460:	dd000415 	stw	r20,16(sp)
  808464:	3825883a 	mov	r18,r7
  808468:	3027883a 	mov	r19,r6
  80846c:	080c1c00 	call	80c1c0 <__divsi3>
  808470:	00c00044 	movi	r3,1
  808474:	000b883a 	mov	r5,zero
  808478:	1880030e 	bge	r3,r2,808488 <__s2b+0x54>
  80847c:	18c7883a 	add	r3,r3,r3
  808480:	29400044 	addi	r5,r5,1
  808484:	18bffd16 	blt	r3,r2,80847c <__alt_mem_onchip_mem+0xff78847c>
  808488:	8809883a 	mov	r4,r17
  80848c:	08082440 	call	808244 <_Balloc>
  808490:	d8c00717 	ldw	r3,28(sp)
  808494:	10c00515 	stw	r3,20(r2)
  808498:	00c00044 	movi	r3,1
  80849c:	10c00415 	stw	r3,16(r2)
  8084a0:	00c00244 	movi	r3,9
  8084a4:	1cc0210e 	bge	r3,r19,80852c <__s2b+0xf8>
  8084a8:	80eb883a 	add	r21,r16,r3
  8084ac:	a829883a 	mov	r20,r21
  8084b0:	84e1883a 	add	r16,r16,r19
  8084b4:	a1c00007 	ldb	r7,0(r20)
  8084b8:	01800284 	movi	r6,10
  8084bc:	a5000044 	addi	r20,r20,1
  8084c0:	100b883a 	mov	r5,r2
  8084c4:	39fff404 	addi	r7,r7,-48
  8084c8:	8809883a 	mov	r4,r17
  8084cc:	08083140 	call	808314 <__multadd>
  8084d0:	a43ff81e 	bne	r20,r16,8084b4 <__alt_mem_onchip_mem+0xff7884b4>
  8084d4:	ace1883a 	add	r16,r21,r19
  8084d8:	843ffe04 	addi	r16,r16,-8
  8084dc:	9c800a0e 	bge	r19,r18,808508 <__s2b+0xd4>
  8084e0:	94e5c83a 	sub	r18,r18,r19
  8084e4:	84a5883a 	add	r18,r16,r18
  8084e8:	81c00007 	ldb	r7,0(r16)
  8084ec:	01800284 	movi	r6,10
  8084f0:	84000044 	addi	r16,r16,1
  8084f4:	100b883a 	mov	r5,r2
  8084f8:	39fff404 	addi	r7,r7,-48
  8084fc:	8809883a 	mov	r4,r17
  808500:	08083140 	call	808314 <__multadd>
  808504:	84bff81e 	bne	r16,r18,8084e8 <__alt_mem_onchip_mem+0xff7884e8>
  808508:	dfc00617 	ldw	ra,24(sp)
  80850c:	dd400517 	ldw	r21,20(sp)
  808510:	dd000417 	ldw	r20,16(sp)
  808514:	dcc00317 	ldw	r19,12(sp)
  808518:	dc800217 	ldw	r18,8(sp)
  80851c:	dc400117 	ldw	r17,4(sp)
  808520:	dc000017 	ldw	r16,0(sp)
  808524:	dec00704 	addi	sp,sp,28
  808528:	f800283a 	ret
  80852c:	84000284 	addi	r16,r16,10
  808530:	1827883a 	mov	r19,r3
  808534:	003fe906 	br	8084dc <__alt_mem_onchip_mem+0xff7884dc>

00808538 <__hi0bits>:
  808538:	20bfffec 	andhi	r2,r4,65535
  80853c:	1000141e 	bne	r2,zero,808590 <__hi0bits+0x58>
  808540:	2008943a 	slli	r4,r4,16
  808544:	00800404 	movi	r2,16
  808548:	20ffc02c 	andhi	r3,r4,65280
  80854c:	1800021e 	bne	r3,zero,808558 <__hi0bits+0x20>
  808550:	2008923a 	slli	r4,r4,8
  808554:	10800204 	addi	r2,r2,8
  808558:	20fc002c 	andhi	r3,r4,61440
  80855c:	1800021e 	bne	r3,zero,808568 <__hi0bits+0x30>
  808560:	2008913a 	slli	r4,r4,4
  808564:	10800104 	addi	r2,r2,4
  808568:	20f0002c 	andhi	r3,r4,49152
  80856c:	1800031e 	bne	r3,zero,80857c <__hi0bits+0x44>
  808570:	2109883a 	add	r4,r4,r4
  808574:	10800084 	addi	r2,r2,2
  808578:	2109883a 	add	r4,r4,r4
  80857c:	20000316 	blt	r4,zero,80858c <__hi0bits+0x54>
  808580:	2110002c 	andhi	r4,r4,16384
  808584:	2000041e 	bne	r4,zero,808598 <__hi0bits+0x60>
  808588:	00800804 	movi	r2,32
  80858c:	f800283a 	ret
  808590:	0005883a 	mov	r2,zero
  808594:	003fec06 	br	808548 <__alt_mem_onchip_mem+0xff788548>
  808598:	10800044 	addi	r2,r2,1
  80859c:	f800283a 	ret

008085a0 <__lo0bits>:
  8085a0:	20c00017 	ldw	r3,0(r4)
  8085a4:	188001cc 	andi	r2,r3,7
  8085a8:	10000826 	beq	r2,zero,8085cc <__lo0bits+0x2c>
  8085ac:	1880004c 	andi	r2,r3,1
  8085b0:	1000211e 	bne	r2,zero,808638 <__lo0bits+0x98>
  8085b4:	1880008c 	andi	r2,r3,2
  8085b8:	1000211e 	bne	r2,zero,808640 <__lo0bits+0xa0>
  8085bc:	1806d0ba 	srli	r3,r3,2
  8085c0:	00800084 	movi	r2,2
  8085c4:	20c00015 	stw	r3,0(r4)
  8085c8:	f800283a 	ret
  8085cc:	18bfffcc 	andi	r2,r3,65535
  8085d0:	10001326 	beq	r2,zero,808620 <__lo0bits+0x80>
  8085d4:	0005883a 	mov	r2,zero
  8085d8:	19403fcc 	andi	r5,r3,255
  8085dc:	2800021e 	bne	r5,zero,8085e8 <__lo0bits+0x48>
  8085e0:	1806d23a 	srli	r3,r3,8
  8085e4:	10800204 	addi	r2,r2,8
  8085e8:	194003cc 	andi	r5,r3,15
  8085ec:	2800021e 	bne	r5,zero,8085f8 <__lo0bits+0x58>
  8085f0:	1806d13a 	srli	r3,r3,4
  8085f4:	10800104 	addi	r2,r2,4
  8085f8:	194000cc 	andi	r5,r3,3
  8085fc:	2800021e 	bne	r5,zero,808608 <__lo0bits+0x68>
  808600:	1806d0ba 	srli	r3,r3,2
  808604:	10800084 	addi	r2,r2,2
  808608:	1940004c 	andi	r5,r3,1
  80860c:	2800081e 	bne	r5,zero,808630 <__lo0bits+0x90>
  808610:	1806d07a 	srli	r3,r3,1
  808614:	1800051e 	bne	r3,zero,80862c <__lo0bits+0x8c>
  808618:	00800804 	movi	r2,32
  80861c:	f800283a 	ret
  808620:	1806d43a 	srli	r3,r3,16
  808624:	00800404 	movi	r2,16
  808628:	003feb06 	br	8085d8 <__alt_mem_onchip_mem+0xff7885d8>
  80862c:	10800044 	addi	r2,r2,1
  808630:	20c00015 	stw	r3,0(r4)
  808634:	f800283a 	ret
  808638:	0005883a 	mov	r2,zero
  80863c:	f800283a 	ret
  808640:	1806d07a 	srli	r3,r3,1
  808644:	00800044 	movi	r2,1
  808648:	20c00015 	stw	r3,0(r4)
  80864c:	f800283a 	ret

00808650 <__i2b>:
  808650:	defffd04 	addi	sp,sp,-12
  808654:	dc000015 	stw	r16,0(sp)
  808658:	04000044 	movi	r16,1
  80865c:	dc400115 	stw	r17,4(sp)
  808660:	2823883a 	mov	r17,r5
  808664:	800b883a 	mov	r5,r16
  808668:	dfc00215 	stw	ra,8(sp)
  80866c:	08082440 	call	808244 <_Balloc>
  808670:	14400515 	stw	r17,20(r2)
  808674:	14000415 	stw	r16,16(r2)
  808678:	dfc00217 	ldw	ra,8(sp)
  80867c:	dc400117 	ldw	r17,4(sp)
  808680:	dc000017 	ldw	r16,0(sp)
  808684:	dec00304 	addi	sp,sp,12
  808688:	f800283a 	ret

0080868c <__multiply>:
  80868c:	defffa04 	addi	sp,sp,-24
  808690:	dcc00315 	stw	r19,12(sp)
  808694:	dc800215 	stw	r18,8(sp)
  808698:	34c00417 	ldw	r19,16(r6)
  80869c:	2c800417 	ldw	r18,16(r5)
  8086a0:	dd000415 	stw	r20,16(sp)
  8086a4:	dc400115 	stw	r17,4(sp)
  8086a8:	dfc00515 	stw	ra,20(sp)
  8086ac:	dc000015 	stw	r16,0(sp)
  8086b0:	2829883a 	mov	r20,r5
  8086b4:	3023883a 	mov	r17,r6
  8086b8:	94c0050e 	bge	r18,r19,8086d0 <__multiply+0x44>
  8086bc:	9007883a 	mov	r3,r18
  8086c0:	3029883a 	mov	r20,r6
  8086c4:	9825883a 	mov	r18,r19
  8086c8:	2823883a 	mov	r17,r5
  8086cc:	1827883a 	mov	r19,r3
  8086d0:	a0800217 	ldw	r2,8(r20)
  8086d4:	94e1883a 	add	r16,r18,r19
  8086d8:	a1400117 	ldw	r5,4(r20)
  8086dc:	1400010e 	bge	r2,r16,8086e4 <__multiply+0x58>
  8086e0:	29400044 	addi	r5,r5,1
  8086e4:	08082440 	call	808244 <_Balloc>
  8086e8:	8415883a 	add	r10,r16,r16
  8086ec:	12c00504 	addi	r11,r2,20
  8086f0:	5295883a 	add	r10,r10,r10
  8086f4:	5a95883a 	add	r10,r11,r10
  8086f8:	5807883a 	mov	r3,r11
  8086fc:	5a80032e 	bgeu	r11,r10,80870c <__multiply+0x80>
  808700:	18000015 	stw	zero,0(r3)
  808704:	18c00104 	addi	r3,r3,4
  808708:	1abffd36 	bltu	r3,r10,808700 <__alt_mem_onchip_mem+0xff788700>
  80870c:	9ce7883a 	add	r19,r19,r19
  808710:	94a5883a 	add	r18,r18,r18
  808714:	89800504 	addi	r6,r17,20
  808718:	9ce7883a 	add	r19,r19,r19
  80871c:	a3400504 	addi	r13,r20,20
  808720:	94a5883a 	add	r18,r18,r18
  808724:	34d9883a 	add	r12,r6,r19
  808728:	6c93883a 	add	r9,r13,r18
  80872c:	3300422e 	bgeu	r6,r12,808838 <__multiply+0x1ac>
  808730:	37c00017 	ldw	ra,0(r6)
  808734:	fbffffcc 	andi	r15,ra,65535
  808738:	78001b26 	beq	r15,zero,8087a8 <__multiply+0x11c>
  80873c:	5811883a 	mov	r8,r11
  808740:	681d883a 	mov	r14,r13
  808744:	000f883a 	mov	r7,zero
  808748:	71000017 	ldw	r4,0(r14)
  80874c:	40c00017 	ldw	r3,0(r8)
  808750:	73800104 	addi	r14,r14,4
  808754:	217fffcc 	andi	r5,r4,65535
  808758:	2bcb383a 	mul	r5,r5,r15
  80875c:	2008d43a 	srli	r4,r4,16
  808760:	1c7fffcc 	andi	r17,r3,65535
  808764:	2c4b883a 	add	r5,r5,r17
  808768:	29cb883a 	add	r5,r5,r7
  80876c:	23c9383a 	mul	r4,r4,r15
  808770:	1806d43a 	srli	r3,r3,16
  808774:	280ed43a 	srli	r7,r5,16
  808778:	297fffcc 	andi	r5,r5,65535
  80877c:	20c7883a 	add	r3,r4,r3
  808780:	19c7883a 	add	r3,r3,r7
  808784:	1808943a 	slli	r4,r3,16
  808788:	4023883a 	mov	r17,r8
  80878c:	180ed43a 	srli	r7,r3,16
  808790:	214ab03a 	or	r5,r4,r5
  808794:	41400015 	stw	r5,0(r8)
  808798:	42000104 	addi	r8,r8,4
  80879c:	727fea36 	bltu	r14,r9,808748 <__alt_mem_onchip_mem+0xff788748>
  8087a0:	89c00115 	stw	r7,4(r17)
  8087a4:	37c00017 	ldw	ra,0(r6)
  8087a8:	f83ed43a 	srli	ra,ra,16
  8087ac:	f8001f26 	beq	ra,zero,80882c <__multiply+0x1a0>
  8087b0:	58c00017 	ldw	r3,0(r11)
  8087b4:	681d883a 	mov	r14,r13
  8087b8:	581f883a 	mov	r15,r11
  8087bc:	1811883a 	mov	r8,r3
  8087c0:	5825883a 	mov	r18,r11
  8087c4:	000f883a 	mov	r7,zero
  8087c8:	00000106 	br	8087d0 <__multiply+0x144>
  8087cc:	8825883a 	mov	r18,r17
  8087d0:	7140000b 	ldhu	r5,0(r14)
  8087d4:	4010d43a 	srli	r8,r8,16
  8087d8:	193fffcc 	andi	r4,r3,65535
  8087dc:	2fcb383a 	mul	r5,r5,ra
  8087e0:	7bc00104 	addi	r15,r15,4
  8087e4:	73800104 	addi	r14,r14,4
  8087e8:	2a0b883a 	add	r5,r5,r8
  8087ec:	29cb883a 	add	r5,r5,r7
  8087f0:	2806943a 	slli	r3,r5,16
  8087f4:	94400104 	addi	r17,r18,4
  8087f8:	280ad43a 	srli	r5,r5,16
  8087fc:	1908b03a 	or	r4,r3,r4
  808800:	793fff15 	stw	r4,-4(r15)
  808804:	70ffff17 	ldw	r3,-4(r14)
  808808:	8a000017 	ldw	r8,0(r17)
  80880c:	1806d43a 	srli	r3,r3,16
  808810:	413fffcc 	andi	r4,r8,65535
  808814:	1fc7383a 	mul	r3,r3,ra
  808818:	1907883a 	add	r3,r3,r4
  80881c:	1947883a 	add	r3,r3,r5
  808820:	180ed43a 	srli	r7,r3,16
  808824:	727fe936 	bltu	r14,r9,8087cc <__alt_mem_onchip_mem+0xff7887cc>
  808828:	90c00115 	stw	r3,4(r18)
  80882c:	31800104 	addi	r6,r6,4
  808830:	5ac00104 	addi	r11,r11,4
  808834:	333fbe36 	bltu	r6,r12,808730 <__alt_mem_onchip_mem+0xff788730>
  808838:	0400090e 	bge	zero,r16,808860 <__multiply+0x1d4>
  80883c:	50ffff17 	ldw	r3,-4(r10)
  808840:	52bfff04 	addi	r10,r10,-4
  808844:	18000326 	beq	r3,zero,808854 <__multiply+0x1c8>
  808848:	00000506 	br	808860 <__multiply+0x1d4>
  80884c:	50c00017 	ldw	r3,0(r10)
  808850:	1800031e 	bne	r3,zero,808860 <__multiply+0x1d4>
  808854:	843fffc4 	addi	r16,r16,-1
  808858:	52bfff04 	addi	r10,r10,-4
  80885c:	803ffb1e 	bne	r16,zero,80884c <__alt_mem_onchip_mem+0xff78884c>
  808860:	14000415 	stw	r16,16(r2)
  808864:	dfc00517 	ldw	ra,20(sp)
  808868:	dd000417 	ldw	r20,16(sp)
  80886c:	dcc00317 	ldw	r19,12(sp)
  808870:	dc800217 	ldw	r18,8(sp)
  808874:	dc400117 	ldw	r17,4(sp)
  808878:	dc000017 	ldw	r16,0(sp)
  80887c:	dec00604 	addi	sp,sp,24
  808880:	f800283a 	ret

00808884 <__pow5mult>:
  808884:	defffa04 	addi	sp,sp,-24
  808888:	dcc00315 	stw	r19,12(sp)
  80888c:	dc000015 	stw	r16,0(sp)
  808890:	dfc00515 	stw	ra,20(sp)
  808894:	dd000415 	stw	r20,16(sp)
  808898:	dc800215 	stw	r18,8(sp)
  80889c:	dc400115 	stw	r17,4(sp)
  8088a0:	308000cc 	andi	r2,r6,3
  8088a4:	3021883a 	mov	r16,r6
  8088a8:	2027883a 	mov	r19,r4
  8088ac:	10002f1e 	bne	r2,zero,80896c <__pow5mult+0xe8>
  8088b0:	2825883a 	mov	r18,r5
  8088b4:	8021d0ba 	srai	r16,r16,2
  8088b8:	80001a26 	beq	r16,zero,808924 <__pow5mult+0xa0>
  8088bc:	9c401217 	ldw	r17,72(r19)
  8088c0:	8800061e 	bne	r17,zero,8088dc <__pow5mult+0x58>
  8088c4:	00003406 	br	808998 <__pow5mult+0x114>
  8088c8:	8021d07a 	srai	r16,r16,1
  8088cc:	80001526 	beq	r16,zero,808924 <__pow5mult+0xa0>
  8088d0:	88800017 	ldw	r2,0(r17)
  8088d4:	10001c26 	beq	r2,zero,808948 <__pow5mult+0xc4>
  8088d8:	1023883a 	mov	r17,r2
  8088dc:	8080004c 	andi	r2,r16,1
  8088e0:	103ff926 	beq	r2,zero,8088c8 <__alt_mem_onchip_mem+0xff7888c8>
  8088e4:	880d883a 	mov	r6,r17
  8088e8:	900b883a 	mov	r5,r18
  8088ec:	9809883a 	mov	r4,r19
  8088f0:	080868c0 	call	80868c <__multiply>
  8088f4:	90001b26 	beq	r18,zero,808964 <__pow5mult+0xe0>
  8088f8:	91000117 	ldw	r4,4(r18)
  8088fc:	98c01317 	ldw	r3,76(r19)
  808900:	8021d07a 	srai	r16,r16,1
  808904:	2109883a 	add	r4,r4,r4
  808908:	2109883a 	add	r4,r4,r4
  80890c:	1907883a 	add	r3,r3,r4
  808910:	19000017 	ldw	r4,0(r3)
  808914:	91000015 	stw	r4,0(r18)
  808918:	1c800015 	stw	r18,0(r3)
  80891c:	1025883a 	mov	r18,r2
  808920:	803feb1e 	bne	r16,zero,8088d0 <__alt_mem_onchip_mem+0xff7888d0>
  808924:	9005883a 	mov	r2,r18
  808928:	dfc00517 	ldw	ra,20(sp)
  80892c:	dd000417 	ldw	r20,16(sp)
  808930:	dcc00317 	ldw	r19,12(sp)
  808934:	dc800217 	ldw	r18,8(sp)
  808938:	dc400117 	ldw	r17,4(sp)
  80893c:	dc000017 	ldw	r16,0(sp)
  808940:	dec00604 	addi	sp,sp,24
  808944:	f800283a 	ret
  808948:	880d883a 	mov	r6,r17
  80894c:	880b883a 	mov	r5,r17
  808950:	9809883a 	mov	r4,r19
  808954:	080868c0 	call	80868c <__multiply>
  808958:	88800015 	stw	r2,0(r17)
  80895c:	10000015 	stw	zero,0(r2)
  808960:	003fdd06 	br	8088d8 <__alt_mem_onchip_mem+0xff7888d8>
  808964:	1025883a 	mov	r18,r2
  808968:	003fd706 	br	8088c8 <__alt_mem_onchip_mem+0xff7888c8>
  80896c:	10bfffc4 	addi	r2,r2,-1
  808970:	1085883a 	add	r2,r2,r2
  808974:	00c02074 	movhi	r3,129
  808978:	18cc5304 	addi	r3,r3,12620
  80897c:	1085883a 	add	r2,r2,r2
  808980:	1885883a 	add	r2,r3,r2
  808984:	11800017 	ldw	r6,0(r2)
  808988:	000f883a 	mov	r7,zero
  80898c:	08083140 	call	808314 <__multadd>
  808990:	1025883a 	mov	r18,r2
  808994:	003fc706 	br	8088b4 <__alt_mem_onchip_mem+0xff7888b4>
  808998:	05000044 	movi	r20,1
  80899c:	a00b883a 	mov	r5,r20
  8089a0:	9809883a 	mov	r4,r19
  8089a4:	08082440 	call	808244 <_Balloc>
  8089a8:	1023883a 	mov	r17,r2
  8089ac:	00809c44 	movi	r2,625
  8089b0:	88800515 	stw	r2,20(r17)
  8089b4:	8d000415 	stw	r20,16(r17)
  8089b8:	9c401215 	stw	r17,72(r19)
  8089bc:	88000015 	stw	zero,0(r17)
  8089c0:	003fc606 	br	8088dc <__alt_mem_onchip_mem+0xff7888dc>

008089c4 <__lshift>:
  8089c4:	defff904 	addi	sp,sp,-28
  8089c8:	dd400515 	stw	r21,20(sp)
  8089cc:	dcc00315 	stw	r19,12(sp)
  8089d0:	302bd17a 	srai	r21,r6,5
  8089d4:	2cc00417 	ldw	r19,16(r5)
  8089d8:	28800217 	ldw	r2,8(r5)
  8089dc:	dd000415 	stw	r20,16(sp)
  8089e0:	ace7883a 	add	r19,r21,r19
  8089e4:	dc800215 	stw	r18,8(sp)
  8089e8:	dc400115 	stw	r17,4(sp)
  8089ec:	dc000015 	stw	r16,0(sp)
  8089f0:	dfc00615 	stw	ra,24(sp)
  8089f4:	9c000044 	addi	r16,r19,1
  8089f8:	2823883a 	mov	r17,r5
  8089fc:	3029883a 	mov	r20,r6
  808a00:	2025883a 	mov	r18,r4
  808a04:	29400117 	ldw	r5,4(r5)
  808a08:	1400030e 	bge	r2,r16,808a18 <__lshift+0x54>
  808a0c:	1085883a 	add	r2,r2,r2
  808a10:	29400044 	addi	r5,r5,1
  808a14:	143ffd16 	blt	r2,r16,808a0c <__alt_mem_onchip_mem+0xff788a0c>
  808a18:	9009883a 	mov	r4,r18
  808a1c:	08082440 	call	808244 <_Balloc>
  808a20:	10c00504 	addi	r3,r2,20
  808a24:	0540070e 	bge	zero,r21,808a44 <__lshift+0x80>
  808a28:	ad6b883a 	add	r21,r21,r21
  808a2c:	ad6b883a 	add	r21,r21,r21
  808a30:	1809883a 	mov	r4,r3
  808a34:	1d47883a 	add	r3,r3,r21
  808a38:	20000015 	stw	zero,0(r4)
  808a3c:	21000104 	addi	r4,r4,4
  808a40:	193ffd1e 	bne	r3,r4,808a38 <__alt_mem_onchip_mem+0xff788a38>
  808a44:	8a000417 	ldw	r8,16(r17)
  808a48:	89000504 	addi	r4,r17,20
  808a4c:	a18007cc 	andi	r6,r20,31
  808a50:	4211883a 	add	r8,r8,r8
  808a54:	4211883a 	add	r8,r8,r8
  808a58:	2211883a 	add	r8,r4,r8
  808a5c:	30002326 	beq	r6,zero,808aec <__lshift+0x128>
  808a60:	02400804 	movi	r9,32
  808a64:	4993c83a 	sub	r9,r9,r6
  808a68:	000b883a 	mov	r5,zero
  808a6c:	21c00017 	ldw	r7,0(r4)
  808a70:	1815883a 	mov	r10,r3
  808a74:	18c00104 	addi	r3,r3,4
  808a78:	398e983a 	sll	r7,r7,r6
  808a7c:	21000104 	addi	r4,r4,4
  808a80:	394ab03a 	or	r5,r7,r5
  808a84:	197fff15 	stw	r5,-4(r3)
  808a88:	217fff17 	ldw	r5,-4(r4)
  808a8c:	2a4ad83a 	srl	r5,r5,r9
  808a90:	223ff636 	bltu	r4,r8,808a6c <__alt_mem_onchip_mem+0xff788a6c>
  808a94:	51400115 	stw	r5,4(r10)
  808a98:	28001a1e 	bne	r5,zero,808b04 <__lshift+0x140>
  808a9c:	843fffc4 	addi	r16,r16,-1
  808aa0:	14000415 	stw	r16,16(r2)
  808aa4:	88000826 	beq	r17,zero,808ac8 <__lshift+0x104>
  808aa8:	89000117 	ldw	r4,4(r17)
  808aac:	90c01317 	ldw	r3,76(r18)
  808ab0:	2109883a 	add	r4,r4,r4
  808ab4:	2109883a 	add	r4,r4,r4
  808ab8:	1907883a 	add	r3,r3,r4
  808abc:	19000017 	ldw	r4,0(r3)
  808ac0:	89000015 	stw	r4,0(r17)
  808ac4:	1c400015 	stw	r17,0(r3)
  808ac8:	dfc00617 	ldw	ra,24(sp)
  808acc:	dd400517 	ldw	r21,20(sp)
  808ad0:	dd000417 	ldw	r20,16(sp)
  808ad4:	dcc00317 	ldw	r19,12(sp)
  808ad8:	dc800217 	ldw	r18,8(sp)
  808adc:	dc400117 	ldw	r17,4(sp)
  808ae0:	dc000017 	ldw	r16,0(sp)
  808ae4:	dec00704 	addi	sp,sp,28
  808ae8:	f800283a 	ret
  808aec:	21400017 	ldw	r5,0(r4)
  808af0:	18c00104 	addi	r3,r3,4
  808af4:	21000104 	addi	r4,r4,4
  808af8:	197fff15 	stw	r5,-4(r3)
  808afc:	223ffb36 	bltu	r4,r8,808aec <__alt_mem_onchip_mem+0xff788aec>
  808b00:	003fe606 	br	808a9c <__alt_mem_onchip_mem+0xff788a9c>
  808b04:	9c000084 	addi	r16,r19,2
  808b08:	003fe406 	br	808a9c <__alt_mem_onchip_mem+0xff788a9c>

00808b0c <__mcmp>:
  808b0c:	20800417 	ldw	r2,16(r4)
  808b10:	28c00417 	ldw	r3,16(r5)
  808b14:	10c5c83a 	sub	r2,r2,r3
  808b18:	1000111e 	bne	r2,zero,808b60 <__mcmp+0x54>
  808b1c:	18c7883a 	add	r3,r3,r3
  808b20:	18c7883a 	add	r3,r3,r3
  808b24:	21000504 	addi	r4,r4,20
  808b28:	29400504 	addi	r5,r5,20
  808b2c:	20c5883a 	add	r2,r4,r3
  808b30:	28cb883a 	add	r5,r5,r3
  808b34:	00000106 	br	808b3c <__mcmp+0x30>
  808b38:	20800a2e 	bgeu	r4,r2,808b64 <__mcmp+0x58>
  808b3c:	10bfff04 	addi	r2,r2,-4
  808b40:	297fff04 	addi	r5,r5,-4
  808b44:	11800017 	ldw	r6,0(r2)
  808b48:	28c00017 	ldw	r3,0(r5)
  808b4c:	30fffa26 	beq	r6,r3,808b38 <__alt_mem_onchip_mem+0xff788b38>
  808b50:	30c00236 	bltu	r6,r3,808b5c <__mcmp+0x50>
  808b54:	00800044 	movi	r2,1
  808b58:	f800283a 	ret
  808b5c:	00bfffc4 	movi	r2,-1
  808b60:	f800283a 	ret
  808b64:	0005883a 	mov	r2,zero
  808b68:	f800283a 	ret

00808b6c <__mdiff>:
  808b6c:	28c00417 	ldw	r3,16(r5)
  808b70:	30800417 	ldw	r2,16(r6)
  808b74:	defffa04 	addi	sp,sp,-24
  808b78:	dcc00315 	stw	r19,12(sp)
  808b7c:	dc800215 	stw	r18,8(sp)
  808b80:	dfc00515 	stw	ra,20(sp)
  808b84:	dd000415 	stw	r20,16(sp)
  808b88:	dc400115 	stw	r17,4(sp)
  808b8c:	dc000015 	stw	r16,0(sp)
  808b90:	1887c83a 	sub	r3,r3,r2
  808b94:	2825883a 	mov	r18,r5
  808b98:	3027883a 	mov	r19,r6
  808b9c:	1800141e 	bne	r3,zero,808bf0 <__mdiff+0x84>
  808ba0:	1085883a 	add	r2,r2,r2
  808ba4:	1085883a 	add	r2,r2,r2
  808ba8:	2a000504 	addi	r8,r5,20
  808bac:	34000504 	addi	r16,r6,20
  808bb0:	4087883a 	add	r3,r8,r2
  808bb4:	8085883a 	add	r2,r16,r2
  808bb8:	00000106 	br	808bc0 <__mdiff+0x54>
  808bbc:	40c0592e 	bgeu	r8,r3,808d24 <__mdiff+0x1b8>
  808bc0:	18ffff04 	addi	r3,r3,-4
  808bc4:	10bfff04 	addi	r2,r2,-4
  808bc8:	19c00017 	ldw	r7,0(r3)
  808bcc:	11400017 	ldw	r5,0(r2)
  808bd0:	397ffa26 	beq	r7,r5,808bbc <__alt_mem_onchip_mem+0xff788bbc>
  808bd4:	3940592e 	bgeu	r7,r5,808d3c <__mdiff+0x1d0>
  808bd8:	9005883a 	mov	r2,r18
  808bdc:	4023883a 	mov	r17,r8
  808be0:	9825883a 	mov	r18,r19
  808be4:	05000044 	movi	r20,1
  808be8:	1027883a 	mov	r19,r2
  808bec:	00000406 	br	808c00 <__mdiff+0x94>
  808bf0:	18005616 	blt	r3,zero,808d4c <__mdiff+0x1e0>
  808bf4:	34400504 	addi	r17,r6,20
  808bf8:	2c000504 	addi	r16,r5,20
  808bfc:	0029883a 	mov	r20,zero
  808c00:	91400117 	ldw	r5,4(r18)
  808c04:	08082440 	call	808244 <_Balloc>
  808c08:	92400417 	ldw	r9,16(r18)
  808c0c:	9b000417 	ldw	r12,16(r19)
  808c10:	12c00504 	addi	r11,r2,20
  808c14:	4a51883a 	add	r8,r9,r9
  808c18:	6319883a 	add	r12,r12,r12
  808c1c:	4211883a 	add	r8,r8,r8
  808c20:	6319883a 	add	r12,r12,r12
  808c24:	15000315 	stw	r20,12(r2)
  808c28:	8211883a 	add	r8,r16,r8
  808c2c:	8b19883a 	add	r12,r17,r12
  808c30:	0007883a 	mov	r3,zero
  808c34:	81400017 	ldw	r5,0(r16)
  808c38:	89c00017 	ldw	r7,0(r17)
  808c3c:	59800104 	addi	r6,r11,4
  808c40:	293fffcc 	andi	r4,r5,65535
  808c44:	20c7883a 	add	r3,r4,r3
  808c48:	393fffcc 	andi	r4,r7,65535
  808c4c:	1909c83a 	sub	r4,r3,r4
  808c50:	280ad43a 	srli	r5,r5,16
  808c54:	380ed43a 	srli	r7,r7,16
  808c58:	2007d43a 	srai	r3,r4,16
  808c5c:	213fffcc 	andi	r4,r4,65535
  808c60:	29cbc83a 	sub	r5,r5,r7
  808c64:	28c7883a 	add	r3,r5,r3
  808c68:	180a943a 	slli	r5,r3,16
  808c6c:	8c400104 	addi	r17,r17,4
  808c70:	84000104 	addi	r16,r16,4
  808c74:	2908b03a 	or	r4,r5,r4
  808c78:	59000015 	stw	r4,0(r11)
  808c7c:	1807d43a 	srai	r3,r3,16
  808c80:	3015883a 	mov	r10,r6
  808c84:	3017883a 	mov	r11,r6
  808c88:	8b3fea36 	bltu	r17,r12,808c34 <__alt_mem_onchip_mem+0xff788c34>
  808c8c:	8200162e 	bgeu	r16,r8,808ce8 <__mdiff+0x17c>
  808c90:	8017883a 	mov	r11,r16
  808c94:	59400017 	ldw	r5,0(r11)
  808c98:	31800104 	addi	r6,r6,4
  808c9c:	5ac00104 	addi	r11,r11,4
  808ca0:	293fffcc 	andi	r4,r5,65535
  808ca4:	20c7883a 	add	r3,r4,r3
  808ca8:	280ed43a 	srli	r7,r5,16
  808cac:	180bd43a 	srai	r5,r3,16
  808cb0:	193fffcc 	andi	r4,r3,65535
  808cb4:	3947883a 	add	r3,r7,r5
  808cb8:	180a943a 	slli	r5,r3,16
  808cbc:	1807d43a 	srai	r3,r3,16
  808cc0:	2908b03a 	or	r4,r5,r4
  808cc4:	313fff15 	stw	r4,-4(r6)
  808cc8:	5a3ff236 	bltu	r11,r8,808c94 <__alt_mem_onchip_mem+0xff788c94>
  808ccc:	0406303a 	nor	r3,zero,r16
  808cd0:	1a07883a 	add	r3,r3,r8
  808cd4:	1806d0ba 	srli	r3,r3,2
  808cd8:	18c00044 	addi	r3,r3,1
  808cdc:	18c7883a 	add	r3,r3,r3
  808ce0:	18c7883a 	add	r3,r3,r3
  808ce4:	50d5883a 	add	r10,r10,r3
  808ce8:	50ffff04 	addi	r3,r10,-4
  808cec:	2000041e 	bne	r4,zero,808d00 <__mdiff+0x194>
  808cf0:	18ffff04 	addi	r3,r3,-4
  808cf4:	19000017 	ldw	r4,0(r3)
  808cf8:	4a7fffc4 	addi	r9,r9,-1
  808cfc:	203ffc26 	beq	r4,zero,808cf0 <__alt_mem_onchip_mem+0xff788cf0>
  808d00:	12400415 	stw	r9,16(r2)
  808d04:	dfc00517 	ldw	ra,20(sp)
  808d08:	dd000417 	ldw	r20,16(sp)
  808d0c:	dcc00317 	ldw	r19,12(sp)
  808d10:	dc800217 	ldw	r18,8(sp)
  808d14:	dc400117 	ldw	r17,4(sp)
  808d18:	dc000017 	ldw	r16,0(sp)
  808d1c:	dec00604 	addi	sp,sp,24
  808d20:	f800283a 	ret
  808d24:	000b883a 	mov	r5,zero
  808d28:	08082440 	call	808244 <_Balloc>
  808d2c:	00c00044 	movi	r3,1
  808d30:	10c00415 	stw	r3,16(r2)
  808d34:	10000515 	stw	zero,20(r2)
  808d38:	003ff206 	br	808d04 <__alt_mem_onchip_mem+0xff788d04>
  808d3c:	8023883a 	mov	r17,r16
  808d40:	0029883a 	mov	r20,zero
  808d44:	4021883a 	mov	r16,r8
  808d48:	003fad06 	br	808c00 <__alt_mem_onchip_mem+0xff788c00>
  808d4c:	9005883a 	mov	r2,r18
  808d50:	94400504 	addi	r17,r18,20
  808d54:	9c000504 	addi	r16,r19,20
  808d58:	9825883a 	mov	r18,r19
  808d5c:	05000044 	movi	r20,1
  808d60:	1027883a 	mov	r19,r2
  808d64:	003fa606 	br	808c00 <__alt_mem_onchip_mem+0xff788c00>

00808d68 <__ulp>:
  808d68:	295ffc2c 	andhi	r5,r5,32752
  808d6c:	00bf3034 	movhi	r2,64704
  808d70:	2887883a 	add	r3,r5,r2
  808d74:	00c0020e 	bge	zero,r3,808d80 <__ulp+0x18>
  808d78:	0005883a 	mov	r2,zero
  808d7c:	f800283a 	ret
  808d80:	00c7c83a 	sub	r3,zero,r3
  808d84:	1807d53a 	srai	r3,r3,20
  808d88:	008004c4 	movi	r2,19
  808d8c:	10c00b0e 	bge	r2,r3,808dbc <__ulp+0x54>
  808d90:	18bffb04 	addi	r2,r3,-20
  808d94:	01000784 	movi	r4,30
  808d98:	0007883a 	mov	r3,zero
  808d9c:	20800516 	blt	r4,r2,808db4 <__ulp+0x4c>
  808da0:	010007c4 	movi	r4,31
  808da4:	2089c83a 	sub	r4,r4,r2
  808da8:	00800044 	movi	r2,1
  808dac:	1104983a 	sll	r2,r2,r4
  808db0:	f800283a 	ret
  808db4:	00800044 	movi	r2,1
  808db8:	f800283a 	ret
  808dbc:	01400234 	movhi	r5,8
  808dc0:	28c7d83a 	sra	r3,r5,r3
  808dc4:	0005883a 	mov	r2,zero
  808dc8:	f800283a 	ret

00808dcc <__b2d>:
  808dcc:	defffa04 	addi	sp,sp,-24
  808dd0:	dc000015 	stw	r16,0(sp)
  808dd4:	24000417 	ldw	r16,16(r4)
  808dd8:	dc400115 	stw	r17,4(sp)
  808ddc:	24400504 	addi	r17,r4,20
  808de0:	8421883a 	add	r16,r16,r16
  808de4:	8421883a 	add	r16,r16,r16
  808de8:	8c21883a 	add	r16,r17,r16
  808dec:	dc800215 	stw	r18,8(sp)
  808df0:	84bfff17 	ldw	r18,-4(r16)
  808df4:	dd000415 	stw	r20,16(sp)
  808df8:	dcc00315 	stw	r19,12(sp)
  808dfc:	9009883a 	mov	r4,r18
  808e00:	2829883a 	mov	r20,r5
  808e04:	dfc00515 	stw	ra,20(sp)
  808e08:	08085380 	call	808538 <__hi0bits>
  808e0c:	00c00804 	movi	r3,32
  808e10:	1889c83a 	sub	r4,r3,r2
  808e14:	a1000015 	stw	r4,0(r20)
  808e18:	01000284 	movi	r4,10
  808e1c:	84ffff04 	addi	r19,r16,-4
  808e20:	20801216 	blt	r4,r2,808e6c <__b2d+0xa0>
  808e24:	018002c4 	movi	r6,11
  808e28:	308dc83a 	sub	r6,r6,r2
  808e2c:	9186d83a 	srl	r3,r18,r6
  808e30:	18cffc34 	orhi	r3,r3,16368
  808e34:	8cc0212e 	bgeu	r17,r19,808ebc <__b2d+0xf0>
  808e38:	813ffe17 	ldw	r4,-8(r16)
  808e3c:	218cd83a 	srl	r6,r4,r6
  808e40:	10800544 	addi	r2,r2,21
  808e44:	9084983a 	sll	r2,r18,r2
  808e48:	1184b03a 	or	r2,r2,r6
  808e4c:	dfc00517 	ldw	ra,20(sp)
  808e50:	dd000417 	ldw	r20,16(sp)
  808e54:	dcc00317 	ldw	r19,12(sp)
  808e58:	dc800217 	ldw	r18,8(sp)
  808e5c:	dc400117 	ldw	r17,4(sp)
  808e60:	dc000017 	ldw	r16,0(sp)
  808e64:	dec00604 	addi	sp,sp,24
  808e68:	f800283a 	ret
  808e6c:	8cc00f2e 	bgeu	r17,r19,808eac <__b2d+0xe0>
  808e70:	117ffd44 	addi	r5,r2,-11
  808e74:	80bffe17 	ldw	r2,-8(r16)
  808e78:	28000e26 	beq	r5,zero,808eb4 <__b2d+0xe8>
  808e7c:	1949c83a 	sub	r4,r3,r5
  808e80:	9164983a 	sll	r18,r18,r5
  808e84:	1106d83a 	srl	r3,r2,r4
  808e88:	81bffe04 	addi	r6,r16,-8
  808e8c:	948ffc34 	orhi	r18,r18,16368
  808e90:	90c6b03a 	or	r3,r18,r3
  808e94:	89800e2e 	bgeu	r17,r6,808ed0 <__b2d+0x104>
  808e98:	81bffd17 	ldw	r6,-12(r16)
  808e9c:	1144983a 	sll	r2,r2,r5
  808ea0:	310ad83a 	srl	r5,r6,r4
  808ea4:	2884b03a 	or	r2,r5,r2
  808ea8:	003fe806 	br	808e4c <__alt_mem_onchip_mem+0xff788e4c>
  808eac:	10bffd44 	addi	r2,r2,-11
  808eb0:	1000041e 	bne	r2,zero,808ec4 <__b2d+0xf8>
  808eb4:	90cffc34 	orhi	r3,r18,16368
  808eb8:	003fe406 	br	808e4c <__alt_mem_onchip_mem+0xff788e4c>
  808ebc:	000d883a 	mov	r6,zero
  808ec0:	003fdf06 	br	808e40 <__alt_mem_onchip_mem+0xff788e40>
  808ec4:	90a4983a 	sll	r18,r18,r2
  808ec8:	0005883a 	mov	r2,zero
  808ecc:	003ff906 	br	808eb4 <__alt_mem_onchip_mem+0xff788eb4>
  808ed0:	1144983a 	sll	r2,r2,r5
  808ed4:	003fdd06 	br	808e4c <__alt_mem_onchip_mem+0xff788e4c>

00808ed8 <__d2b>:
  808ed8:	defff804 	addi	sp,sp,-32
  808edc:	dc000215 	stw	r16,8(sp)
  808ee0:	3021883a 	mov	r16,r6
  808ee4:	dc400315 	stw	r17,12(sp)
  808ee8:	8022907a 	slli	r17,r16,1
  808eec:	dd000615 	stw	r20,24(sp)
  808ef0:	2829883a 	mov	r20,r5
  808ef4:	01400044 	movi	r5,1
  808ef8:	dcc00515 	stw	r19,20(sp)
  808efc:	dc800415 	stw	r18,16(sp)
  808f00:	dfc00715 	stw	ra,28(sp)
  808f04:	3825883a 	mov	r18,r7
  808f08:	8822d57a 	srli	r17,r17,21
  808f0c:	08082440 	call	808244 <_Balloc>
  808f10:	1027883a 	mov	r19,r2
  808f14:	00800434 	movhi	r2,16
  808f18:	10bfffc4 	addi	r2,r2,-1
  808f1c:	808c703a 	and	r6,r16,r2
  808f20:	88000126 	beq	r17,zero,808f28 <__d2b+0x50>
  808f24:	31800434 	orhi	r6,r6,16
  808f28:	d9800015 	stw	r6,0(sp)
  808f2c:	a0002426 	beq	r20,zero,808fc0 <__d2b+0xe8>
  808f30:	d9000104 	addi	r4,sp,4
  808f34:	dd000115 	stw	r20,4(sp)
  808f38:	08085a00 	call	8085a0 <__lo0bits>
  808f3c:	d8c00017 	ldw	r3,0(sp)
  808f40:	10002f1e 	bne	r2,zero,809000 <__d2b+0x128>
  808f44:	d9000117 	ldw	r4,4(sp)
  808f48:	99000515 	stw	r4,20(r19)
  808f4c:	1821003a 	cmpeq	r16,r3,zero
  808f50:	01000084 	movi	r4,2
  808f54:	2421c83a 	sub	r16,r4,r16
  808f58:	98c00615 	stw	r3,24(r19)
  808f5c:	9c000415 	stw	r16,16(r19)
  808f60:	88001f1e 	bne	r17,zero,808fe0 <__d2b+0x108>
  808f64:	10bef384 	addi	r2,r2,-1074
  808f68:	90800015 	stw	r2,0(r18)
  808f6c:	00900034 	movhi	r2,16384
  808f70:	10bfffc4 	addi	r2,r2,-1
  808f74:	8085883a 	add	r2,r16,r2
  808f78:	1085883a 	add	r2,r2,r2
  808f7c:	1085883a 	add	r2,r2,r2
  808f80:	9885883a 	add	r2,r19,r2
  808f84:	11000517 	ldw	r4,20(r2)
  808f88:	8020917a 	slli	r16,r16,5
  808f8c:	08085380 	call	808538 <__hi0bits>
  808f90:	d8c00817 	ldw	r3,32(sp)
  808f94:	8085c83a 	sub	r2,r16,r2
  808f98:	18800015 	stw	r2,0(r3)
  808f9c:	9805883a 	mov	r2,r19
  808fa0:	dfc00717 	ldw	ra,28(sp)
  808fa4:	dd000617 	ldw	r20,24(sp)
  808fa8:	dcc00517 	ldw	r19,20(sp)
  808fac:	dc800417 	ldw	r18,16(sp)
  808fb0:	dc400317 	ldw	r17,12(sp)
  808fb4:	dc000217 	ldw	r16,8(sp)
  808fb8:	dec00804 	addi	sp,sp,32
  808fbc:	f800283a 	ret
  808fc0:	d809883a 	mov	r4,sp
  808fc4:	08085a00 	call	8085a0 <__lo0bits>
  808fc8:	d8c00017 	ldw	r3,0(sp)
  808fcc:	04000044 	movi	r16,1
  808fd0:	9c000415 	stw	r16,16(r19)
  808fd4:	98c00515 	stw	r3,20(r19)
  808fd8:	10800804 	addi	r2,r2,32
  808fdc:	883fe126 	beq	r17,zero,808f64 <__alt_mem_onchip_mem+0xff788f64>
  808fe0:	00c00d44 	movi	r3,53
  808fe4:	8c7ef344 	addi	r17,r17,-1075
  808fe8:	88a3883a 	add	r17,r17,r2
  808fec:	1885c83a 	sub	r2,r3,r2
  808ff0:	d8c00817 	ldw	r3,32(sp)
  808ff4:	94400015 	stw	r17,0(r18)
  808ff8:	18800015 	stw	r2,0(r3)
  808ffc:	003fe706 	br	808f9c <__alt_mem_onchip_mem+0xff788f9c>
  809000:	01000804 	movi	r4,32
  809004:	2089c83a 	sub	r4,r4,r2
  809008:	1908983a 	sll	r4,r3,r4
  80900c:	d9400117 	ldw	r5,4(sp)
  809010:	1886d83a 	srl	r3,r3,r2
  809014:	2148b03a 	or	r4,r4,r5
  809018:	99000515 	stw	r4,20(r19)
  80901c:	d8c00015 	stw	r3,0(sp)
  809020:	003fca06 	br	808f4c <__alt_mem_onchip_mem+0xff788f4c>

00809024 <__ratio>:
  809024:	defff904 	addi	sp,sp,-28
  809028:	dc400315 	stw	r17,12(sp)
  80902c:	2823883a 	mov	r17,r5
  809030:	d9400104 	addi	r5,sp,4
  809034:	dfc00615 	stw	ra,24(sp)
  809038:	dcc00515 	stw	r19,20(sp)
  80903c:	dc800415 	stw	r18,16(sp)
  809040:	2027883a 	mov	r19,r4
  809044:	dc000215 	stw	r16,8(sp)
  809048:	0808dcc0 	call	808dcc <__b2d>
  80904c:	d80b883a 	mov	r5,sp
  809050:	8809883a 	mov	r4,r17
  809054:	1025883a 	mov	r18,r2
  809058:	1821883a 	mov	r16,r3
  80905c:	0808dcc0 	call	808dcc <__b2d>
  809060:	8a000417 	ldw	r8,16(r17)
  809064:	99000417 	ldw	r4,16(r19)
  809068:	d9400117 	ldw	r5,4(sp)
  80906c:	2209c83a 	sub	r4,r4,r8
  809070:	2010917a 	slli	r8,r4,5
  809074:	d9000017 	ldw	r4,0(sp)
  809078:	2909c83a 	sub	r4,r5,r4
  80907c:	4109883a 	add	r4,r8,r4
  809080:	01000e0e 	bge	zero,r4,8090bc <__ratio+0x98>
  809084:	2008953a 	slli	r4,r4,20
  809088:	2421883a 	add	r16,r4,r16
  80908c:	100d883a 	mov	r6,r2
  809090:	180f883a 	mov	r7,r3
  809094:	9009883a 	mov	r4,r18
  809098:	800b883a 	mov	r5,r16
  80909c:	080cc200 	call	80cc20 <__divdf3>
  8090a0:	dfc00617 	ldw	ra,24(sp)
  8090a4:	dcc00517 	ldw	r19,20(sp)
  8090a8:	dc800417 	ldw	r18,16(sp)
  8090ac:	dc400317 	ldw	r17,12(sp)
  8090b0:	dc000217 	ldw	r16,8(sp)
  8090b4:	dec00704 	addi	sp,sp,28
  8090b8:	f800283a 	ret
  8090bc:	2008953a 	slli	r4,r4,20
  8090c0:	1907c83a 	sub	r3,r3,r4
  8090c4:	003ff106 	br	80908c <__alt_mem_onchip_mem+0xff78908c>

008090c8 <_mprec_log10>:
  8090c8:	defffe04 	addi	sp,sp,-8
  8090cc:	dc000015 	stw	r16,0(sp)
  8090d0:	dfc00115 	stw	ra,4(sp)
  8090d4:	008005c4 	movi	r2,23
  8090d8:	2021883a 	mov	r16,r4
  8090dc:	11000d0e 	bge	r2,r4,809114 <_mprec_log10+0x4c>
  8090e0:	0005883a 	mov	r2,zero
  8090e4:	00cffc34 	movhi	r3,16368
  8090e8:	843fffc4 	addi	r16,r16,-1
  8090ec:	000d883a 	mov	r6,zero
  8090f0:	01d00934 	movhi	r7,16420
  8090f4:	1009883a 	mov	r4,r2
  8090f8:	180b883a 	mov	r5,r3
  8090fc:	080d7600 	call	80d760 <__muldf3>
  809100:	803ff91e 	bne	r16,zero,8090e8 <__alt_mem_onchip_mem+0xff7890e8>
  809104:	dfc00117 	ldw	ra,4(sp)
  809108:	dc000017 	ldw	r16,0(sp)
  80910c:	dec00204 	addi	sp,sp,8
  809110:	f800283a 	ret
  809114:	202090fa 	slli	r16,r4,3
  809118:	00802074 	movhi	r2,129
  80911c:	108c6a04 	addi	r2,r2,12712
  809120:	1421883a 	add	r16,r2,r16
  809124:	80800017 	ldw	r2,0(r16)
  809128:	80c00117 	ldw	r3,4(r16)
  80912c:	dfc00117 	ldw	ra,4(sp)
  809130:	dc000017 	ldw	r16,0(sp)
  809134:	dec00204 	addi	sp,sp,8
  809138:	f800283a 	ret

0080913c <__copybits>:
  80913c:	297fffc4 	addi	r5,r5,-1
  809140:	280fd17a 	srai	r7,r5,5
  809144:	30c00417 	ldw	r3,16(r6)
  809148:	30800504 	addi	r2,r6,20
  80914c:	39c00044 	addi	r7,r7,1
  809150:	18c7883a 	add	r3,r3,r3
  809154:	39cf883a 	add	r7,r7,r7
  809158:	18c7883a 	add	r3,r3,r3
  80915c:	39cf883a 	add	r7,r7,r7
  809160:	10c7883a 	add	r3,r2,r3
  809164:	21cf883a 	add	r7,r4,r7
  809168:	10c00d2e 	bgeu	r2,r3,8091a0 <__copybits+0x64>
  80916c:	200b883a 	mov	r5,r4
  809170:	12000017 	ldw	r8,0(r2)
  809174:	29400104 	addi	r5,r5,4
  809178:	10800104 	addi	r2,r2,4
  80917c:	2a3fff15 	stw	r8,-4(r5)
  809180:	10fffb36 	bltu	r2,r3,809170 <__alt_mem_onchip_mem+0xff789170>
  809184:	1985c83a 	sub	r2,r3,r6
  809188:	10bffac4 	addi	r2,r2,-21
  80918c:	1004d0ba 	srli	r2,r2,2
  809190:	10800044 	addi	r2,r2,1
  809194:	1085883a 	add	r2,r2,r2
  809198:	1085883a 	add	r2,r2,r2
  80919c:	2089883a 	add	r4,r4,r2
  8091a0:	21c0032e 	bgeu	r4,r7,8091b0 <__copybits+0x74>
  8091a4:	20000015 	stw	zero,0(r4)
  8091a8:	21000104 	addi	r4,r4,4
  8091ac:	21fffd36 	bltu	r4,r7,8091a4 <__alt_mem_onchip_mem+0xff7891a4>
  8091b0:	f800283a 	ret

008091b4 <__any_on>:
  8091b4:	20c00417 	ldw	r3,16(r4)
  8091b8:	2805d17a 	srai	r2,r5,5
  8091bc:	21000504 	addi	r4,r4,20
  8091c0:	18800d0e 	bge	r3,r2,8091f8 <__any_on+0x44>
  8091c4:	18c7883a 	add	r3,r3,r3
  8091c8:	18c7883a 	add	r3,r3,r3
  8091cc:	20c7883a 	add	r3,r4,r3
  8091d0:	20c0192e 	bgeu	r4,r3,809238 <__any_on+0x84>
  8091d4:	18bfff17 	ldw	r2,-4(r3)
  8091d8:	18ffff04 	addi	r3,r3,-4
  8091dc:	1000041e 	bne	r2,zero,8091f0 <__any_on+0x3c>
  8091e0:	20c0142e 	bgeu	r4,r3,809234 <__any_on+0x80>
  8091e4:	18ffff04 	addi	r3,r3,-4
  8091e8:	19400017 	ldw	r5,0(r3)
  8091ec:	283ffc26 	beq	r5,zero,8091e0 <__alt_mem_onchip_mem+0xff7891e0>
  8091f0:	00800044 	movi	r2,1
  8091f4:	f800283a 	ret
  8091f8:	10c00a0e 	bge	r2,r3,809224 <__any_on+0x70>
  8091fc:	1085883a 	add	r2,r2,r2
  809200:	1085883a 	add	r2,r2,r2
  809204:	294007cc 	andi	r5,r5,31
  809208:	2087883a 	add	r3,r4,r2
  80920c:	283ff026 	beq	r5,zero,8091d0 <__alt_mem_onchip_mem+0xff7891d0>
  809210:	19800017 	ldw	r6,0(r3)
  809214:	3144d83a 	srl	r2,r6,r5
  809218:	114a983a 	sll	r5,r2,r5
  80921c:	317ff41e 	bne	r6,r5,8091f0 <__alt_mem_onchip_mem+0xff7891f0>
  809220:	003feb06 	br	8091d0 <__alt_mem_onchip_mem+0xff7891d0>
  809224:	1085883a 	add	r2,r2,r2
  809228:	1085883a 	add	r2,r2,r2
  80922c:	2087883a 	add	r3,r4,r2
  809230:	003fe706 	br	8091d0 <__alt_mem_onchip_mem+0xff7891d0>
  809234:	f800283a 	ret
  809238:	0005883a 	mov	r2,zero
  80923c:	f800283a 	ret

00809240 <_putc_r>:
  809240:	defffc04 	addi	sp,sp,-16
  809244:	dc000215 	stw	r16,8(sp)
  809248:	dfc00315 	stw	ra,12(sp)
  80924c:	2021883a 	mov	r16,r4
  809250:	20000226 	beq	r4,zero,80925c <_putc_r+0x1c>
  809254:	20800e17 	ldw	r2,56(r4)
  809258:	10001b26 	beq	r2,zero,8092c8 <_putc_r+0x88>
  80925c:	30800217 	ldw	r2,8(r6)
  809260:	10bfffc4 	addi	r2,r2,-1
  809264:	30800215 	stw	r2,8(r6)
  809268:	10000a16 	blt	r2,zero,809294 <_putc_r+0x54>
  80926c:	30800017 	ldw	r2,0(r6)
  809270:	11400005 	stb	r5,0(r2)
  809274:	30800017 	ldw	r2,0(r6)
  809278:	10c00044 	addi	r3,r2,1
  80927c:	30c00015 	stw	r3,0(r6)
  809280:	10800003 	ldbu	r2,0(r2)
  809284:	dfc00317 	ldw	ra,12(sp)
  809288:	dc000217 	ldw	r16,8(sp)
  80928c:	dec00404 	addi	sp,sp,16
  809290:	f800283a 	ret
  809294:	30c00617 	ldw	r3,24(r6)
  809298:	10c00616 	blt	r2,r3,8092b4 <_putc_r+0x74>
  80929c:	30800017 	ldw	r2,0(r6)
  8092a0:	00c00284 	movi	r3,10
  8092a4:	11400005 	stb	r5,0(r2)
  8092a8:	30800017 	ldw	r2,0(r6)
  8092ac:	11400003 	ldbu	r5,0(r2)
  8092b0:	28fff11e 	bne	r5,r3,809278 <__alt_mem_onchip_mem+0xff789278>
  8092b4:	8009883a 	mov	r4,r16
  8092b8:	dfc00317 	ldw	ra,12(sp)
  8092bc:	dc000217 	ldw	r16,8(sp)
  8092c0:	dec00404 	addi	sp,sp,16
  8092c4:	080b1041 	jmpi	80b104 <__swbuf_r>
  8092c8:	d9400015 	stw	r5,0(sp)
  8092cc:	d9800115 	stw	r6,4(sp)
  8092d0:	08017c00 	call	8017c0 <__sinit>
  8092d4:	d9800117 	ldw	r6,4(sp)
  8092d8:	d9400017 	ldw	r5,0(sp)
  8092dc:	003fdf06 	br	80925c <__alt_mem_onchip_mem+0xff78925c>

008092e0 <putc>:
  8092e0:	00802074 	movhi	r2,129
  8092e4:	defffc04 	addi	sp,sp,-16
  8092e8:	10942504 	addi	r2,r2,20628
  8092ec:	dc000115 	stw	r16,4(sp)
  8092f0:	14000017 	ldw	r16,0(r2)
  8092f4:	dc400215 	stw	r17,8(sp)
  8092f8:	dfc00315 	stw	ra,12(sp)
  8092fc:	2023883a 	mov	r17,r4
  809300:	80000226 	beq	r16,zero,80930c <putc+0x2c>
  809304:	80800e17 	ldw	r2,56(r16)
  809308:	10001a26 	beq	r2,zero,809374 <putc+0x94>
  80930c:	28800217 	ldw	r2,8(r5)
  809310:	10bfffc4 	addi	r2,r2,-1
  809314:	28800215 	stw	r2,8(r5)
  809318:	10000b16 	blt	r2,zero,809348 <putc+0x68>
  80931c:	28800017 	ldw	r2,0(r5)
  809320:	14400005 	stb	r17,0(r2)
  809324:	28800017 	ldw	r2,0(r5)
  809328:	10c00044 	addi	r3,r2,1
  80932c:	28c00015 	stw	r3,0(r5)
  809330:	10800003 	ldbu	r2,0(r2)
  809334:	dfc00317 	ldw	ra,12(sp)
  809338:	dc400217 	ldw	r17,8(sp)
  80933c:	dc000117 	ldw	r16,4(sp)
  809340:	dec00404 	addi	sp,sp,16
  809344:	f800283a 	ret
  809348:	28c00617 	ldw	r3,24(r5)
  80934c:	10c00e16 	blt	r2,r3,809388 <putc+0xa8>
  809350:	28800017 	ldw	r2,0(r5)
  809354:	01000284 	movi	r4,10
  809358:	14400005 	stb	r17,0(r2)
  80935c:	28800017 	ldw	r2,0(r5)
  809360:	10c00003 	ldbu	r3,0(r2)
  809364:	193ff01e 	bne	r3,r4,809328 <__alt_mem_onchip_mem+0xff789328>
  809368:	280d883a 	mov	r6,r5
  80936c:	180b883a 	mov	r5,r3
  809370:	00000706 	br	809390 <putc+0xb0>
  809374:	8009883a 	mov	r4,r16
  809378:	d9400015 	stw	r5,0(sp)
  80937c:	08017c00 	call	8017c0 <__sinit>
  809380:	d9400017 	ldw	r5,0(sp)
  809384:	003fe106 	br	80930c <__alt_mem_onchip_mem+0xff78930c>
  809388:	280d883a 	mov	r6,r5
  80938c:	880b883a 	mov	r5,r17
  809390:	8009883a 	mov	r4,r16
  809394:	dfc00317 	ldw	ra,12(sp)
  809398:	dc400217 	ldw	r17,8(sp)
  80939c:	dc000117 	ldw	r16,4(sp)
  8093a0:	dec00404 	addi	sp,sp,16
  8093a4:	080b1041 	jmpi	80b104 <__swbuf_r>

008093a8 <_read_r>:
  8093a8:	defffd04 	addi	sp,sp,-12
  8093ac:	2805883a 	mov	r2,r5
  8093b0:	dc000015 	stw	r16,0(sp)
  8093b4:	04002074 	movhi	r16,129
  8093b8:	dc400115 	stw	r17,4(sp)
  8093bc:	300b883a 	mov	r5,r6
  8093c0:	841b8704 	addi	r16,r16,28188
  8093c4:	2023883a 	mov	r17,r4
  8093c8:	380d883a 	mov	r6,r7
  8093cc:	1009883a 	mov	r4,r2
  8093d0:	dfc00215 	stw	ra,8(sp)
  8093d4:	80000015 	stw	zero,0(r16)
  8093d8:	080f4dc0 	call	80f4dc <read>
  8093dc:	00ffffc4 	movi	r3,-1
  8093e0:	10c00526 	beq	r2,r3,8093f8 <_read_r+0x50>
  8093e4:	dfc00217 	ldw	ra,8(sp)
  8093e8:	dc400117 	ldw	r17,4(sp)
  8093ec:	dc000017 	ldw	r16,0(sp)
  8093f0:	dec00304 	addi	sp,sp,12
  8093f4:	f800283a 	ret
  8093f8:	80c00017 	ldw	r3,0(r16)
  8093fc:	183ff926 	beq	r3,zero,8093e4 <__alt_mem_onchip_mem+0xff7893e4>
  809400:	88c00015 	stw	r3,0(r17)
  809404:	003ff706 	br	8093e4 <__alt_mem_onchip_mem+0xff7893e4>

00809408 <_realloc_r>:
  809408:	defff604 	addi	sp,sp,-40
  80940c:	dc800215 	stw	r18,8(sp)
  809410:	dfc00915 	stw	ra,36(sp)
  809414:	df000815 	stw	fp,32(sp)
  809418:	ddc00715 	stw	r23,28(sp)
  80941c:	dd800615 	stw	r22,24(sp)
  809420:	dd400515 	stw	r21,20(sp)
  809424:	dd000415 	stw	r20,16(sp)
  809428:	dcc00315 	stw	r19,12(sp)
  80942c:	dc400115 	stw	r17,4(sp)
  809430:	dc000015 	stw	r16,0(sp)
  809434:	3025883a 	mov	r18,r6
  809438:	2800b726 	beq	r5,zero,809718 <_realloc_r+0x310>
  80943c:	282b883a 	mov	r21,r5
  809440:	2029883a 	mov	r20,r4
  809444:	080f2040 	call	80f204 <__malloc_lock>
  809448:	a8bfff17 	ldw	r2,-4(r21)
  80944c:	043fff04 	movi	r16,-4
  809450:	90c002c4 	addi	r3,r18,11
  809454:	01000584 	movi	r4,22
  809458:	acfffe04 	addi	r19,r21,-8
  80945c:	1420703a 	and	r16,r2,r16
  809460:	20c0332e 	bgeu	r4,r3,809530 <_realloc_r+0x128>
  809464:	047ffe04 	movi	r17,-8
  809468:	1c62703a 	and	r17,r3,r17
  80946c:	8807883a 	mov	r3,r17
  809470:	88005816 	blt	r17,zero,8095d4 <_realloc_r+0x1cc>
  809474:	8c805736 	bltu	r17,r18,8095d4 <_realloc_r+0x1cc>
  809478:	80c0300e 	bge	r16,r3,80953c <_realloc_r+0x134>
  80947c:	07002074 	movhi	fp,129
  809480:	e70e0704 	addi	fp,fp,14364
  809484:	e1c00217 	ldw	r7,8(fp)
  809488:	9c09883a 	add	r4,r19,r16
  80948c:	22000117 	ldw	r8,4(r4)
  809490:	21c06326 	beq	r4,r7,809620 <_realloc_r+0x218>
  809494:	017fff84 	movi	r5,-2
  809498:	414a703a 	and	r5,r8,r5
  80949c:	214b883a 	add	r5,r4,r5
  8094a0:	29800117 	ldw	r6,4(r5)
  8094a4:	3180004c 	andi	r6,r6,1
  8094a8:	30003f26 	beq	r6,zero,8095a8 <_realloc_r+0x1a0>
  8094ac:	1080004c 	andi	r2,r2,1
  8094b0:	10008326 	beq	r2,zero,8096c0 <_realloc_r+0x2b8>
  8094b4:	900b883a 	mov	r5,r18
  8094b8:	a009883a 	mov	r4,r20
  8094bc:	08026bc0 	call	8026bc <_malloc_r>
  8094c0:	1025883a 	mov	r18,r2
  8094c4:	10011e26 	beq	r2,zero,809940 <_realloc_r+0x538>
  8094c8:	a93fff17 	ldw	r4,-4(r21)
  8094cc:	10fffe04 	addi	r3,r2,-8
  8094d0:	00bfff84 	movi	r2,-2
  8094d4:	2084703a 	and	r2,r4,r2
  8094d8:	9885883a 	add	r2,r19,r2
  8094dc:	1880ee26 	beq	r3,r2,809898 <_realloc_r+0x490>
  8094e0:	81bfff04 	addi	r6,r16,-4
  8094e4:	00800904 	movi	r2,36
  8094e8:	1180b836 	bltu	r2,r6,8097cc <_realloc_r+0x3c4>
  8094ec:	00c004c4 	movi	r3,19
  8094f0:	19809636 	bltu	r3,r6,80974c <_realloc_r+0x344>
  8094f4:	9005883a 	mov	r2,r18
  8094f8:	a807883a 	mov	r3,r21
  8094fc:	19000017 	ldw	r4,0(r3)
  809500:	11000015 	stw	r4,0(r2)
  809504:	19000117 	ldw	r4,4(r3)
  809508:	11000115 	stw	r4,4(r2)
  80950c:	18c00217 	ldw	r3,8(r3)
  809510:	10c00215 	stw	r3,8(r2)
  809514:	a80b883a 	mov	r5,r21
  809518:	a009883a 	mov	r4,r20
  80951c:	0801a8c0 	call	801a8c <_free_r>
  809520:	a009883a 	mov	r4,r20
  809524:	080f2280 	call	80f228 <__malloc_unlock>
  809528:	9005883a 	mov	r2,r18
  80952c:	00001206 	br	809578 <_realloc_r+0x170>
  809530:	00c00404 	movi	r3,16
  809534:	1823883a 	mov	r17,r3
  809538:	003fce06 	br	809474 <__alt_mem_onchip_mem+0xff789474>
  80953c:	a825883a 	mov	r18,r21
  809540:	8445c83a 	sub	r2,r16,r17
  809544:	00c003c4 	movi	r3,15
  809548:	18802636 	bltu	r3,r2,8095e4 <_realloc_r+0x1dc>
  80954c:	99800117 	ldw	r6,4(r19)
  809550:	9c07883a 	add	r3,r19,r16
  809554:	3180004c 	andi	r6,r6,1
  809558:	3420b03a 	or	r16,r6,r16
  80955c:	9c000115 	stw	r16,4(r19)
  809560:	18800117 	ldw	r2,4(r3)
  809564:	10800054 	ori	r2,r2,1
  809568:	18800115 	stw	r2,4(r3)
  80956c:	a009883a 	mov	r4,r20
  809570:	080f2280 	call	80f228 <__malloc_unlock>
  809574:	9005883a 	mov	r2,r18
  809578:	dfc00917 	ldw	ra,36(sp)
  80957c:	df000817 	ldw	fp,32(sp)
  809580:	ddc00717 	ldw	r23,28(sp)
  809584:	dd800617 	ldw	r22,24(sp)
  809588:	dd400517 	ldw	r21,20(sp)
  80958c:	dd000417 	ldw	r20,16(sp)
  809590:	dcc00317 	ldw	r19,12(sp)
  809594:	dc800217 	ldw	r18,8(sp)
  809598:	dc400117 	ldw	r17,4(sp)
  80959c:	dc000017 	ldw	r16,0(sp)
  8095a0:	dec00a04 	addi	sp,sp,40
  8095a4:	f800283a 	ret
  8095a8:	017fff04 	movi	r5,-4
  8095ac:	414a703a 	and	r5,r8,r5
  8095b0:	814d883a 	add	r6,r16,r5
  8095b4:	30c01f16 	blt	r6,r3,809634 <_realloc_r+0x22c>
  8095b8:	20800317 	ldw	r2,12(r4)
  8095bc:	20c00217 	ldw	r3,8(r4)
  8095c0:	a825883a 	mov	r18,r21
  8095c4:	3021883a 	mov	r16,r6
  8095c8:	18800315 	stw	r2,12(r3)
  8095cc:	10c00215 	stw	r3,8(r2)
  8095d0:	003fdb06 	br	809540 <__alt_mem_onchip_mem+0xff789540>
  8095d4:	00800304 	movi	r2,12
  8095d8:	a0800015 	stw	r2,0(r20)
  8095dc:	0005883a 	mov	r2,zero
  8095e0:	003fe506 	br	809578 <__alt_mem_onchip_mem+0xff789578>
  8095e4:	98c00117 	ldw	r3,4(r19)
  8095e8:	9c4b883a 	add	r5,r19,r17
  8095ec:	11000054 	ori	r4,r2,1
  8095f0:	18c0004c 	andi	r3,r3,1
  8095f4:	1c62b03a 	or	r17,r3,r17
  8095f8:	9c400115 	stw	r17,4(r19)
  8095fc:	29000115 	stw	r4,4(r5)
  809600:	2885883a 	add	r2,r5,r2
  809604:	10c00117 	ldw	r3,4(r2)
  809608:	29400204 	addi	r5,r5,8
  80960c:	a009883a 	mov	r4,r20
  809610:	18c00054 	ori	r3,r3,1
  809614:	10c00115 	stw	r3,4(r2)
  809618:	0801a8c0 	call	801a8c <_free_r>
  80961c:	003fd306 	br	80956c <__alt_mem_onchip_mem+0xff78956c>
  809620:	017fff04 	movi	r5,-4
  809624:	414a703a 	and	r5,r8,r5
  809628:	89800404 	addi	r6,r17,16
  80962c:	8151883a 	add	r8,r16,r5
  809630:	4180590e 	bge	r8,r6,809798 <_realloc_r+0x390>
  809634:	1080004c 	andi	r2,r2,1
  809638:	103f9e1e 	bne	r2,zero,8094b4 <__alt_mem_onchip_mem+0xff7894b4>
  80963c:	adbffe17 	ldw	r22,-8(r21)
  809640:	00bfff04 	movi	r2,-4
  809644:	9dadc83a 	sub	r22,r19,r22
  809648:	b1800117 	ldw	r6,4(r22)
  80964c:	3084703a 	and	r2,r6,r2
  809650:	20002026 	beq	r4,zero,8096d4 <_realloc_r+0x2cc>
  809654:	80af883a 	add	r23,r16,r2
  809658:	b96f883a 	add	r23,r23,r5
  80965c:	21c05f26 	beq	r4,r7,8097dc <_realloc_r+0x3d4>
  809660:	b8c01c16 	blt	r23,r3,8096d4 <_realloc_r+0x2cc>
  809664:	20800317 	ldw	r2,12(r4)
  809668:	20c00217 	ldw	r3,8(r4)
  80966c:	81bfff04 	addi	r6,r16,-4
  809670:	01000904 	movi	r4,36
  809674:	18800315 	stw	r2,12(r3)
  809678:	10c00215 	stw	r3,8(r2)
  80967c:	b0c00217 	ldw	r3,8(r22)
  809680:	b0800317 	ldw	r2,12(r22)
  809684:	b4800204 	addi	r18,r22,8
  809688:	18800315 	stw	r2,12(r3)
  80968c:	10c00215 	stw	r3,8(r2)
  809690:	21801b36 	bltu	r4,r6,809700 <_realloc_r+0x2f8>
  809694:	008004c4 	movi	r2,19
  809698:	1180352e 	bgeu	r2,r6,809770 <_realloc_r+0x368>
  80969c:	a8800017 	ldw	r2,0(r21)
  8096a0:	b0800215 	stw	r2,8(r22)
  8096a4:	a8800117 	ldw	r2,4(r21)
  8096a8:	b0800315 	stw	r2,12(r22)
  8096ac:	008006c4 	movi	r2,27
  8096b0:	11807f36 	bltu	r2,r6,8098b0 <_realloc_r+0x4a8>
  8096b4:	b0800404 	addi	r2,r22,16
  8096b8:	ad400204 	addi	r21,r21,8
  8096bc:	00002d06 	br	809774 <_realloc_r+0x36c>
  8096c0:	adbffe17 	ldw	r22,-8(r21)
  8096c4:	00bfff04 	movi	r2,-4
  8096c8:	9dadc83a 	sub	r22,r19,r22
  8096cc:	b1000117 	ldw	r4,4(r22)
  8096d0:	2084703a 	and	r2,r4,r2
  8096d4:	b03f7726 	beq	r22,zero,8094b4 <__alt_mem_onchip_mem+0xff7894b4>
  8096d8:	80af883a 	add	r23,r16,r2
  8096dc:	b8ff7516 	blt	r23,r3,8094b4 <__alt_mem_onchip_mem+0xff7894b4>
  8096e0:	b0800317 	ldw	r2,12(r22)
  8096e4:	b0c00217 	ldw	r3,8(r22)
  8096e8:	81bfff04 	addi	r6,r16,-4
  8096ec:	01000904 	movi	r4,36
  8096f0:	18800315 	stw	r2,12(r3)
  8096f4:	10c00215 	stw	r3,8(r2)
  8096f8:	b4800204 	addi	r18,r22,8
  8096fc:	21bfe52e 	bgeu	r4,r6,809694 <__alt_mem_onchip_mem+0xff789694>
  809700:	a80b883a 	mov	r5,r21
  809704:	9009883a 	mov	r4,r18
  809708:	08080e80 	call	8080e8 <memmove>
  80970c:	b821883a 	mov	r16,r23
  809710:	b027883a 	mov	r19,r22
  809714:	003f8a06 	br	809540 <__alt_mem_onchip_mem+0xff789540>
  809718:	300b883a 	mov	r5,r6
  80971c:	dfc00917 	ldw	ra,36(sp)
  809720:	df000817 	ldw	fp,32(sp)
  809724:	ddc00717 	ldw	r23,28(sp)
  809728:	dd800617 	ldw	r22,24(sp)
  80972c:	dd400517 	ldw	r21,20(sp)
  809730:	dd000417 	ldw	r20,16(sp)
  809734:	dcc00317 	ldw	r19,12(sp)
  809738:	dc800217 	ldw	r18,8(sp)
  80973c:	dc400117 	ldw	r17,4(sp)
  809740:	dc000017 	ldw	r16,0(sp)
  809744:	dec00a04 	addi	sp,sp,40
  809748:	08026bc1 	jmpi	8026bc <_malloc_r>
  80974c:	a8c00017 	ldw	r3,0(r21)
  809750:	90c00015 	stw	r3,0(r18)
  809754:	a8c00117 	ldw	r3,4(r21)
  809758:	90c00115 	stw	r3,4(r18)
  80975c:	00c006c4 	movi	r3,27
  809760:	19804536 	bltu	r3,r6,809878 <_realloc_r+0x470>
  809764:	90800204 	addi	r2,r18,8
  809768:	a8c00204 	addi	r3,r21,8
  80976c:	003f6306 	br	8094fc <__alt_mem_onchip_mem+0xff7894fc>
  809770:	9005883a 	mov	r2,r18
  809774:	a8c00017 	ldw	r3,0(r21)
  809778:	b821883a 	mov	r16,r23
  80977c:	b027883a 	mov	r19,r22
  809780:	10c00015 	stw	r3,0(r2)
  809784:	a8c00117 	ldw	r3,4(r21)
  809788:	10c00115 	stw	r3,4(r2)
  80978c:	a8c00217 	ldw	r3,8(r21)
  809790:	10c00215 	stw	r3,8(r2)
  809794:	003f6a06 	br	809540 <__alt_mem_onchip_mem+0xff789540>
  809798:	9c67883a 	add	r19,r19,r17
  80979c:	4445c83a 	sub	r2,r8,r17
  8097a0:	e4c00215 	stw	r19,8(fp)
  8097a4:	10800054 	ori	r2,r2,1
  8097a8:	98800115 	stw	r2,4(r19)
  8097ac:	a8bfff17 	ldw	r2,-4(r21)
  8097b0:	a009883a 	mov	r4,r20
  8097b4:	1080004c 	andi	r2,r2,1
  8097b8:	1462b03a 	or	r17,r2,r17
  8097bc:	ac7fff15 	stw	r17,-4(r21)
  8097c0:	080f2280 	call	80f228 <__malloc_unlock>
  8097c4:	a805883a 	mov	r2,r21
  8097c8:	003f6b06 	br	809578 <__alt_mem_onchip_mem+0xff789578>
  8097cc:	a80b883a 	mov	r5,r21
  8097d0:	9009883a 	mov	r4,r18
  8097d4:	08080e80 	call	8080e8 <memmove>
  8097d8:	003f4e06 	br	809514 <__alt_mem_onchip_mem+0xff789514>
  8097dc:	89000404 	addi	r4,r17,16
  8097e0:	b93fbc16 	blt	r23,r4,8096d4 <__alt_mem_onchip_mem+0xff7896d4>
  8097e4:	b0800317 	ldw	r2,12(r22)
  8097e8:	b0c00217 	ldw	r3,8(r22)
  8097ec:	81bfff04 	addi	r6,r16,-4
  8097f0:	01000904 	movi	r4,36
  8097f4:	18800315 	stw	r2,12(r3)
  8097f8:	10c00215 	stw	r3,8(r2)
  8097fc:	b4800204 	addi	r18,r22,8
  809800:	21804336 	bltu	r4,r6,809910 <_realloc_r+0x508>
  809804:	008004c4 	movi	r2,19
  809808:	11803f2e 	bgeu	r2,r6,809908 <_realloc_r+0x500>
  80980c:	a8800017 	ldw	r2,0(r21)
  809810:	b0800215 	stw	r2,8(r22)
  809814:	a8800117 	ldw	r2,4(r21)
  809818:	b0800315 	stw	r2,12(r22)
  80981c:	008006c4 	movi	r2,27
  809820:	11803f36 	bltu	r2,r6,809920 <_realloc_r+0x518>
  809824:	b0800404 	addi	r2,r22,16
  809828:	ad400204 	addi	r21,r21,8
  80982c:	a8c00017 	ldw	r3,0(r21)
  809830:	10c00015 	stw	r3,0(r2)
  809834:	a8c00117 	ldw	r3,4(r21)
  809838:	10c00115 	stw	r3,4(r2)
  80983c:	a8c00217 	ldw	r3,8(r21)
  809840:	10c00215 	stw	r3,8(r2)
  809844:	b447883a 	add	r3,r22,r17
  809848:	bc45c83a 	sub	r2,r23,r17
  80984c:	e0c00215 	stw	r3,8(fp)
  809850:	10800054 	ori	r2,r2,1
  809854:	18800115 	stw	r2,4(r3)
  809858:	b0800117 	ldw	r2,4(r22)
  80985c:	a009883a 	mov	r4,r20
  809860:	1080004c 	andi	r2,r2,1
  809864:	1462b03a 	or	r17,r2,r17
  809868:	b4400115 	stw	r17,4(r22)
  80986c:	080f2280 	call	80f228 <__malloc_unlock>
  809870:	9005883a 	mov	r2,r18
  809874:	003f4006 	br	809578 <__alt_mem_onchip_mem+0xff789578>
  809878:	a8c00217 	ldw	r3,8(r21)
  80987c:	90c00215 	stw	r3,8(r18)
  809880:	a8c00317 	ldw	r3,12(r21)
  809884:	90c00315 	stw	r3,12(r18)
  809888:	30801126 	beq	r6,r2,8098d0 <_realloc_r+0x4c8>
  80988c:	90800404 	addi	r2,r18,16
  809890:	a8c00404 	addi	r3,r21,16
  809894:	003f1906 	br	8094fc <__alt_mem_onchip_mem+0xff7894fc>
  809898:	90ffff17 	ldw	r3,-4(r18)
  80989c:	00bfff04 	movi	r2,-4
  8098a0:	a825883a 	mov	r18,r21
  8098a4:	1884703a 	and	r2,r3,r2
  8098a8:	80a1883a 	add	r16,r16,r2
  8098ac:	003f2406 	br	809540 <__alt_mem_onchip_mem+0xff789540>
  8098b0:	a8800217 	ldw	r2,8(r21)
  8098b4:	b0800415 	stw	r2,16(r22)
  8098b8:	a8800317 	ldw	r2,12(r21)
  8098bc:	b0800515 	stw	r2,20(r22)
  8098c0:	31000a26 	beq	r6,r4,8098ec <_realloc_r+0x4e4>
  8098c4:	b0800604 	addi	r2,r22,24
  8098c8:	ad400404 	addi	r21,r21,16
  8098cc:	003fa906 	br	809774 <__alt_mem_onchip_mem+0xff789774>
  8098d0:	a9000417 	ldw	r4,16(r21)
  8098d4:	90800604 	addi	r2,r18,24
  8098d8:	a8c00604 	addi	r3,r21,24
  8098dc:	91000415 	stw	r4,16(r18)
  8098e0:	a9000517 	ldw	r4,20(r21)
  8098e4:	91000515 	stw	r4,20(r18)
  8098e8:	003f0406 	br	8094fc <__alt_mem_onchip_mem+0xff7894fc>
  8098ec:	a8c00417 	ldw	r3,16(r21)
  8098f0:	ad400604 	addi	r21,r21,24
  8098f4:	b0800804 	addi	r2,r22,32
  8098f8:	b0c00615 	stw	r3,24(r22)
  8098fc:	a8ffff17 	ldw	r3,-4(r21)
  809900:	b0c00715 	stw	r3,28(r22)
  809904:	003f9b06 	br	809774 <__alt_mem_onchip_mem+0xff789774>
  809908:	9005883a 	mov	r2,r18
  80990c:	003fc706 	br	80982c <__alt_mem_onchip_mem+0xff78982c>
  809910:	a80b883a 	mov	r5,r21
  809914:	9009883a 	mov	r4,r18
  809918:	08080e80 	call	8080e8 <memmove>
  80991c:	003fc906 	br	809844 <__alt_mem_onchip_mem+0xff789844>
  809920:	a8800217 	ldw	r2,8(r21)
  809924:	b0800415 	stw	r2,16(r22)
  809928:	a8800317 	ldw	r2,12(r21)
  80992c:	b0800515 	stw	r2,20(r22)
  809930:	31000726 	beq	r6,r4,809950 <_realloc_r+0x548>
  809934:	b0800604 	addi	r2,r22,24
  809938:	ad400404 	addi	r21,r21,16
  80993c:	003fbb06 	br	80982c <__alt_mem_onchip_mem+0xff78982c>
  809940:	a009883a 	mov	r4,r20
  809944:	080f2280 	call	80f228 <__malloc_unlock>
  809948:	0005883a 	mov	r2,zero
  80994c:	003f0a06 	br	809578 <__alt_mem_onchip_mem+0xff789578>
  809950:	a8c00417 	ldw	r3,16(r21)
  809954:	ad400604 	addi	r21,r21,24
  809958:	b0800804 	addi	r2,r22,32
  80995c:	b0c00615 	stw	r3,24(r22)
  809960:	a8ffff17 	ldw	r3,-4(r21)
  809964:	b0c00715 	stw	r3,28(r22)
  809968:	003fb006 	br	80982c <__alt_mem_onchip_mem+0xff78982c>

0080996c <__fpclassifyd>:
  80996c:	00a00034 	movhi	r2,32768
  809970:	10bfffc4 	addi	r2,r2,-1
  809974:	2884703a 	and	r2,r5,r2
  809978:	10000726 	beq	r2,zero,809998 <__fpclassifyd+0x2c>
  80997c:	00fffc34 	movhi	r3,65520
  809980:	019ff834 	movhi	r6,32736
  809984:	28c7883a 	add	r3,r5,r3
  809988:	31bfffc4 	addi	r6,r6,-1
  80998c:	30c00536 	bltu	r6,r3,8099a4 <__fpclassifyd+0x38>
  809990:	00800104 	movi	r2,4
  809994:	f800283a 	ret
  809998:	2000021e 	bne	r4,zero,8099a4 <__fpclassifyd+0x38>
  80999c:	00800084 	movi	r2,2
  8099a0:	f800283a 	ret
  8099a4:	00dffc34 	movhi	r3,32752
  8099a8:	019ff834 	movhi	r6,32736
  8099ac:	28cb883a 	add	r5,r5,r3
  8099b0:	31bfffc4 	addi	r6,r6,-1
  8099b4:	317ff62e 	bgeu	r6,r5,809990 <__alt_mem_onchip_mem+0xff789990>
  8099b8:	01400434 	movhi	r5,16
  8099bc:	297fffc4 	addi	r5,r5,-1
  8099c0:	28800236 	bltu	r5,r2,8099cc <__fpclassifyd+0x60>
  8099c4:	008000c4 	movi	r2,3
  8099c8:	f800283a 	ret
  8099cc:	10c00226 	beq	r2,r3,8099d8 <__fpclassifyd+0x6c>
  8099d0:	0005883a 	mov	r2,zero
  8099d4:	f800283a 	ret
  8099d8:	2005003a 	cmpeq	r2,r4,zero
  8099dc:	f800283a 	ret

008099e0 <strcmp>:
  8099e0:	2144b03a 	or	r2,r4,r5
  8099e4:	108000cc 	andi	r2,r2,3
  8099e8:	1000171e 	bne	r2,zero,809a48 <strcmp+0x68>
  8099ec:	20800017 	ldw	r2,0(r4)
  8099f0:	28c00017 	ldw	r3,0(r5)
  8099f4:	10c0141e 	bne	r2,r3,809a48 <strcmp+0x68>
  8099f8:	027fbff4 	movhi	r9,65279
  8099fc:	4a7fbfc4 	addi	r9,r9,-257
  809a00:	0086303a 	nor	r3,zero,r2
  809a04:	02202074 	movhi	r8,32897
  809a08:	1245883a 	add	r2,r2,r9
  809a0c:	42202004 	addi	r8,r8,-32640
  809a10:	10c4703a 	and	r2,r2,r3
  809a14:	1204703a 	and	r2,r2,r8
  809a18:	10000226 	beq	r2,zero,809a24 <strcmp+0x44>
  809a1c:	00002306 	br	809aac <strcmp+0xcc>
  809a20:	1000221e 	bne	r2,zero,809aac <strcmp+0xcc>
  809a24:	21000104 	addi	r4,r4,4
  809a28:	20c00017 	ldw	r3,0(r4)
  809a2c:	29400104 	addi	r5,r5,4
  809a30:	29800017 	ldw	r6,0(r5)
  809a34:	1a4f883a 	add	r7,r3,r9
  809a38:	00c4303a 	nor	r2,zero,r3
  809a3c:	3884703a 	and	r2,r7,r2
  809a40:	1204703a 	and	r2,r2,r8
  809a44:	19bff626 	beq	r3,r6,809a20 <__alt_mem_onchip_mem+0xff789a20>
  809a48:	20800003 	ldbu	r2,0(r4)
  809a4c:	10c03fcc 	andi	r3,r2,255
  809a50:	18c0201c 	xori	r3,r3,128
  809a54:	18ffe004 	addi	r3,r3,-128
  809a58:	18000c26 	beq	r3,zero,809a8c <strcmp+0xac>
  809a5c:	29800007 	ldb	r6,0(r5)
  809a60:	19800326 	beq	r3,r6,809a70 <strcmp+0x90>
  809a64:	00001306 	br	809ab4 <strcmp+0xd4>
  809a68:	29800007 	ldb	r6,0(r5)
  809a6c:	11800b1e 	bne	r2,r6,809a9c <strcmp+0xbc>
  809a70:	21000044 	addi	r4,r4,1
  809a74:	20c00003 	ldbu	r3,0(r4)
  809a78:	29400044 	addi	r5,r5,1
  809a7c:	18803fcc 	andi	r2,r3,255
  809a80:	1080201c 	xori	r2,r2,128
  809a84:	10bfe004 	addi	r2,r2,-128
  809a88:	103ff71e 	bne	r2,zero,809a68 <__alt_mem_onchip_mem+0xff789a68>
  809a8c:	0007883a 	mov	r3,zero
  809a90:	28800003 	ldbu	r2,0(r5)
  809a94:	1885c83a 	sub	r2,r3,r2
  809a98:	f800283a 	ret
  809a9c:	28800003 	ldbu	r2,0(r5)
  809aa0:	18c03fcc 	andi	r3,r3,255
  809aa4:	1885c83a 	sub	r2,r3,r2
  809aa8:	f800283a 	ret
  809aac:	0005883a 	mov	r2,zero
  809ab0:	f800283a 	ret
  809ab4:	10c03fcc 	andi	r3,r2,255
  809ab8:	003ff506 	br	809a90 <__alt_mem_onchip_mem+0xff789a90>

00809abc <__sprint_r.part.0>:
  809abc:	28801917 	ldw	r2,100(r5)
  809ac0:	defff604 	addi	sp,sp,-40
  809ac4:	dd400515 	stw	r21,20(sp)
  809ac8:	dfc00915 	stw	ra,36(sp)
  809acc:	df000815 	stw	fp,32(sp)
  809ad0:	ddc00715 	stw	r23,28(sp)
  809ad4:	dd800615 	stw	r22,24(sp)
  809ad8:	dd000415 	stw	r20,16(sp)
  809adc:	dcc00315 	stw	r19,12(sp)
  809ae0:	dc800215 	stw	r18,8(sp)
  809ae4:	dc400115 	stw	r17,4(sp)
  809ae8:	dc000015 	stw	r16,0(sp)
  809aec:	1088000c 	andi	r2,r2,8192
  809af0:	302b883a 	mov	r21,r6
  809af4:	10002e26 	beq	r2,zero,809bb0 <__sprint_r.part.0+0xf4>
  809af8:	30800217 	ldw	r2,8(r6)
  809afc:	35800017 	ldw	r22,0(r6)
  809b00:	10002926 	beq	r2,zero,809ba8 <__sprint_r.part.0+0xec>
  809b04:	2827883a 	mov	r19,r5
  809b08:	2029883a 	mov	r20,r4
  809b0c:	b5c00104 	addi	r23,r22,4
  809b10:	04bfffc4 	movi	r18,-1
  809b14:	bc400017 	ldw	r17,0(r23)
  809b18:	b4000017 	ldw	r16,0(r22)
  809b1c:	0039883a 	mov	fp,zero
  809b20:	8822d0ba 	srli	r17,r17,2
  809b24:	8800031e 	bne	r17,zero,809b34 <__sprint_r.part.0+0x78>
  809b28:	00001806 	br	809b8c <__sprint_r.part.0+0xd0>
  809b2c:	84000104 	addi	r16,r16,4
  809b30:	8f001526 	beq	r17,fp,809b88 <__sprint_r.part.0+0xcc>
  809b34:	81400017 	ldw	r5,0(r16)
  809b38:	980d883a 	mov	r6,r19
  809b3c:	a009883a 	mov	r4,r20
  809b40:	080b4840 	call	80b484 <_fputwc_r>
  809b44:	e7000044 	addi	fp,fp,1
  809b48:	14bff81e 	bne	r2,r18,809b2c <__alt_mem_onchip_mem+0xff789b2c>
  809b4c:	9005883a 	mov	r2,r18
  809b50:	a8000215 	stw	zero,8(r21)
  809b54:	a8000115 	stw	zero,4(r21)
  809b58:	dfc00917 	ldw	ra,36(sp)
  809b5c:	df000817 	ldw	fp,32(sp)
  809b60:	ddc00717 	ldw	r23,28(sp)
  809b64:	dd800617 	ldw	r22,24(sp)
  809b68:	dd400517 	ldw	r21,20(sp)
  809b6c:	dd000417 	ldw	r20,16(sp)
  809b70:	dcc00317 	ldw	r19,12(sp)
  809b74:	dc800217 	ldw	r18,8(sp)
  809b78:	dc400117 	ldw	r17,4(sp)
  809b7c:	dc000017 	ldw	r16,0(sp)
  809b80:	dec00a04 	addi	sp,sp,40
  809b84:	f800283a 	ret
  809b88:	a8800217 	ldw	r2,8(r21)
  809b8c:	8c63883a 	add	r17,r17,r17
  809b90:	8c63883a 	add	r17,r17,r17
  809b94:	1445c83a 	sub	r2,r2,r17
  809b98:	a8800215 	stw	r2,8(r21)
  809b9c:	b5800204 	addi	r22,r22,8
  809ba0:	bdc00204 	addi	r23,r23,8
  809ba4:	103fdb1e 	bne	r2,zero,809b14 <__alt_mem_onchip_mem+0xff789b14>
  809ba8:	0005883a 	mov	r2,zero
  809bac:	003fe806 	br	809b50 <__alt_mem_onchip_mem+0xff789b50>
  809bb0:	08078700 	call	807870 <__sfvwrite_r>
  809bb4:	003fe606 	br	809b50 <__alt_mem_onchip_mem+0xff789b50>

00809bb8 <__sprint_r>:
  809bb8:	30c00217 	ldw	r3,8(r6)
  809bbc:	18000126 	beq	r3,zero,809bc4 <__sprint_r+0xc>
  809bc0:	0809abc1 	jmpi	809abc <__sprint_r.part.0>
  809bc4:	30000115 	stw	zero,4(r6)
  809bc8:	0005883a 	mov	r2,zero
  809bcc:	f800283a 	ret

00809bd0 <___vfiprintf_internal_r>:
  809bd0:	deffc904 	addi	sp,sp,-220
  809bd4:	df003515 	stw	fp,212(sp)
  809bd8:	dd003115 	stw	r20,196(sp)
  809bdc:	dfc03615 	stw	ra,216(sp)
  809be0:	ddc03415 	stw	r23,208(sp)
  809be4:	dd803315 	stw	r22,204(sp)
  809be8:	dd403215 	stw	r21,200(sp)
  809bec:	dcc03015 	stw	r19,192(sp)
  809bf0:	dc802f15 	stw	r18,188(sp)
  809bf4:	dc402e15 	stw	r17,184(sp)
  809bf8:	dc002d15 	stw	r16,180(sp)
  809bfc:	d9002015 	stw	r4,128(sp)
  809c00:	d9c02215 	stw	r7,136(sp)
  809c04:	2829883a 	mov	r20,r5
  809c08:	3039883a 	mov	fp,r6
  809c0c:	20000226 	beq	r4,zero,809c18 <___vfiprintf_internal_r+0x48>
  809c10:	20800e17 	ldw	r2,56(r4)
  809c14:	1000cf26 	beq	r2,zero,809f54 <___vfiprintf_internal_r+0x384>
  809c18:	a080030b 	ldhu	r2,12(r20)
  809c1c:	10c8000c 	andi	r3,r2,8192
  809c20:	1800061e 	bne	r3,zero,809c3c <___vfiprintf_internal_r+0x6c>
  809c24:	a1001917 	ldw	r4,100(r20)
  809c28:	00f7ffc4 	movi	r3,-8193
  809c2c:	10880014 	ori	r2,r2,8192
  809c30:	20c6703a 	and	r3,r4,r3
  809c34:	a080030d 	sth	r2,12(r20)
  809c38:	a0c01915 	stw	r3,100(r20)
  809c3c:	10c0020c 	andi	r3,r2,8
  809c40:	1800a926 	beq	r3,zero,809ee8 <___vfiprintf_internal_r+0x318>
  809c44:	a0c00417 	ldw	r3,16(r20)
  809c48:	1800a726 	beq	r3,zero,809ee8 <___vfiprintf_internal_r+0x318>
  809c4c:	1080068c 	andi	r2,r2,26
  809c50:	00c00284 	movi	r3,10
  809c54:	10c0ac26 	beq	r2,r3,809f08 <___vfiprintf_internal_r+0x338>
  809c58:	da801a04 	addi	r10,sp,104
  809c5c:	da801e15 	stw	r10,120(sp)
  809c60:	d8801e17 	ldw	r2,120(sp)
  809c64:	da8019c4 	addi	r10,sp,103
  809c68:	05802074 	movhi	r22,129
  809c6c:	05c02074 	movhi	r23,129
  809c70:	da801f15 	stw	r10,124(sp)
  809c74:	1295c83a 	sub	r10,r2,r10
  809c78:	b58ca004 	addi	r22,r22,12928
  809c7c:	bdcc9c04 	addi	r23,r23,12912
  809c80:	dec01a15 	stw	sp,104(sp)
  809c84:	d8001c15 	stw	zero,112(sp)
  809c88:	d8001b15 	stw	zero,108(sp)
  809c8c:	d8002615 	stw	zero,152(sp)
  809c90:	d8002315 	stw	zero,140(sp)
  809c94:	da802715 	stw	r10,156(sp)
  809c98:	d811883a 	mov	r8,sp
  809c9c:	dd002115 	stw	r20,132(sp)
  809ca0:	e021883a 	mov	r16,fp
  809ca4:	80800007 	ldb	r2,0(r16)
  809ca8:	1003ea26 	beq	r2,zero,80ac54 <___vfiprintf_internal_r+0x1084>
  809cac:	00c00944 	movi	r3,37
  809cb0:	8025883a 	mov	r18,r16
  809cb4:	10c0021e 	bne	r2,r3,809cc0 <___vfiprintf_internal_r+0xf0>
  809cb8:	00001606 	br	809d14 <___vfiprintf_internal_r+0x144>
  809cbc:	10c00326 	beq	r2,r3,809ccc <___vfiprintf_internal_r+0xfc>
  809cc0:	94800044 	addi	r18,r18,1
  809cc4:	90800007 	ldb	r2,0(r18)
  809cc8:	103ffc1e 	bne	r2,zero,809cbc <__alt_mem_onchip_mem+0xff789cbc>
  809ccc:	9423c83a 	sub	r17,r18,r16
  809cd0:	88001026 	beq	r17,zero,809d14 <___vfiprintf_internal_r+0x144>
  809cd4:	d8c01c17 	ldw	r3,112(sp)
  809cd8:	d8801b17 	ldw	r2,108(sp)
  809cdc:	44000015 	stw	r16,0(r8)
  809ce0:	88c7883a 	add	r3,r17,r3
  809ce4:	10800044 	addi	r2,r2,1
  809ce8:	44400115 	stw	r17,4(r8)
  809cec:	d8c01c15 	stw	r3,112(sp)
  809cf0:	d8801b15 	stw	r2,108(sp)
  809cf4:	010001c4 	movi	r4,7
  809cf8:	2080760e 	bge	r4,r2,809ed4 <___vfiprintf_internal_r+0x304>
  809cfc:	1803821e 	bne	r3,zero,80ab08 <___vfiprintf_internal_r+0xf38>
  809d00:	da802317 	ldw	r10,140(sp)
  809d04:	d8001b15 	stw	zero,108(sp)
  809d08:	d811883a 	mov	r8,sp
  809d0c:	5455883a 	add	r10,r10,r17
  809d10:	da802315 	stw	r10,140(sp)
  809d14:	90800007 	ldb	r2,0(r18)
  809d18:	10044626 	beq	r2,zero,80ae34 <___vfiprintf_internal_r+0x1264>
  809d1c:	90c00047 	ldb	r3,1(r18)
  809d20:	94000044 	addi	r16,r18,1
  809d24:	d8001d85 	stb	zero,118(sp)
  809d28:	0009883a 	mov	r4,zero
  809d2c:	000f883a 	mov	r7,zero
  809d30:	027fffc4 	movi	r9,-1
  809d34:	0023883a 	mov	r17,zero
  809d38:	0029883a 	mov	r20,zero
  809d3c:	01401604 	movi	r5,88
  809d40:	01800244 	movi	r6,9
  809d44:	03400a84 	movi	r13,42
  809d48:	03001b04 	movi	r12,108
  809d4c:	84000044 	addi	r16,r16,1
  809d50:	18bff804 	addi	r2,r3,-32
  809d54:	28827336 	bltu	r5,r2,80a724 <___vfiprintf_internal_r+0xb54>
  809d58:	100490ba 	slli	r2,r2,2
  809d5c:	02802074 	movhi	r10,129
  809d60:	52a75c04 	addi	r10,r10,-25232
  809d64:	1285883a 	add	r2,r2,r10
  809d68:	10800017 	ldw	r2,0(r2)
  809d6c:	1000683a 	jmp	r2
  809d70:	0080a458 	cmpnei	r2,zero,657
  809d74:	0080a724 	muli	r2,zero,668
  809d78:	0080a724 	muli	r2,zero,668
  809d7c:	0080a478 	rdprs	r2,zero,657
  809d80:	0080a724 	muli	r2,zero,668
  809d84:	0080a724 	muli	r2,zero,668
  809d88:	0080a724 	muli	r2,zero,668
  809d8c:	0080a724 	muli	r2,zero,668
  809d90:	0080a724 	muli	r2,zero,668
  809d94:	0080a724 	muli	r2,zero,668
  809d98:	0080a660 	cmpeqi	r2,zero,665
  809d9c:	0080a67c 	xorhi	r2,zero,665
  809da0:	0080a724 	muli	r2,zero,668
  809da4:	00809f64 	muli	r2,zero,637
  809da8:	0080a68c 	andi	r2,zero,666
  809dac:	0080a724 	muli	r2,zero,668
  809db0:	0080a484 	movi	r2,658
  809db4:	0080a490 	cmplti	r2,zero,658
  809db8:	0080a490 	cmplti	r2,zero,658
  809dbc:	0080a490 	cmplti	r2,zero,658
  809dc0:	0080a490 	cmplti	r2,zero,658
  809dc4:	0080a490 	cmplti	r2,zero,658
  809dc8:	0080a490 	cmplti	r2,zero,658
  809dcc:	0080a490 	cmplti	r2,zero,658
  809dd0:	0080a490 	cmplti	r2,zero,658
  809dd4:	0080a490 	cmplti	r2,zero,658
  809dd8:	0080a724 	muli	r2,zero,668
  809ddc:	0080a724 	muli	r2,zero,668
  809de0:	0080a724 	muli	r2,zero,668
  809de4:	0080a724 	muli	r2,zero,668
  809de8:	0080a724 	muli	r2,zero,668
  809dec:	0080a724 	muli	r2,zero,668
  809df0:	0080a724 	muli	r2,zero,668
  809df4:	0080a724 	muli	r2,zero,668
  809df8:	0080a724 	muli	r2,zero,668
  809dfc:	0080a724 	muli	r2,zero,668
  809e00:	0080a4bc 	xorhi	r2,zero,658
  809e04:	0080a724 	muli	r2,zero,668
  809e08:	0080a724 	muli	r2,zero,668
  809e0c:	0080a724 	muli	r2,zero,668
  809e10:	0080a724 	muli	r2,zero,668
  809e14:	0080a724 	muli	r2,zero,668
  809e18:	0080a724 	muli	r2,zero,668
  809e1c:	0080a724 	muli	r2,zero,668
  809e20:	0080a724 	muli	r2,zero,668
  809e24:	0080a724 	muli	r2,zero,668
  809e28:	0080a724 	muli	r2,zero,668
  809e2c:	0080a4f4 	movhi	r2,659
  809e30:	0080a724 	muli	r2,zero,668
  809e34:	0080a724 	muli	r2,zero,668
  809e38:	0080a724 	muli	r2,zero,668
  809e3c:	0080a724 	muli	r2,zero,668
  809e40:	0080a724 	muli	r2,zero,668
  809e44:	0080a54c 	andi	r2,zero,661
  809e48:	0080a724 	muli	r2,zero,668
  809e4c:	0080a724 	muli	r2,zero,668
  809e50:	0080a5bc 	xorhi	r2,zero,662
  809e54:	0080a724 	muli	r2,zero,668
  809e58:	0080a724 	muli	r2,zero,668
  809e5c:	0080a724 	muli	r2,zero,668
  809e60:	0080a724 	muli	r2,zero,668
  809e64:	0080a724 	muli	r2,zero,668
  809e68:	0080a724 	muli	r2,zero,668
  809e6c:	0080a724 	muli	r2,zero,668
  809e70:	0080a724 	muli	r2,zero,668
  809e74:	0080a724 	muli	r2,zero,668
  809e78:	0080a724 	muli	r2,zero,668
  809e7c:	0080a368 	cmpgeui	r2,zero,653
  809e80:	0080a394 	movui	r2,654
  809e84:	0080a724 	muli	r2,zero,668
  809e88:	0080a724 	muli	r2,zero,668
  809e8c:	0080a724 	muli	r2,zero,668
  809e90:	0080a6cc 	andi	r2,zero,667
  809e94:	0080a394 	movui	r2,654
  809e98:	0080a724 	muli	r2,zero,668
  809e9c:	0080a724 	muli	r2,zero,668
  809ea0:	0080a228 	cmpgeui	r2,zero,648
  809ea4:	0080a724 	muli	r2,zero,668
  809ea8:	0080a238 	rdprs	r2,zero,648
  809eac:	0080a274 	movhi	r2,649
  809eb0:	00809f70 	cmpltui	r2,zero,637
  809eb4:	0080a21c 	xori	r2,zero,648
  809eb8:	0080a724 	muli	r2,zero,668
  809ebc:	0080a5f8 	rdprs	r2,zero,663
  809ec0:	0080a724 	muli	r2,zero,668
  809ec4:	0080a650 	cmplti	r2,zero,665
  809ec8:	0080a724 	muli	r2,zero,668
  809ecc:	0080a724 	muli	r2,zero,668
  809ed0:	0080a314 	movui	r2,652
  809ed4:	42000204 	addi	r8,r8,8
  809ed8:	da802317 	ldw	r10,140(sp)
  809edc:	5455883a 	add	r10,r10,r17
  809ee0:	da802315 	stw	r10,140(sp)
  809ee4:	003f8b06 	br	809d14 <__alt_mem_onchip_mem+0xff789d14>
  809ee8:	d9002017 	ldw	r4,128(sp)
  809eec:	a00b883a 	mov	r5,r20
  809ef0:	0805c900 	call	805c90 <__swsetup_r>
  809ef4:	1003b11e 	bne	r2,zero,80adbc <___vfiprintf_internal_r+0x11ec>
  809ef8:	a080030b 	ldhu	r2,12(r20)
  809efc:	00c00284 	movi	r3,10
  809f00:	1080068c 	andi	r2,r2,26
  809f04:	10ff541e 	bne	r2,r3,809c58 <__alt_mem_onchip_mem+0xff789c58>
  809f08:	a080038f 	ldh	r2,14(r20)
  809f0c:	103f5216 	blt	r2,zero,809c58 <__alt_mem_onchip_mem+0xff789c58>
  809f10:	d9c02217 	ldw	r7,136(sp)
  809f14:	d9002017 	ldw	r4,128(sp)
  809f18:	e00d883a 	mov	r6,fp
  809f1c:	a00b883a 	mov	r5,r20
  809f20:	080b0480 	call	80b048 <__sbprintf>
  809f24:	dfc03617 	ldw	ra,216(sp)
  809f28:	df003517 	ldw	fp,212(sp)
  809f2c:	ddc03417 	ldw	r23,208(sp)
  809f30:	dd803317 	ldw	r22,204(sp)
  809f34:	dd403217 	ldw	r21,200(sp)
  809f38:	dd003117 	ldw	r20,196(sp)
  809f3c:	dcc03017 	ldw	r19,192(sp)
  809f40:	dc802f17 	ldw	r18,188(sp)
  809f44:	dc402e17 	ldw	r17,184(sp)
  809f48:	dc002d17 	ldw	r16,180(sp)
  809f4c:	dec03704 	addi	sp,sp,220
  809f50:	f800283a 	ret
  809f54:	08017c00 	call	8017c0 <__sinit>
  809f58:	003f2f06 	br	809c18 <__alt_mem_onchip_mem+0xff789c18>
  809f5c:	0463c83a 	sub	r17,zero,r17
  809f60:	d8802215 	stw	r2,136(sp)
  809f64:	a5000114 	ori	r20,r20,4
  809f68:	80c00007 	ldb	r3,0(r16)
  809f6c:	003f7706 	br	809d4c <__alt_mem_onchip_mem+0xff789d4c>
  809f70:	00800c04 	movi	r2,48
  809f74:	da802217 	ldw	r10,136(sp)
  809f78:	d8801d05 	stb	r2,116(sp)
  809f7c:	00801e04 	movi	r2,120
  809f80:	d8801d45 	stb	r2,117(sp)
  809f84:	d8001d85 	stb	zero,118(sp)
  809f88:	50c00104 	addi	r3,r10,4
  809f8c:	54800017 	ldw	r18,0(r10)
  809f90:	0027883a 	mov	r19,zero
  809f94:	a0800094 	ori	r2,r20,2
  809f98:	48030b16 	blt	r9,zero,80abc8 <___vfiprintf_internal_r+0xff8>
  809f9c:	00bfdfc4 	movi	r2,-129
  809fa0:	a096703a 	and	r11,r20,r2
  809fa4:	d8c02215 	stw	r3,136(sp)
  809fa8:	5d000094 	ori	r20,r11,2
  809fac:	90032b1e 	bne	r18,zero,80ac5c <___vfiprintf_internal_r+0x108c>
  809fb0:	00802074 	movhi	r2,129
  809fb4:	108b9c04 	addi	r2,r2,11888
  809fb8:	d8802615 	stw	r2,152(sp)
  809fbc:	0039883a 	mov	fp,zero
  809fc0:	48017b1e 	bne	r9,zero,80a5b0 <___vfiprintf_internal_r+0x9e0>
  809fc4:	0013883a 	mov	r9,zero
  809fc8:	0027883a 	mov	r19,zero
  809fcc:	dd401a04 	addi	r21,sp,104
  809fd0:	4825883a 	mov	r18,r9
  809fd4:	4cc0010e 	bge	r9,r19,809fdc <___vfiprintf_internal_r+0x40c>
  809fd8:	9825883a 	mov	r18,r19
  809fdc:	e7003fcc 	andi	fp,fp,255
  809fe0:	e700201c 	xori	fp,fp,128
  809fe4:	e73fe004 	addi	fp,fp,-128
  809fe8:	e0000126 	beq	fp,zero,809ff0 <___vfiprintf_internal_r+0x420>
  809fec:	94800044 	addi	r18,r18,1
  809ff0:	a380008c 	andi	r14,r20,2
  809ff4:	70000126 	beq	r14,zero,809ffc <___vfiprintf_internal_r+0x42c>
  809ff8:	94800084 	addi	r18,r18,2
  809ffc:	a700210c 	andi	fp,r20,132
  80a000:	e001df1e 	bne	fp,zero,80a780 <___vfiprintf_internal_r+0xbb0>
  80a004:	8c87c83a 	sub	r3,r17,r18
  80a008:	00c1dd0e 	bge	zero,r3,80a780 <___vfiprintf_internal_r+0xbb0>
  80a00c:	01c00404 	movi	r7,16
  80a010:	d8801c17 	ldw	r2,112(sp)
  80a014:	38c3ad0e 	bge	r7,r3,80aecc <___vfiprintf_internal_r+0x12fc>
  80a018:	02802074 	movhi	r10,129
  80a01c:	528ca004 	addi	r10,r10,12928
  80a020:	dc002915 	stw	r16,164(sp)
  80a024:	d9801b17 	ldw	r6,108(sp)
  80a028:	da802415 	stw	r10,144(sp)
  80a02c:	03c001c4 	movi	r15,7
  80a030:	da402515 	stw	r9,148(sp)
  80a034:	db802815 	stw	r14,160(sp)
  80a038:	1821883a 	mov	r16,r3
  80a03c:	00000506 	br	80a054 <___vfiprintf_internal_r+0x484>
  80a040:	31400084 	addi	r5,r6,2
  80a044:	42000204 	addi	r8,r8,8
  80a048:	200d883a 	mov	r6,r4
  80a04c:	843ffc04 	addi	r16,r16,-16
  80a050:	3c000d0e 	bge	r7,r16,80a088 <___vfiprintf_internal_r+0x4b8>
  80a054:	10800404 	addi	r2,r2,16
  80a058:	31000044 	addi	r4,r6,1
  80a05c:	45800015 	stw	r22,0(r8)
  80a060:	41c00115 	stw	r7,4(r8)
  80a064:	d8801c15 	stw	r2,112(sp)
  80a068:	d9001b15 	stw	r4,108(sp)
  80a06c:	793ff40e 	bge	r15,r4,80a040 <__alt_mem_onchip_mem+0xff78a040>
  80a070:	1001b51e 	bne	r2,zero,80a748 <___vfiprintf_internal_r+0xb78>
  80a074:	843ffc04 	addi	r16,r16,-16
  80a078:	000d883a 	mov	r6,zero
  80a07c:	01400044 	movi	r5,1
  80a080:	d811883a 	mov	r8,sp
  80a084:	3c3ff316 	blt	r7,r16,80a054 <__alt_mem_onchip_mem+0xff78a054>
  80a088:	8007883a 	mov	r3,r16
  80a08c:	da402517 	ldw	r9,148(sp)
  80a090:	db802817 	ldw	r14,160(sp)
  80a094:	dc002917 	ldw	r16,164(sp)
  80a098:	da802417 	ldw	r10,144(sp)
  80a09c:	1885883a 	add	r2,r3,r2
  80a0a0:	40c00115 	stw	r3,4(r8)
  80a0a4:	42800015 	stw	r10,0(r8)
  80a0a8:	d8801c15 	stw	r2,112(sp)
  80a0ac:	d9401b15 	stw	r5,108(sp)
  80a0b0:	00c001c4 	movi	r3,7
  80a0b4:	19426016 	blt	r3,r5,80aa38 <___vfiprintf_internal_r+0xe68>
  80a0b8:	d8c01d87 	ldb	r3,118(sp)
  80a0bc:	42000204 	addi	r8,r8,8
  80a0c0:	29000044 	addi	r4,r5,1
  80a0c4:	1801b31e 	bne	r3,zero,80a794 <___vfiprintf_internal_r+0xbc4>
  80a0c8:	7001c026 	beq	r14,zero,80a7cc <___vfiprintf_internal_r+0xbfc>
  80a0cc:	d8c01d04 	addi	r3,sp,116
  80a0d0:	10800084 	addi	r2,r2,2
  80a0d4:	40c00015 	stw	r3,0(r8)
  80a0d8:	00c00084 	movi	r3,2
  80a0dc:	40c00115 	stw	r3,4(r8)
  80a0e0:	d8801c15 	stw	r2,112(sp)
  80a0e4:	d9001b15 	stw	r4,108(sp)
  80a0e8:	00c001c4 	movi	r3,7
  80a0ec:	1902650e 	bge	r3,r4,80aa84 <___vfiprintf_internal_r+0xeb4>
  80a0f0:	10029a1e 	bne	r2,zero,80ab5c <___vfiprintf_internal_r+0xf8c>
  80a0f4:	00c02004 	movi	r3,128
  80a0f8:	01000044 	movi	r4,1
  80a0fc:	000b883a 	mov	r5,zero
  80a100:	d811883a 	mov	r8,sp
  80a104:	e0c1b31e 	bne	fp,r3,80a7d4 <___vfiprintf_internal_r+0xc04>
  80a108:	8cb9c83a 	sub	fp,r17,r18
  80a10c:	0701b10e 	bge	zero,fp,80a7d4 <___vfiprintf_internal_r+0xc04>
  80a110:	01c00404 	movi	r7,16
  80a114:	3f03890e 	bge	r7,fp,80af3c <___vfiprintf_internal_r+0x136c>
  80a118:	00c02074 	movhi	r3,129
  80a11c:	18cc9c04 	addi	r3,r3,12912
  80a120:	d8c02415 	stw	r3,144(sp)
  80a124:	8007883a 	mov	r3,r16
  80a128:	034001c4 	movi	r13,7
  80a12c:	e021883a 	mov	r16,fp
  80a130:	da402515 	stw	r9,148(sp)
  80a134:	1839883a 	mov	fp,r3
  80a138:	00000506 	br	80a150 <___vfiprintf_internal_r+0x580>
  80a13c:	29800084 	addi	r6,r5,2
  80a140:	42000204 	addi	r8,r8,8
  80a144:	180b883a 	mov	r5,r3
  80a148:	843ffc04 	addi	r16,r16,-16
  80a14c:	3c000d0e 	bge	r7,r16,80a184 <___vfiprintf_internal_r+0x5b4>
  80a150:	10800404 	addi	r2,r2,16
  80a154:	28c00044 	addi	r3,r5,1
  80a158:	45c00015 	stw	r23,0(r8)
  80a15c:	41c00115 	stw	r7,4(r8)
  80a160:	d8801c15 	stw	r2,112(sp)
  80a164:	d8c01b15 	stw	r3,108(sp)
  80a168:	68fff40e 	bge	r13,r3,80a13c <__alt_mem_onchip_mem+0xff78a13c>
  80a16c:	1002241e 	bne	r2,zero,80aa00 <___vfiprintf_internal_r+0xe30>
  80a170:	843ffc04 	addi	r16,r16,-16
  80a174:	01800044 	movi	r6,1
  80a178:	000b883a 	mov	r5,zero
  80a17c:	d811883a 	mov	r8,sp
  80a180:	3c3ff316 	blt	r7,r16,80a150 <__alt_mem_onchip_mem+0xff78a150>
  80a184:	da402517 	ldw	r9,148(sp)
  80a188:	e007883a 	mov	r3,fp
  80a18c:	8039883a 	mov	fp,r16
  80a190:	1821883a 	mov	r16,r3
  80a194:	d8c02417 	ldw	r3,144(sp)
  80a198:	1705883a 	add	r2,r2,fp
  80a19c:	47000115 	stw	fp,4(r8)
  80a1a0:	40c00015 	stw	r3,0(r8)
  80a1a4:	d8801c15 	stw	r2,112(sp)
  80a1a8:	d9801b15 	stw	r6,108(sp)
  80a1ac:	00c001c4 	movi	r3,7
  80a1b0:	19827616 	blt	r3,r6,80ab8c <___vfiprintf_internal_r+0xfbc>
  80a1b4:	4cf9c83a 	sub	fp,r9,r19
  80a1b8:	42000204 	addi	r8,r8,8
  80a1bc:	31000044 	addi	r4,r6,1
  80a1c0:	300b883a 	mov	r5,r6
  80a1c4:	07018516 	blt	zero,fp,80a7dc <___vfiprintf_internal_r+0xc0c>
  80a1c8:	9885883a 	add	r2,r19,r2
  80a1cc:	45400015 	stw	r21,0(r8)
  80a1d0:	44c00115 	stw	r19,4(r8)
  80a1d4:	d8801c15 	stw	r2,112(sp)
  80a1d8:	d9001b15 	stw	r4,108(sp)
  80a1dc:	00c001c4 	movi	r3,7
  80a1e0:	1901dd0e 	bge	r3,r4,80a958 <___vfiprintf_internal_r+0xd88>
  80a1e4:	1002401e 	bne	r2,zero,80aae8 <___vfiprintf_internal_r+0xf18>
  80a1e8:	d8001b15 	stw	zero,108(sp)
  80a1ec:	a2c0010c 	andi	r11,r20,4
  80a1f0:	58000226 	beq	r11,zero,80a1fc <___vfiprintf_internal_r+0x62c>
  80a1f4:	8ca7c83a 	sub	r19,r17,r18
  80a1f8:	04c2f216 	blt	zero,r19,80adc4 <___vfiprintf_internal_r+0x11f4>
  80a1fc:	8c80010e 	bge	r17,r18,80a204 <___vfiprintf_internal_r+0x634>
  80a200:	9023883a 	mov	r17,r18
  80a204:	da802317 	ldw	r10,140(sp)
  80a208:	5455883a 	add	r10,r10,r17
  80a20c:	da802315 	stw	r10,140(sp)
  80a210:	d8001b15 	stw	zero,108(sp)
  80a214:	d811883a 	mov	r8,sp
  80a218:	003ea206 	br	809ca4 <__alt_mem_onchip_mem+0xff789ca4>
  80a21c:	a5000814 	ori	r20,r20,32
  80a220:	80c00007 	ldb	r3,0(r16)
  80a224:	003ec906 	br	809d4c <__alt_mem_onchip_mem+0xff789d4c>
  80a228:	80c00007 	ldb	r3,0(r16)
  80a22c:	1b030926 	beq	r3,r12,80ae54 <___vfiprintf_internal_r+0x1284>
  80a230:	a5000414 	ori	r20,r20,16
  80a234:	003ec506 	br	809d4c <__alt_mem_onchip_mem+0xff789d4c>
  80a238:	21003fcc 	andi	r4,r4,255
  80a23c:	20035e1e 	bne	r4,zero,80afb8 <___vfiprintf_internal_r+0x13e8>
  80a240:	a080080c 	andi	r2,r20,32
  80a244:	1002a526 	beq	r2,zero,80acdc <___vfiprintf_internal_r+0x110c>
  80a248:	da802217 	ldw	r10,136(sp)
  80a24c:	50800017 	ldw	r2,0(r10)
  80a250:	da802317 	ldw	r10,140(sp)
  80a254:	5007d7fa 	srai	r3,r10,31
  80a258:	da802217 	ldw	r10,136(sp)
  80a25c:	10c00115 	stw	r3,4(r2)
  80a260:	52800104 	addi	r10,r10,4
  80a264:	da802215 	stw	r10,136(sp)
  80a268:	da802317 	ldw	r10,140(sp)
  80a26c:	12800015 	stw	r10,0(r2)
  80a270:	003e8c06 	br	809ca4 <__alt_mem_onchip_mem+0xff789ca4>
  80a274:	21003fcc 	andi	r4,r4,255
  80a278:	2003511e 	bne	r4,zero,80afc0 <___vfiprintf_internal_r+0x13f0>
  80a27c:	a080080c 	andi	r2,r20,32
  80a280:	1000a126 	beq	r2,zero,80a508 <___vfiprintf_internal_r+0x938>
  80a284:	da802217 	ldw	r10,136(sp)
  80a288:	d8001d85 	stb	zero,118(sp)
  80a28c:	50800204 	addi	r2,r10,8
  80a290:	54800017 	ldw	r18,0(r10)
  80a294:	54c00117 	ldw	r19,4(r10)
  80a298:	4802b416 	blt	r9,zero,80ad6c <___vfiprintf_internal_r+0x119c>
  80a29c:	013fdfc4 	movi	r4,-129
  80a2a0:	94c6b03a 	or	r3,r18,r19
  80a2a4:	d8802215 	stw	r2,136(sp)
  80a2a8:	a128703a 	and	r20,r20,r4
  80a2ac:	1800a226 	beq	r3,zero,80a538 <___vfiprintf_internal_r+0x968>
  80a2b0:	0039883a 	mov	fp,zero
  80a2b4:	dd401a04 	addi	r21,sp,104
  80a2b8:	9006d0fa 	srli	r3,r18,3
  80a2bc:	9808977a 	slli	r4,r19,29
  80a2c0:	9826d0fa 	srli	r19,r19,3
  80a2c4:	948001cc 	andi	r18,r18,7
  80a2c8:	90800c04 	addi	r2,r18,48
  80a2cc:	ad7fffc4 	addi	r21,r21,-1
  80a2d0:	20e4b03a 	or	r18,r4,r3
  80a2d4:	a8800005 	stb	r2,0(r21)
  80a2d8:	94c6b03a 	or	r3,r18,r19
  80a2dc:	183ff61e 	bne	r3,zero,80a2b8 <__alt_mem_onchip_mem+0xff78a2b8>
  80a2e0:	a0c0004c 	andi	r3,r20,1
  80a2e4:	18005926 	beq	r3,zero,80a44c <___vfiprintf_internal_r+0x87c>
  80a2e8:	10803fcc 	andi	r2,r2,255
  80a2ec:	1080201c 	xori	r2,r2,128
  80a2f0:	10bfe004 	addi	r2,r2,-128
  80a2f4:	00c00c04 	movi	r3,48
  80a2f8:	10c05426 	beq	r2,r3,80a44c <___vfiprintf_internal_r+0x87c>
  80a2fc:	da801e17 	ldw	r10,120(sp)
  80a300:	a8bfffc4 	addi	r2,r21,-1
  80a304:	a8ffffc5 	stb	r3,-1(r21)
  80a308:	50a7c83a 	sub	r19,r10,r2
  80a30c:	102b883a 	mov	r21,r2
  80a310:	003f2f06 	br	809fd0 <__alt_mem_onchip_mem+0xff789fd0>
  80a314:	21003fcc 	andi	r4,r4,255
  80a318:	2003421e 	bne	r4,zero,80b024 <___vfiprintf_internal_r+0x1454>
  80a31c:	00802074 	movhi	r2,129
  80a320:	108b9c04 	addi	r2,r2,11888
  80a324:	d8802615 	stw	r2,152(sp)
  80a328:	a080080c 	andi	r2,r20,32
  80a32c:	1000aa26 	beq	r2,zero,80a5d8 <___vfiprintf_internal_r+0xa08>
  80a330:	da802217 	ldw	r10,136(sp)
  80a334:	54800017 	ldw	r18,0(r10)
  80a338:	54c00117 	ldw	r19,4(r10)
  80a33c:	52800204 	addi	r10,r10,8
  80a340:	da802215 	stw	r10,136(sp)
  80a344:	a080004c 	andi	r2,r20,1
  80a348:	1001d226 	beq	r2,zero,80aa94 <___vfiprintf_internal_r+0xec4>
  80a34c:	94c4b03a 	or	r2,r18,r19
  80a350:	1002351e 	bne	r2,zero,80ac28 <___vfiprintf_internal_r+0x1058>
  80a354:	d8001d85 	stb	zero,118(sp)
  80a358:	48022216 	blt	r9,zero,80abe4 <___vfiprintf_internal_r+0x1014>
  80a35c:	00bfdfc4 	movi	r2,-129
  80a360:	a0a8703a 	and	r20,r20,r2
  80a364:	003f1506 	br	809fbc <__alt_mem_onchip_mem+0xff789fbc>
  80a368:	da802217 	ldw	r10,136(sp)
  80a36c:	04800044 	movi	r18,1
  80a370:	d8001d85 	stb	zero,118(sp)
  80a374:	50800017 	ldw	r2,0(r10)
  80a378:	52800104 	addi	r10,r10,4
  80a37c:	da802215 	stw	r10,136(sp)
  80a380:	d8801005 	stb	r2,64(sp)
  80a384:	9027883a 	mov	r19,r18
  80a388:	dd401004 	addi	r21,sp,64
  80a38c:	0013883a 	mov	r9,zero
  80a390:	003f1706 	br	809ff0 <__alt_mem_onchip_mem+0xff789ff0>
  80a394:	21003fcc 	andi	r4,r4,255
  80a398:	2003201e 	bne	r4,zero,80b01c <___vfiprintf_internal_r+0x144c>
  80a39c:	a080080c 	andi	r2,r20,32
  80a3a0:	10004b26 	beq	r2,zero,80a4d0 <___vfiprintf_internal_r+0x900>
  80a3a4:	da802217 	ldw	r10,136(sp)
  80a3a8:	50800117 	ldw	r2,4(r10)
  80a3ac:	54800017 	ldw	r18,0(r10)
  80a3b0:	52800204 	addi	r10,r10,8
  80a3b4:	da802215 	stw	r10,136(sp)
  80a3b8:	1027883a 	mov	r19,r2
  80a3bc:	10022c16 	blt	r2,zero,80ac70 <___vfiprintf_internal_r+0x10a0>
  80a3c0:	df001d83 	ldbu	fp,118(sp)
  80a3c4:	48007216 	blt	r9,zero,80a590 <___vfiprintf_internal_r+0x9c0>
  80a3c8:	00ffdfc4 	movi	r3,-129
  80a3cc:	94c4b03a 	or	r2,r18,r19
  80a3d0:	a0e8703a 	and	r20,r20,r3
  80a3d4:	1000cc26 	beq	r2,zero,80a708 <___vfiprintf_internal_r+0xb38>
  80a3d8:	98021026 	beq	r19,zero,80ac1c <___vfiprintf_internal_r+0x104c>
  80a3dc:	dc402415 	stw	r17,144(sp)
  80a3e0:	dc002515 	stw	r16,148(sp)
  80a3e4:	9823883a 	mov	r17,r19
  80a3e8:	9021883a 	mov	r16,r18
  80a3ec:	dd401a04 	addi	r21,sp,104
  80a3f0:	4825883a 	mov	r18,r9
  80a3f4:	4027883a 	mov	r19,r8
  80a3f8:	8009883a 	mov	r4,r16
  80a3fc:	880b883a 	mov	r5,r17
  80a400:	01800284 	movi	r6,10
  80a404:	000f883a 	mov	r7,zero
  80a408:	080bc880 	call	80bc88 <__umoddi3>
  80a40c:	10800c04 	addi	r2,r2,48
  80a410:	ad7fffc4 	addi	r21,r21,-1
  80a414:	8009883a 	mov	r4,r16
  80a418:	880b883a 	mov	r5,r17
  80a41c:	a8800005 	stb	r2,0(r21)
  80a420:	01800284 	movi	r6,10
  80a424:	000f883a 	mov	r7,zero
  80a428:	080b7100 	call	80b710 <__udivdi3>
  80a42c:	1021883a 	mov	r16,r2
  80a430:	10c4b03a 	or	r2,r2,r3
  80a434:	1823883a 	mov	r17,r3
  80a438:	103fef1e 	bne	r2,zero,80a3f8 <__alt_mem_onchip_mem+0xff78a3f8>
  80a43c:	dc402417 	ldw	r17,144(sp)
  80a440:	dc002517 	ldw	r16,148(sp)
  80a444:	9013883a 	mov	r9,r18
  80a448:	9811883a 	mov	r8,r19
  80a44c:	da801e17 	ldw	r10,120(sp)
  80a450:	5567c83a 	sub	r19,r10,r21
  80a454:	003ede06 	br	809fd0 <__alt_mem_onchip_mem+0xff789fd0>
  80a458:	38803fcc 	andi	r2,r7,255
  80a45c:	1080201c 	xori	r2,r2,128
  80a460:	10bfe004 	addi	r2,r2,-128
  80a464:	1002371e 	bne	r2,zero,80ad44 <___vfiprintf_internal_r+0x1174>
  80a468:	01000044 	movi	r4,1
  80a46c:	01c00804 	movi	r7,32
  80a470:	80c00007 	ldb	r3,0(r16)
  80a474:	003e3506 	br	809d4c <__alt_mem_onchip_mem+0xff789d4c>
  80a478:	a5000054 	ori	r20,r20,1
  80a47c:	80c00007 	ldb	r3,0(r16)
  80a480:	003e3206 	br	809d4c <__alt_mem_onchip_mem+0xff789d4c>
  80a484:	a5002014 	ori	r20,r20,128
  80a488:	80c00007 	ldb	r3,0(r16)
  80a48c:	003e2f06 	br	809d4c <__alt_mem_onchip_mem+0xff789d4c>
  80a490:	8015883a 	mov	r10,r16
  80a494:	0023883a 	mov	r17,zero
  80a498:	18bff404 	addi	r2,r3,-48
  80a49c:	50c00007 	ldb	r3,0(r10)
  80a4a0:	8c4002a4 	muli	r17,r17,10
  80a4a4:	84000044 	addi	r16,r16,1
  80a4a8:	8015883a 	mov	r10,r16
  80a4ac:	1463883a 	add	r17,r2,r17
  80a4b0:	18bff404 	addi	r2,r3,-48
  80a4b4:	30bff92e 	bgeu	r6,r2,80a49c <__alt_mem_onchip_mem+0xff78a49c>
  80a4b8:	003e2506 	br	809d50 <__alt_mem_onchip_mem+0xff789d50>
  80a4bc:	21003fcc 	andi	r4,r4,255
  80a4c0:	2002d41e 	bne	r4,zero,80b014 <___vfiprintf_internal_r+0x1444>
  80a4c4:	a5000414 	ori	r20,r20,16
  80a4c8:	a080080c 	andi	r2,r20,32
  80a4cc:	103fb51e 	bne	r2,zero,80a3a4 <__alt_mem_onchip_mem+0xff78a3a4>
  80a4d0:	a080040c 	andi	r2,r20,16
  80a4d4:	1001f826 	beq	r2,zero,80acb8 <___vfiprintf_internal_r+0x10e8>
  80a4d8:	da802217 	ldw	r10,136(sp)
  80a4dc:	54800017 	ldw	r18,0(r10)
  80a4e0:	52800104 	addi	r10,r10,4
  80a4e4:	da802215 	stw	r10,136(sp)
  80a4e8:	9027d7fa 	srai	r19,r18,31
  80a4ec:	9805883a 	mov	r2,r19
  80a4f0:	003fb206 	br	80a3bc <__alt_mem_onchip_mem+0xff78a3bc>
  80a4f4:	21003fcc 	andi	r4,r4,255
  80a4f8:	2002c41e 	bne	r4,zero,80b00c <___vfiprintf_internal_r+0x143c>
  80a4fc:	a5000414 	ori	r20,r20,16
  80a500:	a080080c 	andi	r2,r20,32
  80a504:	103f5f1e 	bne	r2,zero,80a284 <__alt_mem_onchip_mem+0xff78a284>
  80a508:	a080040c 	andi	r2,r20,16
  80a50c:	10020f26 	beq	r2,zero,80ad4c <___vfiprintf_internal_r+0x117c>
  80a510:	da802217 	ldw	r10,136(sp)
  80a514:	d8001d85 	stb	zero,118(sp)
  80a518:	0027883a 	mov	r19,zero
  80a51c:	50800104 	addi	r2,r10,4
  80a520:	54800017 	ldw	r18,0(r10)
  80a524:	48021116 	blt	r9,zero,80ad6c <___vfiprintf_internal_r+0x119c>
  80a528:	00ffdfc4 	movi	r3,-129
  80a52c:	d8802215 	stw	r2,136(sp)
  80a530:	a0e8703a 	and	r20,r20,r3
  80a534:	903f5e1e 	bne	r18,zero,80a2b0 <__alt_mem_onchip_mem+0xff78a2b0>
  80a538:	0039883a 	mov	fp,zero
  80a53c:	4802a626 	beq	r9,zero,80afd8 <___vfiprintf_internal_r+0x1408>
  80a540:	0025883a 	mov	r18,zero
  80a544:	0027883a 	mov	r19,zero
  80a548:	003f5a06 	br	80a2b4 <__alt_mem_onchip_mem+0xff78a2b4>
  80a54c:	21003fcc 	andi	r4,r4,255
  80a550:	20029f1e 	bne	r4,zero,80afd0 <___vfiprintf_internal_r+0x1400>
  80a554:	a5000414 	ori	r20,r20,16
  80a558:	a080080c 	andi	r2,r20,32
  80a55c:	10005e1e 	bne	r2,zero,80a6d8 <___vfiprintf_internal_r+0xb08>
  80a560:	a080040c 	andi	r2,r20,16
  80a564:	1001a21e 	bne	r2,zero,80abf0 <___vfiprintf_internal_r+0x1020>
  80a568:	a080100c 	andi	r2,r20,64
  80a56c:	d8001d85 	stb	zero,118(sp)
  80a570:	da802217 	ldw	r10,136(sp)
  80a574:	1002231e 	bne	r2,zero,80ae04 <___vfiprintf_internal_r+0x1234>
  80a578:	50800104 	addi	r2,r10,4
  80a57c:	54800017 	ldw	r18,0(r10)
  80a580:	0027883a 	mov	r19,zero
  80a584:	4801a00e 	bge	r9,zero,80ac08 <___vfiprintf_internal_r+0x1038>
  80a588:	d8802215 	stw	r2,136(sp)
  80a58c:	0039883a 	mov	fp,zero
  80a590:	94c4b03a 	or	r2,r18,r19
  80a594:	103f901e 	bne	r2,zero,80a3d8 <__alt_mem_onchip_mem+0xff78a3d8>
  80a598:	00800044 	movi	r2,1
  80a59c:	10803fcc 	andi	r2,r2,255
  80a5a0:	00c00044 	movi	r3,1
  80a5a4:	10c05926 	beq	r2,r3,80a70c <___vfiprintf_internal_r+0xb3c>
  80a5a8:	00c00084 	movi	r3,2
  80a5ac:	10ffe41e 	bne	r2,r3,80a540 <__alt_mem_onchip_mem+0xff78a540>
  80a5b0:	0025883a 	mov	r18,zero
  80a5b4:	0027883a 	mov	r19,zero
  80a5b8:	00013d06 	br	80aab0 <___vfiprintf_internal_r+0xee0>
  80a5bc:	21003fcc 	andi	r4,r4,255
  80a5c0:	2002811e 	bne	r4,zero,80afc8 <___vfiprintf_internal_r+0x13f8>
  80a5c4:	00802074 	movhi	r2,129
  80a5c8:	108b9704 	addi	r2,r2,11868
  80a5cc:	d8802615 	stw	r2,152(sp)
  80a5d0:	a080080c 	andi	r2,r20,32
  80a5d4:	103f561e 	bne	r2,zero,80a330 <__alt_mem_onchip_mem+0xff78a330>
  80a5d8:	a080040c 	andi	r2,r20,16
  80a5dc:	1001d126 	beq	r2,zero,80ad24 <___vfiprintf_internal_r+0x1154>
  80a5e0:	da802217 	ldw	r10,136(sp)
  80a5e4:	0027883a 	mov	r19,zero
  80a5e8:	54800017 	ldw	r18,0(r10)
  80a5ec:	52800104 	addi	r10,r10,4
  80a5f0:	da802215 	stw	r10,136(sp)
  80a5f4:	003f5306 	br	80a344 <__alt_mem_onchip_mem+0xff78a344>
  80a5f8:	da802217 	ldw	r10,136(sp)
  80a5fc:	d8001d85 	stb	zero,118(sp)
  80a600:	55400017 	ldw	r21,0(r10)
  80a604:	50c00104 	addi	r3,r10,4
  80a608:	a8024226 	beq	r21,zero,80af14 <___vfiprintf_internal_r+0x1344>
  80a60c:	48021816 	blt	r9,zero,80ae70 <___vfiprintf_internal_r+0x12a0>
  80a610:	480d883a 	mov	r6,r9
  80a614:	000b883a 	mov	r5,zero
  80a618:	a809883a 	mov	r4,r21
  80a61c:	d8c02a15 	stw	r3,168(sp)
  80a620:	da002b15 	stw	r8,172(sp)
  80a624:	da402c15 	stw	r9,176(sp)
  80a628:	0807ebc0 	call	807ebc <memchr>
  80a62c:	d8c02a17 	ldw	r3,168(sp)
  80a630:	da002b17 	ldw	r8,172(sp)
  80a634:	da402c17 	ldw	r9,176(sp)
  80a638:	10024826 	beq	r2,zero,80af5c <___vfiprintf_internal_r+0x138c>
  80a63c:	1567c83a 	sub	r19,r2,r21
  80a640:	df001d83 	ldbu	fp,118(sp)
  80a644:	d8c02215 	stw	r3,136(sp)
  80a648:	0013883a 	mov	r9,zero
  80a64c:	003e6006 	br	809fd0 <__alt_mem_onchip_mem+0xff789fd0>
  80a650:	21003fcc 	andi	r4,r4,255
  80a654:	203fc026 	beq	r4,zero,80a558 <__alt_mem_onchip_mem+0xff78a558>
  80a658:	d9c01d85 	stb	r7,118(sp)
  80a65c:	003fbe06 	br	80a558 <__alt_mem_onchip_mem+0xff78a558>
  80a660:	da802217 	ldw	r10,136(sp)
  80a664:	54400017 	ldw	r17,0(r10)
  80a668:	50800104 	addi	r2,r10,4
  80a66c:	883e3b16 	blt	r17,zero,809f5c <__alt_mem_onchip_mem+0xff789f5c>
  80a670:	d8802215 	stw	r2,136(sp)
  80a674:	80c00007 	ldb	r3,0(r16)
  80a678:	003db406 	br	809d4c <__alt_mem_onchip_mem+0xff789d4c>
  80a67c:	01000044 	movi	r4,1
  80a680:	01c00ac4 	movi	r7,43
  80a684:	80c00007 	ldb	r3,0(r16)
  80a688:	003db006 	br	809d4c <__alt_mem_onchip_mem+0xff789d4c>
  80a68c:	80c00007 	ldb	r3,0(r16)
  80a690:	82800044 	addi	r10,r16,1
  80a694:	1b423c26 	beq	r3,r13,80af88 <___vfiprintf_internal_r+0x13b8>
  80a698:	18bff404 	addi	r2,r3,-48
  80a69c:	0013883a 	mov	r9,zero
  80a6a0:	30822b36 	bltu	r6,r2,80af50 <___vfiprintf_internal_r+0x1380>
  80a6a4:	50c00007 	ldb	r3,0(r10)
  80a6a8:	4a4002a4 	muli	r9,r9,10
  80a6ac:	54000044 	addi	r16,r10,1
  80a6b0:	8015883a 	mov	r10,r16
  80a6b4:	4893883a 	add	r9,r9,r2
  80a6b8:	18bff404 	addi	r2,r3,-48
  80a6bc:	30bff92e 	bgeu	r6,r2,80a6a4 <__alt_mem_onchip_mem+0xff78a6a4>
  80a6c0:	483da30e 	bge	r9,zero,809d50 <__alt_mem_onchip_mem+0xff789d50>
  80a6c4:	027fffc4 	movi	r9,-1
  80a6c8:	003da106 	br	809d50 <__alt_mem_onchip_mem+0xff789d50>
  80a6cc:	a5001014 	ori	r20,r20,64
  80a6d0:	80c00007 	ldb	r3,0(r16)
  80a6d4:	003d9d06 	br	809d4c <__alt_mem_onchip_mem+0xff789d4c>
  80a6d8:	da802217 	ldw	r10,136(sp)
  80a6dc:	d8001d85 	stb	zero,118(sp)
  80a6e0:	50c00204 	addi	r3,r10,8
  80a6e4:	54800017 	ldw	r18,0(r10)
  80a6e8:	54c00117 	ldw	r19,4(r10)
  80a6ec:	4801ca16 	blt	r9,zero,80ae18 <___vfiprintf_internal_r+0x1248>
  80a6f0:	013fdfc4 	movi	r4,-129
  80a6f4:	94c4b03a 	or	r2,r18,r19
  80a6f8:	d8c02215 	stw	r3,136(sp)
  80a6fc:	a128703a 	and	r20,r20,r4
  80a700:	0039883a 	mov	fp,zero
  80a704:	103f341e 	bne	r2,zero,80a3d8 <__alt_mem_onchip_mem+0xff78a3d8>
  80a708:	483e2e26 	beq	r9,zero,809fc4 <__alt_mem_onchip_mem+0xff789fc4>
  80a70c:	0025883a 	mov	r18,zero
  80a710:	94800c04 	addi	r18,r18,48
  80a714:	dc8019c5 	stb	r18,103(sp)
  80a718:	dcc02717 	ldw	r19,156(sp)
  80a71c:	dd4019c4 	addi	r21,sp,103
  80a720:	003e2b06 	br	809fd0 <__alt_mem_onchip_mem+0xff789fd0>
  80a724:	21003fcc 	andi	r4,r4,255
  80a728:	2002361e 	bne	r4,zero,80b004 <___vfiprintf_internal_r+0x1434>
  80a72c:	1801c126 	beq	r3,zero,80ae34 <___vfiprintf_internal_r+0x1264>
  80a730:	04800044 	movi	r18,1
  80a734:	d8c01005 	stb	r3,64(sp)
  80a738:	d8001d85 	stb	zero,118(sp)
  80a73c:	9027883a 	mov	r19,r18
  80a740:	dd401004 	addi	r21,sp,64
  80a744:	003f1106 	br	80a38c <__alt_mem_onchip_mem+0xff78a38c>
  80a748:	d9402117 	ldw	r5,132(sp)
  80a74c:	d9002017 	ldw	r4,128(sp)
  80a750:	d9801a04 	addi	r6,sp,104
  80a754:	d9c02b15 	stw	r7,172(sp)
  80a758:	dbc02a15 	stw	r15,168(sp)
  80a75c:	0809abc0 	call	809abc <__sprint_r.part.0>
  80a760:	d9c02b17 	ldw	r7,172(sp)
  80a764:	dbc02a17 	ldw	r15,168(sp)
  80a768:	10006d1e 	bne	r2,zero,80a920 <___vfiprintf_internal_r+0xd50>
  80a76c:	d9801b17 	ldw	r6,108(sp)
  80a770:	d8801c17 	ldw	r2,112(sp)
  80a774:	d811883a 	mov	r8,sp
  80a778:	31400044 	addi	r5,r6,1
  80a77c:	003e3306 	br	80a04c <__alt_mem_onchip_mem+0xff78a04c>
  80a780:	d9401b17 	ldw	r5,108(sp)
  80a784:	d8801c17 	ldw	r2,112(sp)
  80a788:	29000044 	addi	r4,r5,1
  80a78c:	d8c01d87 	ldb	r3,118(sp)
  80a790:	183e4d26 	beq	r3,zero,80a0c8 <__alt_mem_onchip_mem+0xff78a0c8>
  80a794:	00c00044 	movi	r3,1
  80a798:	d9401d84 	addi	r5,sp,118
  80a79c:	10c5883a 	add	r2,r2,r3
  80a7a0:	41400015 	stw	r5,0(r8)
  80a7a4:	40c00115 	stw	r3,4(r8)
  80a7a8:	d8801c15 	stw	r2,112(sp)
  80a7ac:	d9001b15 	stw	r4,108(sp)
  80a7b0:	014001c4 	movi	r5,7
  80a7b4:	2900a90e 	bge	r5,r4,80aa5c <___vfiprintf_internal_r+0xe8c>
  80a7b8:	1000da1e 	bne	r2,zero,80ab24 <___vfiprintf_internal_r+0xf54>
  80a7bc:	7000ab1e 	bne	r14,zero,80aa6c <___vfiprintf_internal_r+0xe9c>
  80a7c0:	000b883a 	mov	r5,zero
  80a7c4:	1809883a 	mov	r4,r3
  80a7c8:	d811883a 	mov	r8,sp
  80a7cc:	00c02004 	movi	r3,128
  80a7d0:	e0fe4d26 	beq	fp,r3,80a108 <__alt_mem_onchip_mem+0xff78a108>
  80a7d4:	4cf9c83a 	sub	fp,r9,r19
  80a7d8:	073e7b0e 	bge	zero,fp,80a1c8 <__alt_mem_onchip_mem+0xff78a1c8>
  80a7dc:	01c00404 	movi	r7,16
  80a7e0:	3f01900e 	bge	r7,fp,80ae24 <___vfiprintf_internal_r+0x1254>
  80a7e4:	00c02074 	movhi	r3,129
  80a7e8:	18cc9c04 	addi	r3,r3,12912
  80a7ec:	d8c02415 	stw	r3,144(sp)
  80a7f0:	034001c4 	movi	r13,7
  80a7f4:	00000506 	br	80a80c <___vfiprintf_internal_r+0xc3c>
  80a7f8:	29000084 	addi	r4,r5,2
  80a7fc:	42000204 	addi	r8,r8,8
  80a800:	180b883a 	mov	r5,r3
  80a804:	e73ffc04 	addi	fp,fp,-16
  80a808:	3f000d0e 	bge	r7,fp,80a840 <___vfiprintf_internal_r+0xc70>
  80a80c:	10800404 	addi	r2,r2,16
  80a810:	28c00044 	addi	r3,r5,1
  80a814:	45c00015 	stw	r23,0(r8)
  80a818:	41c00115 	stw	r7,4(r8)
  80a81c:	d8801c15 	stw	r2,112(sp)
  80a820:	d8c01b15 	stw	r3,108(sp)
  80a824:	68fff40e 	bge	r13,r3,80a7f8 <__alt_mem_onchip_mem+0xff78a7f8>
  80a828:	1000101e 	bne	r2,zero,80a86c <___vfiprintf_internal_r+0xc9c>
  80a82c:	e73ffc04 	addi	fp,fp,-16
  80a830:	01000044 	movi	r4,1
  80a834:	000b883a 	mov	r5,zero
  80a838:	d811883a 	mov	r8,sp
  80a83c:	3f3ff316 	blt	r7,fp,80a80c <__alt_mem_onchip_mem+0xff78a80c>
  80a840:	da802417 	ldw	r10,144(sp)
  80a844:	1705883a 	add	r2,r2,fp
  80a848:	47000115 	stw	fp,4(r8)
  80a84c:	42800015 	stw	r10,0(r8)
  80a850:	d8801c15 	stw	r2,112(sp)
  80a854:	d9001b15 	stw	r4,108(sp)
  80a858:	00c001c4 	movi	r3,7
  80a85c:	19003616 	blt	r3,r4,80a938 <___vfiprintf_internal_r+0xd68>
  80a860:	42000204 	addi	r8,r8,8
  80a864:	21000044 	addi	r4,r4,1
  80a868:	003e5706 	br	80a1c8 <__alt_mem_onchip_mem+0xff78a1c8>
  80a86c:	d9402117 	ldw	r5,132(sp)
  80a870:	d9002017 	ldw	r4,128(sp)
  80a874:	d9801a04 	addi	r6,sp,104
  80a878:	d9c02b15 	stw	r7,172(sp)
  80a87c:	db402a15 	stw	r13,168(sp)
  80a880:	0809abc0 	call	809abc <__sprint_r.part.0>
  80a884:	d9c02b17 	ldw	r7,172(sp)
  80a888:	db402a17 	ldw	r13,168(sp)
  80a88c:	1000241e 	bne	r2,zero,80a920 <___vfiprintf_internal_r+0xd50>
  80a890:	d9401b17 	ldw	r5,108(sp)
  80a894:	d8801c17 	ldw	r2,112(sp)
  80a898:	d811883a 	mov	r8,sp
  80a89c:	29000044 	addi	r4,r5,1
  80a8a0:	003fd806 	br	80a804 <__alt_mem_onchip_mem+0xff78a804>
  80a8a4:	d9401b17 	ldw	r5,108(sp)
  80a8a8:	00c02074 	movhi	r3,129
  80a8ac:	18cca004 	addi	r3,r3,12928
  80a8b0:	d8c02415 	stw	r3,144(sp)
  80a8b4:	29400044 	addi	r5,r5,1
  80a8b8:	d8c02417 	ldw	r3,144(sp)
  80a8bc:	14c5883a 	add	r2,r2,r19
  80a8c0:	44c00115 	stw	r19,4(r8)
  80a8c4:	40c00015 	stw	r3,0(r8)
  80a8c8:	d8801c15 	stw	r2,112(sp)
  80a8cc:	d9401b15 	stw	r5,108(sp)
  80a8d0:	00c001c4 	movi	r3,7
  80a8d4:	1940070e 	bge	r3,r5,80a8f4 <___vfiprintf_internal_r+0xd24>
  80a8d8:	103e4826 	beq	r2,zero,80a1fc <__alt_mem_onchip_mem+0xff78a1fc>
  80a8dc:	d9402117 	ldw	r5,132(sp)
  80a8e0:	d9002017 	ldw	r4,128(sp)
  80a8e4:	d9801a04 	addi	r6,sp,104
  80a8e8:	0809abc0 	call	809abc <__sprint_r.part.0>
  80a8ec:	10000c1e 	bne	r2,zero,80a920 <___vfiprintf_internal_r+0xd50>
  80a8f0:	d8801c17 	ldw	r2,112(sp)
  80a8f4:	8c80010e 	bge	r17,r18,80a8fc <___vfiprintf_internal_r+0xd2c>
  80a8f8:	9023883a 	mov	r17,r18
  80a8fc:	da802317 	ldw	r10,140(sp)
  80a900:	5455883a 	add	r10,r10,r17
  80a904:	da802315 	stw	r10,140(sp)
  80a908:	103e4126 	beq	r2,zero,80a210 <__alt_mem_onchip_mem+0xff78a210>
  80a90c:	d9402117 	ldw	r5,132(sp)
  80a910:	d9002017 	ldw	r4,128(sp)
  80a914:	d9801a04 	addi	r6,sp,104
  80a918:	0809abc0 	call	809abc <__sprint_r.part.0>
  80a91c:	103e3c26 	beq	r2,zero,80a210 <__alt_mem_onchip_mem+0xff78a210>
  80a920:	dd002117 	ldw	r20,132(sp)
  80a924:	a080030b 	ldhu	r2,12(r20)
  80a928:	1080100c 	andi	r2,r2,64
  80a92c:	1001231e 	bne	r2,zero,80adbc <___vfiprintf_internal_r+0x11ec>
  80a930:	d8802317 	ldw	r2,140(sp)
  80a934:	003d7b06 	br	809f24 <__alt_mem_onchip_mem+0xff789f24>
  80a938:	1000991e 	bne	r2,zero,80aba0 <___vfiprintf_internal_r+0xfd0>
  80a93c:	00c00044 	movi	r3,1
  80a940:	9805883a 	mov	r2,r19
  80a944:	dd400015 	stw	r21,0(sp)
  80a948:	dcc00115 	stw	r19,4(sp)
  80a94c:	dcc01c15 	stw	r19,112(sp)
  80a950:	d8c01b15 	stw	r3,108(sp)
  80a954:	d811883a 	mov	r8,sp
  80a958:	42000204 	addi	r8,r8,8
  80a95c:	a2c0010c 	andi	r11,r20,4
  80a960:	583fe426 	beq	r11,zero,80a8f4 <__alt_mem_onchip_mem+0xff78a8f4>
  80a964:	8ca7c83a 	sub	r19,r17,r18
  80a968:	04ffe20e 	bge	zero,r19,80a8f4 <__alt_mem_onchip_mem+0xff78a8f4>
  80a96c:	01c00404 	movi	r7,16
  80a970:	3cffcc0e 	bge	r7,r19,80a8a4 <__alt_mem_onchip_mem+0xff78a8a4>
  80a974:	02802074 	movhi	r10,129
  80a978:	528ca004 	addi	r10,r10,12928
  80a97c:	d9001b17 	ldw	r4,108(sp)
  80a980:	da802415 	stw	r10,144(sp)
  80a984:	382b883a 	mov	r21,r7
  80a988:	050001c4 	movi	r20,7
  80a98c:	df002017 	ldw	fp,128(sp)
  80a990:	00000506 	br	80a9a8 <___vfiprintf_internal_r+0xdd8>
  80a994:	21400084 	addi	r5,r4,2
  80a998:	42000204 	addi	r8,r8,8
  80a99c:	1809883a 	mov	r4,r3
  80a9a0:	9cfffc04 	addi	r19,r19,-16
  80a9a4:	acffc40e 	bge	r21,r19,80a8b8 <__alt_mem_onchip_mem+0xff78a8b8>
  80a9a8:	10800404 	addi	r2,r2,16
  80a9ac:	20c00044 	addi	r3,r4,1
  80a9b0:	45800015 	stw	r22,0(r8)
  80a9b4:	45400115 	stw	r21,4(r8)
  80a9b8:	d8801c15 	stw	r2,112(sp)
  80a9bc:	d8c01b15 	stw	r3,108(sp)
  80a9c0:	a0fff40e 	bge	r20,r3,80a994 <__alt_mem_onchip_mem+0xff78a994>
  80a9c4:	1000041e 	bne	r2,zero,80a9d8 <___vfiprintf_internal_r+0xe08>
  80a9c8:	01400044 	movi	r5,1
  80a9cc:	0009883a 	mov	r4,zero
  80a9d0:	d811883a 	mov	r8,sp
  80a9d4:	003ff206 	br	80a9a0 <__alt_mem_onchip_mem+0xff78a9a0>
  80a9d8:	d9402117 	ldw	r5,132(sp)
  80a9dc:	d9801a04 	addi	r6,sp,104
  80a9e0:	e009883a 	mov	r4,fp
  80a9e4:	0809abc0 	call	809abc <__sprint_r.part.0>
  80a9e8:	103fcd1e 	bne	r2,zero,80a920 <__alt_mem_onchip_mem+0xff78a920>
  80a9ec:	d9001b17 	ldw	r4,108(sp)
  80a9f0:	d8801c17 	ldw	r2,112(sp)
  80a9f4:	d811883a 	mov	r8,sp
  80a9f8:	21400044 	addi	r5,r4,1
  80a9fc:	003fe806 	br	80a9a0 <__alt_mem_onchip_mem+0xff78a9a0>
  80aa00:	d9402117 	ldw	r5,132(sp)
  80aa04:	d9002017 	ldw	r4,128(sp)
  80aa08:	d9801a04 	addi	r6,sp,104
  80aa0c:	d9c02b15 	stw	r7,172(sp)
  80aa10:	db402a15 	stw	r13,168(sp)
  80aa14:	0809abc0 	call	809abc <__sprint_r.part.0>
  80aa18:	d9c02b17 	ldw	r7,172(sp)
  80aa1c:	db402a17 	ldw	r13,168(sp)
  80aa20:	103fbf1e 	bne	r2,zero,80a920 <__alt_mem_onchip_mem+0xff78a920>
  80aa24:	d9401b17 	ldw	r5,108(sp)
  80aa28:	d8801c17 	ldw	r2,112(sp)
  80aa2c:	d811883a 	mov	r8,sp
  80aa30:	29800044 	addi	r6,r5,1
  80aa34:	003dc406 	br	80a148 <__alt_mem_onchip_mem+0xff78a148>
  80aa38:	1000d21e 	bne	r2,zero,80ad84 <___vfiprintf_internal_r+0x11b4>
  80aa3c:	d8c01d87 	ldb	r3,118(sp)
  80aa40:	18009526 	beq	r3,zero,80ac98 <___vfiprintf_internal_r+0x10c8>
  80aa44:	00800044 	movi	r2,1
  80aa48:	d8c01d84 	addi	r3,sp,118
  80aa4c:	1009883a 	mov	r4,r2
  80aa50:	d8c00015 	stw	r3,0(sp)
  80aa54:	d8800115 	stw	r2,4(sp)
  80aa58:	d811883a 	mov	r8,sp
  80aa5c:	200b883a 	mov	r5,r4
  80aa60:	42000204 	addi	r8,r8,8
  80aa64:	21000044 	addi	r4,r4,1
  80aa68:	003d9706 	br	80a0c8 <__alt_mem_onchip_mem+0xff78a0c8>
  80aa6c:	d9001d04 	addi	r4,sp,116
  80aa70:	00800084 	movi	r2,2
  80aa74:	d9000015 	stw	r4,0(sp)
  80aa78:	d8800115 	stw	r2,4(sp)
  80aa7c:	1809883a 	mov	r4,r3
  80aa80:	d811883a 	mov	r8,sp
  80aa84:	200b883a 	mov	r5,r4
  80aa88:	42000204 	addi	r8,r8,8
  80aa8c:	21000044 	addi	r4,r4,1
  80aa90:	003f4e06 	br	80a7cc <__alt_mem_onchip_mem+0xff78a7cc>
  80aa94:	d8001d85 	stb	zero,118(sp)
  80aa98:	48005016 	blt	r9,zero,80abdc <___vfiprintf_internal_r+0x100c>
  80aa9c:	00ffdfc4 	movi	r3,-129
  80aaa0:	94c4b03a 	or	r2,r18,r19
  80aaa4:	a0e8703a 	and	r20,r20,r3
  80aaa8:	103d4426 	beq	r2,zero,809fbc <__alt_mem_onchip_mem+0xff789fbc>
  80aaac:	0039883a 	mov	fp,zero
  80aab0:	d9002617 	ldw	r4,152(sp)
  80aab4:	dd401a04 	addi	r21,sp,104
  80aab8:	908003cc 	andi	r2,r18,15
  80aabc:	9806973a 	slli	r3,r19,28
  80aac0:	2085883a 	add	r2,r4,r2
  80aac4:	9024d13a 	srli	r18,r18,4
  80aac8:	10800003 	ldbu	r2,0(r2)
  80aacc:	9826d13a 	srli	r19,r19,4
  80aad0:	ad7fffc4 	addi	r21,r21,-1
  80aad4:	1ca4b03a 	or	r18,r3,r18
  80aad8:	a8800005 	stb	r2,0(r21)
  80aadc:	94c4b03a 	or	r2,r18,r19
  80aae0:	103ff51e 	bne	r2,zero,80aab8 <__alt_mem_onchip_mem+0xff78aab8>
  80aae4:	003e5906 	br	80a44c <__alt_mem_onchip_mem+0xff78a44c>
  80aae8:	d9402117 	ldw	r5,132(sp)
  80aaec:	d9002017 	ldw	r4,128(sp)
  80aaf0:	d9801a04 	addi	r6,sp,104
  80aaf4:	0809abc0 	call	809abc <__sprint_r.part.0>
  80aaf8:	103f891e 	bne	r2,zero,80a920 <__alt_mem_onchip_mem+0xff78a920>
  80aafc:	d8801c17 	ldw	r2,112(sp)
  80ab00:	d811883a 	mov	r8,sp
  80ab04:	003f9506 	br	80a95c <__alt_mem_onchip_mem+0xff78a95c>
  80ab08:	d9402117 	ldw	r5,132(sp)
  80ab0c:	d9002017 	ldw	r4,128(sp)
  80ab10:	d9801a04 	addi	r6,sp,104
  80ab14:	0809abc0 	call	809abc <__sprint_r.part.0>
  80ab18:	103f811e 	bne	r2,zero,80a920 <__alt_mem_onchip_mem+0xff78a920>
  80ab1c:	d811883a 	mov	r8,sp
  80ab20:	003ced06 	br	809ed8 <__alt_mem_onchip_mem+0xff789ed8>
  80ab24:	d9402117 	ldw	r5,132(sp)
  80ab28:	d9002017 	ldw	r4,128(sp)
  80ab2c:	d9801a04 	addi	r6,sp,104
  80ab30:	da402c15 	stw	r9,176(sp)
  80ab34:	db802a15 	stw	r14,168(sp)
  80ab38:	0809abc0 	call	809abc <__sprint_r.part.0>
  80ab3c:	da402c17 	ldw	r9,176(sp)
  80ab40:	db802a17 	ldw	r14,168(sp)
  80ab44:	103f761e 	bne	r2,zero,80a920 <__alt_mem_onchip_mem+0xff78a920>
  80ab48:	d9401b17 	ldw	r5,108(sp)
  80ab4c:	d8801c17 	ldw	r2,112(sp)
  80ab50:	d811883a 	mov	r8,sp
  80ab54:	29000044 	addi	r4,r5,1
  80ab58:	003d5b06 	br	80a0c8 <__alt_mem_onchip_mem+0xff78a0c8>
  80ab5c:	d9402117 	ldw	r5,132(sp)
  80ab60:	d9002017 	ldw	r4,128(sp)
  80ab64:	d9801a04 	addi	r6,sp,104
  80ab68:	da402c15 	stw	r9,176(sp)
  80ab6c:	0809abc0 	call	809abc <__sprint_r.part.0>
  80ab70:	da402c17 	ldw	r9,176(sp)
  80ab74:	103f6a1e 	bne	r2,zero,80a920 <__alt_mem_onchip_mem+0xff78a920>
  80ab78:	d9401b17 	ldw	r5,108(sp)
  80ab7c:	d8801c17 	ldw	r2,112(sp)
  80ab80:	d811883a 	mov	r8,sp
  80ab84:	29000044 	addi	r4,r5,1
  80ab88:	003f1006 	br	80a7cc <__alt_mem_onchip_mem+0xff78a7cc>
  80ab8c:	1000c31e 	bne	r2,zero,80ae9c <___vfiprintf_internal_r+0x12cc>
  80ab90:	01000044 	movi	r4,1
  80ab94:	000b883a 	mov	r5,zero
  80ab98:	d811883a 	mov	r8,sp
  80ab9c:	003f0d06 	br	80a7d4 <__alt_mem_onchip_mem+0xff78a7d4>
  80aba0:	d9402117 	ldw	r5,132(sp)
  80aba4:	d9002017 	ldw	r4,128(sp)
  80aba8:	d9801a04 	addi	r6,sp,104
  80abac:	0809abc0 	call	809abc <__sprint_r.part.0>
  80abb0:	103f5b1e 	bne	r2,zero,80a920 <__alt_mem_onchip_mem+0xff78a920>
  80abb4:	d9001b17 	ldw	r4,108(sp)
  80abb8:	d8801c17 	ldw	r2,112(sp)
  80abbc:	d811883a 	mov	r8,sp
  80abc0:	21000044 	addi	r4,r4,1
  80abc4:	003d8006 	br	80a1c8 <__alt_mem_onchip_mem+0xff78a1c8>
  80abc8:	01002074 	movhi	r4,129
  80abcc:	210b9c04 	addi	r4,r4,11888
  80abd0:	d9002615 	stw	r4,152(sp)
  80abd4:	d8c02215 	stw	r3,136(sp)
  80abd8:	1029883a 	mov	r20,r2
  80abdc:	94c4b03a 	or	r2,r18,r19
  80abe0:	103fb21e 	bne	r2,zero,80aaac <__alt_mem_onchip_mem+0xff78aaac>
  80abe4:	0039883a 	mov	fp,zero
  80abe8:	00800084 	movi	r2,2
  80abec:	003e6b06 	br	80a59c <__alt_mem_onchip_mem+0xff78a59c>
  80abf0:	da802217 	ldw	r10,136(sp)
  80abf4:	d8001d85 	stb	zero,118(sp)
  80abf8:	0027883a 	mov	r19,zero
  80abfc:	50800104 	addi	r2,r10,4
  80ac00:	54800017 	ldw	r18,0(r10)
  80ac04:	483e6016 	blt	r9,zero,80a588 <__alt_mem_onchip_mem+0xff78a588>
  80ac08:	00ffdfc4 	movi	r3,-129
  80ac0c:	d8802215 	stw	r2,136(sp)
  80ac10:	a0e8703a 	and	r20,r20,r3
  80ac14:	0039883a 	mov	fp,zero
  80ac18:	903ebb26 	beq	r18,zero,80a708 <__alt_mem_onchip_mem+0xff78a708>
  80ac1c:	00800244 	movi	r2,9
  80ac20:	14bdee36 	bltu	r2,r18,80a3dc <__alt_mem_onchip_mem+0xff78a3dc>
  80ac24:	003eba06 	br	80a710 <__alt_mem_onchip_mem+0xff78a710>
  80ac28:	00800c04 	movi	r2,48
  80ac2c:	d8c01d45 	stb	r3,117(sp)
  80ac30:	d8801d05 	stb	r2,116(sp)
  80ac34:	d8001d85 	stb	zero,118(sp)
  80ac38:	a0c00094 	ori	r3,r20,2
  80ac3c:	4800a916 	blt	r9,zero,80aee4 <___vfiprintf_internal_r+0x1314>
  80ac40:	00bfdfc4 	movi	r2,-129
  80ac44:	a096703a 	and	r11,r20,r2
  80ac48:	5d000094 	ori	r20,r11,2
  80ac4c:	0039883a 	mov	fp,zero
  80ac50:	003f9706 	br	80aab0 <__alt_mem_onchip_mem+0xff78aab0>
  80ac54:	8025883a 	mov	r18,r16
  80ac58:	003c2e06 	br	809d14 <__alt_mem_onchip_mem+0xff789d14>
  80ac5c:	00802074 	movhi	r2,129
  80ac60:	108b9c04 	addi	r2,r2,11888
  80ac64:	0039883a 	mov	fp,zero
  80ac68:	d8802615 	stw	r2,152(sp)
  80ac6c:	003f9006 	br	80aab0 <__alt_mem_onchip_mem+0xff78aab0>
  80ac70:	04a5c83a 	sub	r18,zero,r18
  80ac74:	07000b44 	movi	fp,45
  80ac78:	9004c03a 	cmpne	r2,r18,zero
  80ac7c:	04e7c83a 	sub	r19,zero,r19
  80ac80:	df001d85 	stb	fp,118(sp)
  80ac84:	98a7c83a 	sub	r19,r19,r2
  80ac88:	48009f16 	blt	r9,zero,80af08 <___vfiprintf_internal_r+0x1338>
  80ac8c:	00bfdfc4 	movi	r2,-129
  80ac90:	a0a8703a 	and	r20,r20,r2
  80ac94:	003dd006 	br	80a3d8 <__alt_mem_onchip_mem+0xff78a3d8>
  80ac98:	70004c26 	beq	r14,zero,80adcc <___vfiprintf_internal_r+0x11fc>
  80ac9c:	00800084 	movi	r2,2
  80aca0:	d8c01d04 	addi	r3,sp,116
  80aca4:	d8c00015 	stw	r3,0(sp)
  80aca8:	d8800115 	stw	r2,4(sp)
  80acac:	01000044 	movi	r4,1
  80acb0:	d811883a 	mov	r8,sp
  80acb4:	003f7306 	br	80aa84 <__alt_mem_onchip_mem+0xff78aa84>
  80acb8:	a080100c 	andi	r2,r20,64
  80acbc:	da802217 	ldw	r10,136(sp)
  80acc0:	103e0626 	beq	r2,zero,80a4dc <__alt_mem_onchip_mem+0xff78a4dc>
  80acc4:	5480000f 	ldh	r18,0(r10)
  80acc8:	52800104 	addi	r10,r10,4
  80accc:	da802215 	stw	r10,136(sp)
  80acd0:	9027d7fa 	srai	r19,r18,31
  80acd4:	9805883a 	mov	r2,r19
  80acd8:	003db806 	br	80a3bc <__alt_mem_onchip_mem+0xff78a3bc>
  80acdc:	a080040c 	andi	r2,r20,16
  80ace0:	1000091e 	bne	r2,zero,80ad08 <___vfiprintf_internal_r+0x1138>
  80ace4:	a2c0100c 	andi	r11,r20,64
  80ace8:	58000726 	beq	r11,zero,80ad08 <___vfiprintf_internal_r+0x1138>
  80acec:	da802217 	ldw	r10,136(sp)
  80acf0:	50800017 	ldw	r2,0(r10)
  80acf4:	52800104 	addi	r10,r10,4
  80acf8:	da802215 	stw	r10,136(sp)
  80acfc:	da802317 	ldw	r10,140(sp)
  80ad00:	1280000d 	sth	r10,0(r2)
  80ad04:	003be706 	br	809ca4 <__alt_mem_onchip_mem+0xff789ca4>
  80ad08:	da802217 	ldw	r10,136(sp)
  80ad0c:	50800017 	ldw	r2,0(r10)
  80ad10:	52800104 	addi	r10,r10,4
  80ad14:	da802215 	stw	r10,136(sp)
  80ad18:	da802317 	ldw	r10,140(sp)
  80ad1c:	12800015 	stw	r10,0(r2)
  80ad20:	003be006 	br	809ca4 <__alt_mem_onchip_mem+0xff789ca4>
  80ad24:	a080100c 	andi	r2,r20,64
  80ad28:	da802217 	ldw	r10,136(sp)
  80ad2c:	10003026 	beq	r2,zero,80adf0 <___vfiprintf_internal_r+0x1220>
  80ad30:	5480000b 	ldhu	r18,0(r10)
  80ad34:	52800104 	addi	r10,r10,4
  80ad38:	0027883a 	mov	r19,zero
  80ad3c:	da802215 	stw	r10,136(sp)
  80ad40:	003d8006 	br	80a344 <__alt_mem_onchip_mem+0xff78a344>
  80ad44:	80c00007 	ldb	r3,0(r16)
  80ad48:	003c0006 	br	809d4c <__alt_mem_onchip_mem+0xff789d4c>
  80ad4c:	a080100c 	andi	r2,r20,64
  80ad50:	d8001d85 	stb	zero,118(sp)
  80ad54:	da802217 	ldw	r10,136(sp)
  80ad58:	1000201e 	bne	r2,zero,80addc <___vfiprintf_internal_r+0x120c>
  80ad5c:	50800104 	addi	r2,r10,4
  80ad60:	54800017 	ldw	r18,0(r10)
  80ad64:	0027883a 	mov	r19,zero
  80ad68:	483def0e 	bge	r9,zero,80a528 <__alt_mem_onchip_mem+0xff78a528>
  80ad6c:	94c6b03a 	or	r3,r18,r19
  80ad70:	d8802215 	stw	r2,136(sp)
  80ad74:	183d4e1e 	bne	r3,zero,80a2b0 <__alt_mem_onchip_mem+0xff78a2b0>
  80ad78:	0039883a 	mov	fp,zero
  80ad7c:	0005883a 	mov	r2,zero
  80ad80:	003e0606 	br	80a59c <__alt_mem_onchip_mem+0xff78a59c>
  80ad84:	d9402117 	ldw	r5,132(sp)
  80ad88:	d9002017 	ldw	r4,128(sp)
  80ad8c:	d9801a04 	addi	r6,sp,104
  80ad90:	da402c15 	stw	r9,176(sp)
  80ad94:	db802a15 	stw	r14,168(sp)
  80ad98:	0809abc0 	call	809abc <__sprint_r.part.0>
  80ad9c:	da402c17 	ldw	r9,176(sp)
  80ada0:	db802a17 	ldw	r14,168(sp)
  80ada4:	103ede1e 	bne	r2,zero,80a920 <__alt_mem_onchip_mem+0xff78a920>
  80ada8:	d9401b17 	ldw	r5,108(sp)
  80adac:	d8801c17 	ldw	r2,112(sp)
  80adb0:	d811883a 	mov	r8,sp
  80adb4:	29000044 	addi	r4,r5,1
  80adb8:	003e7406 	br	80a78c <__alt_mem_onchip_mem+0xff78a78c>
  80adbc:	00bfffc4 	movi	r2,-1
  80adc0:	003c5806 	br	809f24 <__alt_mem_onchip_mem+0xff789f24>
  80adc4:	d811883a 	mov	r8,sp
  80adc8:	003ee806 	br	80a96c <__alt_mem_onchip_mem+0xff78a96c>
  80adcc:	000b883a 	mov	r5,zero
  80add0:	01000044 	movi	r4,1
  80add4:	d811883a 	mov	r8,sp
  80add8:	003e7c06 	br	80a7cc <__alt_mem_onchip_mem+0xff78a7cc>
  80addc:	50800104 	addi	r2,r10,4
  80ade0:	5480000b 	ldhu	r18,0(r10)
  80ade4:	0027883a 	mov	r19,zero
  80ade8:	483dcf0e 	bge	r9,zero,80a528 <__alt_mem_onchip_mem+0xff78a528>
  80adec:	003fdf06 	br	80ad6c <__alt_mem_onchip_mem+0xff78ad6c>
  80adf0:	54800017 	ldw	r18,0(r10)
  80adf4:	52800104 	addi	r10,r10,4
  80adf8:	0027883a 	mov	r19,zero
  80adfc:	da802215 	stw	r10,136(sp)
  80ae00:	003d5006 	br	80a344 <__alt_mem_onchip_mem+0xff78a344>
  80ae04:	50800104 	addi	r2,r10,4
  80ae08:	5480000b 	ldhu	r18,0(r10)
  80ae0c:	0027883a 	mov	r19,zero
  80ae10:	483f7d0e 	bge	r9,zero,80ac08 <__alt_mem_onchip_mem+0xff78ac08>
  80ae14:	003ddc06 	br	80a588 <__alt_mem_onchip_mem+0xff78a588>
  80ae18:	d8c02215 	stw	r3,136(sp)
  80ae1c:	0039883a 	mov	fp,zero
  80ae20:	003ddb06 	br	80a590 <__alt_mem_onchip_mem+0xff78a590>
  80ae24:	02802074 	movhi	r10,129
  80ae28:	528c9c04 	addi	r10,r10,12912
  80ae2c:	da802415 	stw	r10,144(sp)
  80ae30:	003e8306 	br	80a840 <__alt_mem_onchip_mem+0xff78a840>
  80ae34:	d8801c17 	ldw	r2,112(sp)
  80ae38:	dd002117 	ldw	r20,132(sp)
  80ae3c:	103eb926 	beq	r2,zero,80a924 <__alt_mem_onchip_mem+0xff78a924>
  80ae40:	d9002017 	ldw	r4,128(sp)
  80ae44:	d9801a04 	addi	r6,sp,104
  80ae48:	a00b883a 	mov	r5,r20
  80ae4c:	0809abc0 	call	809abc <__sprint_r.part.0>
  80ae50:	003eb406 	br	80a924 <__alt_mem_onchip_mem+0xff78a924>
  80ae54:	80c00043 	ldbu	r3,1(r16)
  80ae58:	a5000814 	ori	r20,r20,32
  80ae5c:	84000044 	addi	r16,r16,1
  80ae60:	18c03fcc 	andi	r3,r3,255
  80ae64:	18c0201c 	xori	r3,r3,128
  80ae68:	18ffe004 	addi	r3,r3,-128
  80ae6c:	003bb706 	br	809d4c <__alt_mem_onchip_mem+0xff789d4c>
  80ae70:	a809883a 	mov	r4,r21
  80ae74:	d8c02a15 	stw	r3,168(sp)
  80ae78:	da002b15 	stw	r8,172(sp)
  80ae7c:	08035b80 	call	8035b8 <strlen>
  80ae80:	d8c02a17 	ldw	r3,168(sp)
  80ae84:	1027883a 	mov	r19,r2
  80ae88:	df001d83 	ldbu	fp,118(sp)
  80ae8c:	d8c02215 	stw	r3,136(sp)
  80ae90:	0013883a 	mov	r9,zero
  80ae94:	da002b17 	ldw	r8,172(sp)
  80ae98:	003c4d06 	br	809fd0 <__alt_mem_onchip_mem+0xff789fd0>
  80ae9c:	d9402117 	ldw	r5,132(sp)
  80aea0:	d9002017 	ldw	r4,128(sp)
  80aea4:	d9801a04 	addi	r6,sp,104
  80aea8:	da402c15 	stw	r9,176(sp)
  80aeac:	0809abc0 	call	809abc <__sprint_r.part.0>
  80aeb0:	da402c17 	ldw	r9,176(sp)
  80aeb4:	103e9a1e 	bne	r2,zero,80a920 <__alt_mem_onchip_mem+0xff78a920>
  80aeb8:	d9401b17 	ldw	r5,108(sp)
  80aebc:	d8801c17 	ldw	r2,112(sp)
  80aec0:	d811883a 	mov	r8,sp
  80aec4:	29000044 	addi	r4,r5,1
  80aec8:	003e4206 	br	80a7d4 <__alt_mem_onchip_mem+0xff78a7d4>
  80aecc:	d9401b17 	ldw	r5,108(sp)
  80aed0:	01002074 	movhi	r4,129
  80aed4:	210ca004 	addi	r4,r4,12928
  80aed8:	d9002415 	stw	r4,144(sp)
  80aedc:	29400044 	addi	r5,r5,1
  80aee0:	003c6d06 	br	80a098 <__alt_mem_onchip_mem+0xff78a098>
  80aee4:	0039883a 	mov	fp,zero
  80aee8:	00800084 	movi	r2,2
  80aeec:	10803fcc 	andi	r2,r2,255
  80aef0:	01000044 	movi	r4,1
  80aef4:	11001e26 	beq	r2,r4,80af70 <___vfiprintf_internal_r+0x13a0>
  80aef8:	01000084 	movi	r4,2
  80aefc:	11001e1e 	bne	r2,r4,80af78 <___vfiprintf_internal_r+0x13a8>
  80af00:	1829883a 	mov	r20,r3
  80af04:	003eea06 	br	80aab0 <__alt_mem_onchip_mem+0xff78aab0>
  80af08:	a007883a 	mov	r3,r20
  80af0c:	00800044 	movi	r2,1
  80af10:	003ff606 	br	80aeec <__alt_mem_onchip_mem+0xff78aeec>
  80af14:	00800184 	movi	r2,6
  80af18:	1240012e 	bgeu	r2,r9,80af20 <___vfiprintf_internal_r+0x1350>
  80af1c:	1013883a 	mov	r9,r2
  80af20:	4827883a 	mov	r19,r9
  80af24:	4825883a 	mov	r18,r9
  80af28:	48001516 	blt	r9,zero,80af80 <___vfiprintf_internal_r+0x13b0>
  80af2c:	05402074 	movhi	r21,129
  80af30:	d8c02215 	stw	r3,136(sp)
  80af34:	ad4ba104 	addi	r21,r21,11908
  80af38:	003d1406 	br	80a38c <__alt_mem_onchip_mem+0xff78a38c>
  80af3c:	02802074 	movhi	r10,129
  80af40:	528c9c04 	addi	r10,r10,12912
  80af44:	da802415 	stw	r10,144(sp)
  80af48:	200d883a 	mov	r6,r4
  80af4c:	003c9106 	br	80a194 <__alt_mem_onchip_mem+0xff78a194>
  80af50:	5021883a 	mov	r16,r10
  80af54:	0013883a 	mov	r9,zero
  80af58:	003b7d06 	br	809d50 <__alt_mem_onchip_mem+0xff789d50>
  80af5c:	4827883a 	mov	r19,r9
  80af60:	df001d83 	ldbu	fp,118(sp)
  80af64:	d8c02215 	stw	r3,136(sp)
  80af68:	0013883a 	mov	r9,zero
  80af6c:	003c1806 	br	809fd0 <__alt_mem_onchip_mem+0xff789fd0>
  80af70:	1829883a 	mov	r20,r3
  80af74:	003d1806 	br	80a3d8 <__alt_mem_onchip_mem+0xff78a3d8>
  80af78:	1829883a 	mov	r20,r3
  80af7c:	003ccd06 	br	80a2b4 <__alt_mem_onchip_mem+0xff78a2b4>
  80af80:	0025883a 	mov	r18,zero
  80af84:	003fe906 	br	80af2c <__alt_mem_onchip_mem+0xff78af2c>
  80af88:	d8802217 	ldw	r2,136(sp)
  80af8c:	80c00043 	ldbu	r3,1(r16)
  80af90:	5021883a 	mov	r16,r10
  80af94:	12400017 	ldw	r9,0(r2)
  80af98:	10800104 	addi	r2,r2,4
  80af9c:	d8802215 	stw	r2,136(sp)
  80afa0:	483faf0e 	bge	r9,zero,80ae60 <__alt_mem_onchip_mem+0xff78ae60>
  80afa4:	18c03fcc 	andi	r3,r3,255
  80afa8:	18c0201c 	xori	r3,r3,128
  80afac:	027fffc4 	movi	r9,-1
  80afb0:	18ffe004 	addi	r3,r3,-128
  80afb4:	003b6506 	br	809d4c <__alt_mem_onchip_mem+0xff789d4c>
  80afb8:	d9c01d85 	stb	r7,118(sp)
  80afbc:	003ca006 	br	80a240 <__alt_mem_onchip_mem+0xff78a240>
  80afc0:	d9c01d85 	stb	r7,118(sp)
  80afc4:	003cad06 	br	80a27c <__alt_mem_onchip_mem+0xff78a27c>
  80afc8:	d9c01d85 	stb	r7,118(sp)
  80afcc:	003d7d06 	br	80a5c4 <__alt_mem_onchip_mem+0xff78a5c4>
  80afd0:	d9c01d85 	stb	r7,118(sp)
  80afd4:	003d5f06 	br	80a554 <__alt_mem_onchip_mem+0xff78a554>
  80afd8:	a080004c 	andi	r2,r20,1
  80afdc:	0039883a 	mov	fp,zero
  80afe0:	10000526 	beq	r2,zero,80aff8 <___vfiprintf_internal_r+0x1428>
  80afe4:	00800c04 	movi	r2,48
  80afe8:	d88019c5 	stb	r2,103(sp)
  80afec:	dcc02717 	ldw	r19,156(sp)
  80aff0:	dd4019c4 	addi	r21,sp,103
  80aff4:	003bf606 	br	809fd0 <__alt_mem_onchip_mem+0xff789fd0>
  80aff8:	0027883a 	mov	r19,zero
  80affc:	dd401a04 	addi	r21,sp,104
  80b000:	003bf306 	br	809fd0 <__alt_mem_onchip_mem+0xff789fd0>
  80b004:	d9c01d85 	stb	r7,118(sp)
  80b008:	003dc806 	br	80a72c <__alt_mem_onchip_mem+0xff78a72c>
  80b00c:	d9c01d85 	stb	r7,118(sp)
  80b010:	003d3a06 	br	80a4fc <__alt_mem_onchip_mem+0xff78a4fc>
  80b014:	d9c01d85 	stb	r7,118(sp)
  80b018:	003d2a06 	br	80a4c4 <__alt_mem_onchip_mem+0xff78a4c4>
  80b01c:	d9c01d85 	stb	r7,118(sp)
  80b020:	003cde06 	br	80a39c <__alt_mem_onchip_mem+0xff78a39c>
  80b024:	d9c01d85 	stb	r7,118(sp)
  80b028:	003cbc06 	br	80a31c <__alt_mem_onchip_mem+0xff78a31c>

0080b02c <__vfiprintf_internal>:
  80b02c:	00802074 	movhi	r2,129
  80b030:	10942504 	addi	r2,r2,20628
  80b034:	300f883a 	mov	r7,r6
  80b038:	280d883a 	mov	r6,r5
  80b03c:	200b883a 	mov	r5,r4
  80b040:	11000017 	ldw	r4,0(r2)
  80b044:	0809bd01 	jmpi	809bd0 <___vfiprintf_internal_r>

0080b048 <__sbprintf>:
  80b048:	2880030b 	ldhu	r2,12(r5)
  80b04c:	2ac01917 	ldw	r11,100(r5)
  80b050:	2a80038b 	ldhu	r10,14(r5)
  80b054:	2a400717 	ldw	r9,28(r5)
  80b058:	2a000917 	ldw	r8,36(r5)
  80b05c:	defee204 	addi	sp,sp,-1144
  80b060:	00c10004 	movi	r3,1024
  80b064:	dc011a15 	stw	r16,1128(sp)
  80b068:	10bfff4c 	andi	r2,r2,65533
  80b06c:	2821883a 	mov	r16,r5
  80b070:	d8cb883a 	add	r5,sp,r3
  80b074:	dc811c15 	stw	r18,1136(sp)
  80b078:	dc411b15 	stw	r17,1132(sp)
  80b07c:	dfc11d15 	stw	ra,1140(sp)
  80b080:	2025883a 	mov	r18,r4
  80b084:	d881030d 	sth	r2,1036(sp)
  80b088:	dac11915 	stw	r11,1124(sp)
  80b08c:	da81038d 	sth	r10,1038(sp)
  80b090:	da410715 	stw	r9,1052(sp)
  80b094:	da010915 	stw	r8,1060(sp)
  80b098:	dec10015 	stw	sp,1024(sp)
  80b09c:	dec10415 	stw	sp,1040(sp)
  80b0a0:	d8c10215 	stw	r3,1032(sp)
  80b0a4:	d8c10515 	stw	r3,1044(sp)
  80b0a8:	d8010615 	stw	zero,1048(sp)
  80b0ac:	0809bd00 	call	809bd0 <___vfiprintf_internal_r>
  80b0b0:	1023883a 	mov	r17,r2
  80b0b4:	10000416 	blt	r2,zero,80b0c8 <__sbprintf+0x80>
  80b0b8:	d9410004 	addi	r5,sp,1024
  80b0bc:	9009883a 	mov	r4,r18
  80b0c0:	08012ec0 	call	8012ec <_fflush_r>
  80b0c4:	10000d1e 	bne	r2,zero,80b0fc <__sbprintf+0xb4>
  80b0c8:	d881030b 	ldhu	r2,1036(sp)
  80b0cc:	1080100c 	andi	r2,r2,64
  80b0d0:	10000326 	beq	r2,zero,80b0e0 <__sbprintf+0x98>
  80b0d4:	8080030b 	ldhu	r2,12(r16)
  80b0d8:	10801014 	ori	r2,r2,64
  80b0dc:	8080030d 	sth	r2,12(r16)
  80b0e0:	8805883a 	mov	r2,r17
  80b0e4:	dfc11d17 	ldw	ra,1140(sp)
  80b0e8:	dc811c17 	ldw	r18,1136(sp)
  80b0ec:	dc411b17 	ldw	r17,1132(sp)
  80b0f0:	dc011a17 	ldw	r16,1128(sp)
  80b0f4:	dec11e04 	addi	sp,sp,1144
  80b0f8:	f800283a 	ret
  80b0fc:	047fffc4 	movi	r17,-1
  80b100:	003ff106 	br	80b0c8 <__alt_mem_onchip_mem+0xff78b0c8>

0080b104 <__swbuf_r>:
  80b104:	defffb04 	addi	sp,sp,-20
  80b108:	dcc00315 	stw	r19,12(sp)
  80b10c:	dc800215 	stw	r18,8(sp)
  80b110:	dc000015 	stw	r16,0(sp)
  80b114:	dfc00415 	stw	ra,16(sp)
  80b118:	dc400115 	stw	r17,4(sp)
  80b11c:	2025883a 	mov	r18,r4
  80b120:	2827883a 	mov	r19,r5
  80b124:	3021883a 	mov	r16,r6
  80b128:	20000226 	beq	r4,zero,80b134 <__swbuf_r+0x30>
  80b12c:	20800e17 	ldw	r2,56(r4)
  80b130:	10004226 	beq	r2,zero,80b23c <__swbuf_r+0x138>
  80b134:	80800617 	ldw	r2,24(r16)
  80b138:	8100030b 	ldhu	r4,12(r16)
  80b13c:	80800215 	stw	r2,8(r16)
  80b140:	2080020c 	andi	r2,r4,8
  80b144:	10003626 	beq	r2,zero,80b220 <__swbuf_r+0x11c>
  80b148:	80c00417 	ldw	r3,16(r16)
  80b14c:	18003426 	beq	r3,zero,80b220 <__swbuf_r+0x11c>
  80b150:	2088000c 	andi	r2,r4,8192
  80b154:	9c403fcc 	andi	r17,r19,255
  80b158:	10001a26 	beq	r2,zero,80b1c4 <__swbuf_r+0xc0>
  80b15c:	80800017 	ldw	r2,0(r16)
  80b160:	81000517 	ldw	r4,20(r16)
  80b164:	10c7c83a 	sub	r3,r2,r3
  80b168:	1900200e 	bge	r3,r4,80b1ec <__swbuf_r+0xe8>
  80b16c:	18c00044 	addi	r3,r3,1
  80b170:	81000217 	ldw	r4,8(r16)
  80b174:	11400044 	addi	r5,r2,1
  80b178:	81400015 	stw	r5,0(r16)
  80b17c:	213fffc4 	addi	r4,r4,-1
  80b180:	81000215 	stw	r4,8(r16)
  80b184:	14c00005 	stb	r19,0(r2)
  80b188:	80800517 	ldw	r2,20(r16)
  80b18c:	10c01e26 	beq	r2,r3,80b208 <__swbuf_r+0x104>
  80b190:	8080030b 	ldhu	r2,12(r16)
  80b194:	1080004c 	andi	r2,r2,1
  80b198:	10000226 	beq	r2,zero,80b1a4 <__swbuf_r+0xa0>
  80b19c:	00800284 	movi	r2,10
  80b1a0:	88801926 	beq	r17,r2,80b208 <__swbuf_r+0x104>
  80b1a4:	8805883a 	mov	r2,r17
  80b1a8:	dfc00417 	ldw	ra,16(sp)
  80b1ac:	dcc00317 	ldw	r19,12(sp)
  80b1b0:	dc800217 	ldw	r18,8(sp)
  80b1b4:	dc400117 	ldw	r17,4(sp)
  80b1b8:	dc000017 	ldw	r16,0(sp)
  80b1bc:	dec00504 	addi	sp,sp,20
  80b1c0:	f800283a 	ret
  80b1c4:	81401917 	ldw	r5,100(r16)
  80b1c8:	00b7ffc4 	movi	r2,-8193
  80b1cc:	21080014 	ori	r4,r4,8192
  80b1d0:	2884703a 	and	r2,r5,r2
  80b1d4:	80801915 	stw	r2,100(r16)
  80b1d8:	80800017 	ldw	r2,0(r16)
  80b1dc:	8100030d 	sth	r4,12(r16)
  80b1e0:	81000517 	ldw	r4,20(r16)
  80b1e4:	10c7c83a 	sub	r3,r2,r3
  80b1e8:	193fe016 	blt	r3,r4,80b16c <__alt_mem_onchip_mem+0xff78b16c>
  80b1ec:	800b883a 	mov	r5,r16
  80b1f0:	9009883a 	mov	r4,r18
  80b1f4:	08012ec0 	call	8012ec <_fflush_r>
  80b1f8:	1000071e 	bne	r2,zero,80b218 <__swbuf_r+0x114>
  80b1fc:	80800017 	ldw	r2,0(r16)
  80b200:	00c00044 	movi	r3,1
  80b204:	003fda06 	br	80b170 <__alt_mem_onchip_mem+0xff78b170>
  80b208:	800b883a 	mov	r5,r16
  80b20c:	9009883a 	mov	r4,r18
  80b210:	08012ec0 	call	8012ec <_fflush_r>
  80b214:	103fe326 	beq	r2,zero,80b1a4 <__alt_mem_onchip_mem+0xff78b1a4>
  80b218:	00bfffc4 	movi	r2,-1
  80b21c:	003fe206 	br	80b1a8 <__alt_mem_onchip_mem+0xff78b1a8>
  80b220:	800b883a 	mov	r5,r16
  80b224:	9009883a 	mov	r4,r18
  80b228:	0805c900 	call	805c90 <__swsetup_r>
  80b22c:	103ffa1e 	bne	r2,zero,80b218 <__alt_mem_onchip_mem+0xff78b218>
  80b230:	8100030b 	ldhu	r4,12(r16)
  80b234:	80c00417 	ldw	r3,16(r16)
  80b238:	003fc506 	br	80b150 <__alt_mem_onchip_mem+0xff78b150>
  80b23c:	08017c00 	call	8017c0 <__sinit>
  80b240:	003fbc06 	br	80b134 <__alt_mem_onchip_mem+0xff78b134>

0080b244 <__swbuf>:
  80b244:	00802074 	movhi	r2,129
  80b248:	10942504 	addi	r2,r2,20628
  80b24c:	280d883a 	mov	r6,r5
  80b250:	200b883a 	mov	r5,r4
  80b254:	11000017 	ldw	r4,0(r2)
  80b258:	080b1041 	jmpi	80b104 <__swbuf_r>

0080b25c <_calloc_r>:
  80b25c:	298b383a 	mul	r5,r5,r6
  80b260:	defffe04 	addi	sp,sp,-8
  80b264:	dfc00115 	stw	ra,4(sp)
  80b268:	dc000015 	stw	r16,0(sp)
  80b26c:	08026bc0 	call	8026bc <_malloc_r>
  80b270:	10002926 	beq	r2,zero,80b318 <_calloc_r+0xbc>
  80b274:	11bfff17 	ldw	r6,-4(r2)
  80b278:	1021883a 	mov	r16,r2
  80b27c:	00bfff04 	movi	r2,-4
  80b280:	308c703a 	and	r6,r6,r2
  80b284:	00c00904 	movi	r3,36
  80b288:	308d883a 	add	r6,r6,r2
  80b28c:	19801636 	bltu	r3,r6,80b2e8 <_calloc_r+0x8c>
  80b290:	008004c4 	movi	r2,19
  80b294:	11800b2e 	bgeu	r2,r6,80b2c4 <_calloc_r+0x68>
  80b298:	80000015 	stw	zero,0(r16)
  80b29c:	80000115 	stw	zero,4(r16)
  80b2a0:	008006c4 	movi	r2,27
  80b2a4:	11801a2e 	bgeu	r2,r6,80b310 <_calloc_r+0xb4>
  80b2a8:	80000215 	stw	zero,8(r16)
  80b2ac:	80000315 	stw	zero,12(r16)
  80b2b0:	30c0151e 	bne	r6,r3,80b308 <_calloc_r+0xac>
  80b2b4:	80000415 	stw	zero,16(r16)
  80b2b8:	80800604 	addi	r2,r16,24
  80b2bc:	80000515 	stw	zero,20(r16)
  80b2c0:	00000106 	br	80b2c8 <_calloc_r+0x6c>
  80b2c4:	8005883a 	mov	r2,r16
  80b2c8:	10000015 	stw	zero,0(r2)
  80b2cc:	10000115 	stw	zero,4(r2)
  80b2d0:	10000215 	stw	zero,8(r2)
  80b2d4:	8005883a 	mov	r2,r16
  80b2d8:	dfc00117 	ldw	ra,4(sp)
  80b2dc:	dc000017 	ldw	r16,0(sp)
  80b2e0:	dec00204 	addi	sp,sp,8
  80b2e4:	f800283a 	ret
  80b2e8:	000b883a 	mov	r5,zero
  80b2ec:	8009883a 	mov	r4,r16
  80b2f0:	0802ec80 	call	802ec8 <memset>
  80b2f4:	8005883a 	mov	r2,r16
  80b2f8:	dfc00117 	ldw	ra,4(sp)
  80b2fc:	dc000017 	ldw	r16,0(sp)
  80b300:	dec00204 	addi	sp,sp,8
  80b304:	f800283a 	ret
  80b308:	80800404 	addi	r2,r16,16
  80b30c:	003fee06 	br	80b2c8 <__alt_mem_onchip_mem+0xff78b2c8>
  80b310:	80800204 	addi	r2,r16,8
  80b314:	003fec06 	br	80b2c8 <__alt_mem_onchip_mem+0xff78b2c8>
  80b318:	0005883a 	mov	r2,zero
  80b31c:	003fee06 	br	80b2d8 <__alt_mem_onchip_mem+0xff78b2d8>

0080b320 <__fputwc>:
  80b320:	defff804 	addi	sp,sp,-32
  80b324:	dcc00415 	stw	r19,16(sp)
  80b328:	dc800315 	stw	r18,12(sp)
  80b32c:	dc000115 	stw	r16,4(sp)
  80b330:	dfc00715 	stw	ra,28(sp)
  80b334:	dd400615 	stw	r21,24(sp)
  80b338:	dd000515 	stw	r20,20(sp)
  80b33c:	dc400215 	stw	r17,8(sp)
  80b340:	2027883a 	mov	r19,r4
  80b344:	2825883a 	mov	r18,r5
  80b348:	3021883a 	mov	r16,r6
  80b34c:	0807e080 	call	807e08 <__locale_mb_cur_max>
  80b350:	00c00044 	movi	r3,1
  80b354:	10c03e26 	beq	r2,r3,80b450 <__fputwc+0x130>
  80b358:	81c01704 	addi	r7,r16,92
  80b35c:	900d883a 	mov	r6,r18
  80b360:	d80b883a 	mov	r5,sp
  80b364:	9809883a 	mov	r4,r19
  80b368:	080b5280 	call	80b528 <_wcrtomb_r>
  80b36c:	1029883a 	mov	r20,r2
  80b370:	00bfffc4 	movi	r2,-1
  80b374:	a0802026 	beq	r20,r2,80b3f8 <__fputwc+0xd8>
  80b378:	d9400003 	ldbu	r5,0(sp)
  80b37c:	a0001c26 	beq	r20,zero,80b3f0 <__fputwc+0xd0>
  80b380:	0023883a 	mov	r17,zero
  80b384:	05400284 	movi	r21,10
  80b388:	00000906 	br	80b3b0 <__fputwc+0x90>
  80b38c:	80800017 	ldw	r2,0(r16)
  80b390:	11400005 	stb	r5,0(r2)
  80b394:	80c00017 	ldw	r3,0(r16)
  80b398:	18c00044 	addi	r3,r3,1
  80b39c:	80c00015 	stw	r3,0(r16)
  80b3a0:	8c400044 	addi	r17,r17,1
  80b3a4:	dc45883a 	add	r2,sp,r17
  80b3a8:	8d00112e 	bgeu	r17,r20,80b3f0 <__fputwc+0xd0>
  80b3ac:	11400003 	ldbu	r5,0(r2)
  80b3b0:	80c00217 	ldw	r3,8(r16)
  80b3b4:	18ffffc4 	addi	r3,r3,-1
  80b3b8:	80c00215 	stw	r3,8(r16)
  80b3bc:	183ff30e 	bge	r3,zero,80b38c <__alt_mem_onchip_mem+0xff78b38c>
  80b3c0:	80800617 	ldw	r2,24(r16)
  80b3c4:	18801916 	blt	r3,r2,80b42c <__fputwc+0x10c>
  80b3c8:	80800017 	ldw	r2,0(r16)
  80b3cc:	11400005 	stb	r5,0(r2)
  80b3d0:	80800017 	ldw	r2,0(r16)
  80b3d4:	10c00003 	ldbu	r3,0(r2)
  80b3d8:	10800044 	addi	r2,r2,1
  80b3dc:	1d402326 	beq	r3,r21,80b46c <__fputwc+0x14c>
  80b3e0:	80800015 	stw	r2,0(r16)
  80b3e4:	8c400044 	addi	r17,r17,1
  80b3e8:	dc45883a 	add	r2,sp,r17
  80b3ec:	8d3fef36 	bltu	r17,r20,80b3ac <__alt_mem_onchip_mem+0xff78b3ac>
  80b3f0:	9005883a 	mov	r2,r18
  80b3f4:	00000406 	br	80b408 <__fputwc+0xe8>
  80b3f8:	80c0030b 	ldhu	r3,12(r16)
  80b3fc:	a005883a 	mov	r2,r20
  80b400:	18c01014 	ori	r3,r3,64
  80b404:	80c0030d 	sth	r3,12(r16)
  80b408:	dfc00717 	ldw	ra,28(sp)
  80b40c:	dd400617 	ldw	r21,24(sp)
  80b410:	dd000517 	ldw	r20,20(sp)
  80b414:	dcc00417 	ldw	r19,16(sp)
  80b418:	dc800317 	ldw	r18,12(sp)
  80b41c:	dc400217 	ldw	r17,8(sp)
  80b420:	dc000117 	ldw	r16,4(sp)
  80b424:	dec00804 	addi	sp,sp,32
  80b428:	f800283a 	ret
  80b42c:	800d883a 	mov	r6,r16
  80b430:	29403fcc 	andi	r5,r5,255
  80b434:	9809883a 	mov	r4,r19
  80b438:	080b1040 	call	80b104 <__swbuf_r>
  80b43c:	10bfffe0 	cmpeqi	r2,r2,-1
  80b440:	10803fcc 	andi	r2,r2,255
  80b444:	103fd626 	beq	r2,zero,80b3a0 <__alt_mem_onchip_mem+0xff78b3a0>
  80b448:	00bfffc4 	movi	r2,-1
  80b44c:	003fee06 	br	80b408 <__alt_mem_onchip_mem+0xff78b408>
  80b450:	90ffffc4 	addi	r3,r18,-1
  80b454:	01003f84 	movi	r4,254
  80b458:	20ffbf36 	bltu	r4,r3,80b358 <__alt_mem_onchip_mem+0xff78b358>
  80b45c:	900b883a 	mov	r5,r18
  80b460:	dc800005 	stb	r18,0(sp)
  80b464:	1029883a 	mov	r20,r2
  80b468:	003fc506 	br	80b380 <__alt_mem_onchip_mem+0xff78b380>
  80b46c:	800d883a 	mov	r6,r16
  80b470:	a80b883a 	mov	r5,r21
  80b474:	9809883a 	mov	r4,r19
  80b478:	080b1040 	call	80b104 <__swbuf_r>
  80b47c:	10bfffe0 	cmpeqi	r2,r2,-1
  80b480:	003fef06 	br	80b440 <__alt_mem_onchip_mem+0xff78b440>

0080b484 <_fputwc_r>:
  80b484:	3080030b 	ldhu	r2,12(r6)
  80b488:	10c8000c 	andi	r3,r2,8192
  80b48c:	1800051e 	bne	r3,zero,80b4a4 <_fputwc_r+0x20>
  80b490:	30c01917 	ldw	r3,100(r6)
  80b494:	10880014 	ori	r2,r2,8192
  80b498:	3080030d 	sth	r2,12(r6)
  80b49c:	18880014 	ori	r2,r3,8192
  80b4a0:	30801915 	stw	r2,100(r6)
  80b4a4:	080b3201 	jmpi	80b320 <__fputwc>

0080b4a8 <fputwc>:
  80b4a8:	00802074 	movhi	r2,129
  80b4ac:	defffc04 	addi	sp,sp,-16
  80b4b0:	10942504 	addi	r2,r2,20628
  80b4b4:	dc000115 	stw	r16,4(sp)
  80b4b8:	14000017 	ldw	r16,0(r2)
  80b4bc:	dc400215 	stw	r17,8(sp)
  80b4c0:	dfc00315 	stw	ra,12(sp)
  80b4c4:	2023883a 	mov	r17,r4
  80b4c8:	80000226 	beq	r16,zero,80b4d4 <fputwc+0x2c>
  80b4cc:	80800e17 	ldw	r2,56(r16)
  80b4d0:	10001026 	beq	r2,zero,80b514 <fputwc+0x6c>
  80b4d4:	2880030b 	ldhu	r2,12(r5)
  80b4d8:	10c8000c 	andi	r3,r2,8192
  80b4dc:	1800051e 	bne	r3,zero,80b4f4 <fputwc+0x4c>
  80b4e0:	28c01917 	ldw	r3,100(r5)
  80b4e4:	10880014 	ori	r2,r2,8192
  80b4e8:	2880030d 	sth	r2,12(r5)
  80b4ec:	18880014 	ori	r2,r3,8192
  80b4f0:	28801915 	stw	r2,100(r5)
  80b4f4:	280d883a 	mov	r6,r5
  80b4f8:	8009883a 	mov	r4,r16
  80b4fc:	880b883a 	mov	r5,r17
  80b500:	dfc00317 	ldw	ra,12(sp)
  80b504:	dc400217 	ldw	r17,8(sp)
  80b508:	dc000117 	ldw	r16,4(sp)
  80b50c:	dec00404 	addi	sp,sp,16
  80b510:	080b3201 	jmpi	80b320 <__fputwc>
  80b514:	8009883a 	mov	r4,r16
  80b518:	d9400015 	stw	r5,0(sp)
  80b51c:	08017c00 	call	8017c0 <__sinit>
  80b520:	d9400017 	ldw	r5,0(sp)
  80b524:	003feb06 	br	80b4d4 <__alt_mem_onchip_mem+0xff78b4d4>

0080b528 <_wcrtomb_r>:
  80b528:	defff604 	addi	sp,sp,-40
  80b52c:	00802074 	movhi	r2,129
  80b530:	dc800815 	stw	r18,32(sp)
  80b534:	dc400715 	stw	r17,28(sp)
  80b538:	dc000615 	stw	r16,24(sp)
  80b53c:	10942a04 	addi	r2,r2,20648
  80b540:	dfc00915 	stw	ra,36(sp)
  80b544:	2021883a 	mov	r16,r4
  80b548:	3823883a 	mov	r17,r7
  80b54c:	14800017 	ldw	r18,0(r2)
  80b550:	28001426 	beq	r5,zero,80b5a4 <_wcrtomb_r+0x7c>
  80b554:	d9400415 	stw	r5,16(sp)
  80b558:	d9800515 	stw	r6,20(sp)
  80b55c:	0807dfc0 	call	807dfc <__locale_charset>
  80b560:	d9800517 	ldw	r6,20(sp)
  80b564:	d9400417 	ldw	r5,16(sp)
  80b568:	100f883a 	mov	r7,r2
  80b56c:	dc400015 	stw	r17,0(sp)
  80b570:	8009883a 	mov	r4,r16
  80b574:	903ee83a 	callr	r18
  80b578:	00ffffc4 	movi	r3,-1
  80b57c:	10c0031e 	bne	r2,r3,80b58c <_wcrtomb_r+0x64>
  80b580:	88000015 	stw	zero,0(r17)
  80b584:	00c02284 	movi	r3,138
  80b588:	80c00015 	stw	r3,0(r16)
  80b58c:	dfc00917 	ldw	ra,36(sp)
  80b590:	dc800817 	ldw	r18,32(sp)
  80b594:	dc400717 	ldw	r17,28(sp)
  80b598:	dc000617 	ldw	r16,24(sp)
  80b59c:	dec00a04 	addi	sp,sp,40
  80b5a0:	f800283a 	ret
  80b5a4:	0807dfc0 	call	807dfc <__locale_charset>
  80b5a8:	100f883a 	mov	r7,r2
  80b5ac:	dc400015 	stw	r17,0(sp)
  80b5b0:	000d883a 	mov	r6,zero
  80b5b4:	d9400104 	addi	r5,sp,4
  80b5b8:	8009883a 	mov	r4,r16
  80b5bc:	903ee83a 	callr	r18
  80b5c0:	003fed06 	br	80b578 <__alt_mem_onchip_mem+0xff78b578>

0080b5c4 <wcrtomb>:
  80b5c4:	defff604 	addi	sp,sp,-40
  80b5c8:	00802074 	movhi	r2,129
  80b5cc:	dc800615 	stw	r18,24(sp)
  80b5d0:	dc400515 	stw	r17,20(sp)
  80b5d4:	10942504 	addi	r2,r2,20628
  80b5d8:	dfc00915 	stw	ra,36(sp)
  80b5dc:	dd000815 	stw	r20,32(sp)
  80b5e0:	dcc00715 	stw	r19,28(sp)
  80b5e4:	dc000415 	stw	r16,16(sp)
  80b5e8:	3025883a 	mov	r18,r6
  80b5ec:	14400017 	ldw	r17,0(r2)
  80b5f0:	20001926 	beq	r4,zero,80b658 <wcrtomb+0x94>
  80b5f4:	00802074 	movhi	r2,129
  80b5f8:	10942a04 	addi	r2,r2,20648
  80b5fc:	15000017 	ldw	r20,0(r2)
  80b600:	2021883a 	mov	r16,r4
  80b604:	2827883a 	mov	r19,r5
  80b608:	0807dfc0 	call	807dfc <__locale_charset>
  80b60c:	100f883a 	mov	r7,r2
  80b610:	dc800015 	stw	r18,0(sp)
  80b614:	980d883a 	mov	r6,r19
  80b618:	800b883a 	mov	r5,r16
  80b61c:	8809883a 	mov	r4,r17
  80b620:	a03ee83a 	callr	r20
  80b624:	00ffffc4 	movi	r3,-1
  80b628:	10c0031e 	bne	r2,r3,80b638 <wcrtomb+0x74>
  80b62c:	90000015 	stw	zero,0(r18)
  80b630:	00c02284 	movi	r3,138
  80b634:	88c00015 	stw	r3,0(r17)
  80b638:	dfc00917 	ldw	ra,36(sp)
  80b63c:	dd000817 	ldw	r20,32(sp)
  80b640:	dcc00717 	ldw	r19,28(sp)
  80b644:	dc800617 	ldw	r18,24(sp)
  80b648:	dc400517 	ldw	r17,20(sp)
  80b64c:	dc000417 	ldw	r16,16(sp)
  80b650:	dec00a04 	addi	sp,sp,40
  80b654:	f800283a 	ret
  80b658:	00802074 	movhi	r2,129
  80b65c:	10942a04 	addi	r2,r2,20648
  80b660:	14000017 	ldw	r16,0(r2)
  80b664:	0807dfc0 	call	807dfc <__locale_charset>
  80b668:	100f883a 	mov	r7,r2
  80b66c:	dc800015 	stw	r18,0(sp)
  80b670:	000d883a 	mov	r6,zero
  80b674:	d9400104 	addi	r5,sp,4
  80b678:	8809883a 	mov	r4,r17
  80b67c:	803ee83a 	callr	r16
  80b680:	003fe806 	br	80b624 <__alt_mem_onchip_mem+0xff78b624>

0080b684 <__ascii_wctomb>:
  80b684:	28000526 	beq	r5,zero,80b69c <__ascii_wctomb+0x18>
  80b688:	00803fc4 	movi	r2,255
  80b68c:	11800536 	bltu	r2,r6,80b6a4 <__ascii_wctomb+0x20>
  80b690:	29800005 	stb	r6,0(r5)
  80b694:	00800044 	movi	r2,1
  80b698:	f800283a 	ret
  80b69c:	0005883a 	mov	r2,zero
  80b6a0:	f800283a 	ret
  80b6a4:	00802284 	movi	r2,138
  80b6a8:	20800015 	stw	r2,0(r4)
  80b6ac:	00bfffc4 	movi	r2,-1
  80b6b0:	f800283a 	ret

0080b6b4 <_wctomb_r>:
  80b6b4:	00802074 	movhi	r2,129
  80b6b8:	defff904 	addi	sp,sp,-28
  80b6bc:	10942a04 	addi	r2,r2,20648
  80b6c0:	dfc00615 	stw	ra,24(sp)
  80b6c4:	dc400515 	stw	r17,20(sp)
  80b6c8:	dc000415 	stw	r16,16(sp)
  80b6cc:	3823883a 	mov	r17,r7
  80b6d0:	14000017 	ldw	r16,0(r2)
  80b6d4:	d9000115 	stw	r4,4(sp)
  80b6d8:	d9400215 	stw	r5,8(sp)
  80b6dc:	d9800315 	stw	r6,12(sp)
  80b6e0:	0807dfc0 	call	807dfc <__locale_charset>
  80b6e4:	d9800317 	ldw	r6,12(sp)
  80b6e8:	d9400217 	ldw	r5,8(sp)
  80b6ec:	d9000117 	ldw	r4,4(sp)
  80b6f0:	100f883a 	mov	r7,r2
  80b6f4:	dc400015 	stw	r17,0(sp)
  80b6f8:	803ee83a 	callr	r16
  80b6fc:	dfc00617 	ldw	ra,24(sp)
  80b700:	dc400517 	ldw	r17,20(sp)
  80b704:	dc000417 	ldw	r16,16(sp)
  80b708:	dec00704 	addi	sp,sp,28
  80b70c:	f800283a 	ret

0080b710 <__udivdi3>:
  80b710:	defff504 	addi	sp,sp,-44
  80b714:	dcc00415 	stw	r19,16(sp)
  80b718:	dc000115 	stw	r16,4(sp)
  80b71c:	dfc00a15 	stw	ra,40(sp)
  80b720:	df000915 	stw	fp,36(sp)
  80b724:	ddc00815 	stw	r23,32(sp)
  80b728:	dd800715 	stw	r22,28(sp)
  80b72c:	dd400615 	stw	r21,24(sp)
  80b730:	dd000515 	stw	r20,20(sp)
  80b734:	dc800315 	stw	r18,12(sp)
  80b738:	dc400215 	stw	r17,8(sp)
  80b73c:	2027883a 	mov	r19,r4
  80b740:	2821883a 	mov	r16,r5
  80b744:	3800411e 	bne	r7,zero,80b84c <__udivdi3+0x13c>
  80b748:	3023883a 	mov	r17,r6
  80b74c:	2025883a 	mov	r18,r4
  80b750:	2980522e 	bgeu	r5,r6,80b89c <__udivdi3+0x18c>
  80b754:	00bfffd4 	movui	r2,65535
  80b758:	282d883a 	mov	r22,r5
  80b75c:	1180a836 	bltu	r2,r6,80ba00 <__udivdi3+0x2f0>
  80b760:	00803fc4 	movi	r2,255
  80b764:	1185803a 	cmpltu	r2,r2,r6
  80b768:	100490fa 	slli	r2,r2,3
  80b76c:	3086d83a 	srl	r3,r6,r2
  80b770:	01002074 	movhi	r4,129
  80b774:	210ca404 	addi	r4,r4,12944
  80b778:	20c7883a 	add	r3,r4,r3
  80b77c:	18c00003 	ldbu	r3,0(r3)
  80b780:	1885883a 	add	r2,r3,r2
  80b784:	00c00804 	movi	r3,32
  80b788:	1887c83a 	sub	r3,r3,r2
  80b78c:	18000526 	beq	r3,zero,80b7a4 <__udivdi3+0x94>
  80b790:	80e0983a 	sll	r16,r16,r3
  80b794:	9884d83a 	srl	r2,r19,r2
  80b798:	30e2983a 	sll	r17,r6,r3
  80b79c:	98e4983a 	sll	r18,r19,r3
  80b7a0:	142cb03a 	or	r22,r2,r16
  80b7a4:	882ad43a 	srli	r21,r17,16
  80b7a8:	b009883a 	mov	r4,r22
  80b7ac:	8d3fffcc 	andi	r20,r17,65535
  80b7b0:	a80b883a 	mov	r5,r21
  80b7b4:	080c31c0 	call	80c31c <__umodsi3>
  80b7b8:	b009883a 	mov	r4,r22
  80b7bc:	a80b883a 	mov	r5,r21
  80b7c0:	1027883a 	mov	r19,r2
  80b7c4:	080c2b80 	call	80c2b8 <__udivsi3>
  80b7c8:	102d883a 	mov	r22,r2
  80b7cc:	9826943a 	slli	r19,r19,16
  80b7d0:	9004d43a 	srli	r2,r18,16
  80b7d4:	a5a1383a 	mul	r16,r20,r22
  80b7d8:	14c4b03a 	or	r2,r2,r19
  80b7dc:	1400052e 	bgeu	r2,r16,80b7f4 <__udivdi3+0xe4>
  80b7e0:	1445883a 	add	r2,r2,r17
  80b7e4:	b0ffffc4 	addi	r3,r22,-1
  80b7e8:	14400136 	bltu	r2,r17,80b7f0 <__udivdi3+0xe0>
  80b7ec:	14012336 	bltu	r2,r16,80bc7c <__udivdi3+0x56c>
  80b7f0:	182d883a 	mov	r22,r3
  80b7f4:	1421c83a 	sub	r16,r2,r16
  80b7f8:	a80b883a 	mov	r5,r21
  80b7fc:	8009883a 	mov	r4,r16
  80b800:	080c31c0 	call	80c31c <__umodsi3>
  80b804:	1027883a 	mov	r19,r2
  80b808:	a80b883a 	mov	r5,r21
  80b80c:	8009883a 	mov	r4,r16
  80b810:	080c2b80 	call	80c2b8 <__udivsi3>
  80b814:	9826943a 	slli	r19,r19,16
  80b818:	a0a9383a 	mul	r20,r20,r2
  80b81c:	94bfffcc 	andi	r18,r18,65535
  80b820:	94e4b03a 	or	r18,r18,r19
  80b824:	9500052e 	bgeu	r18,r20,80b83c <__udivdi3+0x12c>
  80b828:	8ca5883a 	add	r18,r17,r18
  80b82c:	10ffffc4 	addi	r3,r2,-1
  80b830:	9440f136 	bltu	r18,r17,80bbf8 <__udivdi3+0x4e8>
  80b834:	9500f02e 	bgeu	r18,r20,80bbf8 <__udivdi3+0x4e8>
  80b838:	10bfff84 	addi	r2,r2,-2
  80b83c:	b00c943a 	slli	r6,r22,16
  80b840:	0007883a 	mov	r3,zero
  80b844:	3084b03a 	or	r2,r6,r2
  80b848:	00005906 	br	80b9b0 <__udivdi3+0x2a0>
  80b84c:	29c05636 	bltu	r5,r7,80b9a8 <__udivdi3+0x298>
  80b850:	00bfffd4 	movui	r2,65535
  80b854:	11c0622e 	bgeu	r2,r7,80b9e0 <__udivdi3+0x2d0>
  80b858:	00804034 	movhi	r2,256
  80b85c:	10bfffc4 	addi	r2,r2,-1
  80b860:	11c0ee36 	bltu	r2,r7,80bc1c <__udivdi3+0x50c>
  80b864:	00800404 	movi	r2,16
  80b868:	3886d83a 	srl	r3,r7,r2
  80b86c:	01002074 	movhi	r4,129
  80b870:	210ca404 	addi	r4,r4,12944
  80b874:	20c7883a 	add	r3,r4,r3
  80b878:	18c00003 	ldbu	r3,0(r3)
  80b87c:	05400804 	movi	r21,32
  80b880:	1885883a 	add	r2,r3,r2
  80b884:	a8abc83a 	sub	r21,r21,r2
  80b888:	a800621e 	bne	r21,zero,80ba14 <__udivdi3+0x304>
  80b88c:	3c00e936 	bltu	r7,r16,80bc34 <__udivdi3+0x524>
  80b890:	9985403a 	cmpgeu	r2,r19,r6
  80b894:	0007883a 	mov	r3,zero
  80b898:	00004506 	br	80b9b0 <__udivdi3+0x2a0>
  80b89c:	3000041e 	bne	r6,zero,80b8b0 <__udivdi3+0x1a0>
  80b8a0:	000b883a 	mov	r5,zero
  80b8a4:	01000044 	movi	r4,1
  80b8a8:	080c2b80 	call	80c2b8 <__udivsi3>
  80b8ac:	1023883a 	mov	r17,r2
  80b8b0:	00bfffd4 	movui	r2,65535
  80b8b4:	14404e2e 	bgeu	r2,r17,80b9f0 <__udivdi3+0x2e0>
  80b8b8:	00804034 	movhi	r2,256
  80b8bc:	10bfffc4 	addi	r2,r2,-1
  80b8c0:	1440d836 	bltu	r2,r17,80bc24 <__udivdi3+0x514>
  80b8c4:	00800404 	movi	r2,16
  80b8c8:	8886d83a 	srl	r3,r17,r2
  80b8cc:	01002074 	movhi	r4,129
  80b8d0:	210ca404 	addi	r4,r4,12944
  80b8d4:	20c7883a 	add	r3,r4,r3
  80b8d8:	18c00003 	ldbu	r3,0(r3)
  80b8dc:	1885883a 	add	r2,r3,r2
  80b8e0:	00c00804 	movi	r3,32
  80b8e4:	1887c83a 	sub	r3,r3,r2
  80b8e8:	18008f1e 	bne	r3,zero,80bb28 <__udivdi3+0x418>
  80b8ec:	882ad43a 	srli	r21,r17,16
  80b8f0:	8461c83a 	sub	r16,r16,r17
  80b8f4:	8d3fffcc 	andi	r20,r17,65535
  80b8f8:	00c00044 	movi	r3,1
  80b8fc:	8009883a 	mov	r4,r16
  80b900:	a80b883a 	mov	r5,r21
  80b904:	d8c00015 	stw	r3,0(sp)
  80b908:	080c31c0 	call	80c31c <__umodsi3>
  80b90c:	8009883a 	mov	r4,r16
  80b910:	a80b883a 	mov	r5,r21
  80b914:	1027883a 	mov	r19,r2
  80b918:	080c2b80 	call	80c2b8 <__udivsi3>
  80b91c:	9826943a 	slli	r19,r19,16
  80b920:	9008d43a 	srli	r4,r18,16
  80b924:	1521383a 	mul	r16,r2,r20
  80b928:	102d883a 	mov	r22,r2
  80b92c:	24c8b03a 	or	r4,r4,r19
  80b930:	d8c00017 	ldw	r3,0(sp)
  80b934:	2400052e 	bgeu	r4,r16,80b94c <__udivdi3+0x23c>
  80b938:	2449883a 	add	r4,r4,r17
  80b93c:	b0bfffc4 	addi	r2,r22,-1
  80b940:	24400136 	bltu	r4,r17,80b948 <__udivdi3+0x238>
  80b944:	2400ca36 	bltu	r4,r16,80bc70 <__udivdi3+0x560>
  80b948:	102d883a 	mov	r22,r2
  80b94c:	2421c83a 	sub	r16,r4,r16
  80b950:	a80b883a 	mov	r5,r21
  80b954:	8009883a 	mov	r4,r16
  80b958:	d8c00015 	stw	r3,0(sp)
  80b95c:	080c31c0 	call	80c31c <__umodsi3>
  80b960:	1027883a 	mov	r19,r2
  80b964:	a80b883a 	mov	r5,r21
  80b968:	8009883a 	mov	r4,r16
  80b96c:	080c2b80 	call	80c2b8 <__udivsi3>
  80b970:	9826943a 	slli	r19,r19,16
  80b974:	1529383a 	mul	r20,r2,r20
  80b978:	94bfffcc 	andi	r18,r18,65535
  80b97c:	94e4b03a 	or	r18,r18,r19
  80b980:	d8c00017 	ldw	r3,0(sp)
  80b984:	9500052e 	bgeu	r18,r20,80b99c <__udivdi3+0x28c>
  80b988:	8ca5883a 	add	r18,r17,r18
  80b98c:	113fffc4 	addi	r4,r2,-1
  80b990:	94409736 	bltu	r18,r17,80bbf0 <__udivdi3+0x4e0>
  80b994:	9500962e 	bgeu	r18,r20,80bbf0 <__udivdi3+0x4e0>
  80b998:	10bfff84 	addi	r2,r2,-2
  80b99c:	b00c943a 	slli	r6,r22,16
  80b9a0:	3084b03a 	or	r2,r6,r2
  80b9a4:	00000206 	br	80b9b0 <__udivdi3+0x2a0>
  80b9a8:	0007883a 	mov	r3,zero
  80b9ac:	0005883a 	mov	r2,zero
  80b9b0:	dfc00a17 	ldw	ra,40(sp)
  80b9b4:	df000917 	ldw	fp,36(sp)
  80b9b8:	ddc00817 	ldw	r23,32(sp)
  80b9bc:	dd800717 	ldw	r22,28(sp)
  80b9c0:	dd400617 	ldw	r21,24(sp)
  80b9c4:	dd000517 	ldw	r20,20(sp)
  80b9c8:	dcc00417 	ldw	r19,16(sp)
  80b9cc:	dc800317 	ldw	r18,12(sp)
  80b9d0:	dc400217 	ldw	r17,8(sp)
  80b9d4:	dc000117 	ldw	r16,4(sp)
  80b9d8:	dec00b04 	addi	sp,sp,44
  80b9dc:	f800283a 	ret
  80b9e0:	00803fc4 	movi	r2,255
  80b9e4:	11c5803a 	cmpltu	r2,r2,r7
  80b9e8:	100490fa 	slli	r2,r2,3
  80b9ec:	003f9e06 	br	80b868 <__alt_mem_onchip_mem+0xff78b868>
  80b9f0:	00803fc4 	movi	r2,255
  80b9f4:	1445803a 	cmpltu	r2,r2,r17
  80b9f8:	100490fa 	slli	r2,r2,3
  80b9fc:	003fb206 	br	80b8c8 <__alt_mem_onchip_mem+0xff78b8c8>
  80ba00:	00804034 	movhi	r2,256
  80ba04:	10bfffc4 	addi	r2,r2,-1
  80ba08:	11808836 	bltu	r2,r6,80bc2c <__udivdi3+0x51c>
  80ba0c:	00800404 	movi	r2,16
  80ba10:	003f5606 	br	80b76c <__alt_mem_onchip_mem+0xff78b76c>
  80ba14:	30aed83a 	srl	r23,r6,r2
  80ba18:	3d4e983a 	sll	r7,r7,r21
  80ba1c:	80acd83a 	srl	r22,r16,r2
  80ba20:	9884d83a 	srl	r2,r19,r2
  80ba24:	3deeb03a 	or	r23,r7,r23
  80ba28:	b824d43a 	srli	r18,r23,16
  80ba2c:	8560983a 	sll	r16,r16,r21
  80ba30:	b009883a 	mov	r4,r22
  80ba34:	900b883a 	mov	r5,r18
  80ba38:	3568983a 	sll	r20,r6,r21
  80ba3c:	1420b03a 	or	r16,r2,r16
  80ba40:	080c31c0 	call	80c31c <__umodsi3>
  80ba44:	b009883a 	mov	r4,r22
  80ba48:	900b883a 	mov	r5,r18
  80ba4c:	1023883a 	mov	r17,r2
  80ba50:	080c2b80 	call	80c2b8 <__udivsi3>
  80ba54:	8808943a 	slli	r4,r17,16
  80ba58:	bf3fffcc 	andi	fp,r23,65535
  80ba5c:	8006d43a 	srli	r3,r16,16
  80ba60:	e0a3383a 	mul	r17,fp,r2
  80ba64:	100d883a 	mov	r6,r2
  80ba68:	1906b03a 	or	r3,r3,r4
  80ba6c:	1c40042e 	bgeu	r3,r17,80ba80 <__udivdi3+0x370>
  80ba70:	1dc7883a 	add	r3,r3,r23
  80ba74:	10bfffc4 	addi	r2,r2,-1
  80ba78:	1dc0752e 	bgeu	r3,r23,80bc50 <__udivdi3+0x540>
  80ba7c:	100d883a 	mov	r6,r2
  80ba80:	1c63c83a 	sub	r17,r3,r17
  80ba84:	900b883a 	mov	r5,r18
  80ba88:	8809883a 	mov	r4,r17
  80ba8c:	d9800015 	stw	r6,0(sp)
  80ba90:	080c31c0 	call	80c31c <__umodsi3>
  80ba94:	102d883a 	mov	r22,r2
  80ba98:	8809883a 	mov	r4,r17
  80ba9c:	900b883a 	mov	r5,r18
  80baa0:	080c2b80 	call	80c2b8 <__udivsi3>
  80baa4:	b02c943a 	slli	r22,r22,16
  80baa8:	e089383a 	mul	r4,fp,r2
  80baac:	843fffcc 	andi	r16,r16,65535
  80bab0:	85a0b03a 	or	r16,r16,r22
  80bab4:	d9800017 	ldw	r6,0(sp)
  80bab8:	8100042e 	bgeu	r16,r4,80bacc <__udivdi3+0x3bc>
  80babc:	85e1883a 	add	r16,r16,r23
  80bac0:	10ffffc4 	addi	r3,r2,-1
  80bac4:	85c05e2e 	bgeu	r16,r23,80bc40 <__udivdi3+0x530>
  80bac8:	1805883a 	mov	r2,r3
  80bacc:	300c943a 	slli	r6,r6,16
  80bad0:	a17fffcc 	andi	r5,r20,65535
  80bad4:	a028d43a 	srli	r20,r20,16
  80bad8:	3084b03a 	or	r2,r6,r2
  80badc:	10ffffcc 	andi	r3,r2,65535
  80bae0:	100cd43a 	srli	r6,r2,16
  80bae4:	194f383a 	mul	r7,r3,r5
  80bae8:	1d07383a 	mul	r3,r3,r20
  80baec:	314b383a 	mul	r5,r6,r5
  80baf0:	3810d43a 	srli	r8,r7,16
  80baf4:	8121c83a 	sub	r16,r16,r4
  80baf8:	1947883a 	add	r3,r3,r5
  80bafc:	40c7883a 	add	r3,r8,r3
  80bb00:	350d383a 	mul	r6,r6,r20
  80bb04:	1940022e 	bgeu	r3,r5,80bb10 <__udivdi3+0x400>
  80bb08:	01000074 	movhi	r4,1
  80bb0c:	310d883a 	add	r6,r6,r4
  80bb10:	1828d43a 	srli	r20,r3,16
  80bb14:	a18d883a 	add	r6,r20,r6
  80bb18:	81803e36 	bltu	r16,r6,80bc14 <__udivdi3+0x504>
  80bb1c:	81803826 	beq	r16,r6,80bc00 <__udivdi3+0x4f0>
  80bb20:	0007883a 	mov	r3,zero
  80bb24:	003fa206 	br	80b9b0 <__alt_mem_onchip_mem+0xff78b9b0>
  80bb28:	88e2983a 	sll	r17,r17,r3
  80bb2c:	80a8d83a 	srl	r20,r16,r2
  80bb30:	80e0983a 	sll	r16,r16,r3
  80bb34:	882ad43a 	srli	r21,r17,16
  80bb38:	9884d83a 	srl	r2,r19,r2
  80bb3c:	a009883a 	mov	r4,r20
  80bb40:	a80b883a 	mov	r5,r21
  80bb44:	142eb03a 	or	r23,r2,r16
  80bb48:	98e4983a 	sll	r18,r19,r3
  80bb4c:	080c31c0 	call	80c31c <__umodsi3>
  80bb50:	a009883a 	mov	r4,r20
  80bb54:	a80b883a 	mov	r5,r21
  80bb58:	1021883a 	mov	r16,r2
  80bb5c:	080c2b80 	call	80c2b8 <__udivsi3>
  80bb60:	1039883a 	mov	fp,r2
  80bb64:	8d3fffcc 	andi	r20,r17,65535
  80bb68:	8020943a 	slli	r16,r16,16
  80bb6c:	b804d43a 	srli	r2,r23,16
  80bb70:	a72d383a 	mul	r22,r20,fp
  80bb74:	1404b03a 	or	r2,r2,r16
  80bb78:	1580062e 	bgeu	r2,r22,80bb94 <__udivdi3+0x484>
  80bb7c:	1445883a 	add	r2,r2,r17
  80bb80:	e0ffffc4 	addi	r3,fp,-1
  80bb84:	14403836 	bltu	r2,r17,80bc68 <__udivdi3+0x558>
  80bb88:	1580372e 	bgeu	r2,r22,80bc68 <__udivdi3+0x558>
  80bb8c:	e73fff84 	addi	fp,fp,-2
  80bb90:	1445883a 	add	r2,r2,r17
  80bb94:	15adc83a 	sub	r22,r2,r22
  80bb98:	a80b883a 	mov	r5,r21
  80bb9c:	b009883a 	mov	r4,r22
  80bba0:	080c31c0 	call	80c31c <__umodsi3>
  80bba4:	1027883a 	mov	r19,r2
  80bba8:	b009883a 	mov	r4,r22
  80bbac:	a80b883a 	mov	r5,r21
  80bbb0:	080c2b80 	call	80c2b8 <__udivsi3>
  80bbb4:	9826943a 	slli	r19,r19,16
  80bbb8:	a0a1383a 	mul	r16,r20,r2
  80bbbc:	b93fffcc 	andi	r4,r23,65535
  80bbc0:	24c8b03a 	or	r4,r4,r19
  80bbc4:	2400062e 	bgeu	r4,r16,80bbe0 <__udivdi3+0x4d0>
  80bbc8:	2449883a 	add	r4,r4,r17
  80bbcc:	10ffffc4 	addi	r3,r2,-1
  80bbd0:	24402336 	bltu	r4,r17,80bc60 <__udivdi3+0x550>
  80bbd4:	2400222e 	bgeu	r4,r16,80bc60 <__udivdi3+0x550>
  80bbd8:	10bfff84 	addi	r2,r2,-2
  80bbdc:	2449883a 	add	r4,r4,r17
  80bbe0:	e038943a 	slli	fp,fp,16
  80bbe4:	2421c83a 	sub	r16,r4,r16
  80bbe8:	e086b03a 	or	r3,fp,r2
  80bbec:	003f4306 	br	80b8fc <__alt_mem_onchip_mem+0xff78b8fc>
  80bbf0:	2005883a 	mov	r2,r4
  80bbf4:	003f6906 	br	80b99c <__alt_mem_onchip_mem+0xff78b99c>
  80bbf8:	1805883a 	mov	r2,r3
  80bbfc:	003f0f06 	br	80b83c <__alt_mem_onchip_mem+0xff78b83c>
  80bc00:	1806943a 	slli	r3,r3,16
  80bc04:	9d66983a 	sll	r19,r19,r21
  80bc08:	39ffffcc 	andi	r7,r7,65535
  80bc0c:	19c7883a 	add	r3,r3,r7
  80bc10:	98ffc32e 	bgeu	r19,r3,80bb20 <__alt_mem_onchip_mem+0xff78bb20>
  80bc14:	10bfffc4 	addi	r2,r2,-1
  80bc18:	003fc106 	br	80bb20 <__alt_mem_onchip_mem+0xff78bb20>
  80bc1c:	00800604 	movi	r2,24
  80bc20:	003f1106 	br	80b868 <__alt_mem_onchip_mem+0xff78b868>
  80bc24:	00800604 	movi	r2,24
  80bc28:	003f2706 	br	80b8c8 <__alt_mem_onchip_mem+0xff78b8c8>
  80bc2c:	00800604 	movi	r2,24
  80bc30:	003ece06 	br	80b76c <__alt_mem_onchip_mem+0xff78b76c>
  80bc34:	0007883a 	mov	r3,zero
  80bc38:	00800044 	movi	r2,1
  80bc3c:	003f5c06 	br	80b9b0 <__alt_mem_onchip_mem+0xff78b9b0>
  80bc40:	813fa12e 	bgeu	r16,r4,80bac8 <__alt_mem_onchip_mem+0xff78bac8>
  80bc44:	10bfff84 	addi	r2,r2,-2
  80bc48:	85e1883a 	add	r16,r16,r23
  80bc4c:	003f9f06 	br	80bacc <__alt_mem_onchip_mem+0xff78bacc>
  80bc50:	1c7f8a2e 	bgeu	r3,r17,80ba7c <__alt_mem_onchip_mem+0xff78ba7c>
  80bc54:	31bfff84 	addi	r6,r6,-2
  80bc58:	1dc7883a 	add	r3,r3,r23
  80bc5c:	003f8806 	br	80ba80 <__alt_mem_onchip_mem+0xff78ba80>
  80bc60:	1805883a 	mov	r2,r3
  80bc64:	003fde06 	br	80bbe0 <__alt_mem_onchip_mem+0xff78bbe0>
  80bc68:	1839883a 	mov	fp,r3
  80bc6c:	003fc906 	br	80bb94 <__alt_mem_onchip_mem+0xff78bb94>
  80bc70:	b5bfff84 	addi	r22,r22,-2
  80bc74:	2449883a 	add	r4,r4,r17
  80bc78:	003f3406 	br	80b94c <__alt_mem_onchip_mem+0xff78b94c>
  80bc7c:	b5bfff84 	addi	r22,r22,-2
  80bc80:	1445883a 	add	r2,r2,r17
  80bc84:	003edb06 	br	80b7f4 <__alt_mem_onchip_mem+0xff78b7f4>

0080bc88 <__umoddi3>:
  80bc88:	defff404 	addi	sp,sp,-48
  80bc8c:	df000a15 	stw	fp,40(sp)
  80bc90:	dc400315 	stw	r17,12(sp)
  80bc94:	dc000215 	stw	r16,8(sp)
  80bc98:	dfc00b15 	stw	ra,44(sp)
  80bc9c:	ddc00915 	stw	r23,36(sp)
  80bca0:	dd800815 	stw	r22,32(sp)
  80bca4:	dd400715 	stw	r21,28(sp)
  80bca8:	dd000615 	stw	r20,24(sp)
  80bcac:	dcc00515 	stw	r19,20(sp)
  80bcb0:	dc800415 	stw	r18,16(sp)
  80bcb4:	2021883a 	mov	r16,r4
  80bcb8:	2823883a 	mov	r17,r5
  80bcbc:	2839883a 	mov	fp,r5
  80bcc0:	38003c1e 	bne	r7,zero,80bdb4 <__umoddi3+0x12c>
  80bcc4:	3027883a 	mov	r19,r6
  80bcc8:	2029883a 	mov	r20,r4
  80bccc:	2980512e 	bgeu	r5,r6,80be14 <__umoddi3+0x18c>
  80bcd0:	00bfffd4 	movui	r2,65535
  80bcd4:	11809a36 	bltu	r2,r6,80bf40 <__umoddi3+0x2b8>
  80bcd8:	01003fc4 	movi	r4,255
  80bcdc:	2189803a 	cmpltu	r4,r4,r6
  80bce0:	200890fa 	slli	r4,r4,3
  80bce4:	3104d83a 	srl	r2,r6,r4
  80bce8:	00c02074 	movhi	r3,129
  80bcec:	18cca404 	addi	r3,r3,12944
  80bcf0:	1885883a 	add	r2,r3,r2
  80bcf4:	10c00003 	ldbu	r3,0(r2)
  80bcf8:	00800804 	movi	r2,32
  80bcfc:	1909883a 	add	r4,r3,r4
  80bd00:	1125c83a 	sub	r18,r2,r4
  80bd04:	90000526 	beq	r18,zero,80bd1c <__umoddi3+0x94>
  80bd08:	8ca2983a 	sll	r17,r17,r18
  80bd0c:	8108d83a 	srl	r4,r16,r4
  80bd10:	34a6983a 	sll	r19,r6,r18
  80bd14:	84a8983a 	sll	r20,r16,r18
  80bd18:	2478b03a 	or	fp,r4,r17
  80bd1c:	982ed43a 	srli	r23,r19,16
  80bd20:	e009883a 	mov	r4,fp
  80bd24:	9dbfffcc 	andi	r22,r19,65535
  80bd28:	b80b883a 	mov	r5,r23
  80bd2c:	080c31c0 	call	80c31c <__umodsi3>
  80bd30:	e009883a 	mov	r4,fp
  80bd34:	b80b883a 	mov	r5,r23
  80bd38:	102b883a 	mov	r21,r2
  80bd3c:	080c2b80 	call	80c2b8 <__udivsi3>
  80bd40:	a806943a 	slli	r3,r21,16
  80bd44:	a008d43a 	srli	r4,r20,16
  80bd48:	b085383a 	mul	r2,r22,r2
  80bd4c:	20c8b03a 	or	r4,r4,r3
  80bd50:	2080032e 	bgeu	r4,r2,80bd60 <__umoddi3+0xd8>
  80bd54:	24c9883a 	add	r4,r4,r19
  80bd58:	24c00136 	bltu	r4,r19,80bd60 <__umoddi3+0xd8>
  80bd5c:	20811036 	bltu	r4,r2,80c1a0 <__umoddi3+0x518>
  80bd60:	20abc83a 	sub	r21,r4,r2
  80bd64:	b80b883a 	mov	r5,r23
  80bd68:	a809883a 	mov	r4,r21
  80bd6c:	080c31c0 	call	80c31c <__umodsi3>
  80bd70:	1023883a 	mov	r17,r2
  80bd74:	b80b883a 	mov	r5,r23
  80bd78:	a809883a 	mov	r4,r21
  80bd7c:	080c2b80 	call	80c2b8 <__udivsi3>
  80bd80:	8822943a 	slli	r17,r17,16
  80bd84:	b085383a 	mul	r2,r22,r2
  80bd88:	a0ffffcc 	andi	r3,r20,65535
  80bd8c:	1c46b03a 	or	r3,r3,r17
  80bd90:	1880042e 	bgeu	r3,r2,80bda4 <__umoddi3+0x11c>
  80bd94:	1cc7883a 	add	r3,r3,r19
  80bd98:	1cc00236 	bltu	r3,r19,80bda4 <__umoddi3+0x11c>
  80bd9c:	1880012e 	bgeu	r3,r2,80bda4 <__umoddi3+0x11c>
  80bda0:	1cc7883a 	add	r3,r3,r19
  80bda4:	1885c83a 	sub	r2,r3,r2
  80bda8:	1484d83a 	srl	r2,r2,r18
  80bdac:	0007883a 	mov	r3,zero
  80bdb0:	00004f06 	br	80bef0 <__umoddi3+0x268>
  80bdb4:	29c04c36 	bltu	r5,r7,80bee8 <__umoddi3+0x260>
  80bdb8:	00bfffd4 	movui	r2,65535
  80bdbc:	11c0582e 	bgeu	r2,r7,80bf20 <__umoddi3+0x298>
  80bdc0:	00804034 	movhi	r2,256
  80bdc4:	10bfffc4 	addi	r2,r2,-1
  80bdc8:	11c0e736 	bltu	r2,r7,80c168 <__umoddi3+0x4e0>
  80bdcc:	01000404 	movi	r4,16
  80bdd0:	3904d83a 	srl	r2,r7,r4
  80bdd4:	00c02074 	movhi	r3,129
  80bdd8:	18cca404 	addi	r3,r3,12944
  80bddc:	1885883a 	add	r2,r3,r2
  80bde0:	14c00003 	ldbu	r19,0(r2)
  80bde4:	00c00804 	movi	r3,32
  80bde8:	9927883a 	add	r19,r19,r4
  80bdec:	1ce9c83a 	sub	r20,r3,r19
  80bdf0:	a000581e 	bne	r20,zero,80bf54 <__umoddi3+0x2cc>
  80bdf4:	3c400136 	bltu	r7,r17,80bdfc <__umoddi3+0x174>
  80bdf8:	8180eb36 	bltu	r16,r6,80c1a8 <__umoddi3+0x520>
  80bdfc:	8185c83a 	sub	r2,r16,r6
  80be00:	89e3c83a 	sub	r17,r17,r7
  80be04:	8089803a 	cmpltu	r4,r16,r2
  80be08:	8939c83a 	sub	fp,r17,r4
  80be0c:	e007883a 	mov	r3,fp
  80be10:	00003706 	br	80bef0 <__umoddi3+0x268>
  80be14:	3000041e 	bne	r6,zero,80be28 <__umoddi3+0x1a0>
  80be18:	000b883a 	mov	r5,zero
  80be1c:	01000044 	movi	r4,1
  80be20:	080c2b80 	call	80c2b8 <__udivsi3>
  80be24:	1027883a 	mov	r19,r2
  80be28:	00bfffd4 	movui	r2,65535
  80be2c:	14c0402e 	bgeu	r2,r19,80bf30 <__umoddi3+0x2a8>
  80be30:	00804034 	movhi	r2,256
  80be34:	10bfffc4 	addi	r2,r2,-1
  80be38:	14c0cd36 	bltu	r2,r19,80c170 <__umoddi3+0x4e8>
  80be3c:	00800404 	movi	r2,16
  80be40:	9886d83a 	srl	r3,r19,r2
  80be44:	01002074 	movhi	r4,129
  80be48:	210ca404 	addi	r4,r4,12944
  80be4c:	20c7883a 	add	r3,r4,r3
  80be50:	18c00003 	ldbu	r3,0(r3)
  80be54:	1887883a 	add	r3,r3,r2
  80be58:	00800804 	movi	r2,32
  80be5c:	10e5c83a 	sub	r18,r2,r3
  80be60:	9000901e 	bne	r18,zero,80c0a4 <__umoddi3+0x41c>
  80be64:	982cd43a 	srli	r22,r19,16
  80be68:	8ce3c83a 	sub	r17,r17,r19
  80be6c:	9d7fffcc 	andi	r21,r19,65535
  80be70:	b00b883a 	mov	r5,r22
  80be74:	8809883a 	mov	r4,r17
  80be78:	080c31c0 	call	80c31c <__umodsi3>
  80be7c:	8809883a 	mov	r4,r17
  80be80:	b00b883a 	mov	r5,r22
  80be84:	1021883a 	mov	r16,r2
  80be88:	080c2b80 	call	80c2b8 <__udivsi3>
  80be8c:	8006943a 	slli	r3,r16,16
  80be90:	a008d43a 	srli	r4,r20,16
  80be94:	1545383a 	mul	r2,r2,r21
  80be98:	20c8b03a 	or	r4,r4,r3
  80be9c:	2080042e 	bgeu	r4,r2,80beb0 <__umoddi3+0x228>
  80bea0:	24c9883a 	add	r4,r4,r19
  80bea4:	24c00236 	bltu	r4,r19,80beb0 <__umoddi3+0x228>
  80bea8:	2080012e 	bgeu	r4,r2,80beb0 <__umoddi3+0x228>
  80beac:	24c9883a 	add	r4,r4,r19
  80beb0:	20a1c83a 	sub	r16,r4,r2
  80beb4:	b00b883a 	mov	r5,r22
  80beb8:	8009883a 	mov	r4,r16
  80bebc:	080c31c0 	call	80c31c <__umodsi3>
  80bec0:	1023883a 	mov	r17,r2
  80bec4:	b00b883a 	mov	r5,r22
  80bec8:	8009883a 	mov	r4,r16
  80becc:	080c2b80 	call	80c2b8 <__udivsi3>
  80bed0:	8822943a 	slli	r17,r17,16
  80bed4:	1545383a 	mul	r2,r2,r21
  80bed8:	a53fffcc 	andi	r20,r20,65535
  80bedc:	a446b03a 	or	r3,r20,r17
  80bee0:	18bfb02e 	bgeu	r3,r2,80bda4 <__alt_mem_onchip_mem+0xff78bda4>
  80bee4:	003fab06 	br	80bd94 <__alt_mem_onchip_mem+0xff78bd94>
  80bee8:	2005883a 	mov	r2,r4
  80beec:	2807883a 	mov	r3,r5
  80bef0:	dfc00b17 	ldw	ra,44(sp)
  80bef4:	df000a17 	ldw	fp,40(sp)
  80bef8:	ddc00917 	ldw	r23,36(sp)
  80befc:	dd800817 	ldw	r22,32(sp)
  80bf00:	dd400717 	ldw	r21,28(sp)
  80bf04:	dd000617 	ldw	r20,24(sp)
  80bf08:	dcc00517 	ldw	r19,20(sp)
  80bf0c:	dc800417 	ldw	r18,16(sp)
  80bf10:	dc400317 	ldw	r17,12(sp)
  80bf14:	dc000217 	ldw	r16,8(sp)
  80bf18:	dec00c04 	addi	sp,sp,48
  80bf1c:	f800283a 	ret
  80bf20:	04c03fc4 	movi	r19,255
  80bf24:	99c9803a 	cmpltu	r4,r19,r7
  80bf28:	200890fa 	slli	r4,r4,3
  80bf2c:	003fa806 	br	80bdd0 <__alt_mem_onchip_mem+0xff78bdd0>
  80bf30:	00803fc4 	movi	r2,255
  80bf34:	14c5803a 	cmpltu	r2,r2,r19
  80bf38:	100490fa 	slli	r2,r2,3
  80bf3c:	003fc006 	br	80be40 <__alt_mem_onchip_mem+0xff78be40>
  80bf40:	00804034 	movhi	r2,256
  80bf44:	10bfffc4 	addi	r2,r2,-1
  80bf48:	11808b36 	bltu	r2,r6,80c178 <__umoddi3+0x4f0>
  80bf4c:	01000404 	movi	r4,16
  80bf50:	003f6406 	br	80bce4 <__alt_mem_onchip_mem+0xff78bce4>
  80bf54:	34c4d83a 	srl	r2,r6,r19
  80bf58:	3d0e983a 	sll	r7,r7,r20
  80bf5c:	8cf8d83a 	srl	fp,r17,r19
  80bf60:	8d10983a 	sll	r8,r17,r20
  80bf64:	38aab03a 	or	r21,r7,r2
  80bf68:	a82cd43a 	srli	r22,r21,16
  80bf6c:	84e2d83a 	srl	r17,r16,r19
  80bf70:	e009883a 	mov	r4,fp
  80bf74:	b00b883a 	mov	r5,r22
  80bf78:	8a22b03a 	or	r17,r17,r8
  80bf7c:	3524983a 	sll	r18,r6,r20
  80bf80:	080c31c0 	call	80c31c <__umodsi3>
  80bf84:	e009883a 	mov	r4,fp
  80bf88:	b00b883a 	mov	r5,r22
  80bf8c:	102f883a 	mov	r23,r2
  80bf90:	080c2b80 	call	80c2b8 <__udivsi3>
  80bf94:	100d883a 	mov	r6,r2
  80bf98:	b808943a 	slli	r4,r23,16
  80bf9c:	aa3fffcc 	andi	r8,r21,65535
  80bfa0:	8804d43a 	srli	r2,r17,16
  80bfa4:	41af383a 	mul	r23,r8,r6
  80bfa8:	8520983a 	sll	r16,r16,r20
  80bfac:	1104b03a 	or	r2,r2,r4
  80bfb0:	15c0042e 	bgeu	r2,r23,80bfc4 <__umoddi3+0x33c>
  80bfb4:	1545883a 	add	r2,r2,r21
  80bfb8:	30ffffc4 	addi	r3,r6,-1
  80bfbc:	1540742e 	bgeu	r2,r21,80c190 <__umoddi3+0x508>
  80bfc0:	180d883a 	mov	r6,r3
  80bfc4:	15efc83a 	sub	r23,r2,r23
  80bfc8:	b00b883a 	mov	r5,r22
  80bfcc:	b809883a 	mov	r4,r23
  80bfd0:	d9800115 	stw	r6,4(sp)
  80bfd4:	da000015 	stw	r8,0(sp)
  80bfd8:	080c31c0 	call	80c31c <__umodsi3>
  80bfdc:	b00b883a 	mov	r5,r22
  80bfe0:	b809883a 	mov	r4,r23
  80bfe4:	1039883a 	mov	fp,r2
  80bfe8:	080c2b80 	call	80c2b8 <__udivsi3>
  80bfec:	da000017 	ldw	r8,0(sp)
  80bff0:	e038943a 	slli	fp,fp,16
  80bff4:	100b883a 	mov	r5,r2
  80bff8:	4089383a 	mul	r4,r8,r2
  80bffc:	8a3fffcc 	andi	r8,r17,65535
  80c000:	4710b03a 	or	r8,r8,fp
  80c004:	d9800117 	ldw	r6,4(sp)
  80c008:	4100042e 	bgeu	r8,r4,80c01c <__umoddi3+0x394>
  80c00c:	4551883a 	add	r8,r8,r21
  80c010:	10bfffc4 	addi	r2,r2,-1
  80c014:	45405a2e 	bgeu	r8,r21,80c180 <__umoddi3+0x4f8>
  80c018:	100b883a 	mov	r5,r2
  80c01c:	300c943a 	slli	r6,r6,16
  80c020:	91ffffcc 	andi	r7,r18,65535
  80c024:	9004d43a 	srli	r2,r18,16
  80c028:	314cb03a 	or	r6,r6,r5
  80c02c:	317fffcc 	andi	r5,r6,65535
  80c030:	300cd43a 	srli	r6,r6,16
  80c034:	29d3383a 	mul	r9,r5,r7
  80c038:	288b383a 	mul	r5,r5,r2
  80c03c:	31cf383a 	mul	r7,r6,r7
  80c040:	4806d43a 	srli	r3,r9,16
  80c044:	4111c83a 	sub	r8,r8,r4
  80c048:	29cb883a 	add	r5,r5,r7
  80c04c:	194b883a 	add	r5,r3,r5
  80c050:	3085383a 	mul	r2,r6,r2
  80c054:	29c0022e 	bgeu	r5,r7,80c060 <__umoddi3+0x3d8>
  80c058:	00c00074 	movhi	r3,1
  80c05c:	10c5883a 	add	r2,r2,r3
  80c060:	2808d43a 	srli	r4,r5,16
  80c064:	280a943a 	slli	r5,r5,16
  80c068:	4a7fffcc 	andi	r9,r9,65535
  80c06c:	2085883a 	add	r2,r4,r2
  80c070:	2a4b883a 	add	r5,r5,r9
  80c074:	40803636 	bltu	r8,r2,80c150 <__umoddi3+0x4c8>
  80c078:	40804d26 	beq	r8,r2,80c1b0 <__umoddi3+0x528>
  80c07c:	4089c83a 	sub	r4,r8,r2
  80c080:	280f883a 	mov	r7,r5
  80c084:	81cfc83a 	sub	r7,r16,r7
  80c088:	81c7803a 	cmpltu	r3,r16,r7
  80c08c:	20c7c83a 	sub	r3,r4,r3
  80c090:	1cc4983a 	sll	r2,r3,r19
  80c094:	3d0ed83a 	srl	r7,r7,r20
  80c098:	1d06d83a 	srl	r3,r3,r20
  80c09c:	11c4b03a 	or	r2,r2,r7
  80c0a0:	003f9306 	br	80bef0 <__alt_mem_onchip_mem+0xff78bef0>
  80c0a4:	9ca6983a 	sll	r19,r19,r18
  80c0a8:	88e8d83a 	srl	r20,r17,r3
  80c0ac:	80c4d83a 	srl	r2,r16,r3
  80c0b0:	982cd43a 	srli	r22,r19,16
  80c0b4:	8ca2983a 	sll	r17,r17,r18
  80c0b8:	a009883a 	mov	r4,r20
  80c0bc:	b00b883a 	mov	r5,r22
  80c0c0:	1478b03a 	or	fp,r2,r17
  80c0c4:	080c31c0 	call	80c31c <__umodsi3>
  80c0c8:	a009883a 	mov	r4,r20
  80c0cc:	b00b883a 	mov	r5,r22
  80c0d0:	1023883a 	mov	r17,r2
  80c0d4:	080c2b80 	call	80c2b8 <__udivsi3>
  80c0d8:	9d7fffcc 	andi	r21,r19,65535
  80c0dc:	880a943a 	slli	r5,r17,16
  80c0e0:	e008d43a 	srli	r4,fp,16
  80c0e4:	a885383a 	mul	r2,r21,r2
  80c0e8:	84a8983a 	sll	r20,r16,r18
  80c0ec:	2148b03a 	or	r4,r4,r5
  80c0f0:	2080042e 	bgeu	r4,r2,80c104 <__umoddi3+0x47c>
  80c0f4:	24c9883a 	add	r4,r4,r19
  80c0f8:	24c00236 	bltu	r4,r19,80c104 <__umoddi3+0x47c>
  80c0fc:	2080012e 	bgeu	r4,r2,80c104 <__umoddi3+0x47c>
  80c100:	24c9883a 	add	r4,r4,r19
  80c104:	20a3c83a 	sub	r17,r4,r2
  80c108:	b00b883a 	mov	r5,r22
  80c10c:	8809883a 	mov	r4,r17
  80c110:	080c31c0 	call	80c31c <__umodsi3>
  80c114:	102f883a 	mov	r23,r2
  80c118:	8809883a 	mov	r4,r17
  80c11c:	b00b883a 	mov	r5,r22
  80c120:	080c2b80 	call	80c2b8 <__udivsi3>
  80c124:	b82e943a 	slli	r23,r23,16
  80c128:	a885383a 	mul	r2,r21,r2
  80c12c:	e13fffcc 	andi	r4,fp,65535
  80c130:	25c8b03a 	or	r4,r4,r23
  80c134:	2080042e 	bgeu	r4,r2,80c148 <__umoddi3+0x4c0>
  80c138:	24c9883a 	add	r4,r4,r19
  80c13c:	24c00236 	bltu	r4,r19,80c148 <__umoddi3+0x4c0>
  80c140:	2080012e 	bgeu	r4,r2,80c148 <__umoddi3+0x4c0>
  80c144:	24c9883a 	add	r4,r4,r19
  80c148:	20a3c83a 	sub	r17,r4,r2
  80c14c:	003f4806 	br	80be70 <__alt_mem_onchip_mem+0xff78be70>
  80c150:	2c8fc83a 	sub	r7,r5,r18
  80c154:	1545c83a 	sub	r2,r2,r21
  80c158:	29cb803a 	cmpltu	r5,r5,r7
  80c15c:	1145c83a 	sub	r2,r2,r5
  80c160:	4089c83a 	sub	r4,r8,r2
  80c164:	003fc706 	br	80c084 <__alt_mem_onchip_mem+0xff78c084>
  80c168:	01000604 	movi	r4,24
  80c16c:	003f1806 	br	80bdd0 <__alt_mem_onchip_mem+0xff78bdd0>
  80c170:	00800604 	movi	r2,24
  80c174:	003f3206 	br	80be40 <__alt_mem_onchip_mem+0xff78be40>
  80c178:	01000604 	movi	r4,24
  80c17c:	003ed906 	br	80bce4 <__alt_mem_onchip_mem+0xff78bce4>
  80c180:	413fa52e 	bgeu	r8,r4,80c018 <__alt_mem_onchip_mem+0xff78c018>
  80c184:	297fff84 	addi	r5,r5,-2
  80c188:	4551883a 	add	r8,r8,r21
  80c18c:	003fa306 	br	80c01c <__alt_mem_onchip_mem+0xff78c01c>
  80c190:	15ff8b2e 	bgeu	r2,r23,80bfc0 <__alt_mem_onchip_mem+0xff78bfc0>
  80c194:	31bfff84 	addi	r6,r6,-2
  80c198:	1545883a 	add	r2,r2,r21
  80c19c:	003f8906 	br	80bfc4 <__alt_mem_onchip_mem+0xff78bfc4>
  80c1a0:	24c9883a 	add	r4,r4,r19
  80c1a4:	003eee06 	br	80bd60 <__alt_mem_onchip_mem+0xff78bd60>
  80c1a8:	8005883a 	mov	r2,r16
  80c1ac:	003f1706 	br	80be0c <__alt_mem_onchip_mem+0xff78be0c>
  80c1b0:	817fe736 	bltu	r16,r5,80c150 <__alt_mem_onchip_mem+0xff78c150>
  80c1b4:	280f883a 	mov	r7,r5
  80c1b8:	0009883a 	mov	r4,zero
  80c1bc:	003fb106 	br	80c084 <__alt_mem_onchip_mem+0xff78c084>

0080c1c0 <__divsi3>:
  80c1c0:	20001b16 	blt	r4,zero,80c230 <__divsi3+0x70>
  80c1c4:	000f883a 	mov	r7,zero
  80c1c8:	28001616 	blt	r5,zero,80c224 <__divsi3+0x64>
  80c1cc:	200d883a 	mov	r6,r4
  80c1d0:	29001a2e 	bgeu	r5,r4,80c23c <__divsi3+0x7c>
  80c1d4:	00800804 	movi	r2,32
  80c1d8:	00c00044 	movi	r3,1
  80c1dc:	00000106 	br	80c1e4 <__divsi3+0x24>
  80c1e0:	10000d26 	beq	r2,zero,80c218 <__divsi3+0x58>
  80c1e4:	294b883a 	add	r5,r5,r5
  80c1e8:	10bfffc4 	addi	r2,r2,-1
  80c1ec:	18c7883a 	add	r3,r3,r3
  80c1f0:	293ffb36 	bltu	r5,r4,80c1e0 <__alt_mem_onchip_mem+0xff78c1e0>
  80c1f4:	0005883a 	mov	r2,zero
  80c1f8:	18000726 	beq	r3,zero,80c218 <__divsi3+0x58>
  80c1fc:	0005883a 	mov	r2,zero
  80c200:	31400236 	bltu	r6,r5,80c20c <__divsi3+0x4c>
  80c204:	314dc83a 	sub	r6,r6,r5
  80c208:	10c4b03a 	or	r2,r2,r3
  80c20c:	1806d07a 	srli	r3,r3,1
  80c210:	280ad07a 	srli	r5,r5,1
  80c214:	183ffa1e 	bne	r3,zero,80c200 <__alt_mem_onchip_mem+0xff78c200>
  80c218:	38000126 	beq	r7,zero,80c220 <__divsi3+0x60>
  80c21c:	0085c83a 	sub	r2,zero,r2
  80c220:	f800283a 	ret
  80c224:	014bc83a 	sub	r5,zero,r5
  80c228:	39c0005c 	xori	r7,r7,1
  80c22c:	003fe706 	br	80c1cc <__alt_mem_onchip_mem+0xff78c1cc>
  80c230:	0109c83a 	sub	r4,zero,r4
  80c234:	01c00044 	movi	r7,1
  80c238:	003fe306 	br	80c1c8 <__alt_mem_onchip_mem+0xff78c1c8>
  80c23c:	00c00044 	movi	r3,1
  80c240:	003fee06 	br	80c1fc <__alt_mem_onchip_mem+0xff78c1fc>

0080c244 <__modsi3>:
  80c244:	20001716 	blt	r4,zero,80c2a4 <__modsi3+0x60>
  80c248:	000f883a 	mov	r7,zero
  80c24c:	2005883a 	mov	r2,r4
  80c250:	28001216 	blt	r5,zero,80c29c <__modsi3+0x58>
  80c254:	2900162e 	bgeu	r5,r4,80c2b0 <__modsi3+0x6c>
  80c258:	01800804 	movi	r6,32
  80c25c:	00c00044 	movi	r3,1
  80c260:	00000106 	br	80c268 <__modsi3+0x24>
  80c264:	30000a26 	beq	r6,zero,80c290 <__modsi3+0x4c>
  80c268:	294b883a 	add	r5,r5,r5
  80c26c:	31bfffc4 	addi	r6,r6,-1
  80c270:	18c7883a 	add	r3,r3,r3
  80c274:	293ffb36 	bltu	r5,r4,80c264 <__alt_mem_onchip_mem+0xff78c264>
  80c278:	18000526 	beq	r3,zero,80c290 <__modsi3+0x4c>
  80c27c:	1806d07a 	srli	r3,r3,1
  80c280:	11400136 	bltu	r2,r5,80c288 <__modsi3+0x44>
  80c284:	1145c83a 	sub	r2,r2,r5
  80c288:	280ad07a 	srli	r5,r5,1
  80c28c:	183ffb1e 	bne	r3,zero,80c27c <__alt_mem_onchip_mem+0xff78c27c>
  80c290:	38000126 	beq	r7,zero,80c298 <__modsi3+0x54>
  80c294:	0085c83a 	sub	r2,zero,r2
  80c298:	f800283a 	ret
  80c29c:	014bc83a 	sub	r5,zero,r5
  80c2a0:	003fec06 	br	80c254 <__alt_mem_onchip_mem+0xff78c254>
  80c2a4:	0109c83a 	sub	r4,zero,r4
  80c2a8:	01c00044 	movi	r7,1
  80c2ac:	003fe706 	br	80c24c <__alt_mem_onchip_mem+0xff78c24c>
  80c2b0:	00c00044 	movi	r3,1
  80c2b4:	003ff106 	br	80c27c <__alt_mem_onchip_mem+0xff78c27c>

0080c2b8 <__udivsi3>:
  80c2b8:	200d883a 	mov	r6,r4
  80c2bc:	2900152e 	bgeu	r5,r4,80c314 <__udivsi3+0x5c>
  80c2c0:	28001416 	blt	r5,zero,80c314 <__udivsi3+0x5c>
  80c2c4:	00800804 	movi	r2,32
  80c2c8:	00c00044 	movi	r3,1
  80c2cc:	00000206 	br	80c2d8 <__udivsi3+0x20>
  80c2d0:	10000e26 	beq	r2,zero,80c30c <__udivsi3+0x54>
  80c2d4:	28000516 	blt	r5,zero,80c2ec <__udivsi3+0x34>
  80c2d8:	294b883a 	add	r5,r5,r5
  80c2dc:	10bfffc4 	addi	r2,r2,-1
  80c2e0:	18c7883a 	add	r3,r3,r3
  80c2e4:	293ffa36 	bltu	r5,r4,80c2d0 <__alt_mem_onchip_mem+0xff78c2d0>
  80c2e8:	18000826 	beq	r3,zero,80c30c <__udivsi3+0x54>
  80c2ec:	0005883a 	mov	r2,zero
  80c2f0:	31400236 	bltu	r6,r5,80c2fc <__udivsi3+0x44>
  80c2f4:	314dc83a 	sub	r6,r6,r5
  80c2f8:	10c4b03a 	or	r2,r2,r3
  80c2fc:	1806d07a 	srli	r3,r3,1
  80c300:	280ad07a 	srli	r5,r5,1
  80c304:	183ffa1e 	bne	r3,zero,80c2f0 <__alt_mem_onchip_mem+0xff78c2f0>
  80c308:	f800283a 	ret
  80c30c:	0005883a 	mov	r2,zero
  80c310:	f800283a 	ret
  80c314:	00c00044 	movi	r3,1
  80c318:	003ff406 	br	80c2ec <__alt_mem_onchip_mem+0xff78c2ec>

0080c31c <__umodsi3>:
  80c31c:	2005883a 	mov	r2,r4
  80c320:	2900122e 	bgeu	r5,r4,80c36c <__umodsi3+0x50>
  80c324:	28001116 	blt	r5,zero,80c36c <__umodsi3+0x50>
  80c328:	01800804 	movi	r6,32
  80c32c:	00c00044 	movi	r3,1
  80c330:	00000206 	br	80c33c <__umodsi3+0x20>
  80c334:	30000c26 	beq	r6,zero,80c368 <__umodsi3+0x4c>
  80c338:	28000516 	blt	r5,zero,80c350 <__umodsi3+0x34>
  80c33c:	294b883a 	add	r5,r5,r5
  80c340:	31bfffc4 	addi	r6,r6,-1
  80c344:	18c7883a 	add	r3,r3,r3
  80c348:	293ffa36 	bltu	r5,r4,80c334 <__alt_mem_onchip_mem+0xff78c334>
  80c34c:	18000626 	beq	r3,zero,80c368 <__umodsi3+0x4c>
  80c350:	1806d07a 	srli	r3,r3,1
  80c354:	11400136 	bltu	r2,r5,80c35c <__umodsi3+0x40>
  80c358:	1145c83a 	sub	r2,r2,r5
  80c35c:	280ad07a 	srli	r5,r5,1
  80c360:	183ffb1e 	bne	r3,zero,80c350 <__alt_mem_onchip_mem+0xff78c350>
  80c364:	f800283a 	ret
  80c368:	f800283a 	ret
  80c36c:	00c00044 	movi	r3,1
  80c370:	003ff706 	br	80c350 <__alt_mem_onchip_mem+0xff78c350>

0080c374 <__adddf3>:
  80c374:	02c00434 	movhi	r11,16
  80c378:	5affffc4 	addi	r11,r11,-1
  80c37c:	2806d7fa 	srli	r3,r5,31
  80c380:	2ad4703a 	and	r10,r5,r11
  80c384:	3ad2703a 	and	r9,r7,r11
  80c388:	3804d53a 	srli	r2,r7,20
  80c38c:	3018d77a 	srli	r12,r6,29
  80c390:	280ad53a 	srli	r5,r5,20
  80c394:	501490fa 	slli	r10,r10,3
  80c398:	2010d77a 	srli	r8,r4,29
  80c39c:	481290fa 	slli	r9,r9,3
  80c3a0:	380ed7fa 	srli	r7,r7,31
  80c3a4:	defffb04 	addi	sp,sp,-20
  80c3a8:	dc800215 	stw	r18,8(sp)
  80c3ac:	dc400115 	stw	r17,4(sp)
  80c3b0:	dc000015 	stw	r16,0(sp)
  80c3b4:	dfc00415 	stw	ra,16(sp)
  80c3b8:	dcc00315 	stw	r19,12(sp)
  80c3bc:	1c803fcc 	andi	r18,r3,255
  80c3c0:	2c01ffcc 	andi	r16,r5,2047
  80c3c4:	5210b03a 	or	r8,r10,r8
  80c3c8:	202290fa 	slli	r17,r4,3
  80c3cc:	1081ffcc 	andi	r2,r2,2047
  80c3d0:	4b12b03a 	or	r9,r9,r12
  80c3d4:	300c90fa 	slli	r6,r6,3
  80c3d8:	91c07526 	beq	r18,r7,80c5b0 <__adddf3+0x23c>
  80c3dc:	8087c83a 	sub	r3,r16,r2
  80c3e0:	00c0ab0e 	bge	zero,r3,80c690 <__adddf3+0x31c>
  80c3e4:	10002a1e 	bne	r2,zero,80c490 <__adddf3+0x11c>
  80c3e8:	4984b03a 	or	r2,r9,r6
  80c3ec:	1000961e 	bne	r2,zero,80c648 <__adddf3+0x2d4>
  80c3f0:	888001cc 	andi	r2,r17,7
  80c3f4:	10000726 	beq	r2,zero,80c414 <__adddf3+0xa0>
  80c3f8:	888003cc 	andi	r2,r17,15
  80c3fc:	00c00104 	movi	r3,4
  80c400:	10c00426 	beq	r2,r3,80c414 <__adddf3+0xa0>
  80c404:	88c7883a 	add	r3,r17,r3
  80c408:	1c63803a 	cmpltu	r17,r3,r17
  80c40c:	4451883a 	add	r8,r8,r17
  80c410:	1823883a 	mov	r17,r3
  80c414:	4080202c 	andhi	r2,r8,128
  80c418:	10005926 	beq	r2,zero,80c580 <__adddf3+0x20c>
  80c41c:	84000044 	addi	r16,r16,1
  80c420:	0081ffc4 	movi	r2,2047
  80c424:	8080ba26 	beq	r16,r2,80c710 <__adddf3+0x39c>
  80c428:	00bfe034 	movhi	r2,65408
  80c42c:	10bfffc4 	addi	r2,r2,-1
  80c430:	4090703a 	and	r8,r8,r2
  80c434:	4004977a 	slli	r2,r8,29
  80c438:	4010927a 	slli	r8,r8,9
  80c43c:	8822d0fa 	srli	r17,r17,3
  80c440:	8401ffcc 	andi	r16,r16,2047
  80c444:	4010d33a 	srli	r8,r8,12
  80c448:	9007883a 	mov	r3,r18
  80c44c:	1444b03a 	or	r2,r2,r17
  80c450:	8401ffcc 	andi	r16,r16,2047
  80c454:	8020953a 	slli	r16,r16,20
  80c458:	18c03fcc 	andi	r3,r3,255
  80c45c:	01000434 	movhi	r4,16
  80c460:	213fffc4 	addi	r4,r4,-1
  80c464:	180697fa 	slli	r3,r3,31
  80c468:	4110703a 	and	r8,r8,r4
  80c46c:	4410b03a 	or	r8,r8,r16
  80c470:	40c6b03a 	or	r3,r8,r3
  80c474:	dfc00417 	ldw	ra,16(sp)
  80c478:	dcc00317 	ldw	r19,12(sp)
  80c47c:	dc800217 	ldw	r18,8(sp)
  80c480:	dc400117 	ldw	r17,4(sp)
  80c484:	dc000017 	ldw	r16,0(sp)
  80c488:	dec00504 	addi	sp,sp,20
  80c48c:	f800283a 	ret
  80c490:	0081ffc4 	movi	r2,2047
  80c494:	80bfd626 	beq	r16,r2,80c3f0 <__alt_mem_onchip_mem+0xff78c3f0>
  80c498:	4a402034 	orhi	r9,r9,128
  80c49c:	00800e04 	movi	r2,56
  80c4a0:	10c09f16 	blt	r2,r3,80c720 <__adddf3+0x3ac>
  80c4a4:	008007c4 	movi	r2,31
  80c4a8:	10c0c216 	blt	r2,r3,80c7b4 <__adddf3+0x440>
  80c4ac:	00800804 	movi	r2,32
  80c4b0:	10c5c83a 	sub	r2,r2,r3
  80c4b4:	488a983a 	sll	r5,r9,r2
  80c4b8:	30c8d83a 	srl	r4,r6,r3
  80c4bc:	3084983a 	sll	r2,r6,r2
  80c4c0:	48c6d83a 	srl	r3,r9,r3
  80c4c4:	290cb03a 	or	r6,r5,r4
  80c4c8:	1004c03a 	cmpne	r2,r2,zero
  80c4cc:	308cb03a 	or	r6,r6,r2
  80c4d0:	898dc83a 	sub	r6,r17,r6
  80c4d4:	89a3803a 	cmpltu	r17,r17,r6
  80c4d8:	40d1c83a 	sub	r8,r8,r3
  80c4dc:	4451c83a 	sub	r8,r8,r17
  80c4e0:	3023883a 	mov	r17,r6
  80c4e4:	4080202c 	andhi	r2,r8,128
  80c4e8:	10002326 	beq	r2,zero,80c578 <__adddf3+0x204>
  80c4ec:	04c02034 	movhi	r19,128
  80c4f0:	9cffffc4 	addi	r19,r19,-1
  80c4f4:	44e6703a 	and	r19,r8,r19
  80c4f8:	98007626 	beq	r19,zero,80c6d4 <__adddf3+0x360>
  80c4fc:	9809883a 	mov	r4,r19
  80c500:	080e9780 	call	80e978 <__clzsi2>
  80c504:	10fffe04 	addi	r3,r2,-8
  80c508:	010007c4 	movi	r4,31
  80c50c:	20c07716 	blt	r4,r3,80c6ec <__adddf3+0x378>
  80c510:	00800804 	movi	r2,32
  80c514:	10c5c83a 	sub	r2,r2,r3
  80c518:	8884d83a 	srl	r2,r17,r2
  80c51c:	98d0983a 	sll	r8,r19,r3
  80c520:	88e2983a 	sll	r17,r17,r3
  80c524:	1204b03a 	or	r2,r2,r8
  80c528:	1c007416 	blt	r3,r16,80c6fc <__adddf3+0x388>
  80c52c:	1c21c83a 	sub	r16,r3,r16
  80c530:	82000044 	addi	r8,r16,1
  80c534:	00c007c4 	movi	r3,31
  80c538:	1a009116 	blt	r3,r8,80c780 <__adddf3+0x40c>
  80c53c:	00c00804 	movi	r3,32
  80c540:	1a07c83a 	sub	r3,r3,r8
  80c544:	8a08d83a 	srl	r4,r17,r8
  80c548:	88e2983a 	sll	r17,r17,r3
  80c54c:	10c6983a 	sll	r3,r2,r3
  80c550:	1210d83a 	srl	r8,r2,r8
  80c554:	8804c03a 	cmpne	r2,r17,zero
  80c558:	1906b03a 	or	r3,r3,r4
  80c55c:	18a2b03a 	or	r17,r3,r2
  80c560:	0021883a 	mov	r16,zero
  80c564:	003fa206 	br	80c3f0 <__alt_mem_onchip_mem+0xff78c3f0>
  80c568:	1890b03a 	or	r8,r3,r2
  80c56c:	40017d26 	beq	r8,zero,80cb64 <__adddf3+0x7f0>
  80c570:	1011883a 	mov	r8,r2
  80c574:	1823883a 	mov	r17,r3
  80c578:	888001cc 	andi	r2,r17,7
  80c57c:	103f9e1e 	bne	r2,zero,80c3f8 <__alt_mem_onchip_mem+0xff78c3f8>
  80c580:	4004977a 	slli	r2,r8,29
  80c584:	8822d0fa 	srli	r17,r17,3
  80c588:	4010d0fa 	srli	r8,r8,3
  80c58c:	9007883a 	mov	r3,r18
  80c590:	1444b03a 	or	r2,r2,r17
  80c594:	0101ffc4 	movi	r4,2047
  80c598:	81002426 	beq	r16,r4,80c62c <__adddf3+0x2b8>
  80c59c:	8120703a 	and	r16,r16,r4
  80c5a0:	01000434 	movhi	r4,16
  80c5a4:	213fffc4 	addi	r4,r4,-1
  80c5a8:	4110703a 	and	r8,r8,r4
  80c5ac:	003fa806 	br	80c450 <__alt_mem_onchip_mem+0xff78c450>
  80c5b0:	8089c83a 	sub	r4,r16,r2
  80c5b4:	01005e0e 	bge	zero,r4,80c730 <__adddf3+0x3bc>
  80c5b8:	10002b26 	beq	r2,zero,80c668 <__adddf3+0x2f4>
  80c5bc:	0081ffc4 	movi	r2,2047
  80c5c0:	80bf8b26 	beq	r16,r2,80c3f0 <__alt_mem_onchip_mem+0xff78c3f0>
  80c5c4:	4a402034 	orhi	r9,r9,128
  80c5c8:	00800e04 	movi	r2,56
  80c5cc:	1100a40e 	bge	r2,r4,80c860 <__adddf3+0x4ec>
  80c5d0:	498cb03a 	or	r6,r9,r6
  80c5d4:	300ac03a 	cmpne	r5,r6,zero
  80c5d8:	0013883a 	mov	r9,zero
  80c5dc:	2c4b883a 	add	r5,r5,r17
  80c5e0:	2c63803a 	cmpltu	r17,r5,r17
  80c5e4:	4a11883a 	add	r8,r9,r8
  80c5e8:	8a11883a 	add	r8,r17,r8
  80c5ec:	2823883a 	mov	r17,r5
  80c5f0:	4080202c 	andhi	r2,r8,128
  80c5f4:	103fe026 	beq	r2,zero,80c578 <__alt_mem_onchip_mem+0xff78c578>
  80c5f8:	84000044 	addi	r16,r16,1
  80c5fc:	0081ffc4 	movi	r2,2047
  80c600:	8080d226 	beq	r16,r2,80c94c <__adddf3+0x5d8>
  80c604:	00bfe034 	movhi	r2,65408
  80c608:	10bfffc4 	addi	r2,r2,-1
  80c60c:	4090703a 	and	r8,r8,r2
  80c610:	880ad07a 	srli	r5,r17,1
  80c614:	400897fa 	slli	r4,r8,31
  80c618:	88c0004c 	andi	r3,r17,1
  80c61c:	28e2b03a 	or	r17,r5,r3
  80c620:	4010d07a 	srli	r8,r8,1
  80c624:	2462b03a 	or	r17,r4,r17
  80c628:	003f7106 	br	80c3f0 <__alt_mem_onchip_mem+0xff78c3f0>
  80c62c:	4088b03a 	or	r4,r8,r2
  80c630:	20014526 	beq	r4,zero,80cb48 <__adddf3+0x7d4>
  80c634:	01000434 	movhi	r4,16
  80c638:	42000234 	orhi	r8,r8,8
  80c63c:	213fffc4 	addi	r4,r4,-1
  80c640:	4110703a 	and	r8,r8,r4
  80c644:	003f8206 	br	80c450 <__alt_mem_onchip_mem+0xff78c450>
  80c648:	18ffffc4 	addi	r3,r3,-1
  80c64c:	1800491e 	bne	r3,zero,80c774 <__adddf3+0x400>
  80c650:	898bc83a 	sub	r5,r17,r6
  80c654:	8963803a 	cmpltu	r17,r17,r5
  80c658:	4251c83a 	sub	r8,r8,r9
  80c65c:	4451c83a 	sub	r8,r8,r17
  80c660:	2823883a 	mov	r17,r5
  80c664:	003f9f06 	br	80c4e4 <__alt_mem_onchip_mem+0xff78c4e4>
  80c668:	4984b03a 	or	r2,r9,r6
  80c66c:	103f6026 	beq	r2,zero,80c3f0 <__alt_mem_onchip_mem+0xff78c3f0>
  80c670:	213fffc4 	addi	r4,r4,-1
  80c674:	2000931e 	bne	r4,zero,80c8c4 <__adddf3+0x550>
  80c678:	898d883a 	add	r6,r17,r6
  80c67c:	3463803a 	cmpltu	r17,r6,r17
  80c680:	4251883a 	add	r8,r8,r9
  80c684:	8a11883a 	add	r8,r17,r8
  80c688:	3023883a 	mov	r17,r6
  80c68c:	003fd806 	br	80c5f0 <__alt_mem_onchip_mem+0xff78c5f0>
  80c690:	1800541e 	bne	r3,zero,80c7e4 <__adddf3+0x470>
  80c694:	80800044 	addi	r2,r16,1
  80c698:	1081ffcc 	andi	r2,r2,2047
  80c69c:	00c00044 	movi	r3,1
  80c6a0:	1880a00e 	bge	r3,r2,80c924 <__adddf3+0x5b0>
  80c6a4:	8989c83a 	sub	r4,r17,r6
  80c6a8:	8905803a 	cmpltu	r2,r17,r4
  80c6ac:	4267c83a 	sub	r19,r8,r9
  80c6b0:	98a7c83a 	sub	r19,r19,r2
  80c6b4:	9880202c 	andhi	r2,r19,128
  80c6b8:	10006326 	beq	r2,zero,80c848 <__adddf3+0x4d4>
  80c6bc:	3463c83a 	sub	r17,r6,r17
  80c6c0:	4a07c83a 	sub	r3,r9,r8
  80c6c4:	344d803a 	cmpltu	r6,r6,r17
  80c6c8:	19a7c83a 	sub	r19,r3,r6
  80c6cc:	3825883a 	mov	r18,r7
  80c6d0:	983f8a1e 	bne	r19,zero,80c4fc <__alt_mem_onchip_mem+0xff78c4fc>
  80c6d4:	8809883a 	mov	r4,r17
  80c6d8:	080e9780 	call	80e978 <__clzsi2>
  80c6dc:	10800804 	addi	r2,r2,32
  80c6e0:	10fffe04 	addi	r3,r2,-8
  80c6e4:	010007c4 	movi	r4,31
  80c6e8:	20ff890e 	bge	r4,r3,80c510 <__alt_mem_onchip_mem+0xff78c510>
  80c6ec:	10bff604 	addi	r2,r2,-40
  80c6f0:	8884983a 	sll	r2,r17,r2
  80c6f4:	0023883a 	mov	r17,zero
  80c6f8:	1c3f8c0e 	bge	r3,r16,80c52c <__alt_mem_onchip_mem+0xff78c52c>
  80c6fc:	023fe034 	movhi	r8,65408
  80c700:	423fffc4 	addi	r8,r8,-1
  80c704:	80e1c83a 	sub	r16,r16,r3
  80c708:	1210703a 	and	r8,r2,r8
  80c70c:	003f3806 	br	80c3f0 <__alt_mem_onchip_mem+0xff78c3f0>
  80c710:	9007883a 	mov	r3,r18
  80c714:	0011883a 	mov	r8,zero
  80c718:	0005883a 	mov	r2,zero
  80c71c:	003f4c06 	br	80c450 <__alt_mem_onchip_mem+0xff78c450>
  80c720:	498cb03a 	or	r6,r9,r6
  80c724:	300cc03a 	cmpne	r6,r6,zero
  80c728:	0007883a 	mov	r3,zero
  80c72c:	003f6806 	br	80c4d0 <__alt_mem_onchip_mem+0xff78c4d0>
  80c730:	20009c1e 	bne	r4,zero,80c9a4 <__adddf3+0x630>
  80c734:	80800044 	addi	r2,r16,1
  80c738:	1141ffcc 	andi	r5,r2,2047
  80c73c:	01000044 	movi	r4,1
  80c740:	2140670e 	bge	r4,r5,80c8e0 <__adddf3+0x56c>
  80c744:	0101ffc4 	movi	r4,2047
  80c748:	11007f26 	beq	r2,r4,80c948 <__adddf3+0x5d4>
  80c74c:	898d883a 	add	r6,r17,r6
  80c750:	4247883a 	add	r3,r8,r9
  80c754:	3451803a 	cmpltu	r8,r6,r17
  80c758:	40d1883a 	add	r8,r8,r3
  80c75c:	402297fa 	slli	r17,r8,31
  80c760:	300cd07a 	srli	r6,r6,1
  80c764:	4010d07a 	srli	r8,r8,1
  80c768:	1021883a 	mov	r16,r2
  80c76c:	89a2b03a 	or	r17,r17,r6
  80c770:	003f1f06 	br	80c3f0 <__alt_mem_onchip_mem+0xff78c3f0>
  80c774:	0081ffc4 	movi	r2,2047
  80c778:	80bf481e 	bne	r16,r2,80c49c <__alt_mem_onchip_mem+0xff78c49c>
  80c77c:	003f1c06 	br	80c3f0 <__alt_mem_onchip_mem+0xff78c3f0>
  80c780:	843ff844 	addi	r16,r16,-31
  80c784:	01000804 	movi	r4,32
  80c788:	1406d83a 	srl	r3,r2,r16
  80c78c:	41005026 	beq	r8,r4,80c8d0 <__adddf3+0x55c>
  80c790:	01001004 	movi	r4,64
  80c794:	2211c83a 	sub	r8,r4,r8
  80c798:	1204983a 	sll	r2,r2,r8
  80c79c:	88a2b03a 	or	r17,r17,r2
  80c7a0:	8822c03a 	cmpne	r17,r17,zero
  80c7a4:	1c62b03a 	or	r17,r3,r17
  80c7a8:	0011883a 	mov	r8,zero
  80c7ac:	0021883a 	mov	r16,zero
  80c7b0:	003f7106 	br	80c578 <__alt_mem_onchip_mem+0xff78c578>
  80c7b4:	193ff804 	addi	r4,r3,-32
  80c7b8:	00800804 	movi	r2,32
  80c7bc:	4908d83a 	srl	r4,r9,r4
  80c7c0:	18804526 	beq	r3,r2,80c8d8 <__adddf3+0x564>
  80c7c4:	00801004 	movi	r2,64
  80c7c8:	10c5c83a 	sub	r2,r2,r3
  80c7cc:	4886983a 	sll	r3,r9,r2
  80c7d0:	198cb03a 	or	r6,r3,r6
  80c7d4:	300cc03a 	cmpne	r6,r6,zero
  80c7d8:	218cb03a 	or	r6,r4,r6
  80c7dc:	0007883a 	mov	r3,zero
  80c7e0:	003f3b06 	br	80c4d0 <__alt_mem_onchip_mem+0xff78c4d0>
  80c7e4:	80002a26 	beq	r16,zero,80c890 <__adddf3+0x51c>
  80c7e8:	0101ffc4 	movi	r4,2047
  80c7ec:	11006826 	beq	r2,r4,80c990 <__adddf3+0x61c>
  80c7f0:	00c7c83a 	sub	r3,zero,r3
  80c7f4:	42002034 	orhi	r8,r8,128
  80c7f8:	01000e04 	movi	r4,56
  80c7fc:	20c07c16 	blt	r4,r3,80c9f0 <__adddf3+0x67c>
  80c800:	010007c4 	movi	r4,31
  80c804:	20c0da16 	blt	r4,r3,80cb70 <__adddf3+0x7fc>
  80c808:	01000804 	movi	r4,32
  80c80c:	20c9c83a 	sub	r4,r4,r3
  80c810:	4114983a 	sll	r10,r8,r4
  80c814:	88cad83a 	srl	r5,r17,r3
  80c818:	8908983a 	sll	r4,r17,r4
  80c81c:	40c6d83a 	srl	r3,r8,r3
  80c820:	5162b03a 	or	r17,r10,r5
  80c824:	2008c03a 	cmpne	r4,r4,zero
  80c828:	8922b03a 	or	r17,r17,r4
  80c82c:	3463c83a 	sub	r17,r6,r17
  80c830:	48c7c83a 	sub	r3,r9,r3
  80c834:	344d803a 	cmpltu	r6,r6,r17
  80c838:	1991c83a 	sub	r8,r3,r6
  80c83c:	1021883a 	mov	r16,r2
  80c840:	3825883a 	mov	r18,r7
  80c844:	003f2706 	br	80c4e4 <__alt_mem_onchip_mem+0xff78c4e4>
  80c848:	24d0b03a 	or	r8,r4,r19
  80c84c:	40001b1e 	bne	r8,zero,80c8bc <__adddf3+0x548>
  80c850:	0005883a 	mov	r2,zero
  80c854:	0007883a 	mov	r3,zero
  80c858:	0021883a 	mov	r16,zero
  80c85c:	003f4d06 	br	80c594 <__alt_mem_onchip_mem+0xff78c594>
  80c860:	008007c4 	movi	r2,31
  80c864:	11003c16 	blt	r2,r4,80c958 <__adddf3+0x5e4>
  80c868:	00800804 	movi	r2,32
  80c86c:	1105c83a 	sub	r2,r2,r4
  80c870:	488e983a 	sll	r7,r9,r2
  80c874:	310ad83a 	srl	r5,r6,r4
  80c878:	3084983a 	sll	r2,r6,r2
  80c87c:	4912d83a 	srl	r9,r9,r4
  80c880:	394ab03a 	or	r5,r7,r5
  80c884:	1004c03a 	cmpne	r2,r2,zero
  80c888:	288ab03a 	or	r5,r5,r2
  80c88c:	003f5306 	br	80c5dc <__alt_mem_onchip_mem+0xff78c5dc>
  80c890:	4448b03a 	or	r4,r8,r17
  80c894:	20003e26 	beq	r4,zero,80c990 <__adddf3+0x61c>
  80c898:	00c6303a 	nor	r3,zero,r3
  80c89c:	18003a1e 	bne	r3,zero,80c988 <__adddf3+0x614>
  80c8a0:	3463c83a 	sub	r17,r6,r17
  80c8a4:	4a07c83a 	sub	r3,r9,r8
  80c8a8:	344d803a 	cmpltu	r6,r6,r17
  80c8ac:	1991c83a 	sub	r8,r3,r6
  80c8b0:	1021883a 	mov	r16,r2
  80c8b4:	3825883a 	mov	r18,r7
  80c8b8:	003f0a06 	br	80c4e4 <__alt_mem_onchip_mem+0xff78c4e4>
  80c8bc:	2023883a 	mov	r17,r4
  80c8c0:	003f0d06 	br	80c4f8 <__alt_mem_onchip_mem+0xff78c4f8>
  80c8c4:	0081ffc4 	movi	r2,2047
  80c8c8:	80bf3f1e 	bne	r16,r2,80c5c8 <__alt_mem_onchip_mem+0xff78c5c8>
  80c8cc:	003ec806 	br	80c3f0 <__alt_mem_onchip_mem+0xff78c3f0>
  80c8d0:	0005883a 	mov	r2,zero
  80c8d4:	003fb106 	br	80c79c <__alt_mem_onchip_mem+0xff78c79c>
  80c8d8:	0007883a 	mov	r3,zero
  80c8dc:	003fbc06 	br	80c7d0 <__alt_mem_onchip_mem+0xff78c7d0>
  80c8e0:	4444b03a 	or	r2,r8,r17
  80c8e4:	8000871e 	bne	r16,zero,80cb04 <__adddf3+0x790>
  80c8e8:	1000ba26 	beq	r2,zero,80cbd4 <__adddf3+0x860>
  80c8ec:	4984b03a 	or	r2,r9,r6
  80c8f0:	103ebf26 	beq	r2,zero,80c3f0 <__alt_mem_onchip_mem+0xff78c3f0>
  80c8f4:	8985883a 	add	r2,r17,r6
  80c8f8:	4247883a 	add	r3,r8,r9
  80c8fc:	1451803a 	cmpltu	r8,r2,r17
  80c900:	40d1883a 	add	r8,r8,r3
  80c904:	40c0202c 	andhi	r3,r8,128
  80c908:	1023883a 	mov	r17,r2
  80c90c:	183f1a26 	beq	r3,zero,80c578 <__alt_mem_onchip_mem+0xff78c578>
  80c910:	00bfe034 	movhi	r2,65408
  80c914:	10bfffc4 	addi	r2,r2,-1
  80c918:	2021883a 	mov	r16,r4
  80c91c:	4090703a 	and	r8,r8,r2
  80c920:	003eb306 	br	80c3f0 <__alt_mem_onchip_mem+0xff78c3f0>
  80c924:	4444b03a 	or	r2,r8,r17
  80c928:	8000291e 	bne	r16,zero,80c9d0 <__adddf3+0x65c>
  80c92c:	10004b1e 	bne	r2,zero,80ca5c <__adddf3+0x6e8>
  80c930:	4990b03a 	or	r8,r9,r6
  80c934:	40008b26 	beq	r8,zero,80cb64 <__adddf3+0x7f0>
  80c938:	4811883a 	mov	r8,r9
  80c93c:	3023883a 	mov	r17,r6
  80c940:	3825883a 	mov	r18,r7
  80c944:	003eaa06 	br	80c3f0 <__alt_mem_onchip_mem+0xff78c3f0>
  80c948:	1021883a 	mov	r16,r2
  80c94c:	0011883a 	mov	r8,zero
  80c950:	0005883a 	mov	r2,zero
  80c954:	003f0f06 	br	80c594 <__alt_mem_onchip_mem+0xff78c594>
  80c958:	217ff804 	addi	r5,r4,-32
  80c95c:	00800804 	movi	r2,32
  80c960:	494ad83a 	srl	r5,r9,r5
  80c964:	20807d26 	beq	r4,r2,80cb5c <__adddf3+0x7e8>
  80c968:	00801004 	movi	r2,64
  80c96c:	1109c83a 	sub	r4,r2,r4
  80c970:	4912983a 	sll	r9,r9,r4
  80c974:	498cb03a 	or	r6,r9,r6
  80c978:	300cc03a 	cmpne	r6,r6,zero
  80c97c:	298ab03a 	or	r5,r5,r6
  80c980:	0013883a 	mov	r9,zero
  80c984:	003f1506 	br	80c5dc <__alt_mem_onchip_mem+0xff78c5dc>
  80c988:	0101ffc4 	movi	r4,2047
  80c98c:	113f9a1e 	bne	r2,r4,80c7f8 <__alt_mem_onchip_mem+0xff78c7f8>
  80c990:	4811883a 	mov	r8,r9
  80c994:	3023883a 	mov	r17,r6
  80c998:	1021883a 	mov	r16,r2
  80c99c:	3825883a 	mov	r18,r7
  80c9a0:	003e9306 	br	80c3f0 <__alt_mem_onchip_mem+0xff78c3f0>
  80c9a4:	8000161e 	bne	r16,zero,80ca00 <__adddf3+0x68c>
  80c9a8:	444ab03a 	or	r5,r8,r17
  80c9ac:	28005126 	beq	r5,zero,80caf4 <__adddf3+0x780>
  80c9b0:	0108303a 	nor	r4,zero,r4
  80c9b4:	20004d1e 	bne	r4,zero,80caec <__adddf3+0x778>
  80c9b8:	89a3883a 	add	r17,r17,r6
  80c9bc:	4253883a 	add	r9,r8,r9
  80c9c0:	898d803a 	cmpltu	r6,r17,r6
  80c9c4:	3251883a 	add	r8,r6,r9
  80c9c8:	1021883a 	mov	r16,r2
  80c9cc:	003f0806 	br	80c5f0 <__alt_mem_onchip_mem+0xff78c5f0>
  80c9d0:	1000301e 	bne	r2,zero,80ca94 <__adddf3+0x720>
  80c9d4:	4984b03a 	or	r2,r9,r6
  80c9d8:	10007126 	beq	r2,zero,80cba0 <__adddf3+0x82c>
  80c9dc:	4811883a 	mov	r8,r9
  80c9e0:	3023883a 	mov	r17,r6
  80c9e4:	3825883a 	mov	r18,r7
  80c9e8:	0401ffc4 	movi	r16,2047
  80c9ec:	003e8006 	br	80c3f0 <__alt_mem_onchip_mem+0xff78c3f0>
  80c9f0:	4462b03a 	or	r17,r8,r17
  80c9f4:	8822c03a 	cmpne	r17,r17,zero
  80c9f8:	0007883a 	mov	r3,zero
  80c9fc:	003f8b06 	br	80c82c <__alt_mem_onchip_mem+0xff78c82c>
  80ca00:	0141ffc4 	movi	r5,2047
  80ca04:	11403b26 	beq	r2,r5,80caf4 <__adddf3+0x780>
  80ca08:	0109c83a 	sub	r4,zero,r4
  80ca0c:	42002034 	orhi	r8,r8,128
  80ca10:	01400e04 	movi	r5,56
  80ca14:	29006716 	blt	r5,r4,80cbb4 <__adddf3+0x840>
  80ca18:	014007c4 	movi	r5,31
  80ca1c:	29007016 	blt	r5,r4,80cbe0 <__adddf3+0x86c>
  80ca20:	01400804 	movi	r5,32
  80ca24:	290bc83a 	sub	r5,r5,r4
  80ca28:	4154983a 	sll	r10,r8,r5
  80ca2c:	890ed83a 	srl	r7,r17,r4
  80ca30:	894a983a 	sll	r5,r17,r5
  80ca34:	4108d83a 	srl	r4,r8,r4
  80ca38:	51e2b03a 	or	r17,r10,r7
  80ca3c:	280ac03a 	cmpne	r5,r5,zero
  80ca40:	8962b03a 	or	r17,r17,r5
  80ca44:	89a3883a 	add	r17,r17,r6
  80ca48:	2253883a 	add	r9,r4,r9
  80ca4c:	898d803a 	cmpltu	r6,r17,r6
  80ca50:	3251883a 	add	r8,r6,r9
  80ca54:	1021883a 	mov	r16,r2
  80ca58:	003ee506 	br	80c5f0 <__alt_mem_onchip_mem+0xff78c5f0>
  80ca5c:	4984b03a 	or	r2,r9,r6
  80ca60:	103e6326 	beq	r2,zero,80c3f0 <__alt_mem_onchip_mem+0xff78c3f0>
  80ca64:	8987c83a 	sub	r3,r17,r6
  80ca68:	88c9803a 	cmpltu	r4,r17,r3
  80ca6c:	4245c83a 	sub	r2,r8,r9
  80ca70:	1105c83a 	sub	r2,r2,r4
  80ca74:	1100202c 	andhi	r4,r2,128
  80ca78:	203ebb26 	beq	r4,zero,80c568 <__alt_mem_onchip_mem+0xff78c568>
  80ca7c:	3463c83a 	sub	r17,r6,r17
  80ca80:	4a07c83a 	sub	r3,r9,r8
  80ca84:	344d803a 	cmpltu	r6,r6,r17
  80ca88:	1991c83a 	sub	r8,r3,r6
  80ca8c:	3825883a 	mov	r18,r7
  80ca90:	003e5706 	br	80c3f0 <__alt_mem_onchip_mem+0xff78c3f0>
  80ca94:	4984b03a 	or	r2,r9,r6
  80ca98:	10002e26 	beq	r2,zero,80cb54 <__adddf3+0x7e0>
  80ca9c:	4004d0fa 	srli	r2,r8,3
  80caa0:	8822d0fa 	srli	r17,r17,3
  80caa4:	4010977a 	slli	r8,r8,29
  80caa8:	10c0022c 	andhi	r3,r2,8
  80caac:	4462b03a 	or	r17,r8,r17
  80cab0:	18000826 	beq	r3,zero,80cad4 <__adddf3+0x760>
  80cab4:	4808d0fa 	srli	r4,r9,3
  80cab8:	20c0022c 	andhi	r3,r4,8
  80cabc:	1800051e 	bne	r3,zero,80cad4 <__adddf3+0x760>
  80cac0:	300cd0fa 	srli	r6,r6,3
  80cac4:	4806977a 	slli	r3,r9,29
  80cac8:	2005883a 	mov	r2,r4
  80cacc:	3825883a 	mov	r18,r7
  80cad0:	19a2b03a 	or	r17,r3,r6
  80cad4:	8810d77a 	srli	r8,r17,29
  80cad8:	100490fa 	slli	r2,r2,3
  80cadc:	882290fa 	slli	r17,r17,3
  80cae0:	0401ffc4 	movi	r16,2047
  80cae4:	4090b03a 	or	r8,r8,r2
  80cae8:	003e4106 	br	80c3f0 <__alt_mem_onchip_mem+0xff78c3f0>
  80caec:	0141ffc4 	movi	r5,2047
  80caf0:	117fc71e 	bne	r2,r5,80ca10 <__alt_mem_onchip_mem+0xff78ca10>
  80caf4:	4811883a 	mov	r8,r9
  80caf8:	3023883a 	mov	r17,r6
  80cafc:	1021883a 	mov	r16,r2
  80cb00:	003e3b06 	br	80c3f0 <__alt_mem_onchip_mem+0xff78c3f0>
  80cb04:	10002f26 	beq	r2,zero,80cbc4 <__adddf3+0x850>
  80cb08:	4984b03a 	or	r2,r9,r6
  80cb0c:	10001126 	beq	r2,zero,80cb54 <__adddf3+0x7e0>
  80cb10:	4004d0fa 	srli	r2,r8,3
  80cb14:	8822d0fa 	srli	r17,r17,3
  80cb18:	4010977a 	slli	r8,r8,29
  80cb1c:	10c0022c 	andhi	r3,r2,8
  80cb20:	4462b03a 	or	r17,r8,r17
  80cb24:	183feb26 	beq	r3,zero,80cad4 <__alt_mem_onchip_mem+0xff78cad4>
  80cb28:	4808d0fa 	srli	r4,r9,3
  80cb2c:	20c0022c 	andhi	r3,r4,8
  80cb30:	183fe81e 	bne	r3,zero,80cad4 <__alt_mem_onchip_mem+0xff78cad4>
  80cb34:	300cd0fa 	srli	r6,r6,3
  80cb38:	4806977a 	slli	r3,r9,29
  80cb3c:	2005883a 	mov	r2,r4
  80cb40:	19a2b03a 	or	r17,r3,r6
  80cb44:	003fe306 	br	80cad4 <__alt_mem_onchip_mem+0xff78cad4>
  80cb48:	0011883a 	mov	r8,zero
  80cb4c:	0005883a 	mov	r2,zero
  80cb50:	003e3f06 	br	80c450 <__alt_mem_onchip_mem+0xff78c450>
  80cb54:	0401ffc4 	movi	r16,2047
  80cb58:	003e2506 	br	80c3f0 <__alt_mem_onchip_mem+0xff78c3f0>
  80cb5c:	0013883a 	mov	r9,zero
  80cb60:	003f8406 	br	80c974 <__alt_mem_onchip_mem+0xff78c974>
  80cb64:	0005883a 	mov	r2,zero
  80cb68:	0007883a 	mov	r3,zero
  80cb6c:	003e8906 	br	80c594 <__alt_mem_onchip_mem+0xff78c594>
  80cb70:	197ff804 	addi	r5,r3,-32
  80cb74:	01000804 	movi	r4,32
  80cb78:	414ad83a 	srl	r5,r8,r5
  80cb7c:	19002426 	beq	r3,r4,80cc10 <__adddf3+0x89c>
  80cb80:	01001004 	movi	r4,64
  80cb84:	20c7c83a 	sub	r3,r4,r3
  80cb88:	40c6983a 	sll	r3,r8,r3
  80cb8c:	1c46b03a 	or	r3,r3,r17
  80cb90:	1806c03a 	cmpne	r3,r3,zero
  80cb94:	28e2b03a 	or	r17,r5,r3
  80cb98:	0007883a 	mov	r3,zero
  80cb9c:	003f2306 	br	80c82c <__alt_mem_onchip_mem+0xff78c82c>
  80cba0:	0007883a 	mov	r3,zero
  80cba4:	5811883a 	mov	r8,r11
  80cba8:	00bfffc4 	movi	r2,-1
  80cbac:	0401ffc4 	movi	r16,2047
  80cbb0:	003e7806 	br	80c594 <__alt_mem_onchip_mem+0xff78c594>
  80cbb4:	4462b03a 	or	r17,r8,r17
  80cbb8:	8822c03a 	cmpne	r17,r17,zero
  80cbbc:	0009883a 	mov	r4,zero
  80cbc0:	003fa006 	br	80ca44 <__alt_mem_onchip_mem+0xff78ca44>
  80cbc4:	4811883a 	mov	r8,r9
  80cbc8:	3023883a 	mov	r17,r6
  80cbcc:	0401ffc4 	movi	r16,2047
  80cbd0:	003e0706 	br	80c3f0 <__alt_mem_onchip_mem+0xff78c3f0>
  80cbd4:	4811883a 	mov	r8,r9
  80cbd8:	3023883a 	mov	r17,r6
  80cbdc:	003e0406 	br	80c3f0 <__alt_mem_onchip_mem+0xff78c3f0>
  80cbe0:	21fff804 	addi	r7,r4,-32
  80cbe4:	01400804 	movi	r5,32
  80cbe8:	41ced83a 	srl	r7,r8,r7
  80cbec:	21400a26 	beq	r4,r5,80cc18 <__adddf3+0x8a4>
  80cbf0:	01401004 	movi	r5,64
  80cbf4:	2909c83a 	sub	r4,r5,r4
  80cbf8:	4108983a 	sll	r4,r8,r4
  80cbfc:	2448b03a 	or	r4,r4,r17
  80cc00:	2008c03a 	cmpne	r4,r4,zero
  80cc04:	3922b03a 	or	r17,r7,r4
  80cc08:	0009883a 	mov	r4,zero
  80cc0c:	003f8d06 	br	80ca44 <__alt_mem_onchip_mem+0xff78ca44>
  80cc10:	0007883a 	mov	r3,zero
  80cc14:	003fdd06 	br	80cb8c <__alt_mem_onchip_mem+0xff78cb8c>
  80cc18:	0009883a 	mov	r4,zero
  80cc1c:	003ff706 	br	80cbfc <__alt_mem_onchip_mem+0xff78cbfc>

0080cc20 <__divdf3>:
  80cc20:	defff204 	addi	sp,sp,-56
  80cc24:	dd400915 	stw	r21,36(sp)
  80cc28:	282ad53a 	srli	r21,r5,20
  80cc2c:	dd000815 	stw	r20,32(sp)
  80cc30:	2828d7fa 	srli	r20,r5,31
  80cc34:	dc000415 	stw	r16,16(sp)
  80cc38:	04000434 	movhi	r16,16
  80cc3c:	df000c15 	stw	fp,48(sp)
  80cc40:	843fffc4 	addi	r16,r16,-1
  80cc44:	dfc00d15 	stw	ra,52(sp)
  80cc48:	ddc00b15 	stw	r23,44(sp)
  80cc4c:	dd800a15 	stw	r22,40(sp)
  80cc50:	dcc00715 	stw	r19,28(sp)
  80cc54:	dc800615 	stw	r18,24(sp)
  80cc58:	dc400515 	stw	r17,20(sp)
  80cc5c:	ad41ffcc 	andi	r21,r21,2047
  80cc60:	2c20703a 	and	r16,r5,r16
  80cc64:	a7003fcc 	andi	fp,r20,255
  80cc68:	a8006126 	beq	r21,zero,80cdf0 <__divdf3+0x1d0>
  80cc6c:	0081ffc4 	movi	r2,2047
  80cc70:	2025883a 	mov	r18,r4
  80cc74:	a8803726 	beq	r21,r2,80cd54 <__divdf3+0x134>
  80cc78:	80800434 	orhi	r2,r16,16
  80cc7c:	100490fa 	slli	r2,r2,3
  80cc80:	2020d77a 	srli	r16,r4,29
  80cc84:	202490fa 	slli	r18,r4,3
  80cc88:	ad7f0044 	addi	r21,r21,-1023
  80cc8c:	80a0b03a 	or	r16,r16,r2
  80cc90:	0027883a 	mov	r19,zero
  80cc94:	0013883a 	mov	r9,zero
  80cc98:	3804d53a 	srli	r2,r7,20
  80cc9c:	382cd7fa 	srli	r22,r7,31
  80cca0:	04400434 	movhi	r17,16
  80cca4:	8c7fffc4 	addi	r17,r17,-1
  80cca8:	1081ffcc 	andi	r2,r2,2047
  80ccac:	3011883a 	mov	r8,r6
  80ccb0:	3c62703a 	and	r17,r7,r17
  80ccb4:	b5c03fcc 	andi	r23,r22,255
  80ccb8:	10006c26 	beq	r2,zero,80ce6c <__divdf3+0x24c>
  80ccbc:	00c1ffc4 	movi	r3,2047
  80ccc0:	10c06426 	beq	r2,r3,80ce54 <__divdf3+0x234>
  80ccc4:	88c00434 	orhi	r3,r17,16
  80ccc8:	180690fa 	slli	r3,r3,3
  80cccc:	3022d77a 	srli	r17,r6,29
  80ccd0:	301090fa 	slli	r8,r6,3
  80ccd4:	10bf0044 	addi	r2,r2,-1023
  80ccd8:	88e2b03a 	or	r17,r17,r3
  80ccdc:	000f883a 	mov	r7,zero
  80cce0:	a58cf03a 	xor	r6,r20,r22
  80cce4:	3cc8b03a 	or	r4,r7,r19
  80cce8:	a8abc83a 	sub	r21,r21,r2
  80ccec:	008003c4 	movi	r2,15
  80ccf0:	3007883a 	mov	r3,r6
  80ccf4:	34c03fcc 	andi	r19,r6,255
  80ccf8:	11009036 	bltu	r2,r4,80cf3c <__divdf3+0x31c>
  80ccfc:	200890ba 	slli	r4,r4,2
  80cd00:	00802074 	movhi	r2,129
  80cd04:	10b34504 	addi	r2,r2,-13036
  80cd08:	2089883a 	add	r4,r4,r2
  80cd0c:	20800017 	ldw	r2,0(r4)
  80cd10:	1000683a 	jmp	r2
  80cd14:	0080cf3c 	xorhi	r2,zero,828
  80cd18:	0080cd8c 	andi	r2,zero,822
  80cd1c:	0080cf2c 	andhi	r2,zero,828
  80cd20:	0080cd80 	call	80cd8 <__alt_mem_sdram-0x77f328>
  80cd24:	0080cf2c 	andhi	r2,zero,828
  80cd28:	0080cf00 	call	80cf0 <__alt_mem_sdram-0x77f310>
  80cd2c:	0080cf2c 	andhi	r2,zero,828
  80cd30:	0080cd80 	call	80cd8 <__alt_mem_sdram-0x77f328>
  80cd34:	0080cd8c 	andi	r2,zero,822
  80cd38:	0080cd8c 	andi	r2,zero,822
  80cd3c:	0080cf00 	call	80cf0 <__alt_mem_sdram-0x77f310>
  80cd40:	0080cd80 	call	80cd8 <__alt_mem_sdram-0x77f328>
  80cd44:	0080cd70 	cmpltui	r2,zero,821
  80cd48:	0080cd70 	cmpltui	r2,zero,821
  80cd4c:	0080cd70 	cmpltui	r2,zero,821
  80cd50:	0080d220 	cmpeqi	r2,zero,840
  80cd54:	2404b03a 	or	r2,r4,r16
  80cd58:	1000661e 	bne	r2,zero,80cef4 <__divdf3+0x2d4>
  80cd5c:	04c00204 	movi	r19,8
  80cd60:	0021883a 	mov	r16,zero
  80cd64:	0025883a 	mov	r18,zero
  80cd68:	02400084 	movi	r9,2
  80cd6c:	003fca06 	br	80cc98 <__alt_mem_onchip_mem+0xff78cc98>
  80cd70:	8023883a 	mov	r17,r16
  80cd74:	9011883a 	mov	r8,r18
  80cd78:	e02f883a 	mov	r23,fp
  80cd7c:	480f883a 	mov	r7,r9
  80cd80:	00800084 	movi	r2,2
  80cd84:	3881311e 	bne	r7,r2,80d24c <__divdf3+0x62c>
  80cd88:	b827883a 	mov	r19,r23
  80cd8c:	98c0004c 	andi	r3,r19,1
  80cd90:	0081ffc4 	movi	r2,2047
  80cd94:	000b883a 	mov	r5,zero
  80cd98:	0025883a 	mov	r18,zero
  80cd9c:	1004953a 	slli	r2,r2,20
  80cda0:	18c03fcc 	andi	r3,r3,255
  80cda4:	04400434 	movhi	r17,16
  80cda8:	8c7fffc4 	addi	r17,r17,-1
  80cdac:	180697fa 	slli	r3,r3,31
  80cdb0:	2c4a703a 	and	r5,r5,r17
  80cdb4:	288ab03a 	or	r5,r5,r2
  80cdb8:	28c6b03a 	or	r3,r5,r3
  80cdbc:	9005883a 	mov	r2,r18
  80cdc0:	dfc00d17 	ldw	ra,52(sp)
  80cdc4:	df000c17 	ldw	fp,48(sp)
  80cdc8:	ddc00b17 	ldw	r23,44(sp)
  80cdcc:	dd800a17 	ldw	r22,40(sp)
  80cdd0:	dd400917 	ldw	r21,36(sp)
  80cdd4:	dd000817 	ldw	r20,32(sp)
  80cdd8:	dcc00717 	ldw	r19,28(sp)
  80cddc:	dc800617 	ldw	r18,24(sp)
  80cde0:	dc400517 	ldw	r17,20(sp)
  80cde4:	dc000417 	ldw	r16,16(sp)
  80cde8:	dec00e04 	addi	sp,sp,56
  80cdec:	f800283a 	ret
  80cdf0:	2404b03a 	or	r2,r4,r16
  80cdf4:	2027883a 	mov	r19,r4
  80cdf8:	10003926 	beq	r2,zero,80cee0 <__divdf3+0x2c0>
  80cdfc:	80012e26 	beq	r16,zero,80d2b8 <__divdf3+0x698>
  80ce00:	8009883a 	mov	r4,r16
  80ce04:	d9800315 	stw	r6,12(sp)
  80ce08:	d9c00215 	stw	r7,8(sp)
  80ce0c:	080e9780 	call	80e978 <__clzsi2>
  80ce10:	d9800317 	ldw	r6,12(sp)
  80ce14:	d9c00217 	ldw	r7,8(sp)
  80ce18:	113ffd44 	addi	r4,r2,-11
  80ce1c:	00c00704 	movi	r3,28
  80ce20:	19012116 	blt	r3,r4,80d2a8 <__divdf3+0x688>
  80ce24:	00c00744 	movi	r3,29
  80ce28:	147ffe04 	addi	r17,r2,-8
  80ce2c:	1907c83a 	sub	r3,r3,r4
  80ce30:	8460983a 	sll	r16,r16,r17
  80ce34:	98c6d83a 	srl	r3,r19,r3
  80ce38:	9c64983a 	sll	r18,r19,r17
  80ce3c:	1c20b03a 	or	r16,r3,r16
  80ce40:	1080fcc4 	addi	r2,r2,1011
  80ce44:	00abc83a 	sub	r21,zero,r2
  80ce48:	0027883a 	mov	r19,zero
  80ce4c:	0013883a 	mov	r9,zero
  80ce50:	003f9106 	br	80cc98 <__alt_mem_onchip_mem+0xff78cc98>
  80ce54:	3446b03a 	or	r3,r6,r17
  80ce58:	18001f1e 	bne	r3,zero,80ced8 <__divdf3+0x2b8>
  80ce5c:	0023883a 	mov	r17,zero
  80ce60:	0011883a 	mov	r8,zero
  80ce64:	01c00084 	movi	r7,2
  80ce68:	003f9d06 	br	80cce0 <__alt_mem_onchip_mem+0xff78cce0>
  80ce6c:	3446b03a 	or	r3,r6,r17
  80ce70:	18001526 	beq	r3,zero,80cec8 <__divdf3+0x2a8>
  80ce74:	88011b26 	beq	r17,zero,80d2e4 <__divdf3+0x6c4>
  80ce78:	8809883a 	mov	r4,r17
  80ce7c:	d9800315 	stw	r6,12(sp)
  80ce80:	da400115 	stw	r9,4(sp)
  80ce84:	080e9780 	call	80e978 <__clzsi2>
  80ce88:	d9800317 	ldw	r6,12(sp)
  80ce8c:	da400117 	ldw	r9,4(sp)
  80ce90:	113ffd44 	addi	r4,r2,-11
  80ce94:	00c00704 	movi	r3,28
  80ce98:	19010e16 	blt	r3,r4,80d2d4 <__divdf3+0x6b4>
  80ce9c:	00c00744 	movi	r3,29
  80cea0:	123ffe04 	addi	r8,r2,-8
  80cea4:	1907c83a 	sub	r3,r3,r4
  80cea8:	8a22983a 	sll	r17,r17,r8
  80ceac:	30c6d83a 	srl	r3,r6,r3
  80ceb0:	3210983a 	sll	r8,r6,r8
  80ceb4:	1c62b03a 	or	r17,r3,r17
  80ceb8:	1080fcc4 	addi	r2,r2,1011
  80cebc:	0085c83a 	sub	r2,zero,r2
  80cec0:	000f883a 	mov	r7,zero
  80cec4:	003f8606 	br	80cce0 <__alt_mem_onchip_mem+0xff78cce0>
  80cec8:	0023883a 	mov	r17,zero
  80cecc:	0011883a 	mov	r8,zero
  80ced0:	01c00044 	movi	r7,1
  80ced4:	003f8206 	br	80cce0 <__alt_mem_onchip_mem+0xff78cce0>
  80ced8:	01c000c4 	movi	r7,3
  80cedc:	003f8006 	br	80cce0 <__alt_mem_onchip_mem+0xff78cce0>
  80cee0:	04c00104 	movi	r19,4
  80cee4:	0021883a 	mov	r16,zero
  80cee8:	0025883a 	mov	r18,zero
  80ceec:	02400044 	movi	r9,1
  80cef0:	003f6906 	br	80cc98 <__alt_mem_onchip_mem+0xff78cc98>
  80cef4:	04c00304 	movi	r19,12
  80cef8:	024000c4 	movi	r9,3
  80cefc:	003f6606 	br	80cc98 <__alt_mem_onchip_mem+0xff78cc98>
  80cf00:	01400434 	movhi	r5,16
  80cf04:	0007883a 	mov	r3,zero
  80cf08:	297fffc4 	addi	r5,r5,-1
  80cf0c:	04bfffc4 	movi	r18,-1
  80cf10:	0081ffc4 	movi	r2,2047
  80cf14:	003fa106 	br	80cd9c <__alt_mem_onchip_mem+0xff78cd9c>
  80cf18:	00c00044 	movi	r3,1
  80cf1c:	1887c83a 	sub	r3,r3,r2
  80cf20:	01000e04 	movi	r4,56
  80cf24:	20c1210e 	bge	r4,r3,80d3ac <__divdf3+0x78c>
  80cf28:	98c0004c 	andi	r3,r19,1
  80cf2c:	0005883a 	mov	r2,zero
  80cf30:	000b883a 	mov	r5,zero
  80cf34:	0025883a 	mov	r18,zero
  80cf38:	003f9806 	br	80cd9c <__alt_mem_onchip_mem+0xff78cd9c>
  80cf3c:	8c00fd36 	bltu	r17,r16,80d334 <__divdf3+0x714>
  80cf40:	8440fb26 	beq	r16,r17,80d330 <__divdf3+0x710>
  80cf44:	8007883a 	mov	r3,r16
  80cf48:	ad7fffc4 	addi	r21,r21,-1
  80cf4c:	0021883a 	mov	r16,zero
  80cf50:	4004d63a 	srli	r2,r8,24
  80cf54:	8822923a 	slli	r17,r17,8
  80cf58:	1809883a 	mov	r4,r3
  80cf5c:	402c923a 	slli	r22,r8,8
  80cf60:	88b8b03a 	or	fp,r17,r2
  80cf64:	e028d43a 	srli	r20,fp,16
  80cf68:	d8c00015 	stw	r3,0(sp)
  80cf6c:	e5ffffcc 	andi	r23,fp,65535
  80cf70:	a00b883a 	mov	r5,r20
  80cf74:	080c2b80 	call	80c2b8 <__udivsi3>
  80cf78:	d8c00017 	ldw	r3,0(sp)
  80cf7c:	a00b883a 	mov	r5,r20
  80cf80:	d8800315 	stw	r2,12(sp)
  80cf84:	1809883a 	mov	r4,r3
  80cf88:	080c31c0 	call	80c31c <__umodsi3>
  80cf8c:	d9800317 	ldw	r6,12(sp)
  80cf90:	1006943a 	slli	r3,r2,16
  80cf94:	9004d43a 	srli	r2,r18,16
  80cf98:	b9a3383a 	mul	r17,r23,r6
  80cf9c:	10c4b03a 	or	r2,r2,r3
  80cfa0:	1440062e 	bgeu	r2,r17,80cfbc <__divdf3+0x39c>
  80cfa4:	1705883a 	add	r2,r2,fp
  80cfa8:	30ffffc4 	addi	r3,r6,-1
  80cfac:	1700ee36 	bltu	r2,fp,80d368 <__divdf3+0x748>
  80cfb0:	1440ed2e 	bgeu	r2,r17,80d368 <__divdf3+0x748>
  80cfb4:	31bfff84 	addi	r6,r6,-2
  80cfb8:	1705883a 	add	r2,r2,fp
  80cfbc:	1463c83a 	sub	r17,r2,r17
  80cfc0:	a00b883a 	mov	r5,r20
  80cfc4:	8809883a 	mov	r4,r17
  80cfc8:	d9800315 	stw	r6,12(sp)
  80cfcc:	080c2b80 	call	80c2b8 <__udivsi3>
  80cfd0:	a00b883a 	mov	r5,r20
  80cfd4:	8809883a 	mov	r4,r17
  80cfd8:	d8800215 	stw	r2,8(sp)
  80cfdc:	080c31c0 	call	80c31c <__umodsi3>
  80cfe0:	d9c00217 	ldw	r7,8(sp)
  80cfe4:	1004943a 	slli	r2,r2,16
  80cfe8:	94bfffcc 	andi	r18,r18,65535
  80cfec:	b9d1383a 	mul	r8,r23,r7
  80cff0:	90a4b03a 	or	r18,r18,r2
  80cff4:	d9800317 	ldw	r6,12(sp)
  80cff8:	9200062e 	bgeu	r18,r8,80d014 <__divdf3+0x3f4>
  80cffc:	9725883a 	add	r18,r18,fp
  80d000:	38bfffc4 	addi	r2,r7,-1
  80d004:	9700d636 	bltu	r18,fp,80d360 <__divdf3+0x740>
  80d008:	9200d52e 	bgeu	r18,r8,80d360 <__divdf3+0x740>
  80d00c:	39ffff84 	addi	r7,r7,-2
  80d010:	9725883a 	add	r18,r18,fp
  80d014:	3004943a 	slli	r2,r6,16
  80d018:	b012d43a 	srli	r9,r22,16
  80d01c:	b1bfffcc 	andi	r6,r22,65535
  80d020:	11e2b03a 	or	r17,r2,r7
  80d024:	8806d43a 	srli	r3,r17,16
  80d028:	893fffcc 	andi	r4,r17,65535
  80d02c:	218b383a 	mul	r5,r4,r6
  80d030:	30c5383a 	mul	r2,r6,r3
  80d034:	2249383a 	mul	r4,r4,r9
  80d038:	280ed43a 	srli	r7,r5,16
  80d03c:	9225c83a 	sub	r18,r18,r8
  80d040:	2089883a 	add	r4,r4,r2
  80d044:	3909883a 	add	r4,r7,r4
  80d048:	1a47383a 	mul	r3,r3,r9
  80d04c:	2080022e 	bgeu	r4,r2,80d058 <__divdf3+0x438>
  80d050:	00800074 	movhi	r2,1
  80d054:	1887883a 	add	r3,r3,r2
  80d058:	2004d43a 	srli	r2,r4,16
  80d05c:	2008943a 	slli	r4,r4,16
  80d060:	297fffcc 	andi	r5,r5,65535
  80d064:	10c7883a 	add	r3,r2,r3
  80d068:	2149883a 	add	r4,r4,r5
  80d06c:	90c0a536 	bltu	r18,r3,80d304 <__divdf3+0x6e4>
  80d070:	90c0bf26 	beq	r18,r3,80d370 <__divdf3+0x750>
  80d074:	90c7c83a 	sub	r3,r18,r3
  80d078:	810fc83a 	sub	r7,r16,r4
  80d07c:	81e5803a 	cmpltu	r18,r16,r7
  80d080:	1ca5c83a 	sub	r18,r3,r18
  80d084:	e480c126 	beq	fp,r18,80d38c <__divdf3+0x76c>
  80d088:	a00b883a 	mov	r5,r20
  80d08c:	9009883a 	mov	r4,r18
  80d090:	d9800315 	stw	r6,12(sp)
  80d094:	d9c00215 	stw	r7,8(sp)
  80d098:	da400115 	stw	r9,4(sp)
  80d09c:	080c2b80 	call	80c2b8 <__udivsi3>
  80d0a0:	a00b883a 	mov	r5,r20
  80d0a4:	9009883a 	mov	r4,r18
  80d0a8:	d8800015 	stw	r2,0(sp)
  80d0ac:	080c31c0 	call	80c31c <__umodsi3>
  80d0b0:	d9c00217 	ldw	r7,8(sp)
  80d0b4:	da000017 	ldw	r8,0(sp)
  80d0b8:	1006943a 	slli	r3,r2,16
  80d0bc:	3804d43a 	srli	r2,r7,16
  80d0c0:	ba21383a 	mul	r16,r23,r8
  80d0c4:	d9800317 	ldw	r6,12(sp)
  80d0c8:	10c4b03a 	or	r2,r2,r3
  80d0cc:	da400117 	ldw	r9,4(sp)
  80d0d0:	1400062e 	bgeu	r2,r16,80d0ec <__divdf3+0x4cc>
  80d0d4:	1705883a 	add	r2,r2,fp
  80d0d8:	40ffffc4 	addi	r3,r8,-1
  80d0dc:	1700ad36 	bltu	r2,fp,80d394 <__divdf3+0x774>
  80d0e0:	1400ac2e 	bgeu	r2,r16,80d394 <__divdf3+0x774>
  80d0e4:	423fff84 	addi	r8,r8,-2
  80d0e8:	1705883a 	add	r2,r2,fp
  80d0ec:	1421c83a 	sub	r16,r2,r16
  80d0f0:	a00b883a 	mov	r5,r20
  80d0f4:	8009883a 	mov	r4,r16
  80d0f8:	d9800315 	stw	r6,12(sp)
  80d0fc:	d9c00215 	stw	r7,8(sp)
  80d100:	da000015 	stw	r8,0(sp)
  80d104:	da400115 	stw	r9,4(sp)
  80d108:	080c2b80 	call	80c2b8 <__udivsi3>
  80d10c:	8009883a 	mov	r4,r16
  80d110:	a00b883a 	mov	r5,r20
  80d114:	1025883a 	mov	r18,r2
  80d118:	080c31c0 	call	80c31c <__umodsi3>
  80d11c:	d9c00217 	ldw	r7,8(sp)
  80d120:	1004943a 	slli	r2,r2,16
  80d124:	bcaf383a 	mul	r23,r23,r18
  80d128:	393fffcc 	andi	r4,r7,65535
  80d12c:	2088b03a 	or	r4,r4,r2
  80d130:	d9800317 	ldw	r6,12(sp)
  80d134:	da000017 	ldw	r8,0(sp)
  80d138:	da400117 	ldw	r9,4(sp)
  80d13c:	25c0062e 	bgeu	r4,r23,80d158 <__divdf3+0x538>
  80d140:	2709883a 	add	r4,r4,fp
  80d144:	90bfffc4 	addi	r2,r18,-1
  80d148:	27009436 	bltu	r4,fp,80d39c <__divdf3+0x77c>
  80d14c:	25c0932e 	bgeu	r4,r23,80d39c <__divdf3+0x77c>
  80d150:	94bfff84 	addi	r18,r18,-2
  80d154:	2709883a 	add	r4,r4,fp
  80d158:	4004943a 	slli	r2,r8,16
  80d15c:	25efc83a 	sub	r23,r4,r23
  80d160:	1490b03a 	or	r8,r2,r18
  80d164:	4008d43a 	srli	r4,r8,16
  80d168:	40ffffcc 	andi	r3,r8,65535
  80d16c:	30c5383a 	mul	r2,r6,r3
  80d170:	1a47383a 	mul	r3,r3,r9
  80d174:	310d383a 	mul	r6,r6,r4
  80d178:	100ad43a 	srli	r5,r2,16
  80d17c:	4913383a 	mul	r9,r9,r4
  80d180:	1987883a 	add	r3,r3,r6
  80d184:	28c7883a 	add	r3,r5,r3
  80d188:	1980022e 	bgeu	r3,r6,80d194 <__divdf3+0x574>
  80d18c:	01000074 	movhi	r4,1
  80d190:	4913883a 	add	r9,r9,r4
  80d194:	1808d43a 	srli	r4,r3,16
  80d198:	1806943a 	slli	r3,r3,16
  80d19c:	10bfffcc 	andi	r2,r2,65535
  80d1a0:	2253883a 	add	r9,r4,r9
  80d1a4:	1887883a 	add	r3,r3,r2
  80d1a8:	ba403836 	bltu	r23,r9,80d28c <__divdf3+0x66c>
  80d1ac:	ba403626 	beq	r23,r9,80d288 <__divdf3+0x668>
  80d1b0:	42000054 	ori	r8,r8,1
  80d1b4:	a880ffc4 	addi	r2,r21,1023
  80d1b8:	00bf570e 	bge	zero,r2,80cf18 <__alt_mem_onchip_mem+0xff78cf18>
  80d1bc:	40c001cc 	andi	r3,r8,7
  80d1c0:	18000726 	beq	r3,zero,80d1e0 <__divdf3+0x5c0>
  80d1c4:	40c003cc 	andi	r3,r8,15
  80d1c8:	01000104 	movi	r4,4
  80d1cc:	19000426 	beq	r3,r4,80d1e0 <__divdf3+0x5c0>
  80d1d0:	4107883a 	add	r3,r8,r4
  80d1d4:	1a11803a 	cmpltu	r8,r3,r8
  80d1d8:	8a23883a 	add	r17,r17,r8
  80d1dc:	1811883a 	mov	r8,r3
  80d1e0:	88c0402c 	andhi	r3,r17,256
  80d1e4:	18000426 	beq	r3,zero,80d1f8 <__divdf3+0x5d8>
  80d1e8:	00ffc034 	movhi	r3,65280
  80d1ec:	18ffffc4 	addi	r3,r3,-1
  80d1f0:	a8810004 	addi	r2,r21,1024
  80d1f4:	88e2703a 	and	r17,r17,r3
  80d1f8:	00c1ff84 	movi	r3,2046
  80d1fc:	18bee316 	blt	r3,r2,80cd8c <__alt_mem_onchip_mem+0xff78cd8c>
  80d200:	8824977a 	slli	r18,r17,29
  80d204:	4010d0fa 	srli	r8,r8,3
  80d208:	8822927a 	slli	r17,r17,9
  80d20c:	1081ffcc 	andi	r2,r2,2047
  80d210:	9224b03a 	or	r18,r18,r8
  80d214:	880ad33a 	srli	r5,r17,12
  80d218:	98c0004c 	andi	r3,r19,1
  80d21c:	003edf06 	br	80cd9c <__alt_mem_onchip_mem+0xff78cd9c>
  80d220:	8080022c 	andhi	r2,r16,8
  80d224:	10001226 	beq	r2,zero,80d270 <__divdf3+0x650>
  80d228:	8880022c 	andhi	r2,r17,8
  80d22c:	1000101e 	bne	r2,zero,80d270 <__divdf3+0x650>
  80d230:	00800434 	movhi	r2,16
  80d234:	89400234 	orhi	r5,r17,8
  80d238:	10bfffc4 	addi	r2,r2,-1
  80d23c:	b007883a 	mov	r3,r22
  80d240:	288a703a 	and	r5,r5,r2
  80d244:	4025883a 	mov	r18,r8
  80d248:	003f3106 	br	80cf10 <__alt_mem_onchip_mem+0xff78cf10>
  80d24c:	008000c4 	movi	r2,3
  80d250:	3880a626 	beq	r7,r2,80d4ec <__divdf3+0x8cc>
  80d254:	00800044 	movi	r2,1
  80d258:	3880521e 	bne	r7,r2,80d3a4 <__divdf3+0x784>
  80d25c:	b807883a 	mov	r3,r23
  80d260:	0005883a 	mov	r2,zero
  80d264:	000b883a 	mov	r5,zero
  80d268:	0025883a 	mov	r18,zero
  80d26c:	003ecb06 	br	80cd9c <__alt_mem_onchip_mem+0xff78cd9c>
  80d270:	00800434 	movhi	r2,16
  80d274:	81400234 	orhi	r5,r16,8
  80d278:	10bfffc4 	addi	r2,r2,-1
  80d27c:	a007883a 	mov	r3,r20
  80d280:	288a703a 	and	r5,r5,r2
  80d284:	003f2206 	br	80cf10 <__alt_mem_onchip_mem+0xff78cf10>
  80d288:	183fca26 	beq	r3,zero,80d1b4 <__alt_mem_onchip_mem+0xff78d1b4>
  80d28c:	e5ef883a 	add	r23,fp,r23
  80d290:	40bfffc4 	addi	r2,r8,-1
  80d294:	bf00392e 	bgeu	r23,fp,80d37c <__divdf3+0x75c>
  80d298:	1011883a 	mov	r8,r2
  80d29c:	ba7fc41e 	bne	r23,r9,80d1b0 <__alt_mem_onchip_mem+0xff78d1b0>
  80d2a0:	b0ffc31e 	bne	r22,r3,80d1b0 <__alt_mem_onchip_mem+0xff78d1b0>
  80d2a4:	003fc306 	br	80d1b4 <__alt_mem_onchip_mem+0xff78d1b4>
  80d2a8:	143ff604 	addi	r16,r2,-40
  80d2ac:	9c20983a 	sll	r16,r19,r16
  80d2b0:	0025883a 	mov	r18,zero
  80d2b4:	003ee206 	br	80ce40 <__alt_mem_onchip_mem+0xff78ce40>
  80d2b8:	d9800315 	stw	r6,12(sp)
  80d2bc:	d9c00215 	stw	r7,8(sp)
  80d2c0:	080e9780 	call	80e978 <__clzsi2>
  80d2c4:	10800804 	addi	r2,r2,32
  80d2c8:	d9c00217 	ldw	r7,8(sp)
  80d2cc:	d9800317 	ldw	r6,12(sp)
  80d2d0:	003ed106 	br	80ce18 <__alt_mem_onchip_mem+0xff78ce18>
  80d2d4:	147ff604 	addi	r17,r2,-40
  80d2d8:	3462983a 	sll	r17,r6,r17
  80d2dc:	0011883a 	mov	r8,zero
  80d2e0:	003ef506 	br	80ceb8 <__alt_mem_onchip_mem+0xff78ceb8>
  80d2e4:	3009883a 	mov	r4,r6
  80d2e8:	d9800315 	stw	r6,12(sp)
  80d2ec:	da400115 	stw	r9,4(sp)
  80d2f0:	080e9780 	call	80e978 <__clzsi2>
  80d2f4:	10800804 	addi	r2,r2,32
  80d2f8:	da400117 	ldw	r9,4(sp)
  80d2fc:	d9800317 	ldw	r6,12(sp)
  80d300:	003ee306 	br	80ce90 <__alt_mem_onchip_mem+0xff78ce90>
  80d304:	85a1883a 	add	r16,r16,r22
  80d308:	8585803a 	cmpltu	r2,r16,r22
  80d30c:	1705883a 	add	r2,r2,fp
  80d310:	14a5883a 	add	r18,r2,r18
  80d314:	88bfffc4 	addi	r2,r17,-1
  80d318:	e4800c2e 	bgeu	fp,r18,80d34c <__divdf3+0x72c>
  80d31c:	90c03e36 	bltu	r18,r3,80d418 <__divdf3+0x7f8>
  80d320:	1c806926 	beq	r3,r18,80d4c8 <__divdf3+0x8a8>
  80d324:	90c7c83a 	sub	r3,r18,r3
  80d328:	1023883a 	mov	r17,r2
  80d32c:	003f5206 	br	80d078 <__alt_mem_onchip_mem+0xff78d078>
  80d330:	923f0436 	bltu	r18,r8,80cf44 <__alt_mem_onchip_mem+0xff78cf44>
  80d334:	800897fa 	slli	r4,r16,31
  80d338:	9004d07a 	srli	r2,r18,1
  80d33c:	8006d07a 	srli	r3,r16,1
  80d340:	902097fa 	slli	r16,r18,31
  80d344:	20a4b03a 	or	r18,r4,r2
  80d348:	003f0106 	br	80cf50 <__alt_mem_onchip_mem+0xff78cf50>
  80d34c:	e4bff51e 	bne	fp,r18,80d324 <__alt_mem_onchip_mem+0xff78d324>
  80d350:	85bff22e 	bgeu	r16,r22,80d31c <__alt_mem_onchip_mem+0xff78d31c>
  80d354:	e0c7c83a 	sub	r3,fp,r3
  80d358:	1023883a 	mov	r17,r2
  80d35c:	003f4606 	br	80d078 <__alt_mem_onchip_mem+0xff78d078>
  80d360:	100f883a 	mov	r7,r2
  80d364:	003f2b06 	br	80d014 <__alt_mem_onchip_mem+0xff78d014>
  80d368:	180d883a 	mov	r6,r3
  80d36c:	003f1306 	br	80cfbc <__alt_mem_onchip_mem+0xff78cfbc>
  80d370:	813fe436 	bltu	r16,r4,80d304 <__alt_mem_onchip_mem+0xff78d304>
  80d374:	0007883a 	mov	r3,zero
  80d378:	003f3f06 	br	80d078 <__alt_mem_onchip_mem+0xff78d078>
  80d37c:	ba402c36 	bltu	r23,r9,80d430 <__divdf3+0x810>
  80d380:	4dc05426 	beq	r9,r23,80d4d4 <__divdf3+0x8b4>
  80d384:	1011883a 	mov	r8,r2
  80d388:	003f8906 	br	80d1b0 <__alt_mem_onchip_mem+0xff78d1b0>
  80d38c:	023fffc4 	movi	r8,-1
  80d390:	003f8806 	br	80d1b4 <__alt_mem_onchip_mem+0xff78d1b4>
  80d394:	1811883a 	mov	r8,r3
  80d398:	003f5406 	br	80d0ec <__alt_mem_onchip_mem+0xff78d0ec>
  80d39c:	1025883a 	mov	r18,r2
  80d3a0:	003f6d06 	br	80d158 <__alt_mem_onchip_mem+0xff78d158>
  80d3a4:	b827883a 	mov	r19,r23
  80d3a8:	003f8206 	br	80d1b4 <__alt_mem_onchip_mem+0xff78d1b4>
  80d3ac:	010007c4 	movi	r4,31
  80d3b0:	20c02616 	blt	r4,r3,80d44c <__divdf3+0x82c>
  80d3b4:	00800804 	movi	r2,32
  80d3b8:	10c5c83a 	sub	r2,r2,r3
  80d3bc:	888a983a 	sll	r5,r17,r2
  80d3c0:	40c8d83a 	srl	r4,r8,r3
  80d3c4:	4084983a 	sll	r2,r8,r2
  80d3c8:	88e2d83a 	srl	r17,r17,r3
  80d3cc:	2906b03a 	or	r3,r5,r4
  80d3d0:	1004c03a 	cmpne	r2,r2,zero
  80d3d4:	1886b03a 	or	r3,r3,r2
  80d3d8:	188001cc 	andi	r2,r3,7
  80d3dc:	10000726 	beq	r2,zero,80d3fc <__divdf3+0x7dc>
  80d3e0:	188003cc 	andi	r2,r3,15
  80d3e4:	01000104 	movi	r4,4
  80d3e8:	11000426 	beq	r2,r4,80d3fc <__divdf3+0x7dc>
  80d3ec:	1805883a 	mov	r2,r3
  80d3f0:	10c00104 	addi	r3,r2,4
  80d3f4:	1885803a 	cmpltu	r2,r3,r2
  80d3f8:	88a3883a 	add	r17,r17,r2
  80d3fc:	8880202c 	andhi	r2,r17,128
  80d400:	10002726 	beq	r2,zero,80d4a0 <__divdf3+0x880>
  80d404:	98c0004c 	andi	r3,r19,1
  80d408:	00800044 	movi	r2,1
  80d40c:	000b883a 	mov	r5,zero
  80d410:	0025883a 	mov	r18,zero
  80d414:	003e6106 	br	80cd9c <__alt_mem_onchip_mem+0xff78cd9c>
  80d418:	85a1883a 	add	r16,r16,r22
  80d41c:	8585803a 	cmpltu	r2,r16,r22
  80d420:	1705883a 	add	r2,r2,fp
  80d424:	14a5883a 	add	r18,r2,r18
  80d428:	8c7fff84 	addi	r17,r17,-2
  80d42c:	003f1106 	br	80d074 <__alt_mem_onchip_mem+0xff78d074>
  80d430:	b589883a 	add	r4,r22,r22
  80d434:	25ad803a 	cmpltu	r22,r4,r22
  80d438:	b739883a 	add	fp,r22,fp
  80d43c:	40bfff84 	addi	r2,r8,-2
  80d440:	bf2f883a 	add	r23,r23,fp
  80d444:	202d883a 	mov	r22,r4
  80d448:	003f9306 	br	80d298 <__alt_mem_onchip_mem+0xff78d298>
  80d44c:	013ff844 	movi	r4,-31
  80d450:	2085c83a 	sub	r2,r4,r2
  80d454:	8888d83a 	srl	r4,r17,r2
  80d458:	00800804 	movi	r2,32
  80d45c:	18802126 	beq	r3,r2,80d4e4 <__divdf3+0x8c4>
  80d460:	00801004 	movi	r2,64
  80d464:	10c5c83a 	sub	r2,r2,r3
  80d468:	8884983a 	sll	r2,r17,r2
  80d46c:	1204b03a 	or	r2,r2,r8
  80d470:	1004c03a 	cmpne	r2,r2,zero
  80d474:	2084b03a 	or	r2,r4,r2
  80d478:	144001cc 	andi	r17,r2,7
  80d47c:	88000d1e 	bne	r17,zero,80d4b4 <__divdf3+0x894>
  80d480:	000b883a 	mov	r5,zero
  80d484:	1024d0fa 	srli	r18,r2,3
  80d488:	98c0004c 	andi	r3,r19,1
  80d48c:	0005883a 	mov	r2,zero
  80d490:	9464b03a 	or	r18,r18,r17
  80d494:	003e4106 	br	80cd9c <__alt_mem_onchip_mem+0xff78cd9c>
  80d498:	1007883a 	mov	r3,r2
  80d49c:	0023883a 	mov	r17,zero
  80d4a0:	880a927a 	slli	r5,r17,9
  80d4a4:	1805883a 	mov	r2,r3
  80d4a8:	8822977a 	slli	r17,r17,29
  80d4ac:	280ad33a 	srli	r5,r5,12
  80d4b0:	003ff406 	br	80d484 <__alt_mem_onchip_mem+0xff78d484>
  80d4b4:	10c003cc 	andi	r3,r2,15
  80d4b8:	01000104 	movi	r4,4
  80d4bc:	193ff626 	beq	r3,r4,80d498 <__alt_mem_onchip_mem+0xff78d498>
  80d4c0:	0023883a 	mov	r17,zero
  80d4c4:	003fca06 	br	80d3f0 <__alt_mem_onchip_mem+0xff78d3f0>
  80d4c8:	813fd336 	bltu	r16,r4,80d418 <__alt_mem_onchip_mem+0xff78d418>
  80d4cc:	1023883a 	mov	r17,r2
  80d4d0:	003fa806 	br	80d374 <__alt_mem_onchip_mem+0xff78d374>
  80d4d4:	b0ffd636 	bltu	r22,r3,80d430 <__alt_mem_onchip_mem+0xff78d430>
  80d4d8:	1011883a 	mov	r8,r2
  80d4dc:	b0ff341e 	bne	r22,r3,80d1b0 <__alt_mem_onchip_mem+0xff78d1b0>
  80d4e0:	003f3406 	br	80d1b4 <__alt_mem_onchip_mem+0xff78d1b4>
  80d4e4:	0005883a 	mov	r2,zero
  80d4e8:	003fe006 	br	80d46c <__alt_mem_onchip_mem+0xff78d46c>
  80d4ec:	00800434 	movhi	r2,16
  80d4f0:	89400234 	orhi	r5,r17,8
  80d4f4:	10bfffc4 	addi	r2,r2,-1
  80d4f8:	b807883a 	mov	r3,r23
  80d4fc:	288a703a 	and	r5,r5,r2
  80d500:	4025883a 	mov	r18,r8
  80d504:	003e8206 	br	80cf10 <__alt_mem_onchip_mem+0xff78cf10>

0080d508 <__eqdf2>:
  80d508:	2804d53a 	srli	r2,r5,20
  80d50c:	3806d53a 	srli	r3,r7,20
  80d510:	02000434 	movhi	r8,16
  80d514:	423fffc4 	addi	r8,r8,-1
  80d518:	1081ffcc 	andi	r2,r2,2047
  80d51c:	0281ffc4 	movi	r10,2047
  80d520:	2a12703a 	and	r9,r5,r8
  80d524:	18c1ffcc 	andi	r3,r3,2047
  80d528:	3a10703a 	and	r8,r7,r8
  80d52c:	280ad7fa 	srli	r5,r5,31
  80d530:	380ed7fa 	srli	r7,r7,31
  80d534:	12801026 	beq	r2,r10,80d578 <__eqdf2+0x70>
  80d538:	0281ffc4 	movi	r10,2047
  80d53c:	1a800a26 	beq	r3,r10,80d568 <__eqdf2+0x60>
  80d540:	10c00226 	beq	r2,r3,80d54c <__eqdf2+0x44>
  80d544:	00800044 	movi	r2,1
  80d548:	f800283a 	ret
  80d54c:	4a3ffd1e 	bne	r9,r8,80d544 <__alt_mem_onchip_mem+0xff78d544>
  80d550:	21bffc1e 	bne	r4,r6,80d544 <__alt_mem_onchip_mem+0xff78d544>
  80d554:	29c00c26 	beq	r5,r7,80d588 <__eqdf2+0x80>
  80d558:	103ffa1e 	bne	r2,zero,80d544 <__alt_mem_onchip_mem+0xff78d544>
  80d55c:	2244b03a 	or	r2,r4,r9
  80d560:	1004c03a 	cmpne	r2,r2,zero
  80d564:	f800283a 	ret
  80d568:	3214b03a 	or	r10,r6,r8
  80d56c:	503ff426 	beq	r10,zero,80d540 <__alt_mem_onchip_mem+0xff78d540>
  80d570:	00800044 	movi	r2,1
  80d574:	f800283a 	ret
  80d578:	2254b03a 	or	r10,r4,r9
  80d57c:	503fee26 	beq	r10,zero,80d538 <__alt_mem_onchip_mem+0xff78d538>
  80d580:	00800044 	movi	r2,1
  80d584:	f800283a 	ret
  80d588:	0005883a 	mov	r2,zero
  80d58c:	f800283a 	ret

0080d590 <__gedf2>:
  80d590:	2804d53a 	srli	r2,r5,20
  80d594:	3806d53a 	srli	r3,r7,20
  80d598:	02000434 	movhi	r8,16
  80d59c:	423fffc4 	addi	r8,r8,-1
  80d5a0:	1081ffcc 	andi	r2,r2,2047
  80d5a4:	0241ffc4 	movi	r9,2047
  80d5a8:	2a14703a 	and	r10,r5,r8
  80d5ac:	18c1ffcc 	andi	r3,r3,2047
  80d5b0:	3a10703a 	and	r8,r7,r8
  80d5b4:	280ad7fa 	srli	r5,r5,31
  80d5b8:	380ed7fa 	srli	r7,r7,31
  80d5bc:	12401d26 	beq	r2,r9,80d634 <__gedf2+0xa4>
  80d5c0:	0241ffc4 	movi	r9,2047
  80d5c4:	1a401226 	beq	r3,r9,80d610 <__gedf2+0x80>
  80d5c8:	1000081e 	bne	r2,zero,80d5ec <__gedf2+0x5c>
  80d5cc:	2296b03a 	or	r11,r4,r10
  80d5d0:	5813003a 	cmpeq	r9,r11,zero
  80d5d4:	1800091e 	bne	r3,zero,80d5fc <__gedf2+0x6c>
  80d5d8:	3218b03a 	or	r12,r6,r8
  80d5dc:	6000071e 	bne	r12,zero,80d5fc <__gedf2+0x6c>
  80d5e0:	0005883a 	mov	r2,zero
  80d5e4:	5800101e 	bne	r11,zero,80d628 <__gedf2+0x98>
  80d5e8:	f800283a 	ret
  80d5ec:	18000c1e 	bne	r3,zero,80d620 <__gedf2+0x90>
  80d5f0:	3212b03a 	or	r9,r6,r8
  80d5f4:	48000c26 	beq	r9,zero,80d628 <__gedf2+0x98>
  80d5f8:	0013883a 	mov	r9,zero
  80d5fc:	39c03fcc 	andi	r7,r7,255
  80d600:	48000826 	beq	r9,zero,80d624 <__gedf2+0x94>
  80d604:	38000926 	beq	r7,zero,80d62c <__gedf2+0x9c>
  80d608:	00800044 	movi	r2,1
  80d60c:	f800283a 	ret
  80d610:	3212b03a 	or	r9,r6,r8
  80d614:	483fec26 	beq	r9,zero,80d5c8 <__alt_mem_onchip_mem+0xff78d5c8>
  80d618:	00bfff84 	movi	r2,-2
  80d61c:	f800283a 	ret
  80d620:	39c03fcc 	andi	r7,r7,255
  80d624:	29c00626 	beq	r5,r7,80d640 <__gedf2+0xb0>
  80d628:	283ff726 	beq	r5,zero,80d608 <__alt_mem_onchip_mem+0xff78d608>
  80d62c:	00bfffc4 	movi	r2,-1
  80d630:	f800283a 	ret
  80d634:	2292b03a 	or	r9,r4,r10
  80d638:	483fe126 	beq	r9,zero,80d5c0 <__alt_mem_onchip_mem+0xff78d5c0>
  80d63c:	003ff606 	br	80d618 <__alt_mem_onchip_mem+0xff78d618>
  80d640:	18bff916 	blt	r3,r2,80d628 <__alt_mem_onchip_mem+0xff78d628>
  80d644:	10c00316 	blt	r2,r3,80d654 <__gedf2+0xc4>
  80d648:	42bff736 	bltu	r8,r10,80d628 <__alt_mem_onchip_mem+0xff78d628>
  80d64c:	52000326 	beq	r10,r8,80d65c <__gedf2+0xcc>
  80d650:	5200042e 	bgeu	r10,r8,80d664 <__gedf2+0xd4>
  80d654:	283fec1e 	bne	r5,zero,80d608 <__alt_mem_onchip_mem+0xff78d608>
  80d658:	003ff406 	br	80d62c <__alt_mem_onchip_mem+0xff78d62c>
  80d65c:	313ff236 	bltu	r6,r4,80d628 <__alt_mem_onchip_mem+0xff78d628>
  80d660:	21bffc36 	bltu	r4,r6,80d654 <__alt_mem_onchip_mem+0xff78d654>
  80d664:	0005883a 	mov	r2,zero
  80d668:	f800283a 	ret

0080d66c <__ledf2>:
  80d66c:	2804d53a 	srli	r2,r5,20
  80d670:	3810d53a 	srli	r8,r7,20
  80d674:	00c00434 	movhi	r3,16
  80d678:	18ffffc4 	addi	r3,r3,-1
  80d67c:	1081ffcc 	andi	r2,r2,2047
  80d680:	0241ffc4 	movi	r9,2047
  80d684:	28d4703a 	and	r10,r5,r3
  80d688:	4201ffcc 	andi	r8,r8,2047
  80d68c:	38c6703a 	and	r3,r7,r3
  80d690:	280ad7fa 	srli	r5,r5,31
  80d694:	380ed7fa 	srli	r7,r7,31
  80d698:	12401f26 	beq	r2,r9,80d718 <__ledf2+0xac>
  80d69c:	0241ffc4 	movi	r9,2047
  80d6a0:	42401426 	beq	r8,r9,80d6f4 <__ledf2+0x88>
  80d6a4:	1000091e 	bne	r2,zero,80d6cc <__ledf2+0x60>
  80d6a8:	2296b03a 	or	r11,r4,r10
  80d6ac:	5813003a 	cmpeq	r9,r11,zero
  80d6b0:	29403fcc 	andi	r5,r5,255
  80d6b4:	40000a1e 	bne	r8,zero,80d6e0 <__ledf2+0x74>
  80d6b8:	30d8b03a 	or	r12,r6,r3
  80d6bc:	6000081e 	bne	r12,zero,80d6e0 <__ledf2+0x74>
  80d6c0:	0005883a 	mov	r2,zero
  80d6c4:	5800111e 	bne	r11,zero,80d70c <__ledf2+0xa0>
  80d6c8:	f800283a 	ret
  80d6cc:	29403fcc 	andi	r5,r5,255
  80d6d0:	40000c1e 	bne	r8,zero,80d704 <__ledf2+0x98>
  80d6d4:	30d2b03a 	or	r9,r6,r3
  80d6d8:	48000c26 	beq	r9,zero,80d70c <__ledf2+0xa0>
  80d6dc:	0013883a 	mov	r9,zero
  80d6e0:	39c03fcc 	andi	r7,r7,255
  80d6e4:	48000826 	beq	r9,zero,80d708 <__ledf2+0x9c>
  80d6e8:	38001126 	beq	r7,zero,80d730 <__ledf2+0xc4>
  80d6ec:	00800044 	movi	r2,1
  80d6f0:	f800283a 	ret
  80d6f4:	30d2b03a 	or	r9,r6,r3
  80d6f8:	483fea26 	beq	r9,zero,80d6a4 <__alt_mem_onchip_mem+0xff78d6a4>
  80d6fc:	00800084 	movi	r2,2
  80d700:	f800283a 	ret
  80d704:	39c03fcc 	andi	r7,r7,255
  80d708:	39400726 	beq	r7,r5,80d728 <__ledf2+0xbc>
  80d70c:	2800081e 	bne	r5,zero,80d730 <__ledf2+0xc4>
  80d710:	00800044 	movi	r2,1
  80d714:	f800283a 	ret
  80d718:	2292b03a 	or	r9,r4,r10
  80d71c:	483fdf26 	beq	r9,zero,80d69c <__alt_mem_onchip_mem+0xff78d69c>
  80d720:	00800084 	movi	r2,2
  80d724:	f800283a 	ret
  80d728:	4080030e 	bge	r8,r2,80d738 <__ledf2+0xcc>
  80d72c:	383fef26 	beq	r7,zero,80d6ec <__alt_mem_onchip_mem+0xff78d6ec>
  80d730:	00bfffc4 	movi	r2,-1
  80d734:	f800283a 	ret
  80d738:	123feb16 	blt	r2,r8,80d6e8 <__alt_mem_onchip_mem+0xff78d6e8>
  80d73c:	1abff336 	bltu	r3,r10,80d70c <__alt_mem_onchip_mem+0xff78d70c>
  80d740:	50c00326 	beq	r10,r3,80d750 <__ledf2+0xe4>
  80d744:	50c0042e 	bgeu	r10,r3,80d758 <__ledf2+0xec>
  80d748:	283fe81e 	bne	r5,zero,80d6ec <__alt_mem_onchip_mem+0xff78d6ec>
  80d74c:	003ff806 	br	80d730 <__alt_mem_onchip_mem+0xff78d730>
  80d750:	313fee36 	bltu	r6,r4,80d70c <__alt_mem_onchip_mem+0xff78d70c>
  80d754:	21bffc36 	bltu	r4,r6,80d748 <__alt_mem_onchip_mem+0xff78d748>
  80d758:	0005883a 	mov	r2,zero
  80d75c:	f800283a 	ret

0080d760 <__muldf3>:
  80d760:	defff304 	addi	sp,sp,-52
  80d764:	2804d53a 	srli	r2,r5,20
  80d768:	dd800915 	stw	r22,36(sp)
  80d76c:	282cd7fa 	srli	r22,r5,31
  80d770:	dc000315 	stw	r16,12(sp)
  80d774:	04000434 	movhi	r16,16
  80d778:	dd400815 	stw	r21,32(sp)
  80d77c:	dc800515 	stw	r18,20(sp)
  80d780:	843fffc4 	addi	r16,r16,-1
  80d784:	dfc00c15 	stw	ra,48(sp)
  80d788:	df000b15 	stw	fp,44(sp)
  80d78c:	ddc00a15 	stw	r23,40(sp)
  80d790:	dd000715 	stw	r20,28(sp)
  80d794:	dcc00615 	stw	r19,24(sp)
  80d798:	dc400415 	stw	r17,16(sp)
  80d79c:	1481ffcc 	andi	r18,r2,2047
  80d7a0:	2c20703a 	and	r16,r5,r16
  80d7a4:	b02b883a 	mov	r21,r22
  80d7a8:	b2403fcc 	andi	r9,r22,255
  80d7ac:	90006026 	beq	r18,zero,80d930 <__muldf3+0x1d0>
  80d7b0:	0081ffc4 	movi	r2,2047
  80d7b4:	2029883a 	mov	r20,r4
  80d7b8:	90803626 	beq	r18,r2,80d894 <__muldf3+0x134>
  80d7bc:	80800434 	orhi	r2,r16,16
  80d7c0:	100490fa 	slli	r2,r2,3
  80d7c4:	2020d77a 	srli	r16,r4,29
  80d7c8:	202890fa 	slli	r20,r4,3
  80d7cc:	94bf0044 	addi	r18,r18,-1023
  80d7d0:	80a0b03a 	or	r16,r16,r2
  80d7d4:	0027883a 	mov	r19,zero
  80d7d8:	0039883a 	mov	fp,zero
  80d7dc:	3804d53a 	srli	r2,r7,20
  80d7e0:	382ed7fa 	srli	r23,r7,31
  80d7e4:	04400434 	movhi	r17,16
  80d7e8:	8c7fffc4 	addi	r17,r17,-1
  80d7ec:	1081ffcc 	andi	r2,r2,2047
  80d7f0:	3011883a 	mov	r8,r6
  80d7f4:	3c62703a 	and	r17,r7,r17
  80d7f8:	ba803fcc 	andi	r10,r23,255
  80d7fc:	10006d26 	beq	r2,zero,80d9b4 <__muldf3+0x254>
  80d800:	00c1ffc4 	movi	r3,2047
  80d804:	10c06526 	beq	r2,r3,80d99c <__muldf3+0x23c>
  80d808:	88c00434 	orhi	r3,r17,16
  80d80c:	180690fa 	slli	r3,r3,3
  80d810:	3022d77a 	srli	r17,r6,29
  80d814:	301090fa 	slli	r8,r6,3
  80d818:	10bf0044 	addi	r2,r2,-1023
  80d81c:	88e2b03a 	or	r17,r17,r3
  80d820:	000b883a 	mov	r5,zero
  80d824:	9085883a 	add	r2,r18,r2
  80d828:	2cc8b03a 	or	r4,r5,r19
  80d82c:	00c003c4 	movi	r3,15
  80d830:	bdacf03a 	xor	r22,r23,r22
  80d834:	12c00044 	addi	r11,r2,1
  80d838:	19009936 	bltu	r3,r4,80daa0 <__muldf3+0x340>
  80d83c:	200890ba 	slli	r4,r4,2
  80d840:	00c02074 	movhi	r3,129
  80d844:	18f61504 	addi	r3,r3,-10156
  80d848:	20c9883a 	add	r4,r4,r3
  80d84c:	20c00017 	ldw	r3,0(r4)
  80d850:	1800683a 	jmp	r3
  80d854:	0080daa0 	cmpeqi	r2,zero,874
  80d858:	0080d8b4 	movhi	r2,866
  80d85c:	0080d8b4 	movhi	r2,866
  80d860:	0080d8b0 	cmpltui	r2,zero,866
  80d864:	0080da7c 	xorhi	r2,zero,873
  80d868:	0080da7c 	xorhi	r2,zero,873
  80d86c:	0080da64 	muli	r2,zero,873
  80d870:	0080d8b0 	cmpltui	r2,zero,866
  80d874:	0080da7c 	xorhi	r2,zero,873
  80d878:	0080da64 	muli	r2,zero,873
  80d87c:	0080da7c 	xorhi	r2,zero,873
  80d880:	0080d8b0 	cmpltui	r2,zero,866
  80d884:	0080da8c 	andi	r2,zero,874
  80d888:	0080da8c 	andi	r2,zero,874
  80d88c:	0080da8c 	andi	r2,zero,874
  80d890:	0080dca8 	cmpgeui	r2,zero,882
  80d894:	2404b03a 	or	r2,r4,r16
  80d898:	10006f1e 	bne	r2,zero,80da58 <__muldf3+0x2f8>
  80d89c:	04c00204 	movi	r19,8
  80d8a0:	0021883a 	mov	r16,zero
  80d8a4:	0029883a 	mov	r20,zero
  80d8a8:	07000084 	movi	fp,2
  80d8ac:	003fcb06 	br	80d7dc <__alt_mem_onchip_mem+0xff78d7dc>
  80d8b0:	502d883a 	mov	r22,r10
  80d8b4:	00800084 	movi	r2,2
  80d8b8:	28805726 	beq	r5,r2,80da18 <__muldf3+0x2b8>
  80d8bc:	008000c4 	movi	r2,3
  80d8c0:	28816626 	beq	r5,r2,80de5c <__muldf3+0x6fc>
  80d8c4:	00800044 	movi	r2,1
  80d8c8:	2881411e 	bne	r5,r2,80ddd0 <__muldf3+0x670>
  80d8cc:	b02b883a 	mov	r21,r22
  80d8d0:	0005883a 	mov	r2,zero
  80d8d4:	000b883a 	mov	r5,zero
  80d8d8:	0029883a 	mov	r20,zero
  80d8dc:	1004953a 	slli	r2,r2,20
  80d8e0:	a8c03fcc 	andi	r3,r21,255
  80d8e4:	04400434 	movhi	r17,16
  80d8e8:	8c7fffc4 	addi	r17,r17,-1
  80d8ec:	180697fa 	slli	r3,r3,31
  80d8f0:	2c4a703a 	and	r5,r5,r17
  80d8f4:	288ab03a 	or	r5,r5,r2
  80d8f8:	28c6b03a 	or	r3,r5,r3
  80d8fc:	a005883a 	mov	r2,r20
  80d900:	dfc00c17 	ldw	ra,48(sp)
  80d904:	df000b17 	ldw	fp,44(sp)
  80d908:	ddc00a17 	ldw	r23,40(sp)
  80d90c:	dd800917 	ldw	r22,36(sp)
  80d910:	dd400817 	ldw	r21,32(sp)
  80d914:	dd000717 	ldw	r20,28(sp)
  80d918:	dcc00617 	ldw	r19,24(sp)
  80d91c:	dc800517 	ldw	r18,20(sp)
  80d920:	dc400417 	ldw	r17,16(sp)
  80d924:	dc000317 	ldw	r16,12(sp)
  80d928:	dec00d04 	addi	sp,sp,52
  80d92c:	f800283a 	ret
  80d930:	2404b03a 	or	r2,r4,r16
  80d934:	2027883a 	mov	r19,r4
  80d938:	10004226 	beq	r2,zero,80da44 <__muldf3+0x2e4>
  80d93c:	8000fc26 	beq	r16,zero,80dd30 <__muldf3+0x5d0>
  80d940:	8009883a 	mov	r4,r16
  80d944:	d9800215 	stw	r6,8(sp)
  80d948:	d9c00015 	stw	r7,0(sp)
  80d94c:	da400115 	stw	r9,4(sp)
  80d950:	080e9780 	call	80e978 <__clzsi2>
  80d954:	d9800217 	ldw	r6,8(sp)
  80d958:	d9c00017 	ldw	r7,0(sp)
  80d95c:	da400117 	ldw	r9,4(sp)
  80d960:	113ffd44 	addi	r4,r2,-11
  80d964:	00c00704 	movi	r3,28
  80d968:	1900ed16 	blt	r3,r4,80dd20 <__muldf3+0x5c0>
  80d96c:	00c00744 	movi	r3,29
  80d970:	147ffe04 	addi	r17,r2,-8
  80d974:	1907c83a 	sub	r3,r3,r4
  80d978:	8460983a 	sll	r16,r16,r17
  80d97c:	98c6d83a 	srl	r3,r19,r3
  80d980:	9c68983a 	sll	r20,r19,r17
  80d984:	1c20b03a 	or	r16,r3,r16
  80d988:	1080fcc4 	addi	r2,r2,1011
  80d98c:	00a5c83a 	sub	r18,zero,r2
  80d990:	0027883a 	mov	r19,zero
  80d994:	0039883a 	mov	fp,zero
  80d998:	003f9006 	br	80d7dc <__alt_mem_onchip_mem+0xff78d7dc>
  80d99c:	3446b03a 	or	r3,r6,r17
  80d9a0:	1800261e 	bne	r3,zero,80da3c <__muldf3+0x2dc>
  80d9a4:	0023883a 	mov	r17,zero
  80d9a8:	0011883a 	mov	r8,zero
  80d9ac:	01400084 	movi	r5,2
  80d9b0:	003f9c06 	br	80d824 <__alt_mem_onchip_mem+0xff78d824>
  80d9b4:	3446b03a 	or	r3,r6,r17
  80d9b8:	18001c26 	beq	r3,zero,80da2c <__muldf3+0x2cc>
  80d9bc:	8800ce26 	beq	r17,zero,80dcf8 <__muldf3+0x598>
  80d9c0:	8809883a 	mov	r4,r17
  80d9c4:	d9800215 	stw	r6,8(sp)
  80d9c8:	da400115 	stw	r9,4(sp)
  80d9cc:	da800015 	stw	r10,0(sp)
  80d9d0:	080e9780 	call	80e978 <__clzsi2>
  80d9d4:	d9800217 	ldw	r6,8(sp)
  80d9d8:	da400117 	ldw	r9,4(sp)
  80d9dc:	da800017 	ldw	r10,0(sp)
  80d9e0:	113ffd44 	addi	r4,r2,-11
  80d9e4:	00c00704 	movi	r3,28
  80d9e8:	1900bf16 	blt	r3,r4,80dce8 <__muldf3+0x588>
  80d9ec:	00c00744 	movi	r3,29
  80d9f0:	123ffe04 	addi	r8,r2,-8
  80d9f4:	1907c83a 	sub	r3,r3,r4
  80d9f8:	8a22983a 	sll	r17,r17,r8
  80d9fc:	30c6d83a 	srl	r3,r6,r3
  80da00:	3210983a 	sll	r8,r6,r8
  80da04:	1c62b03a 	or	r17,r3,r17
  80da08:	1080fcc4 	addi	r2,r2,1011
  80da0c:	0085c83a 	sub	r2,zero,r2
  80da10:	000b883a 	mov	r5,zero
  80da14:	003f8306 	br	80d824 <__alt_mem_onchip_mem+0xff78d824>
  80da18:	b02b883a 	mov	r21,r22
  80da1c:	0081ffc4 	movi	r2,2047
  80da20:	000b883a 	mov	r5,zero
  80da24:	0029883a 	mov	r20,zero
  80da28:	003fac06 	br	80d8dc <__alt_mem_onchip_mem+0xff78d8dc>
  80da2c:	0023883a 	mov	r17,zero
  80da30:	0011883a 	mov	r8,zero
  80da34:	01400044 	movi	r5,1
  80da38:	003f7a06 	br	80d824 <__alt_mem_onchip_mem+0xff78d824>
  80da3c:	014000c4 	movi	r5,3
  80da40:	003f7806 	br	80d824 <__alt_mem_onchip_mem+0xff78d824>
  80da44:	04c00104 	movi	r19,4
  80da48:	0021883a 	mov	r16,zero
  80da4c:	0029883a 	mov	r20,zero
  80da50:	07000044 	movi	fp,1
  80da54:	003f6106 	br	80d7dc <__alt_mem_onchip_mem+0xff78d7dc>
  80da58:	04c00304 	movi	r19,12
  80da5c:	070000c4 	movi	fp,3
  80da60:	003f5e06 	br	80d7dc <__alt_mem_onchip_mem+0xff78d7dc>
  80da64:	01400434 	movhi	r5,16
  80da68:	002b883a 	mov	r21,zero
  80da6c:	297fffc4 	addi	r5,r5,-1
  80da70:	053fffc4 	movi	r20,-1
  80da74:	0081ffc4 	movi	r2,2047
  80da78:	003f9806 	br	80d8dc <__alt_mem_onchip_mem+0xff78d8dc>
  80da7c:	8023883a 	mov	r17,r16
  80da80:	a011883a 	mov	r8,r20
  80da84:	e00b883a 	mov	r5,fp
  80da88:	003f8a06 	br	80d8b4 <__alt_mem_onchip_mem+0xff78d8b4>
  80da8c:	8023883a 	mov	r17,r16
  80da90:	a011883a 	mov	r8,r20
  80da94:	482d883a 	mov	r22,r9
  80da98:	e00b883a 	mov	r5,fp
  80da9c:	003f8506 	br	80d8b4 <__alt_mem_onchip_mem+0xff78d8b4>
  80daa0:	a00ad43a 	srli	r5,r20,16
  80daa4:	401ad43a 	srli	r13,r8,16
  80daa8:	a53fffcc 	andi	r20,r20,65535
  80daac:	423fffcc 	andi	r8,r8,65535
  80dab0:	4519383a 	mul	r12,r8,r20
  80dab4:	4147383a 	mul	r3,r8,r5
  80dab8:	6d09383a 	mul	r4,r13,r20
  80dabc:	600cd43a 	srli	r6,r12,16
  80dac0:	2b5d383a 	mul	r14,r5,r13
  80dac4:	20c9883a 	add	r4,r4,r3
  80dac8:	310d883a 	add	r6,r6,r4
  80dacc:	30c0022e 	bgeu	r6,r3,80dad8 <__muldf3+0x378>
  80dad0:	00c00074 	movhi	r3,1
  80dad4:	70dd883a 	add	r14,r14,r3
  80dad8:	8826d43a 	srli	r19,r17,16
  80dadc:	8bffffcc 	andi	r15,r17,65535
  80dae0:	7d23383a 	mul	r17,r15,r20
  80dae4:	7949383a 	mul	r4,r15,r5
  80dae8:	9d29383a 	mul	r20,r19,r20
  80daec:	8814d43a 	srli	r10,r17,16
  80daf0:	3012943a 	slli	r9,r6,16
  80daf4:	a129883a 	add	r20,r20,r4
  80daf8:	633fffcc 	andi	r12,r12,65535
  80dafc:	5515883a 	add	r10,r10,r20
  80db00:	3006d43a 	srli	r3,r6,16
  80db04:	4b13883a 	add	r9,r9,r12
  80db08:	2ccb383a 	mul	r5,r5,r19
  80db0c:	5100022e 	bgeu	r10,r4,80db18 <__muldf3+0x3b8>
  80db10:	01000074 	movhi	r4,1
  80db14:	290b883a 	add	r5,r5,r4
  80db18:	802ad43a 	srli	r21,r16,16
  80db1c:	843fffcc 	andi	r16,r16,65535
  80db20:	440d383a 	mul	r6,r8,r16
  80db24:	4565383a 	mul	r18,r8,r21
  80db28:	8349383a 	mul	r4,r16,r13
  80db2c:	500e943a 	slli	r7,r10,16
  80db30:	3010d43a 	srli	r8,r6,16
  80db34:	5028d43a 	srli	r20,r10,16
  80db38:	2489883a 	add	r4,r4,r18
  80db3c:	8abfffcc 	andi	r10,r17,65535
  80db40:	3a95883a 	add	r10,r7,r10
  80db44:	4119883a 	add	r12,r8,r4
  80db48:	a169883a 	add	r20,r20,r5
  80db4c:	1a87883a 	add	r3,r3,r10
  80db50:	6d5b383a 	mul	r13,r13,r21
  80db54:	6480022e 	bgeu	r12,r18,80db60 <__muldf3+0x400>
  80db58:	01000074 	movhi	r4,1
  80db5c:	691b883a 	add	r13,r13,r4
  80db60:	7c25383a 	mul	r18,r15,r16
  80db64:	7d4b383a 	mul	r5,r15,r21
  80db68:	84cf383a 	mul	r7,r16,r19
  80db6c:	901ed43a 	srli	r15,r18,16
  80db70:	6008d43a 	srli	r4,r12,16
  80db74:	6010943a 	slli	r8,r12,16
  80db78:	394f883a 	add	r7,r7,r5
  80db7c:	333fffcc 	andi	r12,r6,65535
  80db80:	79df883a 	add	r15,r15,r7
  80db84:	235b883a 	add	r13,r4,r13
  80db88:	9d63383a 	mul	r17,r19,r21
  80db8c:	4309883a 	add	r4,r8,r12
  80db90:	7940022e 	bgeu	r15,r5,80db9c <__muldf3+0x43c>
  80db94:	01400074 	movhi	r5,1
  80db98:	8963883a 	add	r17,r17,r5
  80db9c:	780a943a 	slli	r5,r15,16
  80dba0:	91bfffcc 	andi	r6,r18,65535
  80dba4:	70c7883a 	add	r3,r14,r3
  80dba8:	298d883a 	add	r6,r5,r6
  80dbac:	1a8f803a 	cmpltu	r7,r3,r10
  80dbb0:	350b883a 	add	r5,r6,r20
  80dbb4:	20c7883a 	add	r3,r4,r3
  80dbb8:	3955883a 	add	r10,r7,r5
  80dbbc:	1909803a 	cmpltu	r4,r3,r4
  80dbc0:	6a91883a 	add	r8,r13,r10
  80dbc4:	780cd43a 	srli	r6,r15,16
  80dbc8:	2219883a 	add	r12,r4,r8
  80dbcc:	2d0b803a 	cmpltu	r5,r5,r20
  80dbd0:	51cf803a 	cmpltu	r7,r10,r7
  80dbd4:	29ceb03a 	or	r7,r5,r7
  80dbd8:	4351803a 	cmpltu	r8,r8,r13
  80dbdc:	610b803a 	cmpltu	r5,r12,r4
  80dbe0:	4148b03a 	or	r4,r8,r5
  80dbe4:	398f883a 	add	r7,r7,r6
  80dbe8:	3909883a 	add	r4,r7,r4
  80dbec:	1810927a 	slli	r8,r3,9
  80dbf0:	2449883a 	add	r4,r4,r17
  80dbf4:	2008927a 	slli	r4,r4,9
  80dbf8:	6022d5fa 	srli	r17,r12,23
  80dbfc:	1806d5fa 	srli	r3,r3,23
  80dc00:	4252b03a 	or	r9,r8,r9
  80dc04:	600a927a 	slli	r5,r12,9
  80dc08:	4810c03a 	cmpne	r8,r9,zero
  80dc0c:	2462b03a 	or	r17,r4,r17
  80dc10:	40c6b03a 	or	r3,r8,r3
  80dc14:	8900402c 	andhi	r4,r17,256
  80dc18:	1950b03a 	or	r8,r3,r5
  80dc1c:	20000726 	beq	r4,zero,80dc3c <__muldf3+0x4dc>
  80dc20:	4006d07a 	srli	r3,r8,1
  80dc24:	880497fa 	slli	r2,r17,31
  80dc28:	4200004c 	andi	r8,r8,1
  80dc2c:	8822d07a 	srli	r17,r17,1
  80dc30:	1a10b03a 	or	r8,r3,r8
  80dc34:	1210b03a 	or	r8,r2,r8
  80dc38:	5805883a 	mov	r2,r11
  80dc3c:	1140ffc4 	addi	r5,r2,1023
  80dc40:	0140440e 	bge	zero,r5,80dd54 <__muldf3+0x5f4>
  80dc44:	40c001cc 	andi	r3,r8,7
  80dc48:	18000726 	beq	r3,zero,80dc68 <__muldf3+0x508>
  80dc4c:	40c003cc 	andi	r3,r8,15
  80dc50:	01000104 	movi	r4,4
  80dc54:	19000426 	beq	r3,r4,80dc68 <__muldf3+0x508>
  80dc58:	4107883a 	add	r3,r8,r4
  80dc5c:	1a11803a 	cmpltu	r8,r3,r8
  80dc60:	8a23883a 	add	r17,r17,r8
  80dc64:	1811883a 	mov	r8,r3
  80dc68:	88c0402c 	andhi	r3,r17,256
  80dc6c:	18000426 	beq	r3,zero,80dc80 <__muldf3+0x520>
  80dc70:	11410004 	addi	r5,r2,1024
  80dc74:	00bfc034 	movhi	r2,65280
  80dc78:	10bfffc4 	addi	r2,r2,-1
  80dc7c:	88a2703a 	and	r17,r17,r2
  80dc80:	0081ff84 	movi	r2,2046
  80dc84:	117f6416 	blt	r2,r5,80da18 <__alt_mem_onchip_mem+0xff78da18>
  80dc88:	8828977a 	slli	r20,r17,29
  80dc8c:	4010d0fa 	srli	r8,r8,3
  80dc90:	8822927a 	slli	r17,r17,9
  80dc94:	2881ffcc 	andi	r2,r5,2047
  80dc98:	a228b03a 	or	r20,r20,r8
  80dc9c:	880ad33a 	srli	r5,r17,12
  80dca0:	b02b883a 	mov	r21,r22
  80dca4:	003f0d06 	br	80d8dc <__alt_mem_onchip_mem+0xff78d8dc>
  80dca8:	8080022c 	andhi	r2,r16,8
  80dcac:	10000926 	beq	r2,zero,80dcd4 <__muldf3+0x574>
  80dcb0:	8880022c 	andhi	r2,r17,8
  80dcb4:	1000071e 	bne	r2,zero,80dcd4 <__muldf3+0x574>
  80dcb8:	00800434 	movhi	r2,16
  80dcbc:	89400234 	orhi	r5,r17,8
  80dcc0:	10bfffc4 	addi	r2,r2,-1
  80dcc4:	b82b883a 	mov	r21,r23
  80dcc8:	288a703a 	and	r5,r5,r2
  80dccc:	4029883a 	mov	r20,r8
  80dcd0:	003f6806 	br	80da74 <__alt_mem_onchip_mem+0xff78da74>
  80dcd4:	00800434 	movhi	r2,16
  80dcd8:	81400234 	orhi	r5,r16,8
  80dcdc:	10bfffc4 	addi	r2,r2,-1
  80dce0:	288a703a 	and	r5,r5,r2
  80dce4:	003f6306 	br	80da74 <__alt_mem_onchip_mem+0xff78da74>
  80dce8:	147ff604 	addi	r17,r2,-40
  80dcec:	3462983a 	sll	r17,r6,r17
  80dcf0:	0011883a 	mov	r8,zero
  80dcf4:	003f4406 	br	80da08 <__alt_mem_onchip_mem+0xff78da08>
  80dcf8:	3009883a 	mov	r4,r6
  80dcfc:	d9800215 	stw	r6,8(sp)
  80dd00:	da400115 	stw	r9,4(sp)
  80dd04:	da800015 	stw	r10,0(sp)
  80dd08:	080e9780 	call	80e978 <__clzsi2>
  80dd0c:	10800804 	addi	r2,r2,32
  80dd10:	da800017 	ldw	r10,0(sp)
  80dd14:	da400117 	ldw	r9,4(sp)
  80dd18:	d9800217 	ldw	r6,8(sp)
  80dd1c:	003f3006 	br	80d9e0 <__alt_mem_onchip_mem+0xff78d9e0>
  80dd20:	143ff604 	addi	r16,r2,-40
  80dd24:	9c20983a 	sll	r16,r19,r16
  80dd28:	0029883a 	mov	r20,zero
  80dd2c:	003f1606 	br	80d988 <__alt_mem_onchip_mem+0xff78d988>
  80dd30:	d9800215 	stw	r6,8(sp)
  80dd34:	d9c00015 	stw	r7,0(sp)
  80dd38:	da400115 	stw	r9,4(sp)
  80dd3c:	080e9780 	call	80e978 <__clzsi2>
  80dd40:	10800804 	addi	r2,r2,32
  80dd44:	da400117 	ldw	r9,4(sp)
  80dd48:	d9c00017 	ldw	r7,0(sp)
  80dd4c:	d9800217 	ldw	r6,8(sp)
  80dd50:	003f0306 	br	80d960 <__alt_mem_onchip_mem+0xff78d960>
  80dd54:	00c00044 	movi	r3,1
  80dd58:	1947c83a 	sub	r3,r3,r5
  80dd5c:	00800e04 	movi	r2,56
  80dd60:	10feda16 	blt	r2,r3,80d8cc <__alt_mem_onchip_mem+0xff78d8cc>
  80dd64:	008007c4 	movi	r2,31
  80dd68:	10c01b16 	blt	r2,r3,80ddd8 <__muldf3+0x678>
  80dd6c:	00800804 	movi	r2,32
  80dd70:	10c5c83a 	sub	r2,r2,r3
  80dd74:	888a983a 	sll	r5,r17,r2
  80dd78:	40c8d83a 	srl	r4,r8,r3
  80dd7c:	4084983a 	sll	r2,r8,r2
  80dd80:	88e2d83a 	srl	r17,r17,r3
  80dd84:	2906b03a 	or	r3,r5,r4
  80dd88:	1004c03a 	cmpne	r2,r2,zero
  80dd8c:	1886b03a 	or	r3,r3,r2
  80dd90:	188001cc 	andi	r2,r3,7
  80dd94:	10000726 	beq	r2,zero,80ddb4 <__muldf3+0x654>
  80dd98:	188003cc 	andi	r2,r3,15
  80dd9c:	01000104 	movi	r4,4
  80dda0:	11000426 	beq	r2,r4,80ddb4 <__muldf3+0x654>
  80dda4:	1805883a 	mov	r2,r3
  80dda8:	10c00104 	addi	r3,r2,4
  80ddac:	1885803a 	cmpltu	r2,r3,r2
  80ddb0:	88a3883a 	add	r17,r17,r2
  80ddb4:	8880202c 	andhi	r2,r17,128
  80ddb8:	10001c26 	beq	r2,zero,80de2c <__muldf3+0x6cc>
  80ddbc:	b02b883a 	mov	r21,r22
  80ddc0:	00800044 	movi	r2,1
  80ddc4:	000b883a 	mov	r5,zero
  80ddc8:	0029883a 	mov	r20,zero
  80ddcc:	003ec306 	br	80d8dc <__alt_mem_onchip_mem+0xff78d8dc>
  80ddd0:	5805883a 	mov	r2,r11
  80ddd4:	003f9906 	br	80dc3c <__alt_mem_onchip_mem+0xff78dc3c>
  80ddd8:	00bff844 	movi	r2,-31
  80dddc:	1145c83a 	sub	r2,r2,r5
  80dde0:	8888d83a 	srl	r4,r17,r2
  80dde4:	00800804 	movi	r2,32
  80dde8:	18801a26 	beq	r3,r2,80de54 <__muldf3+0x6f4>
  80ddec:	00801004 	movi	r2,64
  80ddf0:	10c5c83a 	sub	r2,r2,r3
  80ddf4:	8884983a 	sll	r2,r17,r2
  80ddf8:	1204b03a 	or	r2,r2,r8
  80ddfc:	1004c03a 	cmpne	r2,r2,zero
  80de00:	2084b03a 	or	r2,r4,r2
  80de04:	144001cc 	andi	r17,r2,7
  80de08:	88000d1e 	bne	r17,zero,80de40 <__muldf3+0x6e0>
  80de0c:	000b883a 	mov	r5,zero
  80de10:	1028d0fa 	srli	r20,r2,3
  80de14:	b02b883a 	mov	r21,r22
  80de18:	0005883a 	mov	r2,zero
  80de1c:	a468b03a 	or	r20,r20,r17
  80de20:	003eae06 	br	80d8dc <__alt_mem_onchip_mem+0xff78d8dc>
  80de24:	1007883a 	mov	r3,r2
  80de28:	0023883a 	mov	r17,zero
  80de2c:	880a927a 	slli	r5,r17,9
  80de30:	1805883a 	mov	r2,r3
  80de34:	8822977a 	slli	r17,r17,29
  80de38:	280ad33a 	srli	r5,r5,12
  80de3c:	003ff406 	br	80de10 <__alt_mem_onchip_mem+0xff78de10>
  80de40:	10c003cc 	andi	r3,r2,15
  80de44:	01000104 	movi	r4,4
  80de48:	193ff626 	beq	r3,r4,80de24 <__alt_mem_onchip_mem+0xff78de24>
  80de4c:	0023883a 	mov	r17,zero
  80de50:	003fd506 	br	80dda8 <__alt_mem_onchip_mem+0xff78dda8>
  80de54:	0005883a 	mov	r2,zero
  80de58:	003fe706 	br	80ddf8 <__alt_mem_onchip_mem+0xff78ddf8>
  80de5c:	00800434 	movhi	r2,16
  80de60:	89400234 	orhi	r5,r17,8
  80de64:	10bfffc4 	addi	r2,r2,-1
  80de68:	b02b883a 	mov	r21,r22
  80de6c:	288a703a 	and	r5,r5,r2
  80de70:	4029883a 	mov	r20,r8
  80de74:	003eff06 	br	80da74 <__alt_mem_onchip_mem+0xff78da74>

0080de78 <__subdf3>:
  80de78:	02000434 	movhi	r8,16
  80de7c:	423fffc4 	addi	r8,r8,-1
  80de80:	defffb04 	addi	sp,sp,-20
  80de84:	2a14703a 	and	r10,r5,r8
  80de88:	3812d53a 	srli	r9,r7,20
  80de8c:	3a10703a 	and	r8,r7,r8
  80de90:	2006d77a 	srli	r3,r4,29
  80de94:	3004d77a 	srli	r2,r6,29
  80de98:	dc000015 	stw	r16,0(sp)
  80de9c:	501490fa 	slli	r10,r10,3
  80dea0:	2820d53a 	srli	r16,r5,20
  80dea4:	401090fa 	slli	r8,r8,3
  80dea8:	dc800215 	stw	r18,8(sp)
  80deac:	dc400115 	stw	r17,4(sp)
  80deb0:	dfc00415 	stw	ra,16(sp)
  80deb4:	202290fa 	slli	r17,r4,3
  80deb8:	dcc00315 	stw	r19,12(sp)
  80debc:	4a41ffcc 	andi	r9,r9,2047
  80dec0:	0101ffc4 	movi	r4,2047
  80dec4:	2824d7fa 	srli	r18,r5,31
  80dec8:	8401ffcc 	andi	r16,r16,2047
  80decc:	50c6b03a 	or	r3,r10,r3
  80ded0:	380ed7fa 	srli	r7,r7,31
  80ded4:	408ab03a 	or	r5,r8,r2
  80ded8:	300c90fa 	slli	r6,r6,3
  80dedc:	49009626 	beq	r9,r4,80e138 <__subdf3+0x2c0>
  80dee0:	39c0005c 	xori	r7,r7,1
  80dee4:	8245c83a 	sub	r2,r16,r9
  80dee8:	3c807426 	beq	r7,r18,80e0bc <__subdf3+0x244>
  80deec:	0080af0e 	bge	zero,r2,80e1ac <__subdf3+0x334>
  80def0:	48002a1e 	bne	r9,zero,80df9c <__subdf3+0x124>
  80def4:	2988b03a 	or	r4,r5,r6
  80def8:	20009a1e 	bne	r4,zero,80e164 <__subdf3+0x2ec>
  80defc:	888001cc 	andi	r2,r17,7
  80df00:	10000726 	beq	r2,zero,80df20 <__subdf3+0xa8>
  80df04:	888003cc 	andi	r2,r17,15
  80df08:	01000104 	movi	r4,4
  80df0c:	11000426 	beq	r2,r4,80df20 <__subdf3+0xa8>
  80df10:	890b883a 	add	r5,r17,r4
  80df14:	2c63803a 	cmpltu	r17,r5,r17
  80df18:	1c47883a 	add	r3,r3,r17
  80df1c:	2823883a 	mov	r17,r5
  80df20:	1880202c 	andhi	r2,r3,128
  80df24:	10005926 	beq	r2,zero,80e08c <__subdf3+0x214>
  80df28:	84000044 	addi	r16,r16,1
  80df2c:	0081ffc4 	movi	r2,2047
  80df30:	8080be26 	beq	r16,r2,80e22c <__subdf3+0x3b4>
  80df34:	017fe034 	movhi	r5,65408
  80df38:	297fffc4 	addi	r5,r5,-1
  80df3c:	1946703a 	and	r3,r3,r5
  80df40:	1804977a 	slli	r2,r3,29
  80df44:	1806927a 	slli	r3,r3,9
  80df48:	8822d0fa 	srli	r17,r17,3
  80df4c:	8401ffcc 	andi	r16,r16,2047
  80df50:	180ad33a 	srli	r5,r3,12
  80df54:	9100004c 	andi	r4,r18,1
  80df58:	1444b03a 	or	r2,r2,r17
  80df5c:	80c1ffcc 	andi	r3,r16,2047
  80df60:	1820953a 	slli	r16,r3,20
  80df64:	20c03fcc 	andi	r3,r4,255
  80df68:	180897fa 	slli	r4,r3,31
  80df6c:	00c00434 	movhi	r3,16
  80df70:	18ffffc4 	addi	r3,r3,-1
  80df74:	28c6703a 	and	r3,r5,r3
  80df78:	1c06b03a 	or	r3,r3,r16
  80df7c:	1906b03a 	or	r3,r3,r4
  80df80:	dfc00417 	ldw	ra,16(sp)
  80df84:	dcc00317 	ldw	r19,12(sp)
  80df88:	dc800217 	ldw	r18,8(sp)
  80df8c:	dc400117 	ldw	r17,4(sp)
  80df90:	dc000017 	ldw	r16,0(sp)
  80df94:	dec00504 	addi	sp,sp,20
  80df98:	f800283a 	ret
  80df9c:	0101ffc4 	movi	r4,2047
  80dfa0:	813fd626 	beq	r16,r4,80defc <__alt_mem_onchip_mem+0xff78defc>
  80dfa4:	29402034 	orhi	r5,r5,128
  80dfa8:	01000e04 	movi	r4,56
  80dfac:	2080a316 	blt	r4,r2,80e23c <__subdf3+0x3c4>
  80dfb0:	010007c4 	movi	r4,31
  80dfb4:	2080c616 	blt	r4,r2,80e2d0 <__subdf3+0x458>
  80dfb8:	01000804 	movi	r4,32
  80dfbc:	2089c83a 	sub	r4,r4,r2
  80dfc0:	2910983a 	sll	r8,r5,r4
  80dfc4:	308ed83a 	srl	r7,r6,r2
  80dfc8:	3108983a 	sll	r4,r6,r4
  80dfcc:	2884d83a 	srl	r2,r5,r2
  80dfd0:	41ccb03a 	or	r6,r8,r7
  80dfd4:	2008c03a 	cmpne	r4,r4,zero
  80dfd8:	310cb03a 	or	r6,r6,r4
  80dfdc:	898dc83a 	sub	r6,r17,r6
  80dfe0:	89a3803a 	cmpltu	r17,r17,r6
  80dfe4:	1887c83a 	sub	r3,r3,r2
  80dfe8:	1c47c83a 	sub	r3,r3,r17
  80dfec:	3023883a 	mov	r17,r6
  80dff0:	1880202c 	andhi	r2,r3,128
  80dff4:	10002326 	beq	r2,zero,80e084 <__subdf3+0x20c>
  80dff8:	04c02034 	movhi	r19,128
  80dffc:	9cffffc4 	addi	r19,r19,-1
  80e000:	1ce6703a 	and	r19,r3,r19
  80e004:	98007a26 	beq	r19,zero,80e1f0 <__subdf3+0x378>
  80e008:	9809883a 	mov	r4,r19
  80e00c:	080e9780 	call	80e978 <__clzsi2>
  80e010:	113ffe04 	addi	r4,r2,-8
  80e014:	00c007c4 	movi	r3,31
  80e018:	19007b16 	blt	r3,r4,80e208 <__subdf3+0x390>
  80e01c:	00800804 	movi	r2,32
  80e020:	1105c83a 	sub	r2,r2,r4
  80e024:	8884d83a 	srl	r2,r17,r2
  80e028:	9906983a 	sll	r3,r19,r4
  80e02c:	8922983a 	sll	r17,r17,r4
  80e030:	10c4b03a 	or	r2,r2,r3
  80e034:	24007816 	blt	r4,r16,80e218 <__subdf3+0x3a0>
  80e038:	2421c83a 	sub	r16,r4,r16
  80e03c:	80c00044 	addi	r3,r16,1
  80e040:	010007c4 	movi	r4,31
  80e044:	20c09516 	blt	r4,r3,80e29c <__subdf3+0x424>
  80e048:	01400804 	movi	r5,32
  80e04c:	28cbc83a 	sub	r5,r5,r3
  80e050:	88c8d83a 	srl	r4,r17,r3
  80e054:	8962983a 	sll	r17,r17,r5
  80e058:	114a983a 	sll	r5,r2,r5
  80e05c:	10c6d83a 	srl	r3,r2,r3
  80e060:	8804c03a 	cmpne	r2,r17,zero
  80e064:	290ab03a 	or	r5,r5,r4
  80e068:	28a2b03a 	or	r17,r5,r2
  80e06c:	0021883a 	mov	r16,zero
  80e070:	003fa206 	br	80defc <__alt_mem_onchip_mem+0xff78defc>
  80e074:	2090b03a 	or	r8,r4,r2
  80e078:	40018e26 	beq	r8,zero,80e6b4 <__subdf3+0x83c>
  80e07c:	1007883a 	mov	r3,r2
  80e080:	2023883a 	mov	r17,r4
  80e084:	888001cc 	andi	r2,r17,7
  80e088:	103f9e1e 	bne	r2,zero,80df04 <__alt_mem_onchip_mem+0xff78df04>
  80e08c:	1804977a 	slli	r2,r3,29
  80e090:	8822d0fa 	srli	r17,r17,3
  80e094:	1810d0fa 	srli	r8,r3,3
  80e098:	9100004c 	andi	r4,r18,1
  80e09c:	1444b03a 	or	r2,r2,r17
  80e0a0:	00c1ffc4 	movi	r3,2047
  80e0a4:	80c02826 	beq	r16,r3,80e148 <__subdf3+0x2d0>
  80e0a8:	01400434 	movhi	r5,16
  80e0ac:	297fffc4 	addi	r5,r5,-1
  80e0b0:	80e0703a 	and	r16,r16,r3
  80e0b4:	414a703a 	and	r5,r8,r5
  80e0b8:	003fa806 	br	80df5c <__alt_mem_onchip_mem+0xff78df5c>
  80e0bc:	0080630e 	bge	zero,r2,80e24c <__subdf3+0x3d4>
  80e0c0:	48003026 	beq	r9,zero,80e184 <__subdf3+0x30c>
  80e0c4:	0101ffc4 	movi	r4,2047
  80e0c8:	813f8c26 	beq	r16,r4,80defc <__alt_mem_onchip_mem+0xff78defc>
  80e0cc:	29402034 	orhi	r5,r5,128
  80e0d0:	01000e04 	movi	r4,56
  80e0d4:	2080a90e 	bge	r4,r2,80e37c <__subdf3+0x504>
  80e0d8:	298cb03a 	or	r6,r5,r6
  80e0dc:	3012c03a 	cmpne	r9,r6,zero
  80e0e0:	0005883a 	mov	r2,zero
  80e0e4:	4c53883a 	add	r9,r9,r17
  80e0e8:	4c63803a 	cmpltu	r17,r9,r17
  80e0ec:	10c7883a 	add	r3,r2,r3
  80e0f0:	88c7883a 	add	r3,r17,r3
  80e0f4:	4823883a 	mov	r17,r9
  80e0f8:	1880202c 	andhi	r2,r3,128
  80e0fc:	1000d026 	beq	r2,zero,80e440 <__subdf3+0x5c8>
  80e100:	84000044 	addi	r16,r16,1
  80e104:	0081ffc4 	movi	r2,2047
  80e108:	8080fe26 	beq	r16,r2,80e504 <__subdf3+0x68c>
  80e10c:	00bfe034 	movhi	r2,65408
  80e110:	10bfffc4 	addi	r2,r2,-1
  80e114:	1886703a 	and	r3,r3,r2
  80e118:	880ad07a 	srli	r5,r17,1
  80e11c:	180497fa 	slli	r2,r3,31
  80e120:	8900004c 	andi	r4,r17,1
  80e124:	2922b03a 	or	r17,r5,r4
  80e128:	1806d07a 	srli	r3,r3,1
  80e12c:	1462b03a 	or	r17,r2,r17
  80e130:	3825883a 	mov	r18,r7
  80e134:	003f7106 	br	80defc <__alt_mem_onchip_mem+0xff78defc>
  80e138:	2984b03a 	or	r2,r5,r6
  80e13c:	103f6826 	beq	r2,zero,80dee0 <__alt_mem_onchip_mem+0xff78dee0>
  80e140:	39c03fcc 	andi	r7,r7,255
  80e144:	003f6706 	br	80dee4 <__alt_mem_onchip_mem+0xff78dee4>
  80e148:	4086b03a 	or	r3,r8,r2
  80e14c:	18015226 	beq	r3,zero,80e698 <__subdf3+0x820>
  80e150:	00c00434 	movhi	r3,16
  80e154:	41400234 	orhi	r5,r8,8
  80e158:	18ffffc4 	addi	r3,r3,-1
  80e15c:	28ca703a 	and	r5,r5,r3
  80e160:	003f7e06 	br	80df5c <__alt_mem_onchip_mem+0xff78df5c>
  80e164:	10bfffc4 	addi	r2,r2,-1
  80e168:	1000491e 	bne	r2,zero,80e290 <__subdf3+0x418>
  80e16c:	898fc83a 	sub	r7,r17,r6
  80e170:	89e3803a 	cmpltu	r17,r17,r7
  80e174:	1947c83a 	sub	r3,r3,r5
  80e178:	1c47c83a 	sub	r3,r3,r17
  80e17c:	3823883a 	mov	r17,r7
  80e180:	003f9b06 	br	80dff0 <__alt_mem_onchip_mem+0xff78dff0>
  80e184:	2988b03a 	or	r4,r5,r6
  80e188:	203f5c26 	beq	r4,zero,80defc <__alt_mem_onchip_mem+0xff78defc>
  80e18c:	10bfffc4 	addi	r2,r2,-1
  80e190:	1000931e 	bne	r2,zero,80e3e0 <__subdf3+0x568>
  80e194:	898d883a 	add	r6,r17,r6
  80e198:	3463803a 	cmpltu	r17,r6,r17
  80e19c:	1947883a 	add	r3,r3,r5
  80e1a0:	88c7883a 	add	r3,r17,r3
  80e1a4:	3023883a 	mov	r17,r6
  80e1a8:	003fd306 	br	80e0f8 <__alt_mem_onchip_mem+0xff78e0f8>
  80e1ac:	1000541e 	bne	r2,zero,80e300 <__subdf3+0x488>
  80e1b0:	80800044 	addi	r2,r16,1
  80e1b4:	1081ffcc 	andi	r2,r2,2047
  80e1b8:	01000044 	movi	r4,1
  80e1bc:	2080a20e 	bge	r4,r2,80e448 <__subdf3+0x5d0>
  80e1c0:	8989c83a 	sub	r4,r17,r6
  80e1c4:	8905803a 	cmpltu	r2,r17,r4
  80e1c8:	1967c83a 	sub	r19,r3,r5
  80e1cc:	98a7c83a 	sub	r19,r19,r2
  80e1d0:	9880202c 	andhi	r2,r19,128
  80e1d4:	10006326 	beq	r2,zero,80e364 <__subdf3+0x4ec>
  80e1d8:	3463c83a 	sub	r17,r6,r17
  80e1dc:	28c7c83a 	sub	r3,r5,r3
  80e1e0:	344d803a 	cmpltu	r6,r6,r17
  80e1e4:	19a7c83a 	sub	r19,r3,r6
  80e1e8:	3825883a 	mov	r18,r7
  80e1ec:	983f861e 	bne	r19,zero,80e008 <__alt_mem_onchip_mem+0xff78e008>
  80e1f0:	8809883a 	mov	r4,r17
  80e1f4:	080e9780 	call	80e978 <__clzsi2>
  80e1f8:	10800804 	addi	r2,r2,32
  80e1fc:	113ffe04 	addi	r4,r2,-8
  80e200:	00c007c4 	movi	r3,31
  80e204:	193f850e 	bge	r3,r4,80e01c <__alt_mem_onchip_mem+0xff78e01c>
  80e208:	10bff604 	addi	r2,r2,-40
  80e20c:	8884983a 	sll	r2,r17,r2
  80e210:	0023883a 	mov	r17,zero
  80e214:	243f880e 	bge	r4,r16,80e038 <__alt_mem_onchip_mem+0xff78e038>
  80e218:	00ffe034 	movhi	r3,65408
  80e21c:	18ffffc4 	addi	r3,r3,-1
  80e220:	8121c83a 	sub	r16,r16,r4
  80e224:	10c6703a 	and	r3,r2,r3
  80e228:	003f3406 	br	80defc <__alt_mem_onchip_mem+0xff78defc>
  80e22c:	9100004c 	andi	r4,r18,1
  80e230:	000b883a 	mov	r5,zero
  80e234:	0005883a 	mov	r2,zero
  80e238:	003f4806 	br	80df5c <__alt_mem_onchip_mem+0xff78df5c>
  80e23c:	298cb03a 	or	r6,r5,r6
  80e240:	300cc03a 	cmpne	r6,r6,zero
  80e244:	0005883a 	mov	r2,zero
  80e248:	003f6406 	br	80dfdc <__alt_mem_onchip_mem+0xff78dfdc>
  80e24c:	10009a1e 	bne	r2,zero,80e4b8 <__subdf3+0x640>
  80e250:	82400044 	addi	r9,r16,1
  80e254:	4881ffcc 	andi	r2,r9,2047
  80e258:	02800044 	movi	r10,1
  80e25c:	5080670e 	bge	r10,r2,80e3fc <__subdf3+0x584>
  80e260:	0081ffc4 	movi	r2,2047
  80e264:	4880af26 	beq	r9,r2,80e524 <__subdf3+0x6ac>
  80e268:	898d883a 	add	r6,r17,r6
  80e26c:	1945883a 	add	r2,r3,r5
  80e270:	3447803a 	cmpltu	r3,r6,r17
  80e274:	1887883a 	add	r3,r3,r2
  80e278:	182297fa 	slli	r17,r3,31
  80e27c:	300cd07a 	srli	r6,r6,1
  80e280:	1806d07a 	srli	r3,r3,1
  80e284:	4821883a 	mov	r16,r9
  80e288:	89a2b03a 	or	r17,r17,r6
  80e28c:	003f1b06 	br	80defc <__alt_mem_onchip_mem+0xff78defc>
  80e290:	0101ffc4 	movi	r4,2047
  80e294:	813f441e 	bne	r16,r4,80dfa8 <__alt_mem_onchip_mem+0xff78dfa8>
  80e298:	003f1806 	br	80defc <__alt_mem_onchip_mem+0xff78defc>
  80e29c:	843ff844 	addi	r16,r16,-31
  80e2a0:	01400804 	movi	r5,32
  80e2a4:	1408d83a 	srl	r4,r2,r16
  80e2a8:	19405026 	beq	r3,r5,80e3ec <__subdf3+0x574>
  80e2ac:	01401004 	movi	r5,64
  80e2b0:	28c7c83a 	sub	r3,r5,r3
  80e2b4:	10c4983a 	sll	r2,r2,r3
  80e2b8:	88a2b03a 	or	r17,r17,r2
  80e2bc:	8822c03a 	cmpne	r17,r17,zero
  80e2c0:	2462b03a 	or	r17,r4,r17
  80e2c4:	0007883a 	mov	r3,zero
  80e2c8:	0021883a 	mov	r16,zero
  80e2cc:	003f6d06 	br	80e084 <__alt_mem_onchip_mem+0xff78e084>
  80e2d0:	11fff804 	addi	r7,r2,-32
  80e2d4:	01000804 	movi	r4,32
  80e2d8:	29ced83a 	srl	r7,r5,r7
  80e2dc:	11004526 	beq	r2,r4,80e3f4 <__subdf3+0x57c>
  80e2e0:	01001004 	movi	r4,64
  80e2e4:	2089c83a 	sub	r4,r4,r2
  80e2e8:	2904983a 	sll	r2,r5,r4
  80e2ec:	118cb03a 	or	r6,r2,r6
  80e2f0:	300cc03a 	cmpne	r6,r6,zero
  80e2f4:	398cb03a 	or	r6,r7,r6
  80e2f8:	0005883a 	mov	r2,zero
  80e2fc:	003f3706 	br	80dfdc <__alt_mem_onchip_mem+0xff78dfdc>
  80e300:	80002a26 	beq	r16,zero,80e3ac <__subdf3+0x534>
  80e304:	0101ffc4 	movi	r4,2047
  80e308:	49006626 	beq	r9,r4,80e4a4 <__subdf3+0x62c>
  80e30c:	0085c83a 	sub	r2,zero,r2
  80e310:	18c02034 	orhi	r3,r3,128
  80e314:	01000e04 	movi	r4,56
  80e318:	20807e16 	blt	r4,r2,80e514 <__subdf3+0x69c>
  80e31c:	010007c4 	movi	r4,31
  80e320:	2080e716 	blt	r4,r2,80e6c0 <__subdf3+0x848>
  80e324:	01000804 	movi	r4,32
  80e328:	2089c83a 	sub	r4,r4,r2
  80e32c:	1914983a 	sll	r10,r3,r4
  80e330:	8890d83a 	srl	r8,r17,r2
  80e334:	8908983a 	sll	r4,r17,r4
  80e338:	1884d83a 	srl	r2,r3,r2
  80e33c:	5222b03a 	or	r17,r10,r8
  80e340:	2006c03a 	cmpne	r3,r4,zero
  80e344:	88e2b03a 	or	r17,r17,r3
  80e348:	3463c83a 	sub	r17,r6,r17
  80e34c:	2885c83a 	sub	r2,r5,r2
  80e350:	344d803a 	cmpltu	r6,r6,r17
  80e354:	1187c83a 	sub	r3,r2,r6
  80e358:	4821883a 	mov	r16,r9
  80e35c:	3825883a 	mov	r18,r7
  80e360:	003f2306 	br	80dff0 <__alt_mem_onchip_mem+0xff78dff0>
  80e364:	24d0b03a 	or	r8,r4,r19
  80e368:	40001b1e 	bne	r8,zero,80e3d8 <__subdf3+0x560>
  80e36c:	0005883a 	mov	r2,zero
  80e370:	0009883a 	mov	r4,zero
  80e374:	0021883a 	mov	r16,zero
  80e378:	003f4906 	br	80e0a0 <__alt_mem_onchip_mem+0xff78e0a0>
  80e37c:	010007c4 	movi	r4,31
  80e380:	20803a16 	blt	r4,r2,80e46c <__subdf3+0x5f4>
  80e384:	01000804 	movi	r4,32
  80e388:	2089c83a 	sub	r4,r4,r2
  80e38c:	2912983a 	sll	r9,r5,r4
  80e390:	3090d83a 	srl	r8,r6,r2
  80e394:	3108983a 	sll	r4,r6,r4
  80e398:	2884d83a 	srl	r2,r5,r2
  80e39c:	4a12b03a 	or	r9,r9,r8
  80e3a0:	2008c03a 	cmpne	r4,r4,zero
  80e3a4:	4912b03a 	or	r9,r9,r4
  80e3a8:	003f4e06 	br	80e0e4 <__alt_mem_onchip_mem+0xff78e0e4>
  80e3ac:	1c48b03a 	or	r4,r3,r17
  80e3b0:	20003c26 	beq	r4,zero,80e4a4 <__subdf3+0x62c>
  80e3b4:	0084303a 	nor	r2,zero,r2
  80e3b8:	1000381e 	bne	r2,zero,80e49c <__subdf3+0x624>
  80e3bc:	3463c83a 	sub	r17,r6,r17
  80e3c0:	28c5c83a 	sub	r2,r5,r3
  80e3c4:	344d803a 	cmpltu	r6,r6,r17
  80e3c8:	1187c83a 	sub	r3,r2,r6
  80e3cc:	4821883a 	mov	r16,r9
  80e3d0:	3825883a 	mov	r18,r7
  80e3d4:	003f0606 	br	80dff0 <__alt_mem_onchip_mem+0xff78dff0>
  80e3d8:	2023883a 	mov	r17,r4
  80e3dc:	003f0906 	br	80e004 <__alt_mem_onchip_mem+0xff78e004>
  80e3e0:	0101ffc4 	movi	r4,2047
  80e3e4:	813f3a1e 	bne	r16,r4,80e0d0 <__alt_mem_onchip_mem+0xff78e0d0>
  80e3e8:	003ec406 	br	80defc <__alt_mem_onchip_mem+0xff78defc>
  80e3ec:	0005883a 	mov	r2,zero
  80e3f0:	003fb106 	br	80e2b8 <__alt_mem_onchip_mem+0xff78e2b8>
  80e3f4:	0005883a 	mov	r2,zero
  80e3f8:	003fbc06 	br	80e2ec <__alt_mem_onchip_mem+0xff78e2ec>
  80e3fc:	1c44b03a 	or	r2,r3,r17
  80e400:	80008e1e 	bne	r16,zero,80e63c <__subdf3+0x7c4>
  80e404:	1000c826 	beq	r2,zero,80e728 <__subdf3+0x8b0>
  80e408:	2984b03a 	or	r2,r5,r6
  80e40c:	103ebb26 	beq	r2,zero,80defc <__alt_mem_onchip_mem+0xff78defc>
  80e410:	8989883a 	add	r4,r17,r6
  80e414:	1945883a 	add	r2,r3,r5
  80e418:	2447803a 	cmpltu	r3,r4,r17
  80e41c:	1887883a 	add	r3,r3,r2
  80e420:	1880202c 	andhi	r2,r3,128
  80e424:	2023883a 	mov	r17,r4
  80e428:	103f1626 	beq	r2,zero,80e084 <__alt_mem_onchip_mem+0xff78e084>
  80e42c:	00bfe034 	movhi	r2,65408
  80e430:	10bfffc4 	addi	r2,r2,-1
  80e434:	5021883a 	mov	r16,r10
  80e438:	1886703a 	and	r3,r3,r2
  80e43c:	003eaf06 	br	80defc <__alt_mem_onchip_mem+0xff78defc>
  80e440:	3825883a 	mov	r18,r7
  80e444:	003f0f06 	br	80e084 <__alt_mem_onchip_mem+0xff78e084>
  80e448:	1c44b03a 	or	r2,r3,r17
  80e44c:	8000251e 	bne	r16,zero,80e4e4 <__subdf3+0x66c>
  80e450:	1000661e 	bne	r2,zero,80e5ec <__subdf3+0x774>
  80e454:	2990b03a 	or	r8,r5,r6
  80e458:	40009626 	beq	r8,zero,80e6b4 <__subdf3+0x83c>
  80e45c:	2807883a 	mov	r3,r5
  80e460:	3023883a 	mov	r17,r6
  80e464:	3825883a 	mov	r18,r7
  80e468:	003ea406 	br	80defc <__alt_mem_onchip_mem+0xff78defc>
  80e46c:	127ff804 	addi	r9,r2,-32
  80e470:	01000804 	movi	r4,32
  80e474:	2a52d83a 	srl	r9,r5,r9
  80e478:	11008c26 	beq	r2,r4,80e6ac <__subdf3+0x834>
  80e47c:	01001004 	movi	r4,64
  80e480:	2085c83a 	sub	r2,r4,r2
  80e484:	2884983a 	sll	r2,r5,r2
  80e488:	118cb03a 	or	r6,r2,r6
  80e48c:	300cc03a 	cmpne	r6,r6,zero
  80e490:	4992b03a 	or	r9,r9,r6
  80e494:	0005883a 	mov	r2,zero
  80e498:	003f1206 	br	80e0e4 <__alt_mem_onchip_mem+0xff78e0e4>
  80e49c:	0101ffc4 	movi	r4,2047
  80e4a0:	493f9c1e 	bne	r9,r4,80e314 <__alt_mem_onchip_mem+0xff78e314>
  80e4a4:	2807883a 	mov	r3,r5
  80e4a8:	3023883a 	mov	r17,r6
  80e4ac:	4821883a 	mov	r16,r9
  80e4b0:	3825883a 	mov	r18,r7
  80e4b4:	003e9106 	br	80defc <__alt_mem_onchip_mem+0xff78defc>
  80e4b8:	80001f1e 	bne	r16,zero,80e538 <__subdf3+0x6c0>
  80e4bc:	1c48b03a 	or	r4,r3,r17
  80e4c0:	20005a26 	beq	r4,zero,80e62c <__subdf3+0x7b4>
  80e4c4:	0084303a 	nor	r2,zero,r2
  80e4c8:	1000561e 	bne	r2,zero,80e624 <__subdf3+0x7ac>
  80e4cc:	89a3883a 	add	r17,r17,r6
  80e4d0:	1945883a 	add	r2,r3,r5
  80e4d4:	898d803a 	cmpltu	r6,r17,r6
  80e4d8:	3087883a 	add	r3,r6,r2
  80e4dc:	4821883a 	mov	r16,r9
  80e4e0:	003f0506 	br	80e0f8 <__alt_mem_onchip_mem+0xff78e0f8>
  80e4e4:	10002b1e 	bne	r2,zero,80e594 <__subdf3+0x71c>
  80e4e8:	2984b03a 	or	r2,r5,r6
  80e4ec:	10008026 	beq	r2,zero,80e6f0 <__subdf3+0x878>
  80e4f0:	2807883a 	mov	r3,r5
  80e4f4:	3023883a 	mov	r17,r6
  80e4f8:	3825883a 	mov	r18,r7
  80e4fc:	0401ffc4 	movi	r16,2047
  80e500:	003e7e06 	br	80defc <__alt_mem_onchip_mem+0xff78defc>
  80e504:	3809883a 	mov	r4,r7
  80e508:	0011883a 	mov	r8,zero
  80e50c:	0005883a 	mov	r2,zero
  80e510:	003ee306 	br	80e0a0 <__alt_mem_onchip_mem+0xff78e0a0>
  80e514:	1c62b03a 	or	r17,r3,r17
  80e518:	8822c03a 	cmpne	r17,r17,zero
  80e51c:	0005883a 	mov	r2,zero
  80e520:	003f8906 	br	80e348 <__alt_mem_onchip_mem+0xff78e348>
  80e524:	3809883a 	mov	r4,r7
  80e528:	4821883a 	mov	r16,r9
  80e52c:	0011883a 	mov	r8,zero
  80e530:	0005883a 	mov	r2,zero
  80e534:	003eda06 	br	80e0a0 <__alt_mem_onchip_mem+0xff78e0a0>
  80e538:	0101ffc4 	movi	r4,2047
  80e53c:	49003b26 	beq	r9,r4,80e62c <__subdf3+0x7b4>
  80e540:	0085c83a 	sub	r2,zero,r2
  80e544:	18c02034 	orhi	r3,r3,128
  80e548:	01000e04 	movi	r4,56
  80e54c:	20806e16 	blt	r4,r2,80e708 <__subdf3+0x890>
  80e550:	010007c4 	movi	r4,31
  80e554:	20807716 	blt	r4,r2,80e734 <__subdf3+0x8bc>
  80e558:	01000804 	movi	r4,32
  80e55c:	2089c83a 	sub	r4,r4,r2
  80e560:	1914983a 	sll	r10,r3,r4
  80e564:	8890d83a 	srl	r8,r17,r2
  80e568:	8908983a 	sll	r4,r17,r4
  80e56c:	1884d83a 	srl	r2,r3,r2
  80e570:	5222b03a 	or	r17,r10,r8
  80e574:	2006c03a 	cmpne	r3,r4,zero
  80e578:	88e2b03a 	or	r17,r17,r3
  80e57c:	89a3883a 	add	r17,r17,r6
  80e580:	1145883a 	add	r2,r2,r5
  80e584:	898d803a 	cmpltu	r6,r17,r6
  80e588:	3087883a 	add	r3,r6,r2
  80e58c:	4821883a 	mov	r16,r9
  80e590:	003ed906 	br	80e0f8 <__alt_mem_onchip_mem+0xff78e0f8>
  80e594:	2984b03a 	or	r2,r5,r6
  80e598:	10004226 	beq	r2,zero,80e6a4 <__subdf3+0x82c>
  80e59c:	1808d0fa 	srli	r4,r3,3
  80e5a0:	8822d0fa 	srli	r17,r17,3
  80e5a4:	1806977a 	slli	r3,r3,29
  80e5a8:	2080022c 	andhi	r2,r4,8
  80e5ac:	1c62b03a 	or	r17,r3,r17
  80e5b0:	10000826 	beq	r2,zero,80e5d4 <__subdf3+0x75c>
  80e5b4:	2812d0fa 	srli	r9,r5,3
  80e5b8:	4880022c 	andhi	r2,r9,8
  80e5bc:	1000051e 	bne	r2,zero,80e5d4 <__subdf3+0x75c>
  80e5c0:	300cd0fa 	srli	r6,r6,3
  80e5c4:	2804977a 	slli	r2,r5,29
  80e5c8:	4809883a 	mov	r4,r9
  80e5cc:	3825883a 	mov	r18,r7
  80e5d0:	11a2b03a 	or	r17,r2,r6
  80e5d4:	8806d77a 	srli	r3,r17,29
  80e5d8:	200890fa 	slli	r4,r4,3
  80e5dc:	882290fa 	slli	r17,r17,3
  80e5e0:	0401ffc4 	movi	r16,2047
  80e5e4:	1906b03a 	or	r3,r3,r4
  80e5e8:	003e4406 	br	80defc <__alt_mem_onchip_mem+0xff78defc>
  80e5ec:	2984b03a 	or	r2,r5,r6
  80e5f0:	103e4226 	beq	r2,zero,80defc <__alt_mem_onchip_mem+0xff78defc>
  80e5f4:	8989c83a 	sub	r4,r17,r6
  80e5f8:	8911803a 	cmpltu	r8,r17,r4
  80e5fc:	1945c83a 	sub	r2,r3,r5
  80e600:	1205c83a 	sub	r2,r2,r8
  80e604:	1200202c 	andhi	r8,r2,128
  80e608:	403e9a26 	beq	r8,zero,80e074 <__alt_mem_onchip_mem+0xff78e074>
  80e60c:	3463c83a 	sub	r17,r6,r17
  80e610:	28c5c83a 	sub	r2,r5,r3
  80e614:	344d803a 	cmpltu	r6,r6,r17
  80e618:	1187c83a 	sub	r3,r2,r6
  80e61c:	3825883a 	mov	r18,r7
  80e620:	003e3606 	br	80defc <__alt_mem_onchip_mem+0xff78defc>
  80e624:	0101ffc4 	movi	r4,2047
  80e628:	493fc71e 	bne	r9,r4,80e548 <__alt_mem_onchip_mem+0xff78e548>
  80e62c:	2807883a 	mov	r3,r5
  80e630:	3023883a 	mov	r17,r6
  80e634:	4821883a 	mov	r16,r9
  80e638:	003e3006 	br	80defc <__alt_mem_onchip_mem+0xff78defc>
  80e63c:	10003626 	beq	r2,zero,80e718 <__subdf3+0x8a0>
  80e640:	2984b03a 	or	r2,r5,r6
  80e644:	10001726 	beq	r2,zero,80e6a4 <__subdf3+0x82c>
  80e648:	1808d0fa 	srli	r4,r3,3
  80e64c:	8822d0fa 	srli	r17,r17,3
  80e650:	1806977a 	slli	r3,r3,29
  80e654:	2080022c 	andhi	r2,r4,8
  80e658:	1c62b03a 	or	r17,r3,r17
  80e65c:	10000726 	beq	r2,zero,80e67c <__subdf3+0x804>
  80e660:	2812d0fa 	srli	r9,r5,3
  80e664:	4880022c 	andhi	r2,r9,8
  80e668:	1000041e 	bne	r2,zero,80e67c <__subdf3+0x804>
  80e66c:	300cd0fa 	srli	r6,r6,3
  80e670:	2804977a 	slli	r2,r5,29
  80e674:	4809883a 	mov	r4,r9
  80e678:	11a2b03a 	or	r17,r2,r6
  80e67c:	8806d77a 	srli	r3,r17,29
  80e680:	200890fa 	slli	r4,r4,3
  80e684:	882290fa 	slli	r17,r17,3
  80e688:	3825883a 	mov	r18,r7
  80e68c:	1906b03a 	or	r3,r3,r4
  80e690:	0401ffc4 	movi	r16,2047
  80e694:	003e1906 	br	80defc <__alt_mem_onchip_mem+0xff78defc>
  80e698:	000b883a 	mov	r5,zero
  80e69c:	0005883a 	mov	r2,zero
  80e6a0:	003e2e06 	br	80df5c <__alt_mem_onchip_mem+0xff78df5c>
  80e6a4:	0401ffc4 	movi	r16,2047
  80e6a8:	003e1406 	br	80defc <__alt_mem_onchip_mem+0xff78defc>
  80e6ac:	0005883a 	mov	r2,zero
  80e6b0:	003f7506 	br	80e488 <__alt_mem_onchip_mem+0xff78e488>
  80e6b4:	0005883a 	mov	r2,zero
  80e6b8:	0009883a 	mov	r4,zero
  80e6bc:	003e7806 	br	80e0a0 <__alt_mem_onchip_mem+0xff78e0a0>
  80e6c0:	123ff804 	addi	r8,r2,-32
  80e6c4:	01000804 	movi	r4,32
  80e6c8:	1a10d83a 	srl	r8,r3,r8
  80e6cc:	11002526 	beq	r2,r4,80e764 <__subdf3+0x8ec>
  80e6d0:	01001004 	movi	r4,64
  80e6d4:	2085c83a 	sub	r2,r4,r2
  80e6d8:	1884983a 	sll	r2,r3,r2
  80e6dc:	1444b03a 	or	r2,r2,r17
  80e6e0:	1004c03a 	cmpne	r2,r2,zero
  80e6e4:	40a2b03a 	or	r17,r8,r2
  80e6e8:	0005883a 	mov	r2,zero
  80e6ec:	003f1606 	br	80e348 <__alt_mem_onchip_mem+0xff78e348>
  80e6f0:	02000434 	movhi	r8,16
  80e6f4:	0009883a 	mov	r4,zero
  80e6f8:	423fffc4 	addi	r8,r8,-1
  80e6fc:	00bfffc4 	movi	r2,-1
  80e700:	0401ffc4 	movi	r16,2047
  80e704:	003e6606 	br	80e0a0 <__alt_mem_onchip_mem+0xff78e0a0>
  80e708:	1c62b03a 	or	r17,r3,r17
  80e70c:	8822c03a 	cmpne	r17,r17,zero
  80e710:	0005883a 	mov	r2,zero
  80e714:	003f9906 	br	80e57c <__alt_mem_onchip_mem+0xff78e57c>
  80e718:	2807883a 	mov	r3,r5
  80e71c:	3023883a 	mov	r17,r6
  80e720:	0401ffc4 	movi	r16,2047
  80e724:	003df506 	br	80defc <__alt_mem_onchip_mem+0xff78defc>
  80e728:	2807883a 	mov	r3,r5
  80e72c:	3023883a 	mov	r17,r6
  80e730:	003df206 	br	80defc <__alt_mem_onchip_mem+0xff78defc>
  80e734:	123ff804 	addi	r8,r2,-32
  80e738:	01000804 	movi	r4,32
  80e73c:	1a10d83a 	srl	r8,r3,r8
  80e740:	11000a26 	beq	r2,r4,80e76c <__subdf3+0x8f4>
  80e744:	01001004 	movi	r4,64
  80e748:	2085c83a 	sub	r2,r4,r2
  80e74c:	1884983a 	sll	r2,r3,r2
  80e750:	1444b03a 	or	r2,r2,r17
  80e754:	1004c03a 	cmpne	r2,r2,zero
  80e758:	40a2b03a 	or	r17,r8,r2
  80e75c:	0005883a 	mov	r2,zero
  80e760:	003f8606 	br	80e57c <__alt_mem_onchip_mem+0xff78e57c>
  80e764:	0005883a 	mov	r2,zero
  80e768:	003fdc06 	br	80e6dc <__alt_mem_onchip_mem+0xff78e6dc>
  80e76c:	0005883a 	mov	r2,zero
  80e770:	003ff706 	br	80e750 <__alt_mem_onchip_mem+0xff78e750>

0080e774 <__fixdfsi>:
  80e774:	280cd53a 	srli	r6,r5,20
  80e778:	00c00434 	movhi	r3,16
  80e77c:	18ffffc4 	addi	r3,r3,-1
  80e780:	3181ffcc 	andi	r6,r6,2047
  80e784:	01c0ff84 	movi	r7,1022
  80e788:	28c6703a 	and	r3,r5,r3
  80e78c:	280ad7fa 	srli	r5,r5,31
  80e790:	3980120e 	bge	r7,r6,80e7dc <__fixdfsi+0x68>
  80e794:	00810744 	movi	r2,1053
  80e798:	11800c16 	blt	r2,r6,80e7cc <__fixdfsi+0x58>
  80e79c:	00810cc4 	movi	r2,1075
  80e7a0:	1185c83a 	sub	r2,r2,r6
  80e7a4:	01c007c4 	movi	r7,31
  80e7a8:	18c00434 	orhi	r3,r3,16
  80e7ac:	38800d16 	blt	r7,r2,80e7e4 <__fixdfsi+0x70>
  80e7b0:	31befb44 	addi	r6,r6,-1043
  80e7b4:	2084d83a 	srl	r2,r4,r2
  80e7b8:	1986983a 	sll	r3,r3,r6
  80e7bc:	1884b03a 	or	r2,r3,r2
  80e7c0:	28000726 	beq	r5,zero,80e7e0 <__fixdfsi+0x6c>
  80e7c4:	0085c83a 	sub	r2,zero,r2
  80e7c8:	f800283a 	ret
  80e7cc:	00a00034 	movhi	r2,32768
  80e7d0:	10bfffc4 	addi	r2,r2,-1
  80e7d4:	2885883a 	add	r2,r5,r2
  80e7d8:	f800283a 	ret
  80e7dc:	0005883a 	mov	r2,zero
  80e7e0:	f800283a 	ret
  80e7e4:	008104c4 	movi	r2,1043
  80e7e8:	1185c83a 	sub	r2,r2,r6
  80e7ec:	1884d83a 	srl	r2,r3,r2
  80e7f0:	003ff306 	br	80e7c0 <__alt_mem_onchip_mem+0xff78e7c0>

0080e7f4 <__floatsidf>:
  80e7f4:	defffd04 	addi	sp,sp,-12
  80e7f8:	dfc00215 	stw	ra,8(sp)
  80e7fc:	dc400115 	stw	r17,4(sp)
  80e800:	dc000015 	stw	r16,0(sp)
  80e804:	20002b26 	beq	r4,zero,80e8b4 <__floatsidf+0xc0>
  80e808:	2023883a 	mov	r17,r4
  80e80c:	2020d7fa 	srli	r16,r4,31
  80e810:	20002d16 	blt	r4,zero,80e8c8 <__floatsidf+0xd4>
  80e814:	8809883a 	mov	r4,r17
  80e818:	080e9780 	call	80e978 <__clzsi2>
  80e81c:	01410784 	movi	r5,1054
  80e820:	288bc83a 	sub	r5,r5,r2
  80e824:	01010cc4 	movi	r4,1075
  80e828:	2149c83a 	sub	r4,r4,r5
  80e82c:	00c007c4 	movi	r3,31
  80e830:	1900160e 	bge	r3,r4,80e88c <__floatsidf+0x98>
  80e834:	00c104c4 	movi	r3,1043
  80e838:	1947c83a 	sub	r3,r3,r5
  80e83c:	88c6983a 	sll	r3,r17,r3
  80e840:	00800434 	movhi	r2,16
  80e844:	10bfffc4 	addi	r2,r2,-1
  80e848:	1886703a 	and	r3,r3,r2
  80e84c:	2941ffcc 	andi	r5,r5,2047
  80e850:	800d883a 	mov	r6,r16
  80e854:	0005883a 	mov	r2,zero
  80e858:	280a953a 	slli	r5,r5,20
  80e85c:	31803fcc 	andi	r6,r6,255
  80e860:	01000434 	movhi	r4,16
  80e864:	300c97fa 	slli	r6,r6,31
  80e868:	213fffc4 	addi	r4,r4,-1
  80e86c:	1906703a 	and	r3,r3,r4
  80e870:	1946b03a 	or	r3,r3,r5
  80e874:	1986b03a 	or	r3,r3,r6
  80e878:	dfc00217 	ldw	ra,8(sp)
  80e87c:	dc400117 	ldw	r17,4(sp)
  80e880:	dc000017 	ldw	r16,0(sp)
  80e884:	dec00304 	addi	sp,sp,12
  80e888:	f800283a 	ret
  80e88c:	00c002c4 	movi	r3,11
  80e890:	1887c83a 	sub	r3,r3,r2
  80e894:	88c6d83a 	srl	r3,r17,r3
  80e898:	8904983a 	sll	r2,r17,r4
  80e89c:	01000434 	movhi	r4,16
  80e8a0:	213fffc4 	addi	r4,r4,-1
  80e8a4:	2941ffcc 	andi	r5,r5,2047
  80e8a8:	1906703a 	and	r3,r3,r4
  80e8ac:	800d883a 	mov	r6,r16
  80e8b0:	003fe906 	br	80e858 <__alt_mem_onchip_mem+0xff78e858>
  80e8b4:	000d883a 	mov	r6,zero
  80e8b8:	000b883a 	mov	r5,zero
  80e8bc:	0007883a 	mov	r3,zero
  80e8c0:	0005883a 	mov	r2,zero
  80e8c4:	003fe406 	br	80e858 <__alt_mem_onchip_mem+0xff78e858>
  80e8c8:	0123c83a 	sub	r17,zero,r4
  80e8cc:	003fd106 	br	80e814 <__alt_mem_onchip_mem+0xff78e814>

0080e8d0 <__floatunsidf>:
  80e8d0:	defffe04 	addi	sp,sp,-8
  80e8d4:	dc000015 	stw	r16,0(sp)
  80e8d8:	dfc00115 	stw	ra,4(sp)
  80e8dc:	2021883a 	mov	r16,r4
  80e8e0:	20002226 	beq	r4,zero,80e96c <__floatunsidf+0x9c>
  80e8e4:	080e9780 	call	80e978 <__clzsi2>
  80e8e8:	01010784 	movi	r4,1054
  80e8ec:	2089c83a 	sub	r4,r4,r2
  80e8f0:	01810cc4 	movi	r6,1075
  80e8f4:	310dc83a 	sub	r6,r6,r4
  80e8f8:	00c007c4 	movi	r3,31
  80e8fc:	1980120e 	bge	r3,r6,80e948 <__floatunsidf+0x78>
  80e900:	00c104c4 	movi	r3,1043
  80e904:	1907c83a 	sub	r3,r3,r4
  80e908:	80ca983a 	sll	r5,r16,r3
  80e90c:	00800434 	movhi	r2,16
  80e910:	10bfffc4 	addi	r2,r2,-1
  80e914:	2101ffcc 	andi	r4,r4,2047
  80e918:	0021883a 	mov	r16,zero
  80e91c:	288a703a 	and	r5,r5,r2
  80e920:	2008953a 	slli	r4,r4,20
  80e924:	00c00434 	movhi	r3,16
  80e928:	18ffffc4 	addi	r3,r3,-1
  80e92c:	28c6703a 	and	r3,r5,r3
  80e930:	8005883a 	mov	r2,r16
  80e934:	1906b03a 	or	r3,r3,r4
  80e938:	dfc00117 	ldw	ra,4(sp)
  80e93c:	dc000017 	ldw	r16,0(sp)
  80e940:	dec00204 	addi	sp,sp,8
  80e944:	f800283a 	ret
  80e948:	00c002c4 	movi	r3,11
  80e94c:	188bc83a 	sub	r5,r3,r2
  80e950:	814ad83a 	srl	r5,r16,r5
  80e954:	00c00434 	movhi	r3,16
  80e958:	18ffffc4 	addi	r3,r3,-1
  80e95c:	81a0983a 	sll	r16,r16,r6
  80e960:	2101ffcc 	andi	r4,r4,2047
  80e964:	28ca703a 	and	r5,r5,r3
  80e968:	003fed06 	br	80e920 <__alt_mem_onchip_mem+0xff78e920>
  80e96c:	0009883a 	mov	r4,zero
  80e970:	000b883a 	mov	r5,zero
  80e974:	003fea06 	br	80e920 <__alt_mem_onchip_mem+0xff78e920>

0080e978 <__clzsi2>:
  80e978:	00bfffd4 	movui	r2,65535
  80e97c:	11000536 	bltu	r2,r4,80e994 <__clzsi2+0x1c>
  80e980:	00803fc4 	movi	r2,255
  80e984:	11000f36 	bltu	r2,r4,80e9c4 <__clzsi2+0x4c>
  80e988:	00800804 	movi	r2,32
  80e98c:	0007883a 	mov	r3,zero
  80e990:	00000506 	br	80e9a8 <__clzsi2+0x30>
  80e994:	00804034 	movhi	r2,256
  80e998:	10bfffc4 	addi	r2,r2,-1
  80e99c:	11000c2e 	bgeu	r2,r4,80e9d0 <__clzsi2+0x58>
  80e9a0:	00800204 	movi	r2,8
  80e9a4:	00c00604 	movi	r3,24
  80e9a8:	20c8d83a 	srl	r4,r4,r3
  80e9ac:	00c02074 	movhi	r3,129
  80e9b0:	18cca404 	addi	r3,r3,12944
  80e9b4:	1909883a 	add	r4,r3,r4
  80e9b8:	20c00003 	ldbu	r3,0(r4)
  80e9bc:	10c5c83a 	sub	r2,r2,r3
  80e9c0:	f800283a 	ret
  80e9c4:	00800604 	movi	r2,24
  80e9c8:	00c00204 	movi	r3,8
  80e9cc:	003ff606 	br	80e9a8 <__alt_mem_onchip_mem+0xff78e9a8>
  80e9d0:	00800404 	movi	r2,16
  80e9d4:	1007883a 	mov	r3,r2
  80e9d8:	003ff306 	br	80e9a8 <__alt_mem_onchip_mem+0xff78e9a8>

0080e9dc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80e9dc:	defff504 	addi	sp,sp,-44
  80e9e0:	df000a15 	stw	fp,40(sp)
  80e9e4:	df000a04 	addi	fp,sp,40
  80e9e8:	e13ffc15 	stw	r4,-16(fp)
  80e9ec:	e17ffd15 	stw	r5,-12(fp)
  80e9f0:	e1bffe15 	stw	r6,-8(fp)
  80e9f4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80e9f8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80e9fc:	d0a77017 	ldw	r2,-25152(gp)
  
  if (alt_ticks_per_second ())
  80ea00:	10003c26 	beq	r2,zero,80eaf4 <alt_alarm_start+0x118>
  {
    if (alarm)
  80ea04:	e0bffc17 	ldw	r2,-16(fp)
  80ea08:	10003826 	beq	r2,zero,80eaec <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80ea0c:	e0bffc17 	ldw	r2,-16(fp)
  80ea10:	e0fffe17 	ldw	r3,-8(fp)
  80ea14:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80ea18:	e0bffc17 	ldw	r2,-16(fp)
  80ea1c:	e0ffff17 	ldw	r3,-4(fp)
  80ea20:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ea24:	0005303a 	rdctl	r2,status
  80ea28:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ea2c:	e0fff917 	ldw	r3,-28(fp)
  80ea30:	00bfff84 	movi	r2,-2
  80ea34:	1884703a 	and	r2,r3,r2
  80ea38:	1001703a 	wrctl	status,r2
  
  return context;
  80ea3c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  80ea40:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80ea44:	d0a77117 	ldw	r2,-25148(gp)
      
      current_nticks = alt_nticks();
  80ea48:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80ea4c:	e0fffd17 	ldw	r3,-12(fp)
  80ea50:	e0bff617 	ldw	r2,-40(fp)
  80ea54:	1885883a 	add	r2,r3,r2
  80ea58:	10c00044 	addi	r3,r2,1
  80ea5c:	e0bffc17 	ldw	r2,-16(fp)
  80ea60:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80ea64:	e0bffc17 	ldw	r2,-16(fp)
  80ea68:	10c00217 	ldw	r3,8(r2)
  80ea6c:	e0bff617 	ldw	r2,-40(fp)
  80ea70:	1880042e 	bgeu	r3,r2,80ea84 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  80ea74:	e0bffc17 	ldw	r2,-16(fp)
  80ea78:	00c00044 	movi	r3,1
  80ea7c:	10c00405 	stb	r3,16(r2)
  80ea80:	00000206 	br	80ea8c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  80ea84:	e0bffc17 	ldw	r2,-16(fp)
  80ea88:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80ea8c:	e0bffc17 	ldw	r2,-16(fp)
  80ea90:	d0e01104 	addi	r3,gp,-32700
  80ea94:	e0fffa15 	stw	r3,-24(fp)
  80ea98:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80ea9c:	e0bffb17 	ldw	r2,-20(fp)
  80eaa0:	e0fffa17 	ldw	r3,-24(fp)
  80eaa4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80eaa8:	e0bffa17 	ldw	r2,-24(fp)
  80eaac:	10c00017 	ldw	r3,0(r2)
  80eab0:	e0bffb17 	ldw	r2,-20(fp)
  80eab4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80eab8:	e0bffa17 	ldw	r2,-24(fp)
  80eabc:	10800017 	ldw	r2,0(r2)
  80eac0:	e0fffb17 	ldw	r3,-20(fp)
  80eac4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80eac8:	e0bffa17 	ldw	r2,-24(fp)
  80eacc:	e0fffb17 	ldw	r3,-20(fp)
  80ead0:	10c00015 	stw	r3,0(r2)
  80ead4:	e0bff817 	ldw	r2,-32(fp)
  80ead8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80eadc:	e0bff717 	ldw	r2,-36(fp)
  80eae0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80eae4:	0005883a 	mov	r2,zero
  80eae8:	00000306 	br	80eaf8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  80eaec:	00bffa84 	movi	r2,-22
  80eaf0:	00000106 	br	80eaf8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  80eaf4:	00bfde84 	movi	r2,-134
  }
}
  80eaf8:	e037883a 	mov	sp,fp
  80eafc:	df000017 	ldw	fp,0(sp)
  80eb00:	dec00104 	addi	sp,sp,4
  80eb04:	f800283a 	ret

0080eb08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80eb08:	defffe04 	addi	sp,sp,-8
  80eb0c:	dfc00115 	stw	ra,4(sp)
  80eb10:	df000015 	stw	fp,0(sp)
  80eb14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80eb18:	d0a00e17 	ldw	r2,-32712(gp)
  80eb1c:	10000326 	beq	r2,zero,80eb2c <alt_get_errno+0x24>
  80eb20:	d0a00e17 	ldw	r2,-32712(gp)
  80eb24:	103ee83a 	callr	r2
  80eb28:	00000106 	br	80eb30 <alt_get_errno+0x28>
  80eb2c:	d0a76504 	addi	r2,gp,-25196
}
  80eb30:	e037883a 	mov	sp,fp
  80eb34:	dfc00117 	ldw	ra,4(sp)
  80eb38:	df000017 	ldw	fp,0(sp)
  80eb3c:	dec00204 	addi	sp,sp,8
  80eb40:	f800283a 	ret

0080eb44 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80eb44:	defffb04 	addi	sp,sp,-20
  80eb48:	dfc00415 	stw	ra,16(sp)
  80eb4c:	df000315 	stw	fp,12(sp)
  80eb50:	df000304 	addi	fp,sp,12
  80eb54:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80eb58:	e0bfff17 	ldw	r2,-4(fp)
  80eb5c:	10000616 	blt	r2,zero,80eb78 <close+0x34>
  80eb60:	e0bfff17 	ldw	r2,-4(fp)
  80eb64:	10c00324 	muli	r3,r2,12
  80eb68:	00802074 	movhi	r2,129
  80eb6c:	108f3104 	addi	r2,r2,15556
  80eb70:	1885883a 	add	r2,r3,r2
  80eb74:	00000106 	br	80eb7c <close+0x38>
  80eb78:	0005883a 	mov	r2,zero
  80eb7c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80eb80:	e0bffd17 	ldw	r2,-12(fp)
  80eb84:	10001926 	beq	r2,zero,80ebec <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80eb88:	e0bffd17 	ldw	r2,-12(fp)
  80eb8c:	10800017 	ldw	r2,0(r2)
  80eb90:	10800417 	ldw	r2,16(r2)
  80eb94:	10000626 	beq	r2,zero,80ebb0 <close+0x6c>
  80eb98:	e0bffd17 	ldw	r2,-12(fp)
  80eb9c:	10800017 	ldw	r2,0(r2)
  80eba0:	10800417 	ldw	r2,16(r2)
  80eba4:	e13ffd17 	ldw	r4,-12(fp)
  80eba8:	103ee83a 	callr	r2
  80ebac:	00000106 	br	80ebb4 <close+0x70>
  80ebb0:	0005883a 	mov	r2,zero
  80ebb4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80ebb8:	e13fff17 	ldw	r4,-4(fp)
  80ebbc:	080f5d80 	call	80f5d8 <alt_release_fd>
    if (rval < 0)
  80ebc0:	e0bffe17 	ldw	r2,-8(fp)
  80ebc4:	1000070e 	bge	r2,zero,80ebe4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  80ebc8:	080eb080 	call	80eb08 <alt_get_errno>
  80ebcc:	1007883a 	mov	r3,r2
  80ebd0:	e0bffe17 	ldw	r2,-8(fp)
  80ebd4:	0085c83a 	sub	r2,zero,r2
  80ebd8:	18800015 	stw	r2,0(r3)
      return -1;
  80ebdc:	00bfffc4 	movi	r2,-1
  80ebe0:	00000706 	br	80ec00 <close+0xbc>
    }
    return 0;
  80ebe4:	0005883a 	mov	r2,zero
  80ebe8:	00000506 	br	80ec00 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80ebec:	080eb080 	call	80eb08 <alt_get_errno>
  80ebf0:	1007883a 	mov	r3,r2
  80ebf4:	00801444 	movi	r2,81
  80ebf8:	18800015 	stw	r2,0(r3)
    return -1;
  80ebfc:	00bfffc4 	movi	r2,-1
  }
}
  80ec00:	e037883a 	mov	sp,fp
  80ec04:	dfc00117 	ldw	ra,4(sp)
  80ec08:	df000017 	ldw	fp,0(sp)
  80ec0c:	dec00204 	addi	sp,sp,8
  80ec10:	f800283a 	ret

0080ec14 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80ec14:	defffc04 	addi	sp,sp,-16
  80ec18:	df000315 	stw	fp,12(sp)
  80ec1c:	df000304 	addi	fp,sp,12
  80ec20:	e13ffd15 	stw	r4,-12(fp)
  80ec24:	e17ffe15 	stw	r5,-8(fp)
  80ec28:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80ec2c:	e0bfff17 	ldw	r2,-4(fp)
}
  80ec30:	e037883a 	mov	sp,fp
  80ec34:	df000017 	ldw	fp,0(sp)
  80ec38:	dec00104 	addi	sp,sp,4
  80ec3c:	f800283a 	ret

0080ec40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ec40:	defffe04 	addi	sp,sp,-8
  80ec44:	dfc00115 	stw	ra,4(sp)
  80ec48:	df000015 	stw	fp,0(sp)
  80ec4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ec50:	d0a00e17 	ldw	r2,-32712(gp)
  80ec54:	10000326 	beq	r2,zero,80ec64 <alt_get_errno+0x24>
  80ec58:	d0a00e17 	ldw	r2,-32712(gp)
  80ec5c:	103ee83a 	callr	r2
  80ec60:	00000106 	br	80ec68 <alt_get_errno+0x28>
  80ec64:	d0a76504 	addi	r2,gp,-25196
}
  80ec68:	e037883a 	mov	sp,fp
  80ec6c:	dfc00117 	ldw	ra,4(sp)
  80ec70:	df000017 	ldw	fp,0(sp)
  80ec74:	dec00204 	addi	sp,sp,8
  80ec78:	f800283a 	ret

0080ec7c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80ec7c:	defffb04 	addi	sp,sp,-20
  80ec80:	dfc00415 	stw	ra,16(sp)
  80ec84:	df000315 	stw	fp,12(sp)
  80ec88:	df000304 	addi	fp,sp,12
  80ec8c:	e13ffe15 	stw	r4,-8(fp)
  80ec90:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ec94:	e0bffe17 	ldw	r2,-8(fp)
  80ec98:	10000616 	blt	r2,zero,80ecb4 <fstat+0x38>
  80ec9c:	e0bffe17 	ldw	r2,-8(fp)
  80eca0:	10c00324 	muli	r3,r2,12
  80eca4:	00802074 	movhi	r2,129
  80eca8:	108f3104 	addi	r2,r2,15556
  80ecac:	1885883a 	add	r2,r3,r2
  80ecb0:	00000106 	br	80ecb8 <fstat+0x3c>
  80ecb4:	0005883a 	mov	r2,zero
  80ecb8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80ecbc:	e0bffd17 	ldw	r2,-12(fp)
  80ecc0:	10001026 	beq	r2,zero,80ed04 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80ecc4:	e0bffd17 	ldw	r2,-12(fp)
  80ecc8:	10800017 	ldw	r2,0(r2)
  80eccc:	10800817 	ldw	r2,32(r2)
  80ecd0:	10000726 	beq	r2,zero,80ecf0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  80ecd4:	e0bffd17 	ldw	r2,-12(fp)
  80ecd8:	10800017 	ldw	r2,0(r2)
  80ecdc:	10800817 	ldw	r2,32(r2)
  80ece0:	e17fff17 	ldw	r5,-4(fp)
  80ece4:	e13ffd17 	ldw	r4,-12(fp)
  80ece8:	103ee83a 	callr	r2
  80ecec:	00000a06 	br	80ed18 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80ecf0:	e0bfff17 	ldw	r2,-4(fp)
  80ecf4:	00c80004 	movi	r3,8192
  80ecf8:	10c00115 	stw	r3,4(r2)
      return 0;
  80ecfc:	0005883a 	mov	r2,zero
  80ed00:	00000506 	br	80ed18 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80ed04:	080ec400 	call	80ec40 <alt_get_errno>
  80ed08:	1007883a 	mov	r3,r2
  80ed0c:	00801444 	movi	r2,81
  80ed10:	18800015 	stw	r2,0(r3)
    return -1;
  80ed14:	00bfffc4 	movi	r2,-1
  }
}
  80ed18:	e037883a 	mov	sp,fp
  80ed1c:	dfc00117 	ldw	ra,4(sp)
  80ed20:	df000017 	ldw	fp,0(sp)
  80ed24:	dec00204 	addi	sp,sp,8
  80ed28:	f800283a 	ret

0080ed2c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80ed2c:	defff004 	addi	sp,sp,-64
  80ed30:	df000f15 	stw	fp,60(sp)
  80ed34:	df000f04 	addi	fp,sp,60
  80ed38:	e13ffd15 	stw	r4,-12(fp)
  80ed3c:	e17ffe15 	stw	r5,-8(fp)
  80ed40:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  80ed44:	00bffa84 	movi	r2,-22
  80ed48:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80ed4c:	e0bffd17 	ldw	r2,-12(fp)
  80ed50:	10800828 	cmpgeui	r2,r2,32
  80ed54:	1000501e 	bne	r2,zero,80ee98 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ed58:	0005303a 	rdctl	r2,status
  80ed5c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ed60:	e0fff617 	ldw	r3,-40(fp)
  80ed64:	00bfff84 	movi	r2,-2
  80ed68:	1884703a 	and	r2,r3,r2
  80ed6c:	1001703a 	wrctl	status,r2
  
  return context;
  80ed70:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80ed74:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  80ed78:	00802074 	movhi	r2,129
  80ed7c:	109bb104 	addi	r2,r2,28356
  80ed80:	e0fffd17 	ldw	r3,-12(fp)
  80ed84:	180690fa 	slli	r3,r3,3
  80ed88:	10c5883a 	add	r2,r2,r3
  80ed8c:	e0ffff17 	ldw	r3,-4(fp)
  80ed90:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  80ed94:	00802074 	movhi	r2,129
  80ed98:	109bb104 	addi	r2,r2,28356
  80ed9c:	e0fffd17 	ldw	r3,-12(fp)
  80eda0:	180690fa 	slli	r3,r3,3
  80eda4:	10c5883a 	add	r2,r2,r3
  80eda8:	10800104 	addi	r2,r2,4
  80edac:	e0fffe17 	ldw	r3,-8(fp)
  80edb0:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80edb4:	e0bfff17 	ldw	r2,-4(fp)
  80edb8:	10001926 	beq	r2,zero,80ee20 <alt_irq_register+0xf4>
  80edbc:	e0bffd17 	ldw	r2,-12(fp)
  80edc0:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80edc4:	0005303a 	rdctl	r2,status
  80edc8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80edcc:	e0fff717 	ldw	r3,-36(fp)
  80edd0:	00bfff84 	movi	r2,-2
  80edd4:	1884703a 	and	r2,r3,r2
  80edd8:	1001703a 	wrctl	status,r2
  
  return context;
  80eddc:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80ede0:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  80ede4:	00c00044 	movi	r3,1
  80ede8:	e0bff217 	ldw	r2,-56(fp)
  80edec:	1884983a 	sll	r2,r3,r2
  80edf0:	1007883a 	mov	r3,r2
  80edf4:	d0a76c17 	ldw	r2,-25168(gp)
  80edf8:	1884b03a 	or	r2,r3,r2
  80edfc:	d0a76c15 	stw	r2,-25168(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80ee00:	d0a76c17 	ldw	r2,-25168(gp)
  80ee04:	100170fa 	wrctl	ienable,r2
  80ee08:	e0bff817 	ldw	r2,-32(fp)
  80ee0c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ee10:	e0bff917 	ldw	r2,-28(fp)
  80ee14:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80ee18:	0005883a 	mov	r2,zero
  80ee1c:	00001906 	br	80ee84 <alt_irq_register+0x158>
  80ee20:	e0bffd17 	ldw	r2,-12(fp)
  80ee24:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ee28:	0005303a 	rdctl	r2,status
  80ee2c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ee30:	e0fffa17 	ldw	r3,-24(fp)
  80ee34:	00bfff84 	movi	r2,-2
  80ee38:	1884703a 	and	r2,r3,r2
  80ee3c:	1001703a 	wrctl	status,r2
  
  return context;
  80ee40:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80ee44:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  80ee48:	00c00044 	movi	r3,1
  80ee4c:	e0bff417 	ldw	r2,-48(fp)
  80ee50:	1884983a 	sll	r2,r3,r2
  80ee54:	0084303a 	nor	r2,zero,r2
  80ee58:	1007883a 	mov	r3,r2
  80ee5c:	d0a76c17 	ldw	r2,-25168(gp)
  80ee60:	1884703a 	and	r2,r3,r2
  80ee64:	d0a76c15 	stw	r2,-25168(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80ee68:	d0a76c17 	ldw	r2,-25168(gp)
  80ee6c:	100170fa 	wrctl	ienable,r2
  80ee70:	e0bffb17 	ldw	r2,-20(fp)
  80ee74:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ee78:	e0bffc17 	ldw	r2,-16(fp)
  80ee7c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80ee80:	0005883a 	mov	r2,zero
  80ee84:	e0bff115 	stw	r2,-60(fp)
  80ee88:	e0bff317 	ldw	r2,-52(fp)
  80ee8c:	e0bff515 	stw	r2,-44(fp)
  80ee90:	e0bff517 	ldw	r2,-44(fp)
  80ee94:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80ee98:	e0bff117 	ldw	r2,-60(fp)
}
  80ee9c:	e037883a 	mov	sp,fp
  80eea0:	df000017 	ldw	fp,0(sp)
  80eea4:	dec00104 	addi	sp,sp,4
  80eea8:	f800283a 	ret

0080eeac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80eeac:	defffe04 	addi	sp,sp,-8
  80eeb0:	dfc00115 	stw	ra,4(sp)
  80eeb4:	df000015 	stw	fp,0(sp)
  80eeb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80eebc:	d0a00e17 	ldw	r2,-32712(gp)
  80eec0:	10000326 	beq	r2,zero,80eed0 <alt_get_errno+0x24>
  80eec4:	d0a00e17 	ldw	r2,-32712(gp)
  80eec8:	103ee83a 	callr	r2
  80eecc:	00000106 	br	80eed4 <alt_get_errno+0x28>
  80eed0:	d0a76504 	addi	r2,gp,-25196
}
  80eed4:	e037883a 	mov	sp,fp
  80eed8:	dfc00117 	ldw	ra,4(sp)
  80eedc:	df000017 	ldw	fp,0(sp)
  80eee0:	dec00204 	addi	sp,sp,8
  80eee4:	f800283a 	ret

0080eee8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80eee8:	deffed04 	addi	sp,sp,-76
  80eeec:	dfc01215 	stw	ra,72(sp)
  80eef0:	df001115 	stw	fp,68(sp)
  80eef4:	df001104 	addi	fp,sp,68
  80eef8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80eefc:	e0bfff17 	ldw	r2,-4(fp)
  80ef00:	10000616 	blt	r2,zero,80ef1c <isatty+0x34>
  80ef04:	e0bfff17 	ldw	r2,-4(fp)
  80ef08:	10c00324 	muli	r3,r2,12
  80ef0c:	00802074 	movhi	r2,129
  80ef10:	108f3104 	addi	r2,r2,15556
  80ef14:	1885883a 	add	r2,r3,r2
  80ef18:	00000106 	br	80ef20 <isatty+0x38>
  80ef1c:	0005883a 	mov	r2,zero
  80ef20:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80ef24:	e0bfef17 	ldw	r2,-68(fp)
  80ef28:	10000e26 	beq	r2,zero,80ef64 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80ef2c:	e0bfef17 	ldw	r2,-68(fp)
  80ef30:	10800017 	ldw	r2,0(r2)
  80ef34:	10800817 	ldw	r2,32(r2)
  80ef38:	1000021e 	bne	r2,zero,80ef44 <isatty+0x5c>
    {
      return 1;
  80ef3c:	00800044 	movi	r2,1
  80ef40:	00000d06 	br	80ef78 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80ef44:	e0bff004 	addi	r2,fp,-64
  80ef48:	100b883a 	mov	r5,r2
  80ef4c:	e13fff17 	ldw	r4,-4(fp)
  80ef50:	080ec7c0 	call	80ec7c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80ef54:	e0bff117 	ldw	r2,-60(fp)
  80ef58:	10880020 	cmpeqi	r2,r2,8192
  80ef5c:	10803fcc 	andi	r2,r2,255
  80ef60:	00000506 	br	80ef78 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80ef64:	080eeac0 	call	80eeac <alt_get_errno>
  80ef68:	1007883a 	mov	r3,r2
  80ef6c:	00801444 	movi	r2,81
  80ef70:	18800015 	stw	r2,0(r3)
    return 0;
  80ef74:	0005883a 	mov	r2,zero
  }
}
  80ef78:	e037883a 	mov	sp,fp
  80ef7c:	dfc00117 	ldw	ra,4(sp)
  80ef80:	df000017 	ldw	fp,0(sp)
  80ef84:	dec00204 	addi	sp,sp,8
  80ef88:	f800283a 	ret

0080ef8c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80ef8c:	defffc04 	addi	sp,sp,-16
  80ef90:	df000315 	stw	fp,12(sp)
  80ef94:	df000304 	addi	fp,sp,12
  80ef98:	e13ffd15 	stw	r4,-12(fp)
  80ef9c:	e17ffe15 	stw	r5,-8(fp)
  80efa0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80efa4:	e0fffe17 	ldw	r3,-8(fp)
  80efa8:	e0bffd17 	ldw	r2,-12(fp)
  80efac:	18800c26 	beq	r3,r2,80efe0 <alt_load_section+0x54>
  {
    while( to != end )
  80efb0:	00000806 	br	80efd4 <alt_load_section+0x48>
    {
      *to++ = *from++;
  80efb4:	e0bffe17 	ldw	r2,-8(fp)
  80efb8:	10c00104 	addi	r3,r2,4
  80efbc:	e0fffe15 	stw	r3,-8(fp)
  80efc0:	e0fffd17 	ldw	r3,-12(fp)
  80efc4:	19000104 	addi	r4,r3,4
  80efc8:	e13ffd15 	stw	r4,-12(fp)
  80efcc:	18c00017 	ldw	r3,0(r3)
  80efd0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80efd4:	e0fffe17 	ldw	r3,-8(fp)
  80efd8:	e0bfff17 	ldw	r2,-4(fp)
  80efdc:	18bff51e 	bne	r3,r2,80efb4 <__alt_mem_onchip_mem+0xff78efb4>
    {
      *to++ = *from++;
    }
  }
}
  80efe0:	0001883a 	nop
  80efe4:	e037883a 	mov	sp,fp
  80efe8:	df000017 	ldw	fp,0(sp)
  80efec:	dec00104 	addi	sp,sp,4
  80eff0:	f800283a 	ret

0080eff4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80eff4:	defffe04 	addi	sp,sp,-8
  80eff8:	dfc00115 	stw	ra,4(sp)
  80effc:	df000015 	stw	fp,0(sp)
  80f000:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80f004:	01802074 	movhi	r6,129
  80f008:	31943604 	addi	r6,r6,20696
  80f00c:	01402074 	movhi	r5,129
  80f010:	294cf504 	addi	r5,r5,13268
  80f014:	01002074 	movhi	r4,129
  80f018:	21143604 	addi	r4,r4,20696
  80f01c:	080ef8c0 	call	80ef8c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80f020:	01802034 	movhi	r6,128
  80f024:	31809104 	addi	r6,r6,580
  80f028:	01402034 	movhi	r5,128
  80f02c:	29400804 	addi	r5,r5,32
  80f030:	01002034 	movhi	r4,128
  80f034:	21000804 	addi	r4,r4,32
  80f038:	080ef8c0 	call	80ef8c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80f03c:	01802074 	movhi	r6,129
  80f040:	318cf504 	addi	r6,r6,13268
  80f044:	01402074 	movhi	r5,129
  80f048:	294b2004 	addi	r5,r5,11392
  80f04c:	01002074 	movhi	r4,129
  80f050:	210b2004 	addi	r4,r4,11392
  80f054:	080ef8c0 	call	80ef8c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80f058:	0811ddc0 	call	811ddc <alt_dcache_flush_all>
  alt_icache_flush_all();
  80f05c:	08122000 	call	812200 <alt_icache_flush_all>
}
  80f060:	0001883a 	nop
  80f064:	e037883a 	mov	sp,fp
  80f068:	dfc00117 	ldw	ra,4(sp)
  80f06c:	df000017 	ldw	fp,0(sp)
  80f070:	dec00204 	addi	sp,sp,8
  80f074:	f800283a 	ret

0080f078 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f078:	defffe04 	addi	sp,sp,-8
  80f07c:	dfc00115 	stw	ra,4(sp)
  80f080:	df000015 	stw	fp,0(sp)
  80f084:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f088:	d0a00e17 	ldw	r2,-32712(gp)
  80f08c:	10000326 	beq	r2,zero,80f09c <alt_get_errno+0x24>
  80f090:	d0a00e17 	ldw	r2,-32712(gp)
  80f094:	103ee83a 	callr	r2
  80f098:	00000106 	br	80f0a0 <alt_get_errno+0x28>
  80f09c:	d0a76504 	addi	r2,gp,-25196
}
  80f0a0:	e037883a 	mov	sp,fp
  80f0a4:	dfc00117 	ldw	ra,4(sp)
  80f0a8:	df000017 	ldw	fp,0(sp)
  80f0ac:	dec00204 	addi	sp,sp,8
  80f0b0:	f800283a 	ret

0080f0b4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80f0b4:	defff904 	addi	sp,sp,-28
  80f0b8:	dfc00615 	stw	ra,24(sp)
  80f0bc:	df000515 	stw	fp,20(sp)
  80f0c0:	df000504 	addi	fp,sp,20
  80f0c4:	e13ffd15 	stw	r4,-12(fp)
  80f0c8:	e17ffe15 	stw	r5,-8(fp)
  80f0cc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80f0d0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f0d4:	e0bffd17 	ldw	r2,-12(fp)
  80f0d8:	10000616 	blt	r2,zero,80f0f4 <lseek+0x40>
  80f0dc:	e0bffd17 	ldw	r2,-12(fp)
  80f0e0:	10c00324 	muli	r3,r2,12
  80f0e4:	00802074 	movhi	r2,129
  80f0e8:	108f3104 	addi	r2,r2,15556
  80f0ec:	1885883a 	add	r2,r3,r2
  80f0f0:	00000106 	br	80f0f8 <lseek+0x44>
  80f0f4:	0005883a 	mov	r2,zero
  80f0f8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80f0fc:	e0bffc17 	ldw	r2,-16(fp)
  80f100:	10001026 	beq	r2,zero,80f144 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80f104:	e0bffc17 	ldw	r2,-16(fp)
  80f108:	10800017 	ldw	r2,0(r2)
  80f10c:	10800717 	ldw	r2,28(r2)
  80f110:	10000926 	beq	r2,zero,80f138 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80f114:	e0bffc17 	ldw	r2,-16(fp)
  80f118:	10800017 	ldw	r2,0(r2)
  80f11c:	10800717 	ldw	r2,28(r2)
  80f120:	e1bfff17 	ldw	r6,-4(fp)
  80f124:	e17ffe17 	ldw	r5,-8(fp)
  80f128:	e13ffc17 	ldw	r4,-16(fp)
  80f12c:	103ee83a 	callr	r2
  80f130:	e0bffb15 	stw	r2,-20(fp)
  80f134:	00000506 	br	80f14c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80f138:	00bfde84 	movi	r2,-134
  80f13c:	e0bffb15 	stw	r2,-20(fp)
  80f140:	00000206 	br	80f14c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  80f144:	00bfebc4 	movi	r2,-81
  80f148:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80f14c:	e0bffb17 	ldw	r2,-20(fp)
  80f150:	1000070e 	bge	r2,zero,80f170 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  80f154:	080f0780 	call	80f078 <alt_get_errno>
  80f158:	1007883a 	mov	r3,r2
  80f15c:	e0bffb17 	ldw	r2,-20(fp)
  80f160:	0085c83a 	sub	r2,zero,r2
  80f164:	18800015 	stw	r2,0(r3)
    rc = -1;
  80f168:	00bfffc4 	movi	r2,-1
  80f16c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80f170:	e0bffb17 	ldw	r2,-20(fp)
}
  80f174:	e037883a 	mov	sp,fp
  80f178:	dfc00117 	ldw	ra,4(sp)
  80f17c:	df000017 	ldw	fp,0(sp)
  80f180:	dec00204 	addi	sp,sp,8
  80f184:	f800283a 	ret

0080f188 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80f188:	defffd04 	addi	sp,sp,-12
  80f18c:	dfc00215 	stw	ra,8(sp)
  80f190:	df000115 	stw	fp,4(sp)
  80f194:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80f198:	0009883a 	mov	r4,zero
  80f19c:	080f9f80 	call	80f9f8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80f1a0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80f1a4:	080fa300 	call	80fa30 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80f1a8:	01802074 	movhi	r6,129
  80f1ac:	318ce704 	addi	r6,r6,13212
  80f1b0:	01402074 	movhi	r5,129
  80f1b4:	294ce704 	addi	r5,r5,13212
  80f1b8:	01002074 	movhi	r4,129
  80f1bc:	210ce704 	addi	r4,r4,13212
  80f1c0:	08125980 	call	812598 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80f1c4:	0811f040 	call	811f04 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80f1c8:	01002074 	movhi	r4,129
  80f1cc:	2107d904 	addi	r4,r4,8036
  80f1d0:	08128ec0 	call	8128ec <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80f1d4:	d0a76d17 	ldw	r2,-25164(gp)
  80f1d8:	d0e76e17 	ldw	r3,-25160(gp)
  80f1dc:	d1276f17 	ldw	r4,-25156(gp)
  80f1e0:	200d883a 	mov	r6,r4
  80f1e4:	180b883a 	mov	r5,r3
  80f1e8:	1009883a 	mov	r4,r2
  80f1ec:	08010100 	call	801010 <main>
  80f1f0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80f1f4:	01000044 	movi	r4,1
  80f1f8:	080eb440 	call	80eb44 <close>
  exit (result);
  80f1fc:	e13fff17 	ldw	r4,-4(fp)
  80f200:	08129000 	call	812900 <exit>

0080f204 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80f204:	defffe04 	addi	sp,sp,-8
  80f208:	df000115 	stw	fp,4(sp)
  80f20c:	df000104 	addi	fp,sp,4
  80f210:	e13fff15 	stw	r4,-4(fp)
}
  80f214:	0001883a 	nop
  80f218:	e037883a 	mov	sp,fp
  80f21c:	df000017 	ldw	fp,0(sp)
  80f220:	dec00104 	addi	sp,sp,4
  80f224:	f800283a 	ret

0080f228 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80f228:	defffe04 	addi	sp,sp,-8
  80f22c:	df000115 	stw	fp,4(sp)
  80f230:	df000104 	addi	fp,sp,4
  80f234:	e13fff15 	stw	r4,-4(fp)
}
  80f238:	0001883a 	nop
  80f23c:	e037883a 	mov	sp,fp
  80f240:	df000017 	ldw	fp,0(sp)
  80f244:	dec00104 	addi	sp,sp,4
  80f248:	f800283a 	ret

0080f24c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f24c:	defffe04 	addi	sp,sp,-8
  80f250:	dfc00115 	stw	ra,4(sp)
  80f254:	df000015 	stw	fp,0(sp)
  80f258:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f25c:	d0a00e17 	ldw	r2,-32712(gp)
  80f260:	10000326 	beq	r2,zero,80f270 <alt_get_errno+0x24>
  80f264:	d0a00e17 	ldw	r2,-32712(gp)
  80f268:	103ee83a 	callr	r2
  80f26c:	00000106 	br	80f274 <alt_get_errno+0x28>
  80f270:	d0a76504 	addi	r2,gp,-25196
}
  80f274:	e037883a 	mov	sp,fp
  80f278:	dfc00117 	ldw	ra,4(sp)
  80f27c:	df000017 	ldw	fp,0(sp)
  80f280:	dec00204 	addi	sp,sp,8
  80f284:	f800283a 	ret

0080f288 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80f288:	defffd04 	addi	sp,sp,-12
  80f28c:	df000215 	stw	fp,8(sp)
  80f290:	df000204 	addi	fp,sp,8
  80f294:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80f298:	e0bfff17 	ldw	r2,-4(fp)
  80f29c:	10800217 	ldw	r2,8(r2)
  80f2a0:	10d00034 	orhi	r3,r2,16384
  80f2a4:	e0bfff17 	ldw	r2,-4(fp)
  80f2a8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80f2ac:	e03ffe15 	stw	zero,-8(fp)
  80f2b0:	00001d06 	br	80f328 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80f2b4:	00802074 	movhi	r2,129
  80f2b8:	108f3104 	addi	r2,r2,15556
  80f2bc:	e0fffe17 	ldw	r3,-8(fp)
  80f2c0:	18c00324 	muli	r3,r3,12
  80f2c4:	10c5883a 	add	r2,r2,r3
  80f2c8:	10c00017 	ldw	r3,0(r2)
  80f2cc:	e0bfff17 	ldw	r2,-4(fp)
  80f2d0:	10800017 	ldw	r2,0(r2)
  80f2d4:	1880111e 	bne	r3,r2,80f31c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80f2d8:	00802074 	movhi	r2,129
  80f2dc:	108f3104 	addi	r2,r2,15556
  80f2e0:	e0fffe17 	ldw	r3,-8(fp)
  80f2e4:	18c00324 	muli	r3,r3,12
  80f2e8:	10c5883a 	add	r2,r2,r3
  80f2ec:	10800204 	addi	r2,r2,8
  80f2f0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80f2f4:	1000090e 	bge	r2,zero,80f31c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  80f2f8:	e0bffe17 	ldw	r2,-8(fp)
  80f2fc:	10c00324 	muli	r3,r2,12
  80f300:	00802074 	movhi	r2,129
  80f304:	108f3104 	addi	r2,r2,15556
  80f308:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80f30c:	e0bfff17 	ldw	r2,-4(fp)
  80f310:	18800226 	beq	r3,r2,80f31c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80f314:	00bffcc4 	movi	r2,-13
  80f318:	00000806 	br	80f33c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80f31c:	e0bffe17 	ldw	r2,-8(fp)
  80f320:	10800044 	addi	r2,r2,1
  80f324:	e0bffe15 	stw	r2,-8(fp)
  80f328:	d0a00d17 	ldw	r2,-32716(gp)
  80f32c:	1007883a 	mov	r3,r2
  80f330:	e0bffe17 	ldw	r2,-8(fp)
  80f334:	18bfdf2e 	bgeu	r3,r2,80f2b4 <__alt_mem_onchip_mem+0xff78f2b4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80f338:	0005883a 	mov	r2,zero
}
  80f33c:	e037883a 	mov	sp,fp
  80f340:	df000017 	ldw	fp,0(sp)
  80f344:	dec00104 	addi	sp,sp,4
  80f348:	f800283a 	ret

0080f34c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80f34c:	defff604 	addi	sp,sp,-40
  80f350:	dfc00915 	stw	ra,36(sp)
  80f354:	df000815 	stw	fp,32(sp)
  80f358:	df000804 	addi	fp,sp,32
  80f35c:	e13ffd15 	stw	r4,-12(fp)
  80f360:	e17ffe15 	stw	r5,-8(fp)
  80f364:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80f368:	00bfffc4 	movi	r2,-1
  80f36c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80f370:	00bffb44 	movi	r2,-19
  80f374:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  80f378:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80f37c:	d1600b04 	addi	r5,gp,-32724
  80f380:	e13ffd17 	ldw	r4,-12(fp)
  80f384:	0811fc40 	call	811fc4 <alt_find_dev>
  80f388:	e0bff815 	stw	r2,-32(fp)
  80f38c:	e0bff817 	ldw	r2,-32(fp)
  80f390:	1000051e 	bne	r2,zero,80f3a8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80f394:	e13ffd17 	ldw	r4,-12(fp)
  80f398:	08120540 	call	812054 <alt_find_file>
  80f39c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  80f3a0:	00800044 	movi	r2,1
  80f3a4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80f3a8:	e0bff817 	ldw	r2,-32(fp)
  80f3ac:	10002926 	beq	r2,zero,80f454 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80f3b0:	e13ff817 	ldw	r4,-32(fp)
  80f3b4:	081215c0 	call	81215c <alt_get_fd>
  80f3b8:	e0bff915 	stw	r2,-28(fp)
  80f3bc:	e0bff917 	ldw	r2,-28(fp)
  80f3c0:	1000030e 	bge	r2,zero,80f3d0 <open+0x84>
    {
      status = index;
  80f3c4:	e0bff917 	ldw	r2,-28(fp)
  80f3c8:	e0bffa15 	stw	r2,-24(fp)
  80f3cc:	00002306 	br	80f45c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  80f3d0:	e0bff917 	ldw	r2,-28(fp)
  80f3d4:	10c00324 	muli	r3,r2,12
  80f3d8:	00802074 	movhi	r2,129
  80f3dc:	108f3104 	addi	r2,r2,15556
  80f3e0:	1885883a 	add	r2,r3,r2
  80f3e4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80f3e8:	e0fffe17 	ldw	r3,-8(fp)
  80f3ec:	00900034 	movhi	r2,16384
  80f3f0:	10bfffc4 	addi	r2,r2,-1
  80f3f4:	1886703a 	and	r3,r3,r2
  80f3f8:	e0bffc17 	ldw	r2,-16(fp)
  80f3fc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80f400:	e0bffb17 	ldw	r2,-20(fp)
  80f404:	1000051e 	bne	r2,zero,80f41c <open+0xd0>
  80f408:	e13ffc17 	ldw	r4,-16(fp)
  80f40c:	080f2880 	call	80f288 <alt_file_locked>
  80f410:	e0bffa15 	stw	r2,-24(fp)
  80f414:	e0bffa17 	ldw	r2,-24(fp)
  80f418:	10001016 	blt	r2,zero,80f45c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80f41c:	e0bff817 	ldw	r2,-32(fp)
  80f420:	10800317 	ldw	r2,12(r2)
  80f424:	10000826 	beq	r2,zero,80f448 <open+0xfc>
  80f428:	e0bff817 	ldw	r2,-32(fp)
  80f42c:	10800317 	ldw	r2,12(r2)
  80f430:	e1ffff17 	ldw	r7,-4(fp)
  80f434:	e1bffe17 	ldw	r6,-8(fp)
  80f438:	e17ffd17 	ldw	r5,-12(fp)
  80f43c:	e13ffc17 	ldw	r4,-16(fp)
  80f440:	103ee83a 	callr	r2
  80f444:	00000106 	br	80f44c <open+0x100>
  80f448:	0005883a 	mov	r2,zero
  80f44c:	e0bffa15 	stw	r2,-24(fp)
  80f450:	00000206 	br	80f45c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80f454:	00bffb44 	movi	r2,-19
  80f458:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80f45c:	e0bffa17 	ldw	r2,-24(fp)
  80f460:	1000090e 	bge	r2,zero,80f488 <open+0x13c>
  {
    alt_release_fd (index);  
  80f464:	e13ff917 	ldw	r4,-28(fp)
  80f468:	080f5d80 	call	80f5d8 <alt_release_fd>
    ALT_ERRNO = -status;
  80f46c:	080f24c0 	call	80f24c <alt_get_errno>
  80f470:	1007883a 	mov	r3,r2
  80f474:	e0bffa17 	ldw	r2,-24(fp)
  80f478:	0085c83a 	sub	r2,zero,r2
  80f47c:	18800015 	stw	r2,0(r3)
    return -1;
  80f480:	00bfffc4 	movi	r2,-1
  80f484:	00000106 	br	80f48c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  80f488:	e0bff917 	ldw	r2,-28(fp)
}
  80f48c:	e037883a 	mov	sp,fp
  80f490:	dfc00117 	ldw	ra,4(sp)
  80f494:	df000017 	ldw	fp,0(sp)
  80f498:	dec00204 	addi	sp,sp,8
  80f49c:	f800283a 	ret

0080f4a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f4a0:	defffe04 	addi	sp,sp,-8
  80f4a4:	dfc00115 	stw	ra,4(sp)
  80f4a8:	df000015 	stw	fp,0(sp)
  80f4ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f4b0:	d0a00e17 	ldw	r2,-32712(gp)
  80f4b4:	10000326 	beq	r2,zero,80f4c4 <alt_get_errno+0x24>
  80f4b8:	d0a00e17 	ldw	r2,-32712(gp)
  80f4bc:	103ee83a 	callr	r2
  80f4c0:	00000106 	br	80f4c8 <alt_get_errno+0x28>
  80f4c4:	d0a76504 	addi	r2,gp,-25196
}
  80f4c8:	e037883a 	mov	sp,fp
  80f4cc:	dfc00117 	ldw	ra,4(sp)
  80f4d0:	df000017 	ldw	fp,0(sp)
  80f4d4:	dec00204 	addi	sp,sp,8
  80f4d8:	f800283a 	ret

0080f4dc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80f4dc:	defff904 	addi	sp,sp,-28
  80f4e0:	dfc00615 	stw	ra,24(sp)
  80f4e4:	df000515 	stw	fp,20(sp)
  80f4e8:	df000504 	addi	fp,sp,20
  80f4ec:	e13ffd15 	stw	r4,-12(fp)
  80f4f0:	e17ffe15 	stw	r5,-8(fp)
  80f4f4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f4f8:	e0bffd17 	ldw	r2,-12(fp)
  80f4fc:	10000616 	blt	r2,zero,80f518 <read+0x3c>
  80f500:	e0bffd17 	ldw	r2,-12(fp)
  80f504:	10c00324 	muli	r3,r2,12
  80f508:	00802074 	movhi	r2,129
  80f50c:	108f3104 	addi	r2,r2,15556
  80f510:	1885883a 	add	r2,r3,r2
  80f514:	00000106 	br	80f51c <read+0x40>
  80f518:	0005883a 	mov	r2,zero
  80f51c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80f520:	e0bffb17 	ldw	r2,-20(fp)
  80f524:	10002226 	beq	r2,zero,80f5b0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80f528:	e0bffb17 	ldw	r2,-20(fp)
  80f52c:	10800217 	ldw	r2,8(r2)
  80f530:	108000cc 	andi	r2,r2,3
  80f534:	10800060 	cmpeqi	r2,r2,1
  80f538:	1000181e 	bne	r2,zero,80f59c <read+0xc0>
        (fd->dev->read))
  80f53c:	e0bffb17 	ldw	r2,-20(fp)
  80f540:	10800017 	ldw	r2,0(r2)
  80f544:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80f548:	10001426 	beq	r2,zero,80f59c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80f54c:	e0bffb17 	ldw	r2,-20(fp)
  80f550:	10800017 	ldw	r2,0(r2)
  80f554:	10800517 	ldw	r2,20(r2)
  80f558:	e0ffff17 	ldw	r3,-4(fp)
  80f55c:	180d883a 	mov	r6,r3
  80f560:	e17ffe17 	ldw	r5,-8(fp)
  80f564:	e13ffb17 	ldw	r4,-20(fp)
  80f568:	103ee83a 	callr	r2
  80f56c:	e0bffc15 	stw	r2,-16(fp)
  80f570:	e0bffc17 	ldw	r2,-16(fp)
  80f574:	1000070e 	bge	r2,zero,80f594 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  80f578:	080f4a00 	call	80f4a0 <alt_get_errno>
  80f57c:	1007883a 	mov	r3,r2
  80f580:	e0bffc17 	ldw	r2,-16(fp)
  80f584:	0085c83a 	sub	r2,zero,r2
  80f588:	18800015 	stw	r2,0(r3)
          return -1;
  80f58c:	00bfffc4 	movi	r2,-1
  80f590:	00000c06 	br	80f5c4 <read+0xe8>
        }
        return rval;
  80f594:	e0bffc17 	ldw	r2,-16(fp)
  80f598:	00000a06 	br	80f5c4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80f59c:	080f4a00 	call	80f4a0 <alt_get_errno>
  80f5a0:	1007883a 	mov	r3,r2
  80f5a4:	00800344 	movi	r2,13
  80f5a8:	18800015 	stw	r2,0(r3)
  80f5ac:	00000406 	br	80f5c0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80f5b0:	080f4a00 	call	80f4a0 <alt_get_errno>
  80f5b4:	1007883a 	mov	r3,r2
  80f5b8:	00801444 	movi	r2,81
  80f5bc:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80f5c0:	00bfffc4 	movi	r2,-1
}
  80f5c4:	e037883a 	mov	sp,fp
  80f5c8:	dfc00117 	ldw	ra,4(sp)
  80f5cc:	df000017 	ldw	fp,0(sp)
  80f5d0:	dec00204 	addi	sp,sp,8
  80f5d4:	f800283a 	ret

0080f5d8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80f5d8:	defffe04 	addi	sp,sp,-8
  80f5dc:	df000115 	stw	fp,4(sp)
  80f5e0:	df000104 	addi	fp,sp,4
  80f5e4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80f5e8:	e0bfff17 	ldw	r2,-4(fp)
  80f5ec:	108000d0 	cmplti	r2,r2,3
  80f5f0:	10000d1e 	bne	r2,zero,80f628 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80f5f4:	00802074 	movhi	r2,129
  80f5f8:	108f3104 	addi	r2,r2,15556
  80f5fc:	e0ffff17 	ldw	r3,-4(fp)
  80f600:	18c00324 	muli	r3,r3,12
  80f604:	10c5883a 	add	r2,r2,r3
  80f608:	10800204 	addi	r2,r2,8
  80f60c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80f610:	00802074 	movhi	r2,129
  80f614:	108f3104 	addi	r2,r2,15556
  80f618:	e0ffff17 	ldw	r3,-4(fp)
  80f61c:	18c00324 	muli	r3,r3,12
  80f620:	10c5883a 	add	r2,r2,r3
  80f624:	10000015 	stw	zero,0(r2)
  }
}
  80f628:	0001883a 	nop
  80f62c:	e037883a 	mov	sp,fp
  80f630:	df000017 	ldw	fp,0(sp)
  80f634:	dec00104 	addi	sp,sp,4
  80f638:	f800283a 	ret

0080f63c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80f63c:	defff904 	addi	sp,sp,-28
  80f640:	df000615 	stw	fp,24(sp)
  80f644:	df000604 	addi	fp,sp,24
  80f648:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f64c:	0005303a 	rdctl	r2,status
  80f650:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f654:	e0fffe17 	ldw	r3,-8(fp)
  80f658:	00bfff84 	movi	r2,-2
  80f65c:	1884703a 	and	r2,r3,r2
  80f660:	1001703a 	wrctl	status,r2
  
  return context;
  80f664:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80f668:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80f66c:	d0a01017 	ldw	r2,-32704(gp)
  80f670:	10c000c4 	addi	r3,r2,3
  80f674:	00bfff04 	movi	r2,-4
  80f678:	1884703a 	and	r2,r3,r2
  80f67c:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80f680:	d0e01017 	ldw	r3,-32704(gp)
  80f684:	e0bfff17 	ldw	r2,-4(fp)
  80f688:	1887883a 	add	r3,r3,r2
  80f68c:	00804034 	movhi	r2,256
  80f690:	10800004 	addi	r2,r2,0
  80f694:	10c0062e 	bgeu	r2,r3,80f6b0 <sbrk+0x74>
  80f698:	e0bffb17 	ldw	r2,-20(fp)
  80f69c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f6a0:	e0bffa17 	ldw	r2,-24(fp)
  80f6a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80f6a8:	00bfffc4 	movi	r2,-1
  80f6ac:	00000b06 	br	80f6dc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80f6b0:	d0a01017 	ldw	r2,-32704(gp)
  80f6b4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  80f6b8:	d0e01017 	ldw	r3,-32704(gp)
  80f6bc:	e0bfff17 	ldw	r2,-4(fp)
  80f6c0:	1885883a 	add	r2,r3,r2
  80f6c4:	d0a01015 	stw	r2,-32704(gp)
  80f6c8:	e0bffb17 	ldw	r2,-20(fp)
  80f6cc:	e0bffc15 	stw	r2,-16(fp)
  80f6d0:	e0bffc17 	ldw	r2,-16(fp)
  80f6d4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80f6d8:	e0bffd17 	ldw	r2,-12(fp)
} 
  80f6dc:	e037883a 	mov	sp,fp
  80f6e0:	df000017 	ldw	fp,0(sp)
  80f6e4:	dec00104 	addi	sp,sp,4
  80f6e8:	f800283a 	ret

0080f6ec <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80f6ec:	defffa04 	addi	sp,sp,-24
  80f6f0:	df000515 	stw	fp,20(sp)
  80f6f4:	df000504 	addi	fp,sp,20
  80f6f8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f6fc:	0005303a 	rdctl	r2,status
  80f700:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f704:	e0fffc17 	ldw	r3,-16(fp)
  80f708:	00bfff84 	movi	r2,-2
  80f70c:	1884703a 	and	r2,r3,r2
  80f710:	1001703a 	wrctl	status,r2
  
  return context;
  80f714:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80f718:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  80f71c:	e0bfff17 	ldw	r2,-4(fp)
  80f720:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80f724:	e0bffd17 	ldw	r2,-12(fp)
  80f728:	10800017 	ldw	r2,0(r2)
  80f72c:	e0fffd17 	ldw	r3,-12(fp)
  80f730:	18c00117 	ldw	r3,4(r3)
  80f734:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  80f738:	e0bffd17 	ldw	r2,-12(fp)
  80f73c:	10800117 	ldw	r2,4(r2)
  80f740:	e0fffd17 	ldw	r3,-12(fp)
  80f744:	18c00017 	ldw	r3,0(r3)
  80f748:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80f74c:	e0bffd17 	ldw	r2,-12(fp)
  80f750:	e0fffd17 	ldw	r3,-12(fp)
  80f754:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80f758:	e0bffd17 	ldw	r2,-12(fp)
  80f75c:	e0fffd17 	ldw	r3,-12(fp)
  80f760:	10c00015 	stw	r3,0(r2)
  80f764:	e0bffb17 	ldw	r2,-20(fp)
  80f768:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f76c:	e0bffe17 	ldw	r2,-8(fp)
  80f770:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80f774:	0001883a 	nop
  80f778:	e037883a 	mov	sp,fp
  80f77c:	df000017 	ldw	fp,0(sp)
  80f780:	dec00104 	addi	sp,sp,4
  80f784:	f800283a 	ret

0080f788 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80f788:	defffb04 	addi	sp,sp,-20
  80f78c:	dfc00415 	stw	ra,16(sp)
  80f790:	df000315 	stw	fp,12(sp)
  80f794:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80f798:	d0a01117 	ldw	r2,-32700(gp)
  80f79c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80f7a0:	d0a77117 	ldw	r2,-25148(gp)
  80f7a4:	10800044 	addi	r2,r2,1
  80f7a8:	d0a77115 	stw	r2,-25148(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80f7ac:	00002e06 	br	80f868 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80f7b0:	e0bffd17 	ldw	r2,-12(fp)
  80f7b4:	10800017 	ldw	r2,0(r2)
  80f7b8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80f7bc:	e0bffd17 	ldw	r2,-12(fp)
  80f7c0:	10800403 	ldbu	r2,16(r2)
  80f7c4:	10803fcc 	andi	r2,r2,255
  80f7c8:	10000426 	beq	r2,zero,80f7dc <alt_tick+0x54>
  80f7cc:	d0a77117 	ldw	r2,-25148(gp)
  80f7d0:	1000021e 	bne	r2,zero,80f7dc <alt_tick+0x54>
    {
      alarm->rollover = 0;
  80f7d4:	e0bffd17 	ldw	r2,-12(fp)
  80f7d8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80f7dc:	e0bffd17 	ldw	r2,-12(fp)
  80f7e0:	10800217 	ldw	r2,8(r2)
  80f7e4:	d0e77117 	ldw	r3,-25148(gp)
  80f7e8:	18801d36 	bltu	r3,r2,80f860 <alt_tick+0xd8>
  80f7ec:	e0bffd17 	ldw	r2,-12(fp)
  80f7f0:	10800403 	ldbu	r2,16(r2)
  80f7f4:	10803fcc 	andi	r2,r2,255
  80f7f8:	1000191e 	bne	r2,zero,80f860 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  80f7fc:	e0bffd17 	ldw	r2,-12(fp)
  80f800:	10800317 	ldw	r2,12(r2)
  80f804:	e0fffd17 	ldw	r3,-12(fp)
  80f808:	18c00517 	ldw	r3,20(r3)
  80f80c:	1809883a 	mov	r4,r3
  80f810:	103ee83a 	callr	r2
  80f814:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80f818:	e0bfff17 	ldw	r2,-4(fp)
  80f81c:	1000031e 	bne	r2,zero,80f82c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  80f820:	e13ffd17 	ldw	r4,-12(fp)
  80f824:	080f6ec0 	call	80f6ec <alt_alarm_stop>
  80f828:	00000d06 	br	80f860 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  80f82c:	e0bffd17 	ldw	r2,-12(fp)
  80f830:	10c00217 	ldw	r3,8(r2)
  80f834:	e0bfff17 	ldw	r2,-4(fp)
  80f838:	1887883a 	add	r3,r3,r2
  80f83c:	e0bffd17 	ldw	r2,-12(fp)
  80f840:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80f844:	e0bffd17 	ldw	r2,-12(fp)
  80f848:	10c00217 	ldw	r3,8(r2)
  80f84c:	d0a77117 	ldw	r2,-25148(gp)
  80f850:	1880032e 	bgeu	r3,r2,80f860 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  80f854:	e0bffd17 	ldw	r2,-12(fp)
  80f858:	00c00044 	movi	r3,1
  80f85c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  80f860:	e0bffe17 	ldw	r2,-8(fp)
  80f864:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80f868:	e0fffd17 	ldw	r3,-12(fp)
  80f86c:	d0a01104 	addi	r2,gp,-32700
  80f870:	18bfcf1e 	bne	r3,r2,80f7b0 <__alt_mem_onchip_mem+0xff78f7b0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80f874:	0001883a 	nop
}
  80f878:	0001883a 	nop
  80f87c:	e037883a 	mov	sp,fp
  80f880:	dfc00117 	ldw	ra,4(sp)
  80f884:	df000017 	ldw	fp,0(sp)
  80f888:	dec00204 	addi	sp,sp,8
  80f88c:	f800283a 	ret

0080f890 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f890:	defffe04 	addi	sp,sp,-8
  80f894:	dfc00115 	stw	ra,4(sp)
  80f898:	df000015 	stw	fp,0(sp)
  80f89c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f8a0:	d0a00e17 	ldw	r2,-32712(gp)
  80f8a4:	10000326 	beq	r2,zero,80f8b4 <alt_get_errno+0x24>
  80f8a8:	d0a00e17 	ldw	r2,-32712(gp)
  80f8ac:	103ee83a 	callr	r2
  80f8b0:	00000106 	br	80f8b8 <alt_get_errno+0x28>
  80f8b4:	d0a76504 	addi	r2,gp,-25196
}
  80f8b8:	e037883a 	mov	sp,fp
  80f8bc:	dfc00117 	ldw	ra,4(sp)
  80f8c0:	df000017 	ldw	fp,0(sp)
  80f8c4:	dec00204 	addi	sp,sp,8
  80f8c8:	f800283a 	ret

0080f8cc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80f8cc:	defff904 	addi	sp,sp,-28
  80f8d0:	dfc00615 	stw	ra,24(sp)
  80f8d4:	df000515 	stw	fp,20(sp)
  80f8d8:	df000504 	addi	fp,sp,20
  80f8dc:	e13ffd15 	stw	r4,-12(fp)
  80f8e0:	e17ffe15 	stw	r5,-8(fp)
  80f8e4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f8e8:	e0bffd17 	ldw	r2,-12(fp)
  80f8ec:	10000616 	blt	r2,zero,80f908 <write+0x3c>
  80f8f0:	e0bffd17 	ldw	r2,-12(fp)
  80f8f4:	10c00324 	muli	r3,r2,12
  80f8f8:	00802074 	movhi	r2,129
  80f8fc:	108f3104 	addi	r2,r2,15556
  80f900:	1885883a 	add	r2,r3,r2
  80f904:	00000106 	br	80f90c <write+0x40>
  80f908:	0005883a 	mov	r2,zero
  80f90c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80f910:	e0bffb17 	ldw	r2,-20(fp)
  80f914:	10002126 	beq	r2,zero,80f99c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80f918:	e0bffb17 	ldw	r2,-20(fp)
  80f91c:	10800217 	ldw	r2,8(r2)
  80f920:	108000cc 	andi	r2,r2,3
  80f924:	10001826 	beq	r2,zero,80f988 <write+0xbc>
  80f928:	e0bffb17 	ldw	r2,-20(fp)
  80f92c:	10800017 	ldw	r2,0(r2)
  80f930:	10800617 	ldw	r2,24(r2)
  80f934:	10001426 	beq	r2,zero,80f988 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80f938:	e0bffb17 	ldw	r2,-20(fp)
  80f93c:	10800017 	ldw	r2,0(r2)
  80f940:	10800617 	ldw	r2,24(r2)
  80f944:	e0ffff17 	ldw	r3,-4(fp)
  80f948:	180d883a 	mov	r6,r3
  80f94c:	e17ffe17 	ldw	r5,-8(fp)
  80f950:	e13ffb17 	ldw	r4,-20(fp)
  80f954:	103ee83a 	callr	r2
  80f958:	e0bffc15 	stw	r2,-16(fp)
  80f95c:	e0bffc17 	ldw	r2,-16(fp)
  80f960:	1000070e 	bge	r2,zero,80f980 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  80f964:	080f8900 	call	80f890 <alt_get_errno>
  80f968:	1007883a 	mov	r3,r2
  80f96c:	e0bffc17 	ldw	r2,-16(fp)
  80f970:	0085c83a 	sub	r2,zero,r2
  80f974:	18800015 	stw	r2,0(r3)
        return -1;
  80f978:	00bfffc4 	movi	r2,-1
  80f97c:	00000c06 	br	80f9b0 <write+0xe4>
      }
      return rval;
  80f980:	e0bffc17 	ldw	r2,-16(fp)
  80f984:	00000a06 	br	80f9b0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80f988:	080f8900 	call	80f890 <alt_get_errno>
  80f98c:	1007883a 	mov	r3,r2
  80f990:	00800344 	movi	r2,13
  80f994:	18800015 	stw	r2,0(r3)
  80f998:	00000406 	br	80f9ac <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80f99c:	080f8900 	call	80f890 <alt_get_errno>
  80f9a0:	1007883a 	mov	r3,r2
  80f9a4:	00801444 	movi	r2,81
  80f9a8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80f9ac:	00bfffc4 	movi	r2,-1
}
  80f9b0:	e037883a 	mov	sp,fp
  80f9b4:	dfc00117 	ldw	ra,4(sp)
  80f9b8:	df000017 	ldw	fp,0(sp)
  80f9bc:	dec00204 	addi	sp,sp,8
  80f9c0:	f800283a 	ret

0080f9c4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80f9c4:	defffd04 	addi	sp,sp,-12
  80f9c8:	dfc00215 	stw	ra,8(sp)
  80f9cc:	df000115 	stw	fp,4(sp)
  80f9d0:	df000104 	addi	fp,sp,4
  80f9d4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80f9d8:	d1600b04 	addi	r5,gp,-32724
  80f9dc:	e13fff17 	ldw	r4,-4(fp)
  80f9e0:	0811e600 	call	811e60 <alt_dev_llist_insert>
}
  80f9e4:	e037883a 	mov	sp,fp
  80f9e8:	dfc00117 	ldw	ra,4(sp)
  80f9ec:	df000017 	ldw	fp,0(sp)
  80f9f0:	dec00204 	addi	sp,sp,8
  80f9f4:	f800283a 	ret

0080f9f8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80f9f8:	defffd04 	addi	sp,sp,-12
  80f9fc:	dfc00215 	stw	ra,8(sp)
  80fa00:	df000115 	stw	fp,4(sp)
  80fa04:	df000104 	addi	fp,sp,4
  80fa08:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  80fa0c:	08126440 	call	812644 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80fa10:	00800044 	movi	r2,1
  80fa14:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80fa18:	0001883a 	nop
  80fa1c:	e037883a 	mov	sp,fp
  80fa20:	dfc00117 	ldw	ra,4(sp)
  80fa24:	df000017 	ldw	fp,0(sp)
  80fa28:	dec00204 	addi	sp,sp,8
  80fa2c:	f800283a 	ret

0080fa30 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80fa30:	defffe04 	addi	sp,sp,-8
  80fa34:	dfc00115 	stw	ra,4(sp)
  80fa38:	df000015 	stw	fp,0(sp)
  80fa3c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
  80fa40:	01c0fa04 	movi	r7,1000
  80fa44:	01800084 	movi	r6,2
  80fa48:	000b883a 	mov	r5,zero
  80fa4c:	01004434 	movhi	r4,272
  80fa50:	21040804 	addi	r4,r4,4128
  80fa54:	08114880 	call	811488 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER2, timer2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80fa58:	01800044 	movi	r6,1
  80fa5c:	000b883a 	mov	r5,zero
  80fa60:	01002074 	movhi	r4,129
  80fa64:	210f9b04 	addi	r4,r4,15980
  80fa68:	080fc300 	call	80fc30 <altera_avalon_jtag_uart_init>
  80fa6c:	01002074 	movhi	r4,129
  80fa70:	210f9104 	addi	r4,r4,15940
  80fa74:	080f9c40 	call	80f9c4 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  80fa78:	01002074 	movhi	r4,129
  80fa7c:	2113b304 	addi	r4,r4,20172
  80fa80:	081127c0 	call	81127c <altera_avalon_lcd_16207_init>
  80fa84:	01002074 	movhi	r4,129
  80fa88:	2113a904 	addi	r4,r4,20132
  80fa8c:	080f9c40 	call	80f9c4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( CPU_SYSID, cpu_sysid);
  80fa90:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  80fa94:	000d883a 	mov	r6,zero
  80fa98:	000b883a 	mov	r5,zero
  80fa9c:	01002074 	movhi	r4,129
  80faa0:	2113fb04 	addi	r4,r4,20460
  80faa4:	08116140 	call	811614 <altera_avalon_uart_init>
  80faa8:	01002074 	movhi	r4,129
  80faac:	2113f104 	addi	r4,r4,20420
  80fab0:	080f9c40 	call	80f9c4 <alt_dev_reg>
}
  80fab4:	0001883a 	nop
  80fab8:	e037883a 	mov	sp,fp
  80fabc:	dfc00117 	ldw	ra,4(sp)
  80fac0:	df000017 	ldw	fp,0(sp)
  80fac4:	dec00204 	addi	sp,sp,8
  80fac8:	f800283a 	ret

0080facc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80facc:	defffa04 	addi	sp,sp,-24
  80fad0:	dfc00515 	stw	ra,20(sp)
  80fad4:	df000415 	stw	fp,16(sp)
  80fad8:	df000404 	addi	fp,sp,16
  80fadc:	e13ffd15 	stw	r4,-12(fp)
  80fae0:	e17ffe15 	stw	r5,-8(fp)
  80fae4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80fae8:	e0bffd17 	ldw	r2,-12(fp)
  80faec:	10800017 	ldw	r2,0(r2)
  80faf0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80faf4:	e0bffc17 	ldw	r2,-16(fp)
  80faf8:	10c00a04 	addi	r3,r2,40
  80fafc:	e0bffd17 	ldw	r2,-12(fp)
  80fb00:	10800217 	ldw	r2,8(r2)
  80fb04:	100f883a 	mov	r7,r2
  80fb08:	e1bfff17 	ldw	r6,-4(fp)
  80fb0c:	e17ffe17 	ldw	r5,-8(fp)
  80fb10:	1809883a 	mov	r4,r3
  80fb14:	08100f40 	call	8100f4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80fb18:	e037883a 	mov	sp,fp
  80fb1c:	dfc00117 	ldw	ra,4(sp)
  80fb20:	df000017 	ldw	fp,0(sp)
  80fb24:	dec00204 	addi	sp,sp,8
  80fb28:	f800283a 	ret

0080fb2c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80fb2c:	defffa04 	addi	sp,sp,-24
  80fb30:	dfc00515 	stw	ra,20(sp)
  80fb34:	df000415 	stw	fp,16(sp)
  80fb38:	df000404 	addi	fp,sp,16
  80fb3c:	e13ffd15 	stw	r4,-12(fp)
  80fb40:	e17ffe15 	stw	r5,-8(fp)
  80fb44:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80fb48:	e0bffd17 	ldw	r2,-12(fp)
  80fb4c:	10800017 	ldw	r2,0(r2)
  80fb50:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80fb54:	e0bffc17 	ldw	r2,-16(fp)
  80fb58:	10c00a04 	addi	r3,r2,40
  80fb5c:	e0bffd17 	ldw	r2,-12(fp)
  80fb60:	10800217 	ldw	r2,8(r2)
  80fb64:	100f883a 	mov	r7,r2
  80fb68:	e1bfff17 	ldw	r6,-4(fp)
  80fb6c:	e17ffe17 	ldw	r5,-8(fp)
  80fb70:	1809883a 	mov	r4,r3
  80fb74:	08103100 	call	810310 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80fb78:	e037883a 	mov	sp,fp
  80fb7c:	dfc00117 	ldw	ra,4(sp)
  80fb80:	df000017 	ldw	fp,0(sp)
  80fb84:	dec00204 	addi	sp,sp,8
  80fb88:	f800283a 	ret

0080fb8c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80fb8c:	defffc04 	addi	sp,sp,-16
  80fb90:	dfc00315 	stw	ra,12(sp)
  80fb94:	df000215 	stw	fp,8(sp)
  80fb98:	df000204 	addi	fp,sp,8
  80fb9c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80fba0:	e0bfff17 	ldw	r2,-4(fp)
  80fba4:	10800017 	ldw	r2,0(r2)
  80fba8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80fbac:	e0bffe17 	ldw	r2,-8(fp)
  80fbb0:	10c00a04 	addi	r3,r2,40
  80fbb4:	e0bfff17 	ldw	r2,-4(fp)
  80fbb8:	10800217 	ldw	r2,8(r2)
  80fbbc:	100b883a 	mov	r5,r2
  80fbc0:	1809883a 	mov	r4,r3
  80fbc4:	080ff9c0 	call	80ff9c <altera_avalon_jtag_uart_close>
}
  80fbc8:	e037883a 	mov	sp,fp
  80fbcc:	dfc00117 	ldw	ra,4(sp)
  80fbd0:	df000017 	ldw	fp,0(sp)
  80fbd4:	dec00204 	addi	sp,sp,8
  80fbd8:	f800283a 	ret

0080fbdc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80fbdc:	defffa04 	addi	sp,sp,-24
  80fbe0:	dfc00515 	stw	ra,20(sp)
  80fbe4:	df000415 	stw	fp,16(sp)
  80fbe8:	df000404 	addi	fp,sp,16
  80fbec:	e13ffd15 	stw	r4,-12(fp)
  80fbf0:	e17ffe15 	stw	r5,-8(fp)
  80fbf4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80fbf8:	e0bffd17 	ldw	r2,-12(fp)
  80fbfc:	10800017 	ldw	r2,0(r2)
  80fc00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80fc04:	e0bffc17 	ldw	r2,-16(fp)
  80fc08:	10800a04 	addi	r2,r2,40
  80fc0c:	e1bfff17 	ldw	r6,-4(fp)
  80fc10:	e17ffe17 	ldw	r5,-8(fp)
  80fc14:	1009883a 	mov	r4,r2
  80fc18:	08100040 	call	810004 <altera_avalon_jtag_uart_ioctl>
}
  80fc1c:	e037883a 	mov	sp,fp
  80fc20:	dfc00117 	ldw	ra,4(sp)
  80fc24:	df000017 	ldw	fp,0(sp)
  80fc28:	dec00204 	addi	sp,sp,8
  80fc2c:	f800283a 	ret

0080fc30 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80fc30:	defffa04 	addi	sp,sp,-24
  80fc34:	dfc00515 	stw	ra,20(sp)
  80fc38:	df000415 	stw	fp,16(sp)
  80fc3c:	df000404 	addi	fp,sp,16
  80fc40:	e13ffd15 	stw	r4,-12(fp)
  80fc44:	e17ffe15 	stw	r5,-8(fp)
  80fc48:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80fc4c:	e0bffd17 	ldw	r2,-12(fp)
  80fc50:	00c00044 	movi	r3,1
  80fc54:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80fc58:	e0bffd17 	ldw	r2,-12(fp)
  80fc5c:	10800017 	ldw	r2,0(r2)
  80fc60:	10800104 	addi	r2,r2,4
  80fc64:	1007883a 	mov	r3,r2
  80fc68:	e0bffd17 	ldw	r2,-12(fp)
  80fc6c:	10800817 	ldw	r2,32(r2)
  80fc70:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80fc74:	e0bffe17 	ldw	r2,-8(fp)
  80fc78:	e0ffff17 	ldw	r3,-4(fp)
  80fc7c:	d8000015 	stw	zero,0(sp)
  80fc80:	e1fffd17 	ldw	r7,-12(fp)
  80fc84:	01802074 	movhi	r6,129
  80fc88:	31bf3c04 	addi	r6,r6,-784
  80fc8c:	180b883a 	mov	r5,r3
  80fc90:	1009883a 	mov	r4,r2
  80fc94:	08122340 	call	812234 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80fc98:	e0bffd17 	ldw	r2,-12(fp)
  80fc9c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80fca0:	e0bffd17 	ldw	r2,-12(fp)
  80fca4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80fca8:	d0e77017 	ldw	r3,-25152(gp)
  80fcac:	e1fffd17 	ldw	r7,-12(fp)
  80fcb0:	01802074 	movhi	r6,129
  80fcb4:	31bfbf04 	addi	r6,r6,-260
  80fcb8:	180b883a 	mov	r5,r3
  80fcbc:	1009883a 	mov	r4,r2
  80fcc0:	080e9dc0 	call	80e9dc <alt_alarm_start>
  80fcc4:	1000040e 	bge	r2,zero,80fcd8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80fcc8:	e0fffd17 	ldw	r3,-12(fp)
  80fccc:	00a00034 	movhi	r2,32768
  80fcd0:	10bfffc4 	addi	r2,r2,-1
  80fcd4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80fcd8:	0001883a 	nop
  80fcdc:	e037883a 	mov	sp,fp
  80fce0:	dfc00117 	ldw	ra,4(sp)
  80fce4:	df000017 	ldw	fp,0(sp)
  80fce8:	dec00204 	addi	sp,sp,8
  80fcec:	f800283a 	ret

0080fcf0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80fcf0:	defff804 	addi	sp,sp,-32
  80fcf4:	df000715 	stw	fp,28(sp)
  80fcf8:	df000704 	addi	fp,sp,28
  80fcfc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80fd00:	e0bfff17 	ldw	r2,-4(fp)
  80fd04:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  80fd08:	e0bffb17 	ldw	r2,-20(fp)
  80fd0c:	10800017 	ldw	r2,0(r2)
  80fd10:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80fd14:	e0bffc17 	ldw	r2,-16(fp)
  80fd18:	10800104 	addi	r2,r2,4
  80fd1c:	10800037 	ldwio	r2,0(r2)
  80fd20:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80fd24:	e0bffd17 	ldw	r2,-12(fp)
  80fd28:	1080c00c 	andi	r2,r2,768
  80fd2c:	10006d26 	beq	r2,zero,80fee4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80fd30:	e0bffd17 	ldw	r2,-12(fp)
  80fd34:	1080400c 	andi	r2,r2,256
  80fd38:	10003526 	beq	r2,zero,80fe10 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80fd3c:	00800074 	movhi	r2,1
  80fd40:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80fd44:	e0bffb17 	ldw	r2,-20(fp)
  80fd48:	10800a17 	ldw	r2,40(r2)
  80fd4c:	10800044 	addi	r2,r2,1
  80fd50:	1081ffcc 	andi	r2,r2,2047
  80fd54:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  80fd58:	e0bffb17 	ldw	r2,-20(fp)
  80fd5c:	10c00b17 	ldw	r3,44(r2)
  80fd60:	e0bffe17 	ldw	r2,-8(fp)
  80fd64:	18801526 	beq	r3,r2,80fdbc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80fd68:	e0bffc17 	ldw	r2,-16(fp)
  80fd6c:	10800037 	ldwio	r2,0(r2)
  80fd70:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80fd74:	e0bff917 	ldw	r2,-28(fp)
  80fd78:	10a0000c 	andi	r2,r2,32768
  80fd7c:	10001126 	beq	r2,zero,80fdc4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80fd80:	e0bffb17 	ldw	r2,-20(fp)
  80fd84:	10800a17 	ldw	r2,40(r2)
  80fd88:	e0fff917 	ldw	r3,-28(fp)
  80fd8c:	1809883a 	mov	r4,r3
  80fd90:	e0fffb17 	ldw	r3,-20(fp)
  80fd94:	1885883a 	add	r2,r3,r2
  80fd98:	10800e04 	addi	r2,r2,56
  80fd9c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80fda0:	e0bffb17 	ldw	r2,-20(fp)
  80fda4:	10800a17 	ldw	r2,40(r2)
  80fda8:	10800044 	addi	r2,r2,1
  80fdac:	10c1ffcc 	andi	r3,r2,2047
  80fdb0:	e0bffb17 	ldw	r2,-20(fp)
  80fdb4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80fdb8:	003fe206 	br	80fd44 <__alt_mem_onchip_mem+0xff78fd44>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  80fdbc:	0001883a 	nop
  80fdc0:	00000106 	br	80fdc8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  80fdc4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80fdc8:	e0bff917 	ldw	r2,-28(fp)
  80fdcc:	10bfffec 	andhi	r2,r2,65535
  80fdd0:	10000f26 	beq	r2,zero,80fe10 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80fdd4:	e0bffb17 	ldw	r2,-20(fp)
  80fdd8:	10c00817 	ldw	r3,32(r2)
  80fddc:	00bfff84 	movi	r2,-2
  80fde0:	1886703a 	and	r3,r3,r2
  80fde4:	e0bffb17 	ldw	r2,-20(fp)
  80fde8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80fdec:	e0bffc17 	ldw	r2,-16(fp)
  80fdf0:	10800104 	addi	r2,r2,4
  80fdf4:	1007883a 	mov	r3,r2
  80fdf8:	e0bffb17 	ldw	r2,-20(fp)
  80fdfc:	10800817 	ldw	r2,32(r2)
  80fe00:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80fe04:	e0bffc17 	ldw	r2,-16(fp)
  80fe08:	10800104 	addi	r2,r2,4
  80fe0c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80fe10:	e0bffd17 	ldw	r2,-12(fp)
  80fe14:	1080800c 	andi	r2,r2,512
  80fe18:	103fbe26 	beq	r2,zero,80fd14 <__alt_mem_onchip_mem+0xff78fd14>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80fe1c:	e0bffd17 	ldw	r2,-12(fp)
  80fe20:	1004d43a 	srli	r2,r2,16
  80fe24:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80fe28:	00001406 	br	80fe7c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80fe2c:	e0bffc17 	ldw	r2,-16(fp)
  80fe30:	e0fffb17 	ldw	r3,-20(fp)
  80fe34:	18c00d17 	ldw	r3,52(r3)
  80fe38:	e13ffb17 	ldw	r4,-20(fp)
  80fe3c:	20c7883a 	add	r3,r4,r3
  80fe40:	18c20e04 	addi	r3,r3,2104
  80fe44:	18c00003 	ldbu	r3,0(r3)
  80fe48:	18c03fcc 	andi	r3,r3,255
  80fe4c:	18c0201c 	xori	r3,r3,128
  80fe50:	18ffe004 	addi	r3,r3,-128
  80fe54:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80fe58:	e0bffb17 	ldw	r2,-20(fp)
  80fe5c:	10800d17 	ldw	r2,52(r2)
  80fe60:	10800044 	addi	r2,r2,1
  80fe64:	10c1ffcc 	andi	r3,r2,2047
  80fe68:	e0bffb17 	ldw	r2,-20(fp)
  80fe6c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80fe70:	e0bffa17 	ldw	r2,-24(fp)
  80fe74:	10bfffc4 	addi	r2,r2,-1
  80fe78:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80fe7c:	e0bffa17 	ldw	r2,-24(fp)
  80fe80:	10000526 	beq	r2,zero,80fe98 <altera_avalon_jtag_uart_irq+0x1a8>
  80fe84:	e0bffb17 	ldw	r2,-20(fp)
  80fe88:	10c00d17 	ldw	r3,52(r2)
  80fe8c:	e0bffb17 	ldw	r2,-20(fp)
  80fe90:	10800c17 	ldw	r2,48(r2)
  80fe94:	18bfe51e 	bne	r3,r2,80fe2c <__alt_mem_onchip_mem+0xff78fe2c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80fe98:	e0bffa17 	ldw	r2,-24(fp)
  80fe9c:	103f9d26 	beq	r2,zero,80fd14 <__alt_mem_onchip_mem+0xff78fd14>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80fea0:	e0bffb17 	ldw	r2,-20(fp)
  80fea4:	10c00817 	ldw	r3,32(r2)
  80fea8:	00bfff44 	movi	r2,-3
  80feac:	1886703a 	and	r3,r3,r2
  80feb0:	e0bffb17 	ldw	r2,-20(fp)
  80feb4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80feb8:	e0bffb17 	ldw	r2,-20(fp)
  80febc:	10800017 	ldw	r2,0(r2)
  80fec0:	10800104 	addi	r2,r2,4
  80fec4:	1007883a 	mov	r3,r2
  80fec8:	e0bffb17 	ldw	r2,-20(fp)
  80fecc:	10800817 	ldw	r2,32(r2)
  80fed0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80fed4:	e0bffc17 	ldw	r2,-16(fp)
  80fed8:	10800104 	addi	r2,r2,4
  80fedc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80fee0:	003f8c06 	br	80fd14 <__alt_mem_onchip_mem+0xff78fd14>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  80fee4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  80fee8:	0001883a 	nop
  80feec:	e037883a 	mov	sp,fp
  80fef0:	df000017 	ldw	fp,0(sp)
  80fef4:	dec00104 	addi	sp,sp,4
  80fef8:	f800283a 	ret

0080fefc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80fefc:	defff804 	addi	sp,sp,-32
  80ff00:	df000715 	stw	fp,28(sp)
  80ff04:	df000704 	addi	fp,sp,28
  80ff08:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80ff0c:	e0bffb17 	ldw	r2,-20(fp)
  80ff10:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80ff14:	e0bff917 	ldw	r2,-28(fp)
  80ff18:	10800017 	ldw	r2,0(r2)
  80ff1c:	10800104 	addi	r2,r2,4
  80ff20:	10800037 	ldwio	r2,0(r2)
  80ff24:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80ff28:	e0bffa17 	ldw	r2,-24(fp)
  80ff2c:	1081000c 	andi	r2,r2,1024
  80ff30:	10000b26 	beq	r2,zero,80ff60 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80ff34:	e0bff917 	ldw	r2,-28(fp)
  80ff38:	10800017 	ldw	r2,0(r2)
  80ff3c:	10800104 	addi	r2,r2,4
  80ff40:	1007883a 	mov	r3,r2
  80ff44:	e0bff917 	ldw	r2,-28(fp)
  80ff48:	10800817 	ldw	r2,32(r2)
  80ff4c:	10810014 	ori	r2,r2,1024
  80ff50:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  80ff54:	e0bff917 	ldw	r2,-28(fp)
  80ff58:	10000915 	stw	zero,36(r2)
  80ff5c:	00000a06 	br	80ff88 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80ff60:	e0bff917 	ldw	r2,-28(fp)
  80ff64:	10c00917 	ldw	r3,36(r2)
  80ff68:	00a00034 	movhi	r2,32768
  80ff6c:	10bfff04 	addi	r2,r2,-4
  80ff70:	10c00536 	bltu	r2,r3,80ff88 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  80ff74:	e0bff917 	ldw	r2,-28(fp)
  80ff78:	10800917 	ldw	r2,36(r2)
  80ff7c:	10c00044 	addi	r3,r2,1
  80ff80:	e0bff917 	ldw	r2,-28(fp)
  80ff84:	10c00915 	stw	r3,36(r2)
  80ff88:	d0a77017 	ldw	r2,-25152(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80ff8c:	e037883a 	mov	sp,fp
  80ff90:	df000017 	ldw	fp,0(sp)
  80ff94:	dec00104 	addi	sp,sp,4
  80ff98:	f800283a 	ret

0080ff9c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80ff9c:	defffd04 	addi	sp,sp,-12
  80ffa0:	df000215 	stw	fp,8(sp)
  80ffa4:	df000204 	addi	fp,sp,8
  80ffa8:	e13ffe15 	stw	r4,-8(fp)
  80ffac:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80ffb0:	00000506 	br	80ffc8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80ffb4:	e0bfff17 	ldw	r2,-4(fp)
  80ffb8:	1090000c 	andi	r2,r2,16384
  80ffbc:	10000226 	beq	r2,zero,80ffc8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80ffc0:	00bffd44 	movi	r2,-11
  80ffc4:	00000b06 	br	80fff4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80ffc8:	e0bffe17 	ldw	r2,-8(fp)
  80ffcc:	10c00d17 	ldw	r3,52(r2)
  80ffd0:	e0bffe17 	ldw	r2,-8(fp)
  80ffd4:	10800c17 	ldw	r2,48(r2)
  80ffd8:	18800526 	beq	r3,r2,80fff0 <altera_avalon_jtag_uart_close+0x54>
  80ffdc:	e0bffe17 	ldw	r2,-8(fp)
  80ffe0:	10c00917 	ldw	r3,36(r2)
  80ffe4:	e0bffe17 	ldw	r2,-8(fp)
  80ffe8:	10800117 	ldw	r2,4(r2)
  80ffec:	18bff136 	bltu	r3,r2,80ffb4 <__alt_mem_onchip_mem+0xff78ffb4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80fff0:	0005883a 	mov	r2,zero
}
  80fff4:	e037883a 	mov	sp,fp
  80fff8:	df000017 	ldw	fp,0(sp)
  80fffc:	dec00104 	addi	sp,sp,4
  810000:	f800283a 	ret

00810004 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  810004:	defffa04 	addi	sp,sp,-24
  810008:	df000515 	stw	fp,20(sp)
  81000c:	df000504 	addi	fp,sp,20
  810010:	e13ffd15 	stw	r4,-12(fp)
  810014:	e17ffe15 	stw	r5,-8(fp)
  810018:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  81001c:	00bff9c4 	movi	r2,-25
  810020:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  810024:	e0bffe17 	ldw	r2,-8(fp)
  810028:	10da8060 	cmpeqi	r3,r2,27137
  81002c:	1800031e 	bne	r3,zero,81003c <altera_avalon_jtag_uart_ioctl+0x38>
  810030:	109a80a0 	cmpeqi	r2,r2,27138
  810034:	1000181e 	bne	r2,zero,810098 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  810038:	00002906 	br	8100e0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  81003c:	e0bffd17 	ldw	r2,-12(fp)
  810040:	10c00117 	ldw	r3,4(r2)
  810044:	00a00034 	movhi	r2,32768
  810048:	10bfffc4 	addi	r2,r2,-1
  81004c:	18802126 	beq	r3,r2,8100d4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  810050:	e0bfff17 	ldw	r2,-4(fp)
  810054:	10800017 	ldw	r2,0(r2)
  810058:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  81005c:	e0bffc17 	ldw	r2,-16(fp)
  810060:	10800090 	cmplti	r2,r2,2
  810064:	1000061e 	bne	r2,zero,810080 <altera_avalon_jtag_uart_ioctl+0x7c>
  810068:	e0fffc17 	ldw	r3,-16(fp)
  81006c:	00a00034 	movhi	r2,32768
  810070:	10bfffc4 	addi	r2,r2,-1
  810074:	18800226 	beq	r3,r2,810080 <altera_avalon_jtag_uart_ioctl+0x7c>
  810078:	e0bffc17 	ldw	r2,-16(fp)
  81007c:	00000206 	br	810088 <altera_avalon_jtag_uart_ioctl+0x84>
  810080:	00a00034 	movhi	r2,32768
  810084:	10bfff84 	addi	r2,r2,-2
  810088:	e0fffd17 	ldw	r3,-12(fp)
  81008c:	18800115 	stw	r2,4(r3)
      rc = 0;
  810090:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  810094:	00000f06 	br	8100d4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  810098:	e0bffd17 	ldw	r2,-12(fp)
  81009c:	10c00117 	ldw	r3,4(r2)
  8100a0:	00a00034 	movhi	r2,32768
  8100a4:	10bfffc4 	addi	r2,r2,-1
  8100a8:	18800c26 	beq	r3,r2,8100dc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  8100ac:	e0bffd17 	ldw	r2,-12(fp)
  8100b0:	10c00917 	ldw	r3,36(r2)
  8100b4:	e0bffd17 	ldw	r2,-12(fp)
  8100b8:	10800117 	ldw	r2,4(r2)
  8100bc:	1885803a 	cmpltu	r2,r3,r2
  8100c0:	10c03fcc 	andi	r3,r2,255
  8100c4:	e0bfff17 	ldw	r2,-4(fp)
  8100c8:	10c00015 	stw	r3,0(r2)
      rc = 0;
  8100cc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  8100d0:	00000206 	br	8100dc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  8100d4:	0001883a 	nop
  8100d8:	00000106 	br	8100e0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  8100dc:	0001883a 	nop

  default:
    break;
  }

  return rc;
  8100e0:	e0bffb17 	ldw	r2,-20(fp)
}
  8100e4:	e037883a 	mov	sp,fp
  8100e8:	df000017 	ldw	fp,0(sp)
  8100ec:	dec00104 	addi	sp,sp,4
  8100f0:	f800283a 	ret

008100f4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  8100f4:	defff304 	addi	sp,sp,-52
  8100f8:	dfc00c15 	stw	ra,48(sp)
  8100fc:	df000b15 	stw	fp,44(sp)
  810100:	df000b04 	addi	fp,sp,44
  810104:	e13ffc15 	stw	r4,-16(fp)
  810108:	e17ffd15 	stw	r5,-12(fp)
  81010c:	e1bffe15 	stw	r6,-8(fp)
  810110:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  810114:	e0bffd17 	ldw	r2,-12(fp)
  810118:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  81011c:	00004706 	br	81023c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  810120:	e0bffc17 	ldw	r2,-16(fp)
  810124:	10800a17 	ldw	r2,40(r2)
  810128:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  81012c:	e0bffc17 	ldw	r2,-16(fp)
  810130:	10800b17 	ldw	r2,44(r2)
  810134:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  810138:	e0fff717 	ldw	r3,-36(fp)
  81013c:	e0bff817 	ldw	r2,-32(fp)
  810140:	18800536 	bltu	r3,r2,810158 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  810144:	e0fff717 	ldw	r3,-36(fp)
  810148:	e0bff817 	ldw	r2,-32(fp)
  81014c:	1885c83a 	sub	r2,r3,r2
  810150:	e0bff615 	stw	r2,-40(fp)
  810154:	00000406 	br	810168 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  810158:	00c20004 	movi	r3,2048
  81015c:	e0bff817 	ldw	r2,-32(fp)
  810160:	1885c83a 	sub	r2,r3,r2
  810164:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  810168:	e0bff617 	ldw	r2,-40(fp)
  81016c:	10001e26 	beq	r2,zero,8101e8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  810170:	e0fffe17 	ldw	r3,-8(fp)
  810174:	e0bff617 	ldw	r2,-40(fp)
  810178:	1880022e 	bgeu	r3,r2,810184 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  81017c:	e0bffe17 	ldw	r2,-8(fp)
  810180:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  810184:	e0bffc17 	ldw	r2,-16(fp)
  810188:	10c00e04 	addi	r3,r2,56
  81018c:	e0bff817 	ldw	r2,-32(fp)
  810190:	1885883a 	add	r2,r3,r2
  810194:	e1bff617 	ldw	r6,-40(fp)
  810198:	100b883a 	mov	r5,r2
  81019c:	e13ff517 	ldw	r4,-44(fp)
  8101a0:	0807fa00 	call	807fa0 <memcpy>
      ptr   += n;
  8101a4:	e0fff517 	ldw	r3,-44(fp)
  8101a8:	e0bff617 	ldw	r2,-40(fp)
  8101ac:	1885883a 	add	r2,r3,r2
  8101b0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  8101b4:	e0fffe17 	ldw	r3,-8(fp)
  8101b8:	e0bff617 	ldw	r2,-40(fp)
  8101bc:	1885c83a 	sub	r2,r3,r2
  8101c0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8101c4:	e0fff817 	ldw	r3,-32(fp)
  8101c8:	e0bff617 	ldw	r2,-40(fp)
  8101cc:	1885883a 	add	r2,r3,r2
  8101d0:	10c1ffcc 	andi	r3,r2,2047
  8101d4:	e0bffc17 	ldw	r2,-16(fp)
  8101d8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  8101dc:	e0bffe17 	ldw	r2,-8(fp)
  8101e0:	00bfcf16 	blt	zero,r2,810120 <__alt_mem_onchip_mem+0xff790120>
  8101e4:	00000106 	br	8101ec <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  8101e8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  8101ec:	e0fff517 	ldw	r3,-44(fp)
  8101f0:	e0bffd17 	ldw	r2,-12(fp)
  8101f4:	1880141e 	bne	r3,r2,810248 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  8101f8:	e0bfff17 	ldw	r2,-4(fp)
  8101fc:	1090000c 	andi	r2,r2,16384
  810200:	1000131e 	bne	r2,zero,810250 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  810204:	0001883a 	nop
  810208:	e0bffc17 	ldw	r2,-16(fp)
  81020c:	10c00a17 	ldw	r3,40(r2)
  810210:	e0bff717 	ldw	r2,-36(fp)
  810214:	1880051e 	bne	r3,r2,81022c <altera_avalon_jtag_uart_read+0x138>
  810218:	e0bffc17 	ldw	r2,-16(fp)
  81021c:	10c00917 	ldw	r3,36(r2)
  810220:	e0bffc17 	ldw	r2,-16(fp)
  810224:	10800117 	ldw	r2,4(r2)
  810228:	18bff736 	bltu	r3,r2,810208 <__alt_mem_onchip_mem+0xff790208>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  81022c:	e0bffc17 	ldw	r2,-16(fp)
  810230:	10c00a17 	ldw	r3,40(r2)
  810234:	e0bff717 	ldw	r2,-36(fp)
  810238:	18800726 	beq	r3,r2,810258 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  81023c:	e0bffe17 	ldw	r2,-8(fp)
  810240:	00bfb716 	blt	zero,r2,810120 <__alt_mem_onchip_mem+0xff790120>
  810244:	00000506 	br	81025c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  810248:	0001883a 	nop
  81024c:	00000306 	br	81025c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  810250:	0001883a 	nop
  810254:	00000106 	br	81025c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  810258:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  81025c:	e0fff517 	ldw	r3,-44(fp)
  810260:	e0bffd17 	ldw	r2,-12(fp)
  810264:	18801826 	beq	r3,r2,8102c8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810268:	0005303a 	rdctl	r2,status
  81026c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810270:	e0fffb17 	ldw	r3,-20(fp)
  810274:	00bfff84 	movi	r2,-2
  810278:	1884703a 	and	r2,r3,r2
  81027c:	1001703a 	wrctl	status,r2
  
  return context;
  810280:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  810284:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  810288:	e0bffc17 	ldw	r2,-16(fp)
  81028c:	10800817 	ldw	r2,32(r2)
  810290:	10c00054 	ori	r3,r2,1
  810294:	e0bffc17 	ldw	r2,-16(fp)
  810298:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81029c:	e0bffc17 	ldw	r2,-16(fp)
  8102a0:	10800017 	ldw	r2,0(r2)
  8102a4:	10800104 	addi	r2,r2,4
  8102a8:	1007883a 	mov	r3,r2
  8102ac:	e0bffc17 	ldw	r2,-16(fp)
  8102b0:	10800817 	ldw	r2,32(r2)
  8102b4:	18800035 	stwio	r2,0(r3)
  8102b8:	e0bffa17 	ldw	r2,-24(fp)
  8102bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8102c0:	e0bff917 	ldw	r2,-28(fp)
  8102c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  8102c8:	e0fff517 	ldw	r3,-44(fp)
  8102cc:	e0bffd17 	ldw	r2,-12(fp)
  8102d0:	18800426 	beq	r3,r2,8102e4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  8102d4:	e0fff517 	ldw	r3,-44(fp)
  8102d8:	e0bffd17 	ldw	r2,-12(fp)
  8102dc:	1885c83a 	sub	r2,r3,r2
  8102e0:	00000606 	br	8102fc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  8102e4:	e0bfff17 	ldw	r2,-4(fp)
  8102e8:	1090000c 	andi	r2,r2,16384
  8102ec:	10000226 	beq	r2,zero,8102f8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  8102f0:	00bffd44 	movi	r2,-11
  8102f4:	00000106 	br	8102fc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  8102f8:	00bffec4 	movi	r2,-5
}
  8102fc:	e037883a 	mov	sp,fp
  810300:	dfc00117 	ldw	ra,4(sp)
  810304:	df000017 	ldw	fp,0(sp)
  810308:	dec00204 	addi	sp,sp,8
  81030c:	f800283a 	ret

00810310 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  810310:	defff304 	addi	sp,sp,-52
  810314:	dfc00c15 	stw	ra,48(sp)
  810318:	df000b15 	stw	fp,44(sp)
  81031c:	df000b04 	addi	fp,sp,44
  810320:	e13ffc15 	stw	r4,-16(fp)
  810324:	e17ffd15 	stw	r5,-12(fp)
  810328:	e1bffe15 	stw	r6,-8(fp)
  81032c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  810330:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  810334:	e0bffd17 	ldw	r2,-12(fp)
  810338:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  81033c:	00003706 	br	81041c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  810340:	e0bffc17 	ldw	r2,-16(fp)
  810344:	10800c17 	ldw	r2,48(r2)
  810348:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  81034c:	e0bffc17 	ldw	r2,-16(fp)
  810350:	10800d17 	ldw	r2,52(r2)
  810354:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  810358:	e0fff917 	ldw	r3,-28(fp)
  81035c:	e0bff517 	ldw	r2,-44(fp)
  810360:	1880062e 	bgeu	r3,r2,81037c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  810364:	e0fff517 	ldw	r3,-44(fp)
  810368:	e0bff917 	ldw	r2,-28(fp)
  81036c:	1885c83a 	sub	r2,r3,r2
  810370:	10bfffc4 	addi	r2,r2,-1
  810374:	e0bff615 	stw	r2,-40(fp)
  810378:	00000b06 	br	8103a8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  81037c:	e0bff517 	ldw	r2,-44(fp)
  810380:	10000526 	beq	r2,zero,810398 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  810384:	00c20004 	movi	r3,2048
  810388:	e0bff917 	ldw	r2,-28(fp)
  81038c:	1885c83a 	sub	r2,r3,r2
  810390:	e0bff615 	stw	r2,-40(fp)
  810394:	00000406 	br	8103a8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  810398:	00c1ffc4 	movi	r3,2047
  81039c:	e0bff917 	ldw	r2,-28(fp)
  8103a0:	1885c83a 	sub	r2,r3,r2
  8103a4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  8103a8:	e0bff617 	ldw	r2,-40(fp)
  8103ac:	10001e26 	beq	r2,zero,810428 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  8103b0:	e0fffe17 	ldw	r3,-8(fp)
  8103b4:	e0bff617 	ldw	r2,-40(fp)
  8103b8:	1880022e 	bgeu	r3,r2,8103c4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  8103bc:	e0bffe17 	ldw	r2,-8(fp)
  8103c0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8103c4:	e0bffc17 	ldw	r2,-16(fp)
  8103c8:	10c20e04 	addi	r3,r2,2104
  8103cc:	e0bff917 	ldw	r2,-28(fp)
  8103d0:	1885883a 	add	r2,r3,r2
  8103d4:	e1bff617 	ldw	r6,-40(fp)
  8103d8:	e17ffd17 	ldw	r5,-12(fp)
  8103dc:	1009883a 	mov	r4,r2
  8103e0:	0807fa00 	call	807fa0 <memcpy>
      ptr   += n;
  8103e4:	e0fffd17 	ldw	r3,-12(fp)
  8103e8:	e0bff617 	ldw	r2,-40(fp)
  8103ec:	1885883a 	add	r2,r3,r2
  8103f0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  8103f4:	e0fffe17 	ldw	r3,-8(fp)
  8103f8:	e0bff617 	ldw	r2,-40(fp)
  8103fc:	1885c83a 	sub	r2,r3,r2
  810400:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810404:	e0fff917 	ldw	r3,-28(fp)
  810408:	e0bff617 	ldw	r2,-40(fp)
  81040c:	1885883a 	add	r2,r3,r2
  810410:	10c1ffcc 	andi	r3,r2,2047
  810414:	e0bffc17 	ldw	r2,-16(fp)
  810418:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  81041c:	e0bffe17 	ldw	r2,-8(fp)
  810420:	00bfc716 	blt	zero,r2,810340 <__alt_mem_onchip_mem+0xff790340>
  810424:	00000106 	br	81042c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  810428:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81042c:	0005303a 	rdctl	r2,status
  810430:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810434:	e0fffb17 	ldw	r3,-20(fp)
  810438:	00bfff84 	movi	r2,-2
  81043c:	1884703a 	and	r2,r3,r2
  810440:	1001703a 	wrctl	status,r2
  
  return context;
  810444:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  810448:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  81044c:	e0bffc17 	ldw	r2,-16(fp)
  810450:	10800817 	ldw	r2,32(r2)
  810454:	10c00094 	ori	r3,r2,2
  810458:	e0bffc17 	ldw	r2,-16(fp)
  81045c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  810460:	e0bffc17 	ldw	r2,-16(fp)
  810464:	10800017 	ldw	r2,0(r2)
  810468:	10800104 	addi	r2,r2,4
  81046c:	1007883a 	mov	r3,r2
  810470:	e0bffc17 	ldw	r2,-16(fp)
  810474:	10800817 	ldw	r2,32(r2)
  810478:	18800035 	stwio	r2,0(r3)
  81047c:	e0bffa17 	ldw	r2,-24(fp)
  810480:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810484:	e0bff817 	ldw	r2,-32(fp)
  810488:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  81048c:	e0bffe17 	ldw	r2,-8(fp)
  810490:	0080100e 	bge	zero,r2,8104d4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  810494:	e0bfff17 	ldw	r2,-4(fp)
  810498:	1090000c 	andi	r2,r2,16384
  81049c:	1000101e 	bne	r2,zero,8104e0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  8104a0:	0001883a 	nop
  8104a4:	e0bffc17 	ldw	r2,-16(fp)
  8104a8:	10c00d17 	ldw	r3,52(r2)
  8104ac:	e0bff517 	ldw	r2,-44(fp)
  8104b0:	1880051e 	bne	r3,r2,8104c8 <altera_avalon_jtag_uart_write+0x1b8>
  8104b4:	e0bffc17 	ldw	r2,-16(fp)
  8104b8:	10c00917 	ldw	r3,36(r2)
  8104bc:	e0bffc17 	ldw	r2,-16(fp)
  8104c0:	10800117 	ldw	r2,4(r2)
  8104c4:	18bff736 	bltu	r3,r2,8104a4 <__alt_mem_onchip_mem+0xff7904a4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  8104c8:	e0bffc17 	ldw	r2,-16(fp)
  8104cc:	10800917 	ldw	r2,36(r2)
  8104d0:	1000051e 	bne	r2,zero,8104e8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  8104d4:	e0bffe17 	ldw	r2,-8(fp)
  8104d8:	00bfd016 	blt	zero,r2,81041c <__alt_mem_onchip_mem+0xff79041c>
  8104dc:	00000306 	br	8104ec <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  8104e0:	0001883a 	nop
  8104e4:	00000106 	br	8104ec <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  8104e8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  8104ec:	e0fffd17 	ldw	r3,-12(fp)
  8104f0:	e0bff717 	ldw	r2,-36(fp)
  8104f4:	18800426 	beq	r3,r2,810508 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  8104f8:	e0fffd17 	ldw	r3,-12(fp)
  8104fc:	e0bff717 	ldw	r2,-36(fp)
  810500:	1885c83a 	sub	r2,r3,r2
  810504:	00000606 	br	810520 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  810508:	e0bfff17 	ldw	r2,-4(fp)
  81050c:	1090000c 	andi	r2,r2,16384
  810510:	10000226 	beq	r2,zero,81051c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  810514:	00bffd44 	movi	r2,-11
  810518:	00000106 	br	810520 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  81051c:	00bffec4 	movi	r2,-5
}
  810520:	e037883a 	mov	sp,fp
  810524:	dfc00117 	ldw	ra,4(sp)
  810528:	df000017 	ldw	fp,0(sp)
  81052c:	dec00204 	addi	sp,sp,8
  810530:	f800283a 	ret

00810534 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  810534:	defffa04 	addi	sp,sp,-24
  810538:	dfc00515 	stw	ra,20(sp)
  81053c:	df000415 	stw	fp,16(sp)
  810540:	df000404 	addi	fp,sp,16
  810544:	e13ffe15 	stw	r4,-8(fp)
  810548:	2805883a 	mov	r2,r5
  81054c:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  810550:	e0bffe17 	ldw	r2,-8(fp)
  810554:	10800017 	ldw	r2,0(r2)
  810558:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  81055c:	008003f4 	movhi	r2,15
  810560:	10909004 	addi	r2,r2,16960
  810564:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  810568:	e0bffe17 	ldw	r2,-8(fp)
  81056c:	10800803 	ldbu	r2,32(r2)
  810570:	10803fcc 	andi	r2,r2,255
  810574:	1080201c 	xori	r2,r2,128
  810578:	10bfe004 	addi	r2,r2,-128
  81057c:	1000151e 	bne	r2,zero,8105d4 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  810580:	00000906 	br	8105a8 <lcd_write_command+0x74>
    if (--i == 0)
  810584:	e0bffc17 	ldw	r2,-16(fp)
  810588:	10bfffc4 	addi	r2,r2,-1
  81058c:	e0bffc15 	stw	r2,-16(fp)
  810590:	e0bffc17 	ldw	r2,-16(fp)
  810594:	1000041e 	bne	r2,zero,8105a8 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  810598:	e0bffe17 	ldw	r2,-8(fp)
  81059c:	00c00044 	movi	r3,1
  8105a0:	10c00805 	stb	r3,32(r2)
      return;
  8105a4:	00000c06 	br	8105d8 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8105a8:	e0bffd17 	ldw	r2,-12(fp)
  8105ac:	10800104 	addi	r2,r2,4
  8105b0:	10800037 	ldwio	r2,0(r2)
  8105b4:	1080200c 	andi	r2,r2,128
  8105b8:	103ff21e 	bne	r2,zero,810584 <__alt_mem_onchip_mem+0xff790584>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8105bc:	01001904 	movi	r4,100
  8105c0:	08126140 	call	812614 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  8105c4:	e0bffd17 	ldw	r2,-12(fp)
  8105c8:	e0ffff03 	ldbu	r3,-4(fp)
  8105cc:	10c00035 	stwio	r3,0(r2)
  8105d0:	00000106 	br	8105d8 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  8105d4:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  8105d8:	e037883a 	mov	sp,fp
  8105dc:	dfc00117 	ldw	ra,4(sp)
  8105e0:	df000017 	ldw	fp,0(sp)
  8105e4:	dec00204 	addi	sp,sp,8
  8105e8:	f800283a 	ret

008105ec <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  8105ec:	defffa04 	addi	sp,sp,-24
  8105f0:	dfc00515 	stw	ra,20(sp)
  8105f4:	df000415 	stw	fp,16(sp)
  8105f8:	df000404 	addi	fp,sp,16
  8105fc:	e13ffe15 	stw	r4,-8(fp)
  810600:	2805883a 	mov	r2,r5
  810604:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  810608:	e0bffe17 	ldw	r2,-8(fp)
  81060c:	10800017 	ldw	r2,0(r2)
  810610:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  810614:	008003f4 	movhi	r2,15
  810618:	10909004 	addi	r2,r2,16960
  81061c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  810620:	e0bffe17 	ldw	r2,-8(fp)
  810624:	10800803 	ldbu	r2,32(r2)
  810628:	10803fcc 	andi	r2,r2,255
  81062c:	1080201c 	xori	r2,r2,128
  810630:	10bfe004 	addi	r2,r2,-128
  810634:	10001d1e 	bne	r2,zero,8106ac <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  810638:	00000906 	br	810660 <lcd_write_data+0x74>
    if (--i == 0)
  81063c:	e0bffc17 	ldw	r2,-16(fp)
  810640:	10bfffc4 	addi	r2,r2,-1
  810644:	e0bffc15 	stw	r2,-16(fp)
  810648:	e0bffc17 	ldw	r2,-16(fp)
  81064c:	1000041e 	bne	r2,zero,810660 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  810650:	e0bffe17 	ldw	r2,-8(fp)
  810654:	00c00044 	movi	r3,1
  810658:	10c00805 	stb	r3,32(r2)
      return;
  81065c:	00001406 	br	8106b0 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  810660:	e0bffd17 	ldw	r2,-12(fp)
  810664:	10800104 	addi	r2,r2,4
  810668:	10800037 	ldwio	r2,0(r2)
  81066c:	1080200c 	andi	r2,r2,128
  810670:	103ff21e 	bne	r2,zero,81063c <__alt_mem_onchip_mem+0xff79063c>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  810674:	01001904 	movi	r4,100
  810678:	08126140 	call	812614 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  81067c:	e0bffd17 	ldw	r2,-12(fp)
  810680:	10800204 	addi	r2,r2,8
  810684:	1007883a 	mov	r3,r2
  810688:	e0bfff03 	ldbu	r2,-4(fp)
  81068c:	18800035 	stwio	r2,0(r3)

  sp->address++;
  810690:	e0bffe17 	ldw	r2,-8(fp)
  810694:	108008c3 	ldbu	r2,35(r2)
  810698:	10800044 	addi	r2,r2,1
  81069c:	1007883a 	mov	r3,r2
  8106a0:	e0bffe17 	ldw	r2,-8(fp)
  8106a4:	10c008c5 	stb	r3,35(r2)
  8106a8:	00000106 	br	8106b0 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  8106ac:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  8106b0:	e037883a 	mov	sp,fp
  8106b4:	dfc00117 	ldw	ra,4(sp)
  8106b8:	df000017 	ldw	fp,0(sp)
  8106bc:	dec00204 	addi	sp,sp,8
  8106c0:	f800283a 	ret

008106c4 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  8106c4:	defffc04 	addi	sp,sp,-16
  8106c8:	dfc00315 	stw	ra,12(sp)
  8106cc:	df000215 	stw	fp,8(sp)
  8106d0:	df000204 	addi	fp,sp,8
  8106d4:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  8106d8:	01400044 	movi	r5,1
  8106dc:	e13fff17 	ldw	r4,-4(fp)
  8106e0:	08105340 	call	810534 <lcd_write_command>

  sp->x = 0;
  8106e4:	e0bfff17 	ldw	r2,-4(fp)
  8106e8:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  8106ec:	e0bfff17 	ldw	r2,-4(fp)
  8106f0:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  8106f4:	e0bfff17 	ldw	r2,-4(fp)
  8106f8:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8106fc:	e03ffe15 	stw	zero,-8(fp)
  810700:	00001b06 	br	810770 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  810704:	e0bffe17 	ldw	r2,-8(fp)
  810708:	108018e4 	muli	r2,r2,99
  81070c:	10801004 	addi	r2,r2,64
  810710:	e0ffff17 	ldw	r3,-4(fp)
  810714:	1885883a 	add	r2,r3,r2
  810718:	01801444 	movi	r6,81
  81071c:	01400804 	movi	r5,32
  810720:	1009883a 	mov	r4,r2
  810724:	0802ec80 	call	802ec8 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  810728:	e0bffe17 	ldw	r2,-8(fp)
  81072c:	108018e4 	muli	r2,r2,99
  810730:	10800c04 	addi	r2,r2,48
  810734:	e0ffff17 	ldw	r3,-4(fp)
  810738:	1885883a 	add	r2,r3,r2
  81073c:	01800404 	movi	r6,16
  810740:	01400804 	movi	r5,32
  810744:	1009883a 	mov	r4,r2
  810748:	0802ec80 	call	802ec8 <memset>
    sp->line[y].width = 0;
  81074c:	e0ffff17 	ldw	r3,-4(fp)
  810750:	e0bffe17 	ldw	r2,-8(fp)
  810754:	108018e4 	muli	r2,r2,99
  810758:	1885883a 	add	r2,r3,r2
  81075c:	10802444 	addi	r2,r2,145
  810760:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810764:	e0bffe17 	ldw	r2,-8(fp)
  810768:	10800044 	addi	r2,r2,1
  81076c:	e0bffe15 	stw	r2,-8(fp)
  810770:	e0bffe17 	ldw	r2,-8(fp)
  810774:	10800090 	cmplti	r2,r2,2
  810778:	103fe21e 	bne	r2,zero,810704 <__alt_mem_onchip_mem+0xff790704>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  81077c:	0001883a 	nop
  810780:	e037883a 	mov	sp,fp
  810784:	dfc00117 	ldw	ra,4(sp)
  810788:	df000017 	ldw	fp,0(sp)
  81078c:	dec00204 	addi	sp,sp,8
  810790:	f800283a 	ret

00810794 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  810794:	defff704 	addi	sp,sp,-36
  810798:	dfc00815 	stw	ra,32(sp)
  81079c:	df000715 	stw	fp,28(sp)
  8107a0:	df000704 	addi	fp,sp,28
  8107a4:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  8107a8:	e0bfff17 	ldw	r2,-4(fp)
  8107ac:	10800943 	ldbu	r2,37(r2)
  8107b0:	10803fcc 	andi	r2,r2,255
  8107b4:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8107b8:	e03ff915 	stw	zero,-28(fp)
  8107bc:	00006706 	br	81095c <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  8107c0:	e0ffff17 	ldw	r3,-4(fp)
  8107c4:	e0bff917 	ldw	r2,-28(fp)
  8107c8:	108018e4 	muli	r2,r2,99
  8107cc:	1885883a 	add	r2,r3,r2
  8107d0:	10802444 	addi	r2,r2,145
  8107d4:	10800003 	ldbu	r2,0(r2)
  8107d8:	10803fcc 	andi	r2,r2,255
  8107dc:	1080201c 	xori	r2,r2,128
  8107e0:	10bfe004 	addi	r2,r2,-128
  8107e4:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  8107e8:	e0ffff17 	ldw	r3,-4(fp)
  8107ec:	e0bff917 	ldw	r2,-28(fp)
  8107f0:	108018e4 	muli	r2,r2,99
  8107f4:	1885883a 	add	r2,r3,r2
  8107f8:	10802484 	addi	r2,r2,146
  8107fc:	10800003 	ldbu	r2,0(r2)
  810800:	10c03fcc 	andi	r3,r2,255
  810804:	e0bffc17 	ldw	r2,-16(fp)
  810808:	1885383a 	mul	r2,r3,r2
  81080c:	1005d23a 	srai	r2,r2,8
  810810:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  810814:	e0fffb17 	ldw	r3,-20(fp)
  810818:	e0bffd17 	ldw	r2,-12(fp)
  81081c:	18800116 	blt	r3,r2,810824 <lcd_repaint_screen+0x90>
      offset = 0;
  810820:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  810824:	e03ffa15 	stw	zero,-24(fp)
  810828:	00004606 	br	810944 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  81082c:	e0fffa17 	ldw	r3,-24(fp)
  810830:	e0bffb17 	ldw	r2,-20(fp)
  810834:	1885883a 	add	r2,r3,r2
  810838:	e17ffd17 	ldw	r5,-12(fp)
  81083c:	1009883a 	mov	r4,r2
  810840:	080c2440 	call	80c244 <__modsi3>
  810844:	1009883a 	mov	r4,r2
  810848:	e0ffff17 	ldw	r3,-4(fp)
  81084c:	e0bff917 	ldw	r2,-28(fp)
  810850:	108018e4 	muli	r2,r2,99
  810854:	1885883a 	add	r2,r3,r2
  810858:	1105883a 	add	r2,r2,r4
  81085c:	10801004 	addi	r2,r2,64
  810860:	10800003 	ldbu	r2,0(r2)
  810864:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  810868:	e0ffff17 	ldw	r3,-4(fp)
  81086c:	e0bff917 	ldw	r2,-28(fp)
  810870:	108018e4 	muli	r2,r2,99
  810874:	1887883a 	add	r3,r3,r2
  810878:	e0bffa17 	ldw	r2,-24(fp)
  81087c:	1885883a 	add	r2,r3,r2
  810880:	10800c04 	addi	r2,r2,48
  810884:	10800003 	ldbu	r2,0(r2)
  810888:	10c03fcc 	andi	r3,r2,255
  81088c:	18c0201c 	xori	r3,r3,128
  810890:	18ffe004 	addi	r3,r3,-128
  810894:	e0bffe07 	ldb	r2,-8(fp)
  810898:	18802726 	beq	r3,r2,810938 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  81089c:	e0fff917 	ldw	r3,-28(fp)
  8108a0:	d0a01304 	addi	r2,gp,-32692
  8108a4:	1885883a 	add	r2,r3,r2
  8108a8:	10800003 	ldbu	r2,0(r2)
  8108ac:	1007883a 	mov	r3,r2
  8108b0:	e0bffa17 	ldw	r2,-24(fp)
  8108b4:	1885883a 	add	r2,r3,r2
  8108b8:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  8108bc:	e0fffe43 	ldbu	r3,-7(fp)
  8108c0:	e0bfff17 	ldw	r2,-4(fp)
  8108c4:	108008c3 	ldbu	r2,35(r2)
  8108c8:	10803fcc 	andi	r2,r2,255
  8108cc:	1080201c 	xori	r2,r2,128
  8108d0:	10bfe004 	addi	r2,r2,-128
  8108d4:	18800a26 	beq	r3,r2,810900 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  8108d8:	e0fffe43 	ldbu	r3,-7(fp)
  8108dc:	00bfe004 	movi	r2,-128
  8108e0:	1884b03a 	or	r2,r3,r2
  8108e4:	10803fcc 	andi	r2,r2,255
  8108e8:	100b883a 	mov	r5,r2
  8108ec:	e13fff17 	ldw	r4,-4(fp)
  8108f0:	08105340 	call	810534 <lcd_write_command>
          sp->address = address;
  8108f4:	e0fffe43 	ldbu	r3,-7(fp)
  8108f8:	e0bfff17 	ldw	r2,-4(fp)
  8108fc:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  810900:	e0bffe03 	ldbu	r2,-8(fp)
  810904:	10803fcc 	andi	r2,r2,255
  810908:	100b883a 	mov	r5,r2
  81090c:	e13fff17 	ldw	r4,-4(fp)
  810910:	08105ec0 	call	8105ec <lcd_write_data>
        sp->line[y].visible[x] = c;
  810914:	e0ffff17 	ldw	r3,-4(fp)
  810918:	e0bff917 	ldw	r2,-28(fp)
  81091c:	108018e4 	muli	r2,r2,99
  810920:	1887883a 	add	r3,r3,r2
  810924:	e0bffa17 	ldw	r2,-24(fp)
  810928:	1885883a 	add	r2,r3,r2
  81092c:	10800c04 	addi	r2,r2,48
  810930:	e0fffe03 	ldbu	r3,-8(fp)
  810934:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  810938:	e0bffa17 	ldw	r2,-24(fp)
  81093c:	10800044 	addi	r2,r2,1
  810940:	e0bffa15 	stw	r2,-24(fp)
  810944:	e0bffa17 	ldw	r2,-24(fp)
  810948:	10800410 	cmplti	r2,r2,16
  81094c:	103fb71e 	bne	r2,zero,81082c <__alt_mem_onchip_mem+0xff79082c>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810950:	e0bff917 	ldw	r2,-28(fp)
  810954:	10800044 	addi	r2,r2,1
  810958:	e0bff915 	stw	r2,-28(fp)
  81095c:	e0bff917 	ldw	r2,-28(fp)
  810960:	10800090 	cmplti	r2,r2,2
  810964:	103f961e 	bne	r2,zero,8107c0 <__alt_mem_onchip_mem+0xff7907c0>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  810968:	0001883a 	nop
  81096c:	e037883a 	mov	sp,fp
  810970:	dfc00117 	ldw	ra,4(sp)
  810974:	df000017 	ldw	fp,0(sp)
  810978:	dec00204 	addi	sp,sp,8
  81097c:	f800283a 	ret

00810980 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  810980:	defffc04 	addi	sp,sp,-16
  810984:	dfc00315 	stw	ra,12(sp)
  810988:	df000215 	stw	fp,8(sp)
  81098c:	df000204 	addi	fp,sp,8
  810990:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810994:	e03ffe15 	stw	zero,-8(fp)
  810998:	00001d06 	br	810a10 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  81099c:	e0bffe17 	ldw	r2,-8(fp)
  8109a0:	00800f16 	blt	zero,r2,8109e0 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  8109a4:	e0bffe17 	ldw	r2,-8(fp)
  8109a8:	108018e4 	muli	r2,r2,99
  8109ac:	10801004 	addi	r2,r2,64
  8109b0:	e0ffff17 	ldw	r3,-4(fp)
  8109b4:	1889883a 	add	r4,r3,r2
  8109b8:	e0bffe17 	ldw	r2,-8(fp)
  8109bc:	10800044 	addi	r2,r2,1
  8109c0:	108018e4 	muli	r2,r2,99
  8109c4:	10801004 	addi	r2,r2,64
  8109c8:	e0ffff17 	ldw	r3,-4(fp)
  8109cc:	1885883a 	add	r2,r3,r2
  8109d0:	01801404 	movi	r6,80
  8109d4:	100b883a 	mov	r5,r2
  8109d8:	0807fa00 	call	807fa0 <memcpy>
  8109dc:	00000906 	br	810a04 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  8109e0:	e0bffe17 	ldw	r2,-8(fp)
  8109e4:	108018e4 	muli	r2,r2,99
  8109e8:	10801004 	addi	r2,r2,64
  8109ec:	e0ffff17 	ldw	r3,-4(fp)
  8109f0:	1885883a 	add	r2,r3,r2
  8109f4:	01801404 	movi	r6,80
  8109f8:	01400804 	movi	r5,32
  8109fc:	1009883a 	mov	r4,r2
  810a00:	0802ec80 	call	802ec8 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810a04:	e0bffe17 	ldw	r2,-8(fp)
  810a08:	10800044 	addi	r2,r2,1
  810a0c:	e0bffe15 	stw	r2,-8(fp)
  810a10:	e0bffe17 	ldw	r2,-8(fp)
  810a14:	10800090 	cmplti	r2,r2,2
  810a18:	103fe01e 	bne	r2,zero,81099c <__alt_mem_onchip_mem+0xff79099c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  810a1c:	e0bfff17 	ldw	r2,-4(fp)
  810a20:	10800883 	ldbu	r2,34(r2)
  810a24:	10bfffc4 	addi	r2,r2,-1
  810a28:	1007883a 	mov	r3,r2
  810a2c:	e0bfff17 	ldw	r2,-4(fp)
  810a30:	10c00885 	stb	r3,34(r2)
}
  810a34:	0001883a 	nop
  810a38:	e037883a 	mov	sp,fp
  810a3c:	dfc00117 	ldw	ra,4(sp)
  810a40:	df000017 	ldw	fp,0(sp)
  810a44:	dec00204 	addi	sp,sp,8
  810a48:	f800283a 	ret

00810a4c <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  810a4c:	defff904 	addi	sp,sp,-28
  810a50:	dfc00615 	stw	ra,24(sp)
  810a54:	df000515 	stw	fp,20(sp)
  810a58:	df000504 	addi	fp,sp,20
  810a5c:	e13ffe15 	stw	r4,-8(fp)
  810a60:	2805883a 	mov	r2,r5
  810a64:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  810a68:	e03ffb15 	stw	zero,-20(fp)
  810a6c:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  810a70:	e0bffe17 	ldw	r2,-8(fp)
  810a74:	10800a03 	ldbu	r2,40(r2)
  810a78:	10803fcc 	andi	r2,r2,255
  810a7c:	1080201c 	xori	r2,r2,128
  810a80:	10bfe004 	addi	r2,r2,-128
  810a84:	108016d8 	cmpnei	r2,r2,91
  810a88:	1000411e 	bne	r2,zero,810b90 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  810a8c:	e0bffe17 	ldw	r2,-8(fp)
  810a90:	10800a04 	addi	r2,r2,40
  810a94:	10800044 	addi	r2,r2,1
  810a98:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  810a9c:	00000c06 	br	810ad0 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  810aa0:	e0bffb17 	ldw	r2,-20(fp)
  810aa4:	10c002a4 	muli	r3,r2,10
  810aa8:	e0bffd17 	ldw	r2,-12(fp)
  810aac:	11000044 	addi	r4,r2,1
  810ab0:	e13ffd15 	stw	r4,-12(fp)
  810ab4:	10800003 	ldbu	r2,0(r2)
  810ab8:	10803fcc 	andi	r2,r2,255
  810abc:	1080201c 	xori	r2,r2,128
  810ac0:	10bfe004 	addi	r2,r2,-128
  810ac4:	10bff404 	addi	r2,r2,-48
  810ac8:	1885883a 	add	r2,r3,r2
  810acc:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  810ad0:	d0e00617 	ldw	r3,-32744(gp)
  810ad4:	e0bffd17 	ldw	r2,-12(fp)
  810ad8:	10800003 	ldbu	r2,0(r2)
  810adc:	10803fcc 	andi	r2,r2,255
  810ae0:	1080201c 	xori	r2,r2,128
  810ae4:	10bfe004 	addi	r2,r2,-128
  810ae8:	10800044 	addi	r2,r2,1
  810aec:	1885883a 	add	r2,r3,r2
  810af0:	10800003 	ldbu	r2,0(r2)
  810af4:	10803fcc 	andi	r2,r2,255
  810af8:	1080010c 	andi	r2,r2,4
  810afc:	103fe81e 	bne	r2,zero,810aa0 <__alt_mem_onchip_mem+0xff790aa0>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  810b00:	e0bffd17 	ldw	r2,-12(fp)
  810b04:	10800003 	ldbu	r2,0(r2)
  810b08:	10803fcc 	andi	r2,r2,255
  810b0c:	1080201c 	xori	r2,r2,128
  810b10:	10bfe004 	addi	r2,r2,-128
  810b14:	10800ed8 	cmpnei	r2,r2,59
  810b18:	10001f1e 	bne	r2,zero,810b98 <lcd_handle_escape+0x14c>
    {
      ptr++;
  810b1c:	e0bffd17 	ldw	r2,-12(fp)
  810b20:	10800044 	addi	r2,r2,1
  810b24:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  810b28:	00000c06 	br	810b5c <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  810b2c:	e0bffc17 	ldw	r2,-16(fp)
  810b30:	10c002a4 	muli	r3,r2,10
  810b34:	e0bffd17 	ldw	r2,-12(fp)
  810b38:	11000044 	addi	r4,r2,1
  810b3c:	e13ffd15 	stw	r4,-12(fp)
  810b40:	10800003 	ldbu	r2,0(r2)
  810b44:	10803fcc 	andi	r2,r2,255
  810b48:	1080201c 	xori	r2,r2,128
  810b4c:	10bfe004 	addi	r2,r2,-128
  810b50:	10bff404 	addi	r2,r2,-48
  810b54:	1885883a 	add	r2,r3,r2
  810b58:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  810b5c:	d0e00617 	ldw	r3,-32744(gp)
  810b60:	e0bffd17 	ldw	r2,-12(fp)
  810b64:	10800003 	ldbu	r2,0(r2)
  810b68:	10803fcc 	andi	r2,r2,255
  810b6c:	1080201c 	xori	r2,r2,128
  810b70:	10bfe004 	addi	r2,r2,-128
  810b74:	10800044 	addi	r2,r2,1
  810b78:	1885883a 	add	r2,r3,r2
  810b7c:	10800003 	ldbu	r2,0(r2)
  810b80:	10803fcc 	andi	r2,r2,255
  810b84:	1080010c 	andi	r2,r2,4
  810b88:	103fe81e 	bne	r2,zero,810b2c <__alt_mem_onchip_mem+0xff790b2c>
  810b8c:	00000206 	br	810b98 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  810b90:	00bfffc4 	movi	r2,-1
  810b94:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  810b98:	e0bfff07 	ldb	r2,-4(fp)
  810b9c:	10c012a0 	cmpeqi	r3,r2,74
  810ba0:	1800291e 	bne	r3,zero,810c48 <lcd_handle_escape+0x1fc>
  810ba4:	10c012c8 	cmpgei	r3,r2,75
  810ba8:	1800031e 	bne	r3,zero,810bb8 <lcd_handle_escape+0x16c>
  810bac:	10801220 	cmpeqi	r2,r2,72
  810bb0:	1000061e 	bne	r2,zero,810bcc <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  810bb4:	00004a06 	br	810ce0 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  810bb8:	10c012e0 	cmpeqi	r3,r2,75
  810bbc:	1800281e 	bne	r3,zero,810c60 <lcd_handle_escape+0x214>
  810bc0:	108019a0 	cmpeqi	r2,r2,102
  810bc4:	1000011e 	bne	r2,zero,810bcc <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  810bc8:	00004506 	br	810ce0 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  810bcc:	e0bffc17 	ldw	r2,-16(fp)
  810bd0:	0080050e 	bge	zero,r2,810be8 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  810bd4:	e0bffc17 	ldw	r2,-16(fp)
  810bd8:	10bfffc4 	addi	r2,r2,-1
  810bdc:	1007883a 	mov	r3,r2
  810be0:	e0bffe17 	ldw	r2,-8(fp)
  810be4:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  810be8:	e0bffb17 	ldw	r2,-20(fp)
  810bec:	0080370e 	bge	zero,r2,810ccc <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  810bf0:	e0bffb17 	ldw	r2,-20(fp)
  810bf4:	10bfffc4 	addi	r2,r2,-1
  810bf8:	1007883a 	mov	r3,r2
  810bfc:	e0bffe17 	ldw	r2,-8(fp)
  810c00:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  810c04:	e0bffe17 	ldw	r2,-8(fp)
  810c08:	10800883 	ldbu	r2,34(r2)
  810c0c:	10803fcc 	andi	r2,r2,255
  810c10:	10800170 	cmpltui	r2,r2,5
  810c14:	1000061e 	bne	r2,zero,810c30 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  810c18:	e0bffe17 	ldw	r2,-8(fp)
  810c1c:	00c00104 	movi	r3,4
  810c20:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  810c24:	00000206 	br	810c30 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  810c28:	e13ffe17 	ldw	r4,-8(fp)
  810c2c:	08109800 	call	810980 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  810c30:	e0bffe17 	ldw	r2,-8(fp)
  810c34:	10800883 	ldbu	r2,34(r2)
  810c38:	10803fcc 	andi	r2,r2,255
  810c3c:	108000e8 	cmpgeui	r2,r2,3
  810c40:	103ff91e 	bne	r2,zero,810c28 <__alt_mem_onchip_mem+0xff790c28>
        lcd_scroll_up(sp);
    }
    break;
  810c44:	00002106 	br	810ccc <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  810c48:	e0bffb17 	ldw	r2,-20(fp)
  810c4c:	10800098 	cmpnei	r2,r2,2
  810c50:	1000201e 	bne	r2,zero,810cd4 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  810c54:	e13ffe17 	ldw	r4,-8(fp)
  810c58:	08106c40 	call	8106c4 <lcd_clear_screen>
    break;
  810c5c:	00001d06 	br	810cd4 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  810c60:	e0bffb17 	ldw	r2,-20(fp)
  810c64:	00801d16 	blt	zero,r2,810cdc <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  810c68:	e0bffe17 	ldw	r2,-8(fp)
  810c6c:	10800843 	ldbu	r2,33(r2)
  810c70:	10803fcc 	andi	r2,r2,255
  810c74:	10801428 	cmpgeui	r2,r2,80
  810c78:	1000181e 	bne	r2,zero,810cdc <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  810c7c:	e0bffe17 	ldw	r2,-8(fp)
  810c80:	10800883 	ldbu	r2,34(r2)
  810c84:	10803fcc 	andi	r2,r2,255
  810c88:	108018e4 	muli	r2,r2,99
  810c8c:	10801004 	addi	r2,r2,64
  810c90:	e0fffe17 	ldw	r3,-8(fp)
  810c94:	1887883a 	add	r3,r3,r2
  810c98:	e0bffe17 	ldw	r2,-8(fp)
  810c9c:	10800843 	ldbu	r2,33(r2)
  810ca0:	10803fcc 	andi	r2,r2,255
  810ca4:	1889883a 	add	r4,r3,r2
  810ca8:	e0bffe17 	ldw	r2,-8(fp)
  810cac:	10800843 	ldbu	r2,33(r2)
  810cb0:	10803fcc 	andi	r2,r2,255
  810cb4:	00c01404 	movi	r3,80
  810cb8:	1885c83a 	sub	r2,r3,r2
  810cbc:	100d883a 	mov	r6,r2
  810cc0:	01400804 	movi	r5,32
  810cc4:	0802ec80 	call	802ec8 <memset>
    }
    break;
  810cc8:	00000406 	br	810cdc <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  810ccc:	0001883a 	nop
  810cd0:	00000306 	br	810ce0 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  810cd4:	0001883a 	nop
  810cd8:	00000106 	br	810ce0 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  810cdc:	0001883a 	nop
  }
}
  810ce0:	0001883a 	nop
  810ce4:	e037883a 	mov	sp,fp
  810ce8:	dfc00117 	ldw	ra,4(sp)
  810cec:	df000017 	ldw	fp,0(sp)
  810cf0:	dec00204 	addi	sp,sp,8
  810cf4:	f800283a 	ret

00810cf8 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  810cf8:	defff304 	addi	sp,sp,-52
  810cfc:	dfc00c15 	stw	ra,48(sp)
  810d00:	df000b15 	stw	fp,44(sp)
  810d04:	df000b04 	addi	fp,sp,44
  810d08:	e13ffc15 	stw	r4,-16(fp)
  810d0c:	e17ffd15 	stw	r5,-12(fp)
  810d10:	e1bffe15 	stw	r6,-8(fp)
  810d14:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  810d18:	e0bffe17 	ldw	r2,-8(fp)
  810d1c:	e0fffd17 	ldw	r3,-12(fp)
  810d20:	1885883a 	add	r2,r3,r2
  810d24:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  810d28:	e0bffc17 	ldw	r2,-16(fp)
  810d2c:	00c00044 	movi	r3,1
  810d30:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  810d34:	00009906 	br	810f9c <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  810d38:	e0bffd17 	ldw	r2,-12(fp)
  810d3c:	10800003 	ldbu	r2,0(r2)
  810d40:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  810d44:	e0bffc17 	ldw	r2,-16(fp)
  810d48:	10800903 	ldbu	r2,36(r2)
  810d4c:	10803fcc 	andi	r2,r2,255
  810d50:	1080201c 	xori	r2,r2,128
  810d54:	10bfe004 	addi	r2,r2,-128
  810d58:	10003716 	blt	r2,zero,810e38 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  810d5c:	e0bffc17 	ldw	r2,-16(fp)
  810d60:	10800903 	ldbu	r2,36(r2)
  810d64:	10803fcc 	andi	r2,r2,255
  810d68:	1080201c 	xori	r2,r2,128
  810d6c:	10bfe004 	addi	r2,r2,-128
  810d70:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  810d74:	e0bffa17 	ldw	r2,-24(fp)
  810d78:	1000031e 	bne	r2,zero,810d88 <altera_avalon_lcd_16207_write+0x90>
  810d7c:	e0bff907 	ldb	r2,-28(fp)
  810d80:	108016d8 	cmpnei	r2,r2,91
  810d84:	10000d1e 	bne	r2,zero,810dbc <altera_avalon_lcd_16207_write+0xc4>
  810d88:	e0bffa17 	ldw	r2,-24(fp)
  810d8c:	10001826 	beq	r2,zero,810df0 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  810d90:	d0e00617 	ldw	r3,-32744(gp)
  810d94:	e0bff907 	ldb	r2,-28(fp)
  810d98:	10800044 	addi	r2,r2,1
  810d9c:	1885883a 	add	r2,r3,r2
  810da0:	10800003 	ldbu	r2,0(r2)
  810da4:	10803fcc 	andi	r2,r2,255
  810da8:	1080010c 	andi	r2,r2,4
  810dac:	1000101e 	bne	r2,zero,810df0 <altera_avalon_lcd_16207_write+0xf8>
  810db0:	e0bff907 	ldb	r2,-28(fp)
  810db4:	10800ee0 	cmpeqi	r2,r2,59
  810db8:	10000d1e 	bne	r2,zero,810df0 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  810dbc:	e0fffc17 	ldw	r3,-16(fp)
  810dc0:	e0bffa17 	ldw	r2,-24(fp)
  810dc4:	1885883a 	add	r2,r3,r2
  810dc8:	10800a04 	addi	r2,r2,40
  810dcc:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  810dd0:	e0bff907 	ldb	r2,-28(fp)
  810dd4:	100b883a 	mov	r5,r2
  810dd8:	e13ffc17 	ldw	r4,-16(fp)
  810ddc:	0810a4c0 	call	810a4c <lcd_handle_escape>

        sp->esccount = -1;
  810de0:	e0bffc17 	ldw	r2,-16(fp)
  810de4:	00ffffc4 	movi	r3,-1
  810de8:	10c00905 	stb	r3,36(r2)
  810dec:	00006806 	br	810f90 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  810df0:	e0bffc17 	ldw	r2,-16(fp)
  810df4:	10800903 	ldbu	r2,36(r2)
  810df8:	10803fcc 	andi	r2,r2,255
  810dfc:	108001e8 	cmpgeui	r2,r2,7
  810e00:	1000631e 	bne	r2,zero,810f90 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  810e04:	e0fffc17 	ldw	r3,-16(fp)
  810e08:	e0bffa17 	ldw	r2,-24(fp)
  810e0c:	1885883a 	add	r2,r3,r2
  810e10:	10800a04 	addi	r2,r2,40
  810e14:	e0fff903 	ldbu	r3,-28(fp)
  810e18:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  810e1c:	e0bffc17 	ldw	r2,-16(fp)
  810e20:	10800903 	ldbu	r2,36(r2)
  810e24:	10800044 	addi	r2,r2,1
  810e28:	1007883a 	mov	r3,r2
  810e2c:	e0bffc17 	ldw	r2,-16(fp)
  810e30:	10c00905 	stb	r3,36(r2)
  810e34:	00005606 	br	810f90 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  810e38:	e0bff907 	ldb	r2,-28(fp)
  810e3c:	108006d8 	cmpnei	r2,r2,27
  810e40:	1000031e 	bne	r2,zero,810e50 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  810e44:	e0bffc17 	ldw	r2,-16(fp)
  810e48:	10000905 	stb	zero,36(r2)
  810e4c:	00005006 	br	810f90 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  810e50:	e0bff907 	ldb	r2,-28(fp)
  810e54:	10800358 	cmpnei	r2,r2,13
  810e58:	1000031e 	bne	r2,zero,810e68 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  810e5c:	e0bffc17 	ldw	r2,-16(fp)
  810e60:	10000845 	stb	zero,33(r2)
  810e64:	00004a06 	br	810f90 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  810e68:	e0bff907 	ldb	r2,-28(fp)
  810e6c:	10800298 	cmpnei	r2,r2,10
  810e70:	1000101e 	bne	r2,zero,810eb4 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  810e74:	e0bffc17 	ldw	r2,-16(fp)
  810e78:	10000845 	stb	zero,33(r2)
      sp->y++;
  810e7c:	e0bffc17 	ldw	r2,-16(fp)
  810e80:	10800883 	ldbu	r2,34(r2)
  810e84:	10800044 	addi	r2,r2,1
  810e88:	1007883a 	mov	r3,r2
  810e8c:	e0bffc17 	ldw	r2,-16(fp)
  810e90:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  810e94:	e0bffc17 	ldw	r2,-16(fp)
  810e98:	10800883 	ldbu	r2,34(r2)
  810e9c:	10803fcc 	andi	r2,r2,255
  810ea0:	108000f0 	cmpltui	r2,r2,3
  810ea4:	10003a1e 	bne	r2,zero,810f90 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  810ea8:	e13ffc17 	ldw	r4,-16(fp)
  810eac:	08109800 	call	810980 <lcd_scroll_up>
  810eb0:	00003706 	br	810f90 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  810eb4:	e0bff907 	ldb	r2,-28(fp)
  810eb8:	10800218 	cmpnei	r2,r2,8
  810ebc:	10000b1e 	bne	r2,zero,810eec <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  810ec0:	e0bffc17 	ldw	r2,-16(fp)
  810ec4:	10800843 	ldbu	r2,33(r2)
  810ec8:	10803fcc 	andi	r2,r2,255
  810ecc:	10003026 	beq	r2,zero,810f90 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  810ed0:	e0bffc17 	ldw	r2,-16(fp)
  810ed4:	10800843 	ldbu	r2,33(r2)
  810ed8:	10bfffc4 	addi	r2,r2,-1
  810edc:	1007883a 	mov	r3,r2
  810ee0:	e0bffc17 	ldw	r2,-16(fp)
  810ee4:	10c00845 	stb	r3,33(r2)
  810ee8:	00002906 	br	810f90 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  810eec:	d0e00617 	ldw	r3,-32744(gp)
  810ef0:	e0bff907 	ldb	r2,-28(fp)
  810ef4:	10800044 	addi	r2,r2,1
  810ef8:	1885883a 	add	r2,r3,r2
  810efc:	10800003 	ldbu	r2,0(r2)
  810f00:	10803fcc 	andi	r2,r2,255
  810f04:	1080201c 	xori	r2,r2,128
  810f08:	10bfe004 	addi	r2,r2,-128
  810f0c:	108025cc 	andi	r2,r2,151
  810f10:	10001f26 	beq	r2,zero,810f90 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  810f14:	e0bffc17 	ldw	r2,-16(fp)
  810f18:	10800883 	ldbu	r2,34(r2)
  810f1c:	10803fcc 	andi	r2,r2,255
  810f20:	108000b0 	cmpltui	r2,r2,2
  810f24:	1000021e 	bne	r2,zero,810f30 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  810f28:	e13ffc17 	ldw	r4,-16(fp)
  810f2c:	08109800 	call	810980 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  810f30:	e0bffc17 	ldw	r2,-16(fp)
  810f34:	10800843 	ldbu	r2,33(r2)
  810f38:	10803fcc 	andi	r2,r2,255
  810f3c:	10801428 	cmpgeui	r2,r2,80
  810f40:	10000d1e 	bne	r2,zero,810f78 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  810f44:	e0bffc17 	ldw	r2,-16(fp)
  810f48:	10800883 	ldbu	r2,34(r2)
  810f4c:	10c03fcc 	andi	r3,r2,255
  810f50:	e0bffc17 	ldw	r2,-16(fp)
  810f54:	10800843 	ldbu	r2,33(r2)
  810f58:	10803fcc 	andi	r2,r2,255
  810f5c:	e13ffc17 	ldw	r4,-16(fp)
  810f60:	18c018e4 	muli	r3,r3,99
  810f64:	20c7883a 	add	r3,r4,r3
  810f68:	1885883a 	add	r2,r3,r2
  810f6c:	10801004 	addi	r2,r2,64
  810f70:	e0fff903 	ldbu	r3,-28(fp)
  810f74:	10c00005 	stb	r3,0(r2)

      sp->x++;
  810f78:	e0bffc17 	ldw	r2,-16(fp)
  810f7c:	10800843 	ldbu	r2,33(r2)
  810f80:	10800044 	addi	r2,r2,1
  810f84:	1007883a 	mov	r3,r2
  810f88:	e0bffc17 	ldw	r2,-16(fp)
  810f8c:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  810f90:	e0bffd17 	ldw	r2,-12(fp)
  810f94:	10800044 	addi	r2,r2,1
  810f98:	e0bffd15 	stw	r2,-12(fp)
  810f9c:	e0fffd17 	ldw	r3,-12(fp)
  810fa0:	e0bff817 	ldw	r2,-32(fp)
  810fa4:	18bf6436 	bltu	r3,r2,810d38 <__alt_mem_onchip_mem+0xff790d38>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  810fa8:	00800404 	movi	r2,16
  810fac:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810fb0:	e03ff515 	stw	zero,-44(fp)
  810fb4:	00003706 	br	811094 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  810fb8:	00801404 	movi	r2,80
  810fbc:	e0bff715 	stw	r2,-36(fp)
  810fc0:	00001106 	br	811008 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  810fc4:	e0bff717 	ldw	r2,-36(fp)
  810fc8:	10bfffc4 	addi	r2,r2,-1
  810fcc:	e13ffc17 	ldw	r4,-16(fp)
  810fd0:	e0fff517 	ldw	r3,-44(fp)
  810fd4:	18c018e4 	muli	r3,r3,99
  810fd8:	20c7883a 	add	r3,r4,r3
  810fdc:	1885883a 	add	r2,r3,r2
  810fe0:	10801004 	addi	r2,r2,64
  810fe4:	10800003 	ldbu	r2,0(r2)
  810fe8:	10803fcc 	andi	r2,r2,255
  810fec:	1080201c 	xori	r2,r2,128
  810ff0:	10bfe004 	addi	r2,r2,-128
  810ff4:	10800820 	cmpeqi	r2,r2,32
  810ff8:	10000626 	beq	r2,zero,811014 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  810ffc:	e0bff717 	ldw	r2,-36(fp)
  811000:	10bfffc4 	addi	r2,r2,-1
  811004:	e0bff715 	stw	r2,-36(fp)
  811008:	e0bff717 	ldw	r2,-36(fp)
  81100c:	00bfed16 	blt	zero,r2,810fc4 <__alt_mem_onchip_mem+0xff790fc4>
  811010:	00000106 	br	811018 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  811014:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  811018:	e0bff717 	ldw	r2,-36(fp)
  81101c:	10800448 	cmpgei	r2,r2,17
  811020:	1000031e 	bne	r2,zero,811030 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  811024:	00800404 	movi	r2,16
  811028:	e0bff715 	stw	r2,-36(fp)
  81102c:	00000306 	br	81103c <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  811030:	e0bff717 	ldw	r2,-36(fp)
  811034:	10800044 	addi	r2,r2,1
  811038:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  81103c:	e0bff717 	ldw	r2,-36(fp)
  811040:	1009883a 	mov	r4,r2
  811044:	e0fffc17 	ldw	r3,-16(fp)
  811048:	e0bff517 	ldw	r2,-44(fp)
  81104c:	108018e4 	muli	r2,r2,99
  811050:	1885883a 	add	r2,r3,r2
  811054:	10802444 	addi	r2,r2,145
  811058:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  81105c:	e0fff617 	ldw	r3,-40(fp)
  811060:	e0bff717 	ldw	r2,-36(fp)
  811064:	1880020e 	bge	r3,r2,811070 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  811068:	e0bff717 	ldw	r2,-36(fp)
  81106c:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  811070:	e0fffc17 	ldw	r3,-16(fp)
  811074:	e0bff517 	ldw	r2,-44(fp)
  811078:	108018e4 	muli	r2,r2,99
  81107c:	1885883a 	add	r2,r3,r2
  811080:	10802484 	addi	r2,r2,146
  811084:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  811088:	e0bff517 	ldw	r2,-44(fp)
  81108c:	10800044 	addi	r2,r2,1
  811090:	e0bff515 	stw	r2,-44(fp)
  811094:	e0bff517 	ldw	r2,-44(fp)
  811098:	10800090 	cmplti	r2,r2,2
  81109c:	103fc61e 	bne	r2,zero,810fb8 <__alt_mem_onchip_mem+0xff790fb8>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  8110a0:	e0bff617 	ldw	r2,-40(fp)
  8110a4:	10800448 	cmpgei	r2,r2,17
  8110a8:	1000031e 	bne	r2,zero,8110b8 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  8110ac:	e0bffc17 	ldw	r2,-16(fp)
  8110b0:	10000985 	stb	zero,38(r2)
  8110b4:	00002e06 	br	811170 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  8110b8:	e0bff617 	ldw	r2,-40(fp)
  8110bc:	1085883a 	add	r2,r2,r2
  8110c0:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  8110c4:	e0bff617 	ldw	r2,-40(fp)
  8110c8:	1007883a 	mov	r3,r2
  8110cc:	e0bffc17 	ldw	r2,-16(fp)
  8110d0:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8110d4:	e03ff515 	stw	zero,-44(fp)
  8110d8:	00002206 	br	811164 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  8110dc:	e0fffc17 	ldw	r3,-16(fp)
  8110e0:	e0bff517 	ldw	r2,-44(fp)
  8110e4:	108018e4 	muli	r2,r2,99
  8110e8:	1885883a 	add	r2,r3,r2
  8110ec:	10802444 	addi	r2,r2,145
  8110f0:	10800003 	ldbu	r2,0(r2)
  8110f4:	10803fcc 	andi	r2,r2,255
  8110f8:	1080201c 	xori	r2,r2,128
  8110fc:	10bfe004 	addi	r2,r2,-128
  811100:	10800450 	cmplti	r2,r2,17
  811104:	1000141e 	bne	r2,zero,811158 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  811108:	e0fffc17 	ldw	r3,-16(fp)
  81110c:	e0bff517 	ldw	r2,-44(fp)
  811110:	108018e4 	muli	r2,r2,99
  811114:	1885883a 	add	r2,r3,r2
  811118:	10802444 	addi	r2,r2,145
  81111c:	10800003 	ldbu	r2,0(r2)
  811120:	10803fcc 	andi	r2,r2,255
  811124:	1080201c 	xori	r2,r2,128
  811128:	10bfe004 	addi	r2,r2,-128
  81112c:	1004923a 	slli	r2,r2,8
  811130:	e17ff617 	ldw	r5,-40(fp)
  811134:	1009883a 	mov	r4,r2
  811138:	080c1c00 	call	80c1c0 <__divsi3>
  81113c:	1009883a 	mov	r4,r2
  811140:	e0fffc17 	ldw	r3,-16(fp)
  811144:	e0bff517 	ldw	r2,-44(fp)
  811148:	108018e4 	muli	r2,r2,99
  81114c:	1885883a 	add	r2,r3,r2
  811150:	10802484 	addi	r2,r2,146
  811154:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  811158:	e0bff517 	ldw	r2,-44(fp)
  81115c:	10800044 	addi	r2,r2,1
  811160:	e0bff515 	stw	r2,-44(fp)
  811164:	e0bff517 	ldw	r2,-44(fp)
  811168:	10800090 	cmplti	r2,r2,2
  81116c:	103fdb1e 	bne	r2,zero,8110dc <__alt_mem_onchip_mem+0xff7910dc>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  811170:	e0bffc17 	ldw	r2,-16(fp)
  811174:	10800943 	ldbu	r2,37(r2)
  811178:	10803fcc 	andi	r2,r2,255
  81117c:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  811180:	e13ffc17 	ldw	r4,-16(fp)
  811184:	08107940 	call	810794 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  811188:	e0bffc17 	ldw	r2,-16(fp)
  81118c:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  811190:	e0bffc17 	ldw	r2,-16(fp)
  811194:	10800943 	ldbu	r2,37(r2)
  811198:	10c03fcc 	andi	r3,r2,255
  81119c:	e0bffb17 	ldw	r2,-20(fp)
  8111a0:	18800426 	beq	r3,r2,8111b4 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  8111a4:	e0bffc17 	ldw	r2,-16(fp)
  8111a8:	00c00044 	movi	r3,1
  8111ac:	10c009c5 	stb	r3,39(r2)
  }
  8111b0:	003fef06 	br	811170 <__alt_mem_onchip_mem+0xff791170>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  8111b4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  8111b8:	e0bffe17 	ldw	r2,-8(fp)
}
  8111bc:	e037883a 	mov	sp,fp
  8111c0:	dfc00117 	ldw	ra,4(sp)
  8111c4:	df000017 	ldw	fp,0(sp)
  8111c8:	dec00204 	addi	sp,sp,8
  8111cc:	f800283a 	ret

008111d0 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  8111d0:	defffc04 	addi	sp,sp,-16
  8111d4:	dfc00315 	stw	ra,12(sp)
  8111d8:	df000215 	stw	fp,8(sp)
  8111dc:	df000204 	addi	fp,sp,8
  8111e0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  8111e4:	e0bfff17 	ldw	r2,-4(fp)
  8111e8:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  8111ec:	e0bffe17 	ldw	r2,-8(fp)
  8111f0:	10800943 	ldbu	r2,37(r2)
  8111f4:	10803fcc 	andi	r2,r2,255
  8111f8:	10c00044 	addi	r3,r2,1
  8111fc:	e0bffe17 	ldw	r2,-8(fp)
  811200:	10800983 	ldbu	r2,38(r2)
  811204:	10803fcc 	andi	r2,r2,255
  811208:	18800316 	blt	r3,r2,811218 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  81120c:	e0bffe17 	ldw	r2,-8(fp)
  811210:	10000945 	stb	zero,37(r2)
  811214:	00000606 	br	811230 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  811218:	e0bffe17 	ldw	r2,-8(fp)
  81121c:	10800943 	ldbu	r2,37(r2)
  811220:	10800044 	addi	r2,r2,1
  811224:	1007883a 	mov	r3,r2
  811228:	e0bffe17 	ldw	r2,-8(fp)
  81122c:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  811230:	e0bffe17 	ldw	r2,-8(fp)
  811234:	10800983 	ldbu	r2,38(r2)
  811238:	10803fcc 	andi	r2,r2,255
  81123c:	10000826 	beq	r2,zero,811260 <alt_lcd_16207_timeout+0x90>
  811240:	e0bffe17 	ldw	r2,-8(fp)
  811244:	108009c3 	ldbu	r2,39(r2)
  811248:	10803fcc 	andi	r2,r2,255
  81124c:	1080201c 	xori	r2,r2,128
  811250:	10bfe004 	addi	r2,r2,-128
  811254:	1000021e 	bne	r2,zero,811260 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  811258:	e13ffe17 	ldw	r4,-8(fp)
  81125c:	08107940 	call	810794 <lcd_repaint_screen>

  return sp->period;
  811260:	e0bffe17 	ldw	r2,-8(fp)
  811264:	10800717 	ldw	r2,28(r2)
}
  811268:	e037883a 	mov	sp,fp
  81126c:	dfc00117 	ldw	ra,4(sp)
  811270:	df000017 	ldw	fp,0(sp)
  811274:	dec00204 	addi	sp,sp,8
  811278:	f800283a 	ret

0081127c <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  81127c:	defffc04 	addi	sp,sp,-16
  811280:	dfc00315 	stw	ra,12(sp)
  811284:	df000215 	stw	fp,8(sp)
  811288:	df000204 	addi	fp,sp,8
  81128c:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  811290:	e0bfff17 	ldw	r2,-4(fp)
  811294:	10800017 	ldw	r2,0(r2)
  811298:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  81129c:	e0bfff17 	ldw	r2,-4(fp)
  8112a0:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  8112a4:	010ea604 	movi	r4,15000
  8112a8:	08126140 	call	812614 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8112ac:	e0bffe17 	ldw	r2,-8(fp)
  8112b0:	00c00c04 	movi	r3,48
  8112b4:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  8112b8:	01040104 	movi	r4,4100
  8112bc:	08126140 	call	812614 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8112c0:	e0bffe17 	ldw	r2,-8(fp)
  8112c4:	00c00c04 	movi	r3,48
  8112c8:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  8112cc:	0100fa04 	movi	r4,1000
  8112d0:	08126140 	call	812614 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8112d4:	e0bffe17 	ldw	r2,-8(fp)
  8112d8:	00c00c04 	movi	r3,48
  8112dc:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  8112e0:	01400e04 	movi	r5,56
  8112e4:	e13fff17 	ldw	r4,-4(fp)
  8112e8:	08105340 	call	810534 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  8112ec:	01400204 	movi	r5,8
  8112f0:	e13fff17 	ldw	r4,-4(fp)
  8112f4:	08105340 	call	810534 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  8112f8:	e13fff17 	ldw	r4,-4(fp)
  8112fc:	08106c40 	call	8106c4 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  811300:	01400184 	movi	r5,6
  811304:	e13fff17 	ldw	r4,-4(fp)
  811308:	08105340 	call	810534 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  81130c:	01400304 	movi	r5,12
  811310:	e13fff17 	ldw	r4,-4(fp)
  811314:	08105340 	call	810534 <lcd_write_command>

  sp->esccount = -1;
  811318:	e0bfff17 	ldw	r2,-4(fp)
  81131c:	00ffffc4 	movi	r3,-1
  811320:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  811324:	e0bfff17 	ldw	r2,-4(fp)
  811328:	10800a04 	addi	r2,r2,40
  81132c:	01800204 	movi	r6,8
  811330:	000b883a 	mov	r5,zero
  811334:	1009883a 	mov	r4,r2
  811338:	0802ec80 	call	802ec8 <memset>

  sp->scrollpos = 0;
  81133c:	e0bfff17 	ldw	r2,-4(fp)
  811340:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  811344:	e0bfff17 	ldw	r2,-4(fp)
  811348:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  81134c:	e0bfff17 	ldw	r2,-4(fp)
  811350:	100009c5 	stb	zero,39(r2)
  811354:	d0a77017 	ldw	r2,-25152(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  811358:	01400284 	movi	r5,10
  81135c:	1009883a 	mov	r4,r2
  811360:	080c2b80 	call	80c2b8 <__udivsi3>
  811364:	1007883a 	mov	r3,r2
  811368:	e0bfff17 	ldw	r2,-4(fp)
  81136c:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  811370:	e0bfff17 	ldw	r2,-4(fp)
  811374:	10c00104 	addi	r3,r2,4
  811378:	e0bfff17 	ldw	r2,-4(fp)
  81137c:	10800717 	ldw	r2,28(r2)
  811380:	e1ffff17 	ldw	r7,-4(fp)
  811384:	01802074 	movhi	r6,129
  811388:	31847404 	addi	r6,r6,4560
  81138c:	100b883a 	mov	r5,r2
  811390:	1809883a 	mov	r4,r3
  811394:	080e9dc0 	call	80e9dc <alt_alarm_start>
}
  811398:	0001883a 	nop
  81139c:	e037883a 	mov	sp,fp
  8113a0:	dfc00117 	ldw	ra,4(sp)
  8113a4:	df000017 	ldw	fp,0(sp)
  8113a8:	dec00204 	addi	sp,sp,8
  8113ac:	f800283a 	ret

008113b0 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8113b0:	defffa04 	addi	sp,sp,-24
  8113b4:	dfc00515 	stw	ra,20(sp)
  8113b8:	df000415 	stw	fp,16(sp)
  8113bc:	df000404 	addi	fp,sp,16
  8113c0:	e13ffd15 	stw	r4,-12(fp)
  8113c4:	e17ffe15 	stw	r5,-8(fp)
  8113c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  8113cc:	e0bffd17 	ldw	r2,-12(fp)
  8113d0:	10800017 	ldw	r2,0(r2)
  8113d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  8113d8:	e0bffc17 	ldw	r2,-16(fp)
  8113dc:	10c00a04 	addi	r3,r2,40
  8113e0:	e0bffd17 	ldw	r2,-12(fp)
  8113e4:	10800217 	ldw	r2,8(r2)
  8113e8:	100f883a 	mov	r7,r2
  8113ec:	e1bfff17 	ldw	r6,-4(fp)
  8113f0:	e17ffe17 	ldw	r5,-8(fp)
  8113f4:	1809883a 	mov	r4,r3
  8113f8:	0810cf80 	call	810cf8 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  8113fc:	e037883a 	mov	sp,fp
  811400:	dfc00117 	ldw	ra,4(sp)
  811404:	df000017 	ldw	fp,0(sp)
  811408:	dec00204 	addi	sp,sp,8
  81140c:	f800283a 	ret

00811410 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  811410:	defffa04 	addi	sp,sp,-24
  811414:	dfc00515 	stw	ra,20(sp)
  811418:	df000415 	stw	fp,16(sp)
  81141c:	df000404 	addi	fp,sp,16
  811420:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  811424:	0007883a 	mov	r3,zero
  811428:	e0bfff17 	ldw	r2,-4(fp)
  81142c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  811430:	e0bfff17 	ldw	r2,-4(fp)
  811434:	10800104 	addi	r2,r2,4
  811438:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81143c:	0005303a 	rdctl	r2,status
  811440:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811444:	e0fffd17 	ldw	r3,-12(fp)
  811448:	00bfff84 	movi	r2,-2
  81144c:	1884703a 	and	r2,r3,r2
  811450:	1001703a 	wrctl	status,r2
  
  return context;
  811454:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  811458:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  81145c:	080f7880 	call	80f788 <alt_tick>
  811460:	e0bffc17 	ldw	r2,-16(fp)
  811464:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811468:	e0bffe17 	ldw	r2,-8(fp)
  81146c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  811470:	0001883a 	nop
  811474:	e037883a 	mov	sp,fp
  811478:	dfc00117 	ldw	ra,4(sp)
  81147c:	df000017 	ldw	fp,0(sp)
  811480:	dec00204 	addi	sp,sp,8
  811484:	f800283a 	ret

00811488 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  811488:	defff804 	addi	sp,sp,-32
  81148c:	dfc00715 	stw	ra,28(sp)
  811490:	df000615 	stw	fp,24(sp)
  811494:	df000604 	addi	fp,sp,24
  811498:	e13ffc15 	stw	r4,-16(fp)
  81149c:	e17ffd15 	stw	r5,-12(fp)
  8114a0:	e1bffe15 	stw	r6,-8(fp)
  8114a4:	e1ffff15 	stw	r7,-4(fp)
  8114a8:	e0bfff17 	ldw	r2,-4(fp)
  8114ac:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  8114b0:	d0a77017 	ldw	r2,-25152(gp)
  8114b4:	1000021e 	bne	r2,zero,8114c0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  8114b8:	e0bffb17 	ldw	r2,-20(fp)
  8114bc:	d0a77015 	stw	r2,-25152(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8114c0:	e0bffc17 	ldw	r2,-16(fp)
  8114c4:	10800104 	addi	r2,r2,4
  8114c8:	00c001c4 	movi	r3,7
  8114cc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8114d0:	d8000015 	stw	zero,0(sp)
  8114d4:	e1fffc17 	ldw	r7,-16(fp)
  8114d8:	01802074 	movhi	r6,129
  8114dc:	31850404 	addi	r6,r6,5136
  8114e0:	e17ffe17 	ldw	r5,-8(fp)
  8114e4:	e13ffd17 	ldw	r4,-12(fp)
  8114e8:	08122340 	call	812234 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  8114ec:	0001883a 	nop
  8114f0:	e037883a 	mov	sp,fp
  8114f4:	dfc00117 	ldw	ra,4(sp)
  8114f8:	df000017 	ldw	fp,0(sp)
  8114fc:	dec00204 	addi	sp,sp,8
  811500:	f800283a 	ret

00811504 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  811504:	defffa04 	addi	sp,sp,-24
  811508:	dfc00515 	stw	ra,20(sp)
  81150c:	df000415 	stw	fp,16(sp)
  811510:	df000404 	addi	fp,sp,16
  811514:	e13ffd15 	stw	r4,-12(fp)
  811518:	e17ffe15 	stw	r5,-8(fp)
  81151c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  811520:	e0bffd17 	ldw	r2,-12(fp)
  811524:	10800017 	ldw	r2,0(r2)
  811528:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  81152c:	e0bffc17 	ldw	r2,-16(fp)
  811530:	10c00a04 	addi	r3,r2,40
  811534:	e0bffd17 	ldw	r2,-12(fp)
  811538:	10800217 	ldw	r2,8(r2)
  81153c:	100f883a 	mov	r7,r2
  811540:	e1bfff17 	ldw	r6,-4(fp)
  811544:	e17ffe17 	ldw	r5,-8(fp)
  811548:	1809883a 	mov	r4,r3
  81154c:	0811a180 	call	811a18 <altera_avalon_uart_read>
      fd->fd_flags);
}
  811550:	e037883a 	mov	sp,fp
  811554:	dfc00117 	ldw	ra,4(sp)
  811558:	df000017 	ldw	fp,0(sp)
  81155c:	dec00204 	addi	sp,sp,8
  811560:	f800283a 	ret

00811564 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  811564:	defffa04 	addi	sp,sp,-24
  811568:	dfc00515 	stw	ra,20(sp)
  81156c:	df000415 	stw	fp,16(sp)
  811570:	df000404 	addi	fp,sp,16
  811574:	e13ffd15 	stw	r4,-12(fp)
  811578:	e17ffe15 	stw	r5,-8(fp)
  81157c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  811580:	e0bffd17 	ldw	r2,-12(fp)
  811584:	10800017 	ldw	r2,0(r2)
  811588:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  81158c:	e0bffc17 	ldw	r2,-16(fp)
  811590:	10c00a04 	addi	r3,r2,40
  811594:	e0bffd17 	ldw	r2,-12(fp)
  811598:	10800217 	ldw	r2,8(r2)
  81159c:	100f883a 	mov	r7,r2
  8115a0:	e1bfff17 	ldw	r6,-4(fp)
  8115a4:	e17ffe17 	ldw	r5,-8(fp)
  8115a8:	1809883a 	mov	r4,r3
  8115ac:	0811c300 	call	811c30 <altera_avalon_uart_write>
      fd->fd_flags);
}
  8115b0:	e037883a 	mov	sp,fp
  8115b4:	dfc00117 	ldw	ra,4(sp)
  8115b8:	df000017 	ldw	fp,0(sp)
  8115bc:	dec00204 	addi	sp,sp,8
  8115c0:	f800283a 	ret

008115c4 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  8115c4:	defffc04 	addi	sp,sp,-16
  8115c8:	dfc00315 	stw	ra,12(sp)
  8115cc:	df000215 	stw	fp,8(sp)
  8115d0:	df000204 	addi	fp,sp,8
  8115d4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8115d8:	e0bfff17 	ldw	r2,-4(fp)
  8115dc:	10800017 	ldw	r2,0(r2)
  8115e0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  8115e4:	e0bffe17 	ldw	r2,-8(fp)
  8115e8:	10c00a04 	addi	r3,r2,40
  8115ec:	e0bfff17 	ldw	r2,-4(fp)
  8115f0:	10800217 	ldw	r2,8(r2)
  8115f4:	100b883a 	mov	r5,r2
  8115f8:	1809883a 	mov	r4,r3
  8115fc:	08119880 	call	811988 <altera_avalon_uart_close>
}
  811600:	e037883a 	mov	sp,fp
  811604:	dfc00117 	ldw	ra,4(sp)
  811608:	df000017 	ldw	fp,0(sp)
  81160c:	dec00204 	addi	sp,sp,8
  811610:	f800283a 	ret

00811614 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  811614:	defff804 	addi	sp,sp,-32
  811618:	dfc00715 	stw	ra,28(sp)
  81161c:	df000615 	stw	fp,24(sp)
  811620:	df000604 	addi	fp,sp,24
  811624:	e13ffd15 	stw	r4,-12(fp)
  811628:	e17ffe15 	stw	r5,-8(fp)
  81162c:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  811630:	e0bffd17 	ldw	r2,-12(fp)
  811634:	10800017 	ldw	r2,0(r2)
  811638:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  81163c:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  811640:	1000041e 	bne	r2,zero,811654 <altera_avalon_uart_init+0x40>
  811644:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  811648:	1000021e 	bne	r2,zero,811654 <altera_avalon_uart_init+0x40>
  81164c:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  811650:	10000226 	beq	r2,zero,81165c <altera_avalon_uart_init+0x48>
  811654:	00800044 	movi	r2,1
  811658:	00000106 	br	811660 <altera_avalon_uart_init+0x4c>
  81165c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  811660:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  811664:	e0bffc17 	ldw	r2,-16(fp)
  811668:	10000f1e 	bne	r2,zero,8116a8 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  81166c:	e0bffd17 	ldw	r2,-12(fp)
  811670:	00c32004 	movi	r3,3200
  811674:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  811678:	e0bffb17 	ldw	r2,-20(fp)
  81167c:	10800304 	addi	r2,r2,12
  811680:	e0fffd17 	ldw	r3,-12(fp)
  811684:	18c00117 	ldw	r3,4(r3)
  811688:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  81168c:	d8000015 	stw	zero,0(sp)
  811690:	e1fffd17 	ldw	r7,-12(fp)
  811694:	01802074 	movhi	r6,129
  811698:	3185b004 	addi	r6,r6,5824
  81169c:	e17fff17 	ldw	r5,-4(fp)
  8116a0:	e13ffe17 	ldw	r4,-8(fp)
  8116a4:	08122340 	call	812234 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  8116a8:	0001883a 	nop
  8116ac:	e037883a 	mov	sp,fp
  8116b0:	dfc00117 	ldw	ra,4(sp)
  8116b4:	df000017 	ldw	fp,0(sp)
  8116b8:	dec00204 	addi	sp,sp,8
  8116bc:	f800283a 	ret

008116c0 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  8116c0:	defffa04 	addi	sp,sp,-24
  8116c4:	dfc00515 	stw	ra,20(sp)
  8116c8:	df000415 	stw	fp,16(sp)
  8116cc:	df000404 	addi	fp,sp,16
  8116d0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  8116d4:	e0bfff17 	ldw	r2,-4(fp)
  8116d8:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  8116dc:	e0bffc17 	ldw	r2,-16(fp)
  8116e0:	10800017 	ldw	r2,0(r2)
  8116e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  8116e8:	e0bffd17 	ldw	r2,-12(fp)
  8116ec:	10800204 	addi	r2,r2,8
  8116f0:	10800037 	ldwio	r2,0(r2)
  8116f4:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  8116f8:	e0bffd17 	ldw	r2,-12(fp)
  8116fc:	10800204 	addi	r2,r2,8
  811700:	0007883a 	mov	r3,zero
  811704:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  811708:	e0bffd17 	ldw	r2,-12(fp)
  81170c:	10800204 	addi	r2,r2,8
  811710:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  811714:	e0bffe17 	ldw	r2,-8(fp)
  811718:	1080200c 	andi	r2,r2,128
  81171c:	10000326 	beq	r2,zero,81172c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  811720:	e17ffe17 	ldw	r5,-8(fp)
  811724:	e13ffc17 	ldw	r4,-16(fp)
  811728:	081175c0 	call	81175c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  81172c:	e0bffe17 	ldw	r2,-8(fp)
  811730:	1081100c 	andi	r2,r2,1088
  811734:	10000326 	beq	r2,zero,811744 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  811738:	e17ffe17 	ldw	r5,-8(fp)
  81173c:	e13ffc17 	ldw	r4,-16(fp)
  811740:	08118400 	call	811840 <altera_avalon_uart_txirq>
  }
  

}
  811744:	0001883a 	nop
  811748:	e037883a 	mov	sp,fp
  81174c:	dfc00117 	ldw	ra,4(sp)
  811750:	df000017 	ldw	fp,0(sp)
  811754:	dec00204 	addi	sp,sp,8
  811758:	f800283a 	ret

0081175c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  81175c:	defffc04 	addi	sp,sp,-16
  811760:	df000315 	stw	fp,12(sp)
  811764:	df000304 	addi	fp,sp,12
  811768:	e13ffe15 	stw	r4,-8(fp)
  81176c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  811770:	e0bfff17 	ldw	r2,-4(fp)
  811774:	108000cc 	andi	r2,r2,3
  811778:	10002c1e 	bne	r2,zero,81182c <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  81177c:	e0bffe17 	ldw	r2,-8(fp)
  811780:	10800317 	ldw	r2,12(r2)
  811784:	e0bffe17 	ldw	r2,-8(fp)
  811788:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  81178c:	e0bffe17 	ldw	r2,-8(fp)
  811790:	10800317 	ldw	r2,12(r2)
  811794:	10800044 	addi	r2,r2,1
  811798:	10800fcc 	andi	r2,r2,63
  81179c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  8117a0:	e0bffe17 	ldw	r2,-8(fp)
  8117a4:	10800317 	ldw	r2,12(r2)
  8117a8:	e0fffe17 	ldw	r3,-8(fp)
  8117ac:	18c00017 	ldw	r3,0(r3)
  8117b0:	18c00037 	ldwio	r3,0(r3)
  8117b4:	1809883a 	mov	r4,r3
  8117b8:	e0fffe17 	ldw	r3,-8(fp)
  8117bc:	1885883a 	add	r2,r3,r2
  8117c0:	10800704 	addi	r2,r2,28
  8117c4:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  8117c8:	e0bffe17 	ldw	r2,-8(fp)
  8117cc:	e0fffd17 	ldw	r3,-12(fp)
  8117d0:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8117d4:	e0bffe17 	ldw	r2,-8(fp)
  8117d8:	10800317 	ldw	r2,12(r2)
  8117dc:	10800044 	addi	r2,r2,1
  8117e0:	10800fcc 	andi	r2,r2,63
  8117e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  8117e8:	e0bffe17 	ldw	r2,-8(fp)
  8117ec:	10c00217 	ldw	r3,8(r2)
  8117f0:	e0bffd17 	ldw	r2,-12(fp)
  8117f4:	18800e1e 	bne	r3,r2,811830 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8117f8:	e0bffe17 	ldw	r2,-8(fp)
  8117fc:	10c00117 	ldw	r3,4(r2)
  811800:	00bfdfc4 	movi	r2,-129
  811804:	1886703a 	and	r3,r3,r2
  811808:	e0bffe17 	ldw	r2,-8(fp)
  81180c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  811810:	e0bffe17 	ldw	r2,-8(fp)
  811814:	10800017 	ldw	r2,0(r2)
  811818:	10800304 	addi	r2,r2,12
  81181c:	e0fffe17 	ldw	r3,-8(fp)
  811820:	18c00117 	ldw	r3,4(r3)
  811824:	10c00035 	stwio	r3,0(r2)
  811828:	00000106 	br	811830 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  81182c:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  811830:	e037883a 	mov	sp,fp
  811834:	df000017 	ldw	fp,0(sp)
  811838:	dec00104 	addi	sp,sp,4
  81183c:	f800283a 	ret

00811840 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  811840:	defffb04 	addi	sp,sp,-20
  811844:	df000415 	stw	fp,16(sp)
  811848:	df000404 	addi	fp,sp,16
  81184c:	e13ffc15 	stw	r4,-16(fp)
  811850:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  811854:	e0bffc17 	ldw	r2,-16(fp)
  811858:	10c00417 	ldw	r3,16(r2)
  81185c:	e0bffc17 	ldw	r2,-16(fp)
  811860:	10800517 	ldw	r2,20(r2)
  811864:	18803226 	beq	r3,r2,811930 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  811868:	e0bffc17 	ldw	r2,-16(fp)
  81186c:	10800617 	ldw	r2,24(r2)
  811870:	1080008c 	andi	r2,r2,2
  811874:	10000326 	beq	r2,zero,811884 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  811878:	e0bffd17 	ldw	r2,-12(fp)
  81187c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  811880:	10001d26 	beq	r2,zero,8118f8 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  811884:	e0bffc17 	ldw	r2,-16(fp)
  811888:	10800417 	ldw	r2,16(r2)
  81188c:	e0bffc17 	ldw	r2,-16(fp)
  811890:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  811894:	e0bffc17 	ldw	r2,-16(fp)
  811898:	10800017 	ldw	r2,0(r2)
  81189c:	10800104 	addi	r2,r2,4
  8118a0:	e0fffc17 	ldw	r3,-16(fp)
  8118a4:	18c00417 	ldw	r3,16(r3)
  8118a8:	e13ffc17 	ldw	r4,-16(fp)
  8118ac:	20c7883a 	add	r3,r4,r3
  8118b0:	18c01704 	addi	r3,r3,92
  8118b4:	18c00003 	ldbu	r3,0(r3)
  8118b8:	18c03fcc 	andi	r3,r3,255
  8118bc:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  8118c0:	e0bffc17 	ldw	r2,-16(fp)
  8118c4:	10800417 	ldw	r2,16(r2)
  8118c8:	10800044 	addi	r2,r2,1
  8118cc:	e0fffc17 	ldw	r3,-16(fp)
  8118d0:	18800415 	stw	r2,16(r3)
  8118d4:	10c00fcc 	andi	r3,r2,63
  8118d8:	e0bffc17 	ldw	r2,-16(fp)
  8118dc:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  8118e0:	e0bffc17 	ldw	r2,-16(fp)
  8118e4:	10800117 	ldw	r2,4(r2)
  8118e8:	10c01014 	ori	r3,r2,64
  8118ec:	e0bffc17 	ldw	r2,-16(fp)
  8118f0:	10c00115 	stw	r3,4(r2)
  8118f4:	00000e06 	br	811930 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  8118f8:	e0bffc17 	ldw	r2,-16(fp)
  8118fc:	10800017 	ldw	r2,0(r2)
  811900:	10800204 	addi	r2,r2,8
  811904:	10800037 	ldwio	r2,0(r2)
  811908:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  81190c:	e0bffd17 	ldw	r2,-12(fp)
  811910:	1082000c 	andi	r2,r2,2048
  811914:	1000061e 	bne	r2,zero,811930 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  811918:	e0bffc17 	ldw	r2,-16(fp)
  81191c:	10c00117 	ldw	r3,4(r2)
  811920:	00bfefc4 	movi	r2,-65
  811924:	1886703a 	and	r3,r3,r2
  811928:	e0bffc17 	ldw	r2,-16(fp)
  81192c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  811930:	e0bffc17 	ldw	r2,-16(fp)
  811934:	10c00417 	ldw	r3,16(r2)
  811938:	e0bffc17 	ldw	r2,-16(fp)
  81193c:	10800517 	ldw	r2,20(r2)
  811940:	1880061e 	bne	r3,r2,81195c <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  811944:	e0bffc17 	ldw	r2,-16(fp)
  811948:	10c00117 	ldw	r3,4(r2)
  81194c:	00beefc4 	movi	r2,-1089
  811950:	1886703a 	and	r3,r3,r2
  811954:	e0bffc17 	ldw	r2,-16(fp)
  811958:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  81195c:	e0bffc17 	ldw	r2,-16(fp)
  811960:	10800017 	ldw	r2,0(r2)
  811964:	10800304 	addi	r2,r2,12
  811968:	e0fffc17 	ldw	r3,-16(fp)
  81196c:	18c00117 	ldw	r3,4(r3)
  811970:	10c00035 	stwio	r3,0(r2)
}
  811974:	0001883a 	nop
  811978:	e037883a 	mov	sp,fp
  81197c:	df000017 	ldw	fp,0(sp)
  811980:	dec00104 	addi	sp,sp,4
  811984:	f800283a 	ret

00811988 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  811988:	defffd04 	addi	sp,sp,-12
  81198c:	df000215 	stw	fp,8(sp)
  811990:	df000204 	addi	fp,sp,8
  811994:	e13ffe15 	stw	r4,-8(fp)
  811998:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  81199c:	00000506 	br	8119b4 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  8119a0:	e0bfff17 	ldw	r2,-4(fp)
  8119a4:	1090000c 	andi	r2,r2,16384
  8119a8:	10000226 	beq	r2,zero,8119b4 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  8119ac:	00bffd44 	movi	r2,-11
  8119b0:	00000606 	br	8119cc <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  8119b4:	e0bffe17 	ldw	r2,-8(fp)
  8119b8:	10c00417 	ldw	r3,16(r2)
  8119bc:	e0bffe17 	ldw	r2,-8(fp)
  8119c0:	10800517 	ldw	r2,20(r2)
  8119c4:	18bff61e 	bne	r3,r2,8119a0 <__alt_mem_onchip_mem+0xff7919a0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8119c8:	0005883a 	mov	r2,zero
}
  8119cc:	e037883a 	mov	sp,fp
  8119d0:	df000017 	ldw	fp,0(sp)
  8119d4:	dec00104 	addi	sp,sp,4
  8119d8:	f800283a 	ret

008119dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8119dc:	defffe04 	addi	sp,sp,-8
  8119e0:	dfc00115 	stw	ra,4(sp)
  8119e4:	df000015 	stw	fp,0(sp)
  8119e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8119ec:	d0a00e17 	ldw	r2,-32712(gp)
  8119f0:	10000326 	beq	r2,zero,811a00 <alt_get_errno+0x24>
  8119f4:	d0a00e17 	ldw	r2,-32712(gp)
  8119f8:	103ee83a 	callr	r2
  8119fc:	00000106 	br	811a04 <alt_get_errno+0x28>
  811a00:	d0a76504 	addi	r2,gp,-25196
}
  811a04:	e037883a 	mov	sp,fp
  811a08:	dfc00117 	ldw	ra,4(sp)
  811a0c:	df000017 	ldw	fp,0(sp)
  811a10:	dec00204 	addi	sp,sp,8
  811a14:	f800283a 	ret

00811a18 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  811a18:	defff204 	addi	sp,sp,-56
  811a1c:	dfc00d15 	stw	ra,52(sp)
  811a20:	df000c15 	stw	fp,48(sp)
  811a24:	df000c04 	addi	fp,sp,48
  811a28:	e13ffc15 	stw	r4,-16(fp)
  811a2c:	e17ffd15 	stw	r5,-12(fp)
  811a30:	e1bffe15 	stw	r6,-8(fp)
  811a34:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  811a38:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  811a3c:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  811a40:	e0bfff17 	ldw	r2,-4(fp)
  811a44:	1090000c 	andi	r2,r2,16384
  811a48:	1005003a 	cmpeq	r2,r2,zero
  811a4c:	10803fcc 	andi	r2,r2,255
  811a50:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  811a54:	00001306 	br	811aa4 <altera_avalon_uart_read+0x8c>
    {
      count++;
  811a58:	e0bff517 	ldw	r2,-44(fp)
  811a5c:	10800044 	addi	r2,r2,1
  811a60:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  811a64:	e0bffd17 	ldw	r2,-12(fp)
  811a68:	10c00044 	addi	r3,r2,1
  811a6c:	e0fffd15 	stw	r3,-12(fp)
  811a70:	e0fffc17 	ldw	r3,-16(fp)
  811a74:	18c00217 	ldw	r3,8(r3)
  811a78:	e13ffc17 	ldw	r4,-16(fp)
  811a7c:	20c7883a 	add	r3,r4,r3
  811a80:	18c00704 	addi	r3,r3,28
  811a84:	18c00003 	ldbu	r3,0(r3)
  811a88:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  811a8c:	e0bffc17 	ldw	r2,-16(fp)
  811a90:	10800217 	ldw	r2,8(r2)
  811a94:	10800044 	addi	r2,r2,1
  811a98:	10c00fcc 	andi	r3,r2,63
  811a9c:	e0bffc17 	ldw	r2,-16(fp)
  811aa0:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  811aa4:	e0fff517 	ldw	r3,-44(fp)
  811aa8:	e0bffe17 	ldw	r2,-8(fp)
  811aac:	1880050e 	bge	r3,r2,811ac4 <altera_avalon_uart_read+0xac>
  811ab0:	e0bffc17 	ldw	r2,-16(fp)
  811ab4:	10c00217 	ldw	r3,8(r2)
  811ab8:	e0bffc17 	ldw	r2,-16(fp)
  811abc:	10800317 	ldw	r2,12(r2)
  811ac0:	18bfe51e 	bne	r3,r2,811a58 <__alt_mem_onchip_mem+0xff791a58>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  811ac4:	e0bff517 	ldw	r2,-44(fp)
  811ac8:	1000251e 	bne	r2,zero,811b60 <altera_avalon_uart_read+0x148>
  811acc:	e0bffc17 	ldw	r2,-16(fp)
  811ad0:	10c00217 	ldw	r3,8(r2)
  811ad4:	e0bffc17 	ldw	r2,-16(fp)
  811ad8:	10800317 	ldw	r2,12(r2)
  811adc:	1880201e 	bne	r3,r2,811b60 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  811ae0:	e0bff617 	ldw	r2,-40(fp)
  811ae4:	1000071e 	bne	r2,zero,811b04 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  811ae8:	08119dc0 	call	8119dc <alt_get_errno>
  811aec:	1007883a 	mov	r3,r2
  811af0:	008002c4 	movi	r2,11
  811af4:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  811af8:	00800044 	movi	r2,1
  811afc:	e0bff405 	stb	r2,-48(fp)
        break;
  811b00:	00001b06 	br	811b70 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811b04:	0005303a 	rdctl	r2,status
  811b08:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811b0c:	e0fff917 	ldw	r3,-28(fp)
  811b10:	00bfff84 	movi	r2,-2
  811b14:	1884703a 	and	r2,r3,r2
  811b18:	1001703a 	wrctl	status,r2
  
  return context;
  811b1c:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  811b20:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  811b24:	e0bffc17 	ldw	r2,-16(fp)
  811b28:	10800117 	ldw	r2,4(r2)
  811b2c:	10c02014 	ori	r3,r2,128
  811b30:	e0bffc17 	ldw	r2,-16(fp)
  811b34:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811b38:	e0bffc17 	ldw	r2,-16(fp)
  811b3c:	10800017 	ldw	r2,0(r2)
  811b40:	10800304 	addi	r2,r2,12
  811b44:	e0fffc17 	ldw	r3,-16(fp)
  811b48:	18c00117 	ldw	r3,4(r3)
  811b4c:	10c00035 	stwio	r3,0(r2)
  811b50:	e0bff817 	ldw	r2,-32(fp)
  811b54:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811b58:	e0bffa17 	ldw	r2,-24(fp)
  811b5c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  811b60:	e0bff517 	ldw	r2,-44(fp)
  811b64:	1000021e 	bne	r2,zero,811b70 <altera_avalon_uart_read+0x158>
  811b68:	e0bffe17 	ldw	r2,-8(fp)
  811b6c:	103fcd1e 	bne	r2,zero,811aa4 <__alt_mem_onchip_mem+0xff791aa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811b70:	0005303a 	rdctl	r2,status
  811b74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811b78:	e0fffb17 	ldw	r3,-20(fp)
  811b7c:	00bfff84 	movi	r2,-2
  811b80:	1884703a 	and	r2,r3,r2
  811b84:	1001703a 	wrctl	status,r2
  
  return context;
  811b88:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  811b8c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  811b90:	e0bffc17 	ldw	r2,-16(fp)
  811b94:	10800117 	ldw	r2,4(r2)
  811b98:	10c02014 	ori	r3,r2,128
  811b9c:	e0bffc17 	ldw	r2,-16(fp)
  811ba0:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811ba4:	e0bffc17 	ldw	r2,-16(fp)
  811ba8:	10800017 	ldw	r2,0(r2)
  811bac:	10800304 	addi	r2,r2,12
  811bb0:	e0fffc17 	ldw	r3,-16(fp)
  811bb4:	18c00117 	ldw	r3,4(r3)
  811bb8:	10c00035 	stwio	r3,0(r2)
  811bbc:	e0bff817 	ldw	r2,-32(fp)
  811bc0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811bc4:	e0bff717 	ldw	r2,-36(fp)
  811bc8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  811bcc:	e0bff403 	ldbu	r2,-48(fp)
  811bd0:	10000226 	beq	r2,zero,811bdc <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  811bd4:	00bffd44 	movi	r2,-11
  811bd8:	00000106 	br	811be0 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  811bdc:	e0bff517 	ldw	r2,-44(fp)
  }
}
  811be0:	e037883a 	mov	sp,fp
  811be4:	dfc00117 	ldw	ra,4(sp)
  811be8:	df000017 	ldw	fp,0(sp)
  811bec:	dec00204 	addi	sp,sp,8
  811bf0:	f800283a 	ret

00811bf4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811bf4:	defffe04 	addi	sp,sp,-8
  811bf8:	dfc00115 	stw	ra,4(sp)
  811bfc:	df000015 	stw	fp,0(sp)
  811c00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  811c04:	d0a00e17 	ldw	r2,-32712(gp)
  811c08:	10000326 	beq	r2,zero,811c18 <alt_get_errno+0x24>
  811c0c:	d0a00e17 	ldw	r2,-32712(gp)
  811c10:	103ee83a 	callr	r2
  811c14:	00000106 	br	811c1c <alt_get_errno+0x28>
  811c18:	d0a76504 	addi	r2,gp,-25196
}
  811c1c:	e037883a 	mov	sp,fp
  811c20:	dfc00117 	ldw	ra,4(sp)
  811c24:	df000017 	ldw	fp,0(sp)
  811c28:	dec00204 	addi	sp,sp,8
  811c2c:	f800283a 	ret

00811c30 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  811c30:	defff204 	addi	sp,sp,-56
  811c34:	dfc00d15 	stw	ra,52(sp)
  811c38:	df000c15 	stw	fp,48(sp)
  811c3c:	df000c04 	addi	fp,sp,48
  811c40:	e13ffc15 	stw	r4,-16(fp)
  811c44:	e17ffd15 	stw	r5,-12(fp)
  811c48:	e1bffe15 	stw	r6,-8(fp)
  811c4c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  811c50:	e0bffe17 	ldw	r2,-8(fp)
  811c54:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  811c58:	e0bfff17 	ldw	r2,-4(fp)
  811c5c:	1090000c 	andi	r2,r2,16384
  811c60:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  811c64:	00003c06 	br	811d58 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  811c68:	e0bffc17 	ldw	r2,-16(fp)
  811c6c:	10800517 	ldw	r2,20(r2)
  811c70:	10800044 	addi	r2,r2,1
  811c74:	10800fcc 	andi	r2,r2,63
  811c78:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  811c7c:	e0bffc17 	ldw	r2,-16(fp)
  811c80:	10c00417 	ldw	r3,16(r2)
  811c84:	e0bff717 	ldw	r2,-36(fp)
  811c88:	1880221e 	bne	r3,r2,811d14 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  811c8c:	e0bff517 	ldw	r2,-44(fp)
  811c90:	10000526 	beq	r2,zero,811ca8 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  811c94:	0811bf40 	call	811bf4 <alt_get_errno>
  811c98:	1007883a 	mov	r3,r2
  811c9c:	008002c4 	movi	r2,11
  811ca0:	18800015 	stw	r2,0(r3)
        break;
  811ca4:	00002e06 	br	811d60 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811ca8:	0005303a 	rdctl	r2,status
  811cac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811cb0:	e0fff917 	ldw	r3,-28(fp)
  811cb4:	00bfff84 	movi	r2,-2
  811cb8:	1884703a 	and	r2,r3,r2
  811cbc:	1001703a 	wrctl	status,r2
  
  return context;
  811cc0:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  811cc4:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  811cc8:	e0bffc17 	ldw	r2,-16(fp)
  811ccc:	10800117 	ldw	r2,4(r2)
  811cd0:	10c11014 	ori	r3,r2,1088
  811cd4:	e0bffc17 	ldw	r2,-16(fp)
  811cd8:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811cdc:	e0bffc17 	ldw	r2,-16(fp)
  811ce0:	10800017 	ldw	r2,0(r2)
  811ce4:	10800304 	addi	r2,r2,12
  811ce8:	e0fffc17 	ldw	r3,-16(fp)
  811cec:	18c00117 	ldw	r3,4(r3)
  811cf0:	10c00035 	stwio	r3,0(r2)
  811cf4:	e0bff817 	ldw	r2,-32(fp)
  811cf8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811cfc:	e0bff617 	ldw	r2,-40(fp)
  811d00:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  811d04:	e0bffc17 	ldw	r2,-16(fp)
  811d08:	10c00417 	ldw	r3,16(r2)
  811d0c:	e0bff717 	ldw	r2,-36(fp)
  811d10:	18bffc26 	beq	r3,r2,811d04 <__alt_mem_onchip_mem+0xff791d04>
      }
    }

    count--;
  811d14:	e0bff417 	ldw	r2,-48(fp)
  811d18:	10bfffc4 	addi	r2,r2,-1
  811d1c:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  811d20:	e0bffc17 	ldw	r2,-16(fp)
  811d24:	10c00517 	ldw	r3,20(r2)
  811d28:	e0bffd17 	ldw	r2,-12(fp)
  811d2c:	11000044 	addi	r4,r2,1
  811d30:	e13ffd15 	stw	r4,-12(fp)
  811d34:	10800003 	ldbu	r2,0(r2)
  811d38:	1009883a 	mov	r4,r2
  811d3c:	e0bffc17 	ldw	r2,-16(fp)
  811d40:	10c5883a 	add	r2,r2,r3
  811d44:	10801704 	addi	r2,r2,92
  811d48:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  811d4c:	e0bffc17 	ldw	r2,-16(fp)
  811d50:	e0fff717 	ldw	r3,-36(fp)
  811d54:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  811d58:	e0bff417 	ldw	r2,-48(fp)
  811d5c:	103fc21e 	bne	r2,zero,811c68 <__alt_mem_onchip_mem+0xff791c68>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811d60:	0005303a 	rdctl	r2,status
  811d64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811d68:	e0fffb17 	ldw	r3,-20(fp)
  811d6c:	00bfff84 	movi	r2,-2
  811d70:	1884703a 	and	r2,r3,r2
  811d74:	1001703a 	wrctl	status,r2
  
  return context;
  811d78:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  811d7c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  811d80:	e0bffc17 	ldw	r2,-16(fp)
  811d84:	10800117 	ldw	r2,4(r2)
  811d88:	10c11014 	ori	r3,r2,1088
  811d8c:	e0bffc17 	ldw	r2,-16(fp)
  811d90:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811d94:	e0bffc17 	ldw	r2,-16(fp)
  811d98:	10800017 	ldw	r2,0(r2)
  811d9c:	10800304 	addi	r2,r2,12
  811da0:	e0fffc17 	ldw	r3,-16(fp)
  811da4:	18c00117 	ldw	r3,4(r3)
  811da8:	10c00035 	stwio	r3,0(r2)
  811dac:	e0bff817 	ldw	r2,-32(fp)
  811db0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811db4:	e0bffa17 	ldw	r2,-24(fp)
  811db8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  811dbc:	e0fffe17 	ldw	r3,-8(fp)
  811dc0:	e0bff417 	ldw	r2,-48(fp)
  811dc4:	1885c83a 	sub	r2,r3,r2
}
  811dc8:	e037883a 	mov	sp,fp
  811dcc:	dfc00117 	ldw	ra,4(sp)
  811dd0:	df000017 	ldw	fp,0(sp)
  811dd4:	dec00204 	addi	sp,sp,8
  811dd8:	f800283a 	ret

00811ddc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  811ddc:	defffe04 	addi	sp,sp,-8
  811de0:	df000115 	stw	fp,4(sp)
  811de4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  811de8:	e03fff15 	stw	zero,-4(fp)
  811dec:	00000506 	br	811e04 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  811df0:	e0bfff17 	ldw	r2,-4(fp)
  811df4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  811df8:	e0bfff17 	ldw	r2,-4(fp)
  811dfc:	10800804 	addi	r2,r2,32
  811e00:	e0bfff15 	stw	r2,-4(fp)
  811e04:	e0bfff17 	ldw	r2,-4(fp)
  811e08:	10820030 	cmpltui	r2,r2,2048
  811e0c:	103ff81e 	bne	r2,zero,811df0 <__alt_mem_onchip_mem+0xff791df0>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  811e10:	0001883a 	nop
  811e14:	e037883a 	mov	sp,fp
  811e18:	df000017 	ldw	fp,0(sp)
  811e1c:	dec00104 	addi	sp,sp,4
  811e20:	f800283a 	ret

00811e24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811e24:	defffe04 	addi	sp,sp,-8
  811e28:	dfc00115 	stw	ra,4(sp)
  811e2c:	df000015 	stw	fp,0(sp)
  811e30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  811e34:	d0a00e17 	ldw	r2,-32712(gp)
  811e38:	10000326 	beq	r2,zero,811e48 <alt_get_errno+0x24>
  811e3c:	d0a00e17 	ldw	r2,-32712(gp)
  811e40:	103ee83a 	callr	r2
  811e44:	00000106 	br	811e4c <alt_get_errno+0x28>
  811e48:	d0a76504 	addi	r2,gp,-25196
}
  811e4c:	e037883a 	mov	sp,fp
  811e50:	dfc00117 	ldw	ra,4(sp)
  811e54:	df000017 	ldw	fp,0(sp)
  811e58:	dec00204 	addi	sp,sp,8
  811e5c:	f800283a 	ret

00811e60 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  811e60:	defffa04 	addi	sp,sp,-24
  811e64:	dfc00515 	stw	ra,20(sp)
  811e68:	df000415 	stw	fp,16(sp)
  811e6c:	df000404 	addi	fp,sp,16
  811e70:	e13ffe15 	stw	r4,-8(fp)
  811e74:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  811e78:	e0bffe17 	ldw	r2,-8(fp)
  811e7c:	10000326 	beq	r2,zero,811e8c <alt_dev_llist_insert+0x2c>
  811e80:	e0bffe17 	ldw	r2,-8(fp)
  811e84:	10800217 	ldw	r2,8(r2)
  811e88:	1000061e 	bne	r2,zero,811ea4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  811e8c:	0811e240 	call	811e24 <alt_get_errno>
  811e90:	1007883a 	mov	r3,r2
  811e94:	00800584 	movi	r2,22
  811e98:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  811e9c:	00bffa84 	movi	r2,-22
  811ea0:	00001306 	br	811ef0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  811ea4:	e0bffe17 	ldw	r2,-8(fp)
  811ea8:	e0ffff17 	ldw	r3,-4(fp)
  811eac:	e0fffc15 	stw	r3,-16(fp)
  811eb0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  811eb4:	e0bffd17 	ldw	r2,-12(fp)
  811eb8:	e0fffc17 	ldw	r3,-16(fp)
  811ebc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  811ec0:	e0bffc17 	ldw	r2,-16(fp)
  811ec4:	10c00017 	ldw	r3,0(r2)
  811ec8:	e0bffd17 	ldw	r2,-12(fp)
  811ecc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  811ed0:	e0bffc17 	ldw	r2,-16(fp)
  811ed4:	10800017 	ldw	r2,0(r2)
  811ed8:	e0fffd17 	ldw	r3,-12(fp)
  811edc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  811ee0:	e0bffc17 	ldw	r2,-16(fp)
  811ee4:	e0fffd17 	ldw	r3,-12(fp)
  811ee8:	10c00015 	stw	r3,0(r2)

  return 0;  
  811eec:	0005883a 	mov	r2,zero
}
  811ef0:	e037883a 	mov	sp,fp
  811ef4:	dfc00117 	ldw	ra,4(sp)
  811ef8:	df000017 	ldw	fp,0(sp)
  811efc:	dec00204 	addi	sp,sp,8
  811f00:	f800283a 	ret

00811f04 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  811f04:	defffd04 	addi	sp,sp,-12
  811f08:	dfc00215 	stw	ra,8(sp)
  811f0c:	df000115 	stw	fp,4(sp)
  811f10:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  811f14:	00802074 	movhi	r2,129
  811f18:	108b1f04 	addi	r2,r2,11388
  811f1c:	e0bfff15 	stw	r2,-4(fp)
  811f20:	00000606 	br	811f3c <_do_ctors+0x38>
        (*ctor) (); 
  811f24:	e0bfff17 	ldw	r2,-4(fp)
  811f28:	10800017 	ldw	r2,0(r2)
  811f2c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  811f30:	e0bfff17 	ldw	r2,-4(fp)
  811f34:	10bfff04 	addi	r2,r2,-4
  811f38:	e0bfff15 	stw	r2,-4(fp)
  811f3c:	e0ffff17 	ldw	r3,-4(fp)
  811f40:	00802074 	movhi	r2,129
  811f44:	108b2004 	addi	r2,r2,11392
  811f48:	18bff62e 	bgeu	r3,r2,811f24 <__alt_mem_onchip_mem+0xff791f24>
        (*ctor) (); 
}
  811f4c:	0001883a 	nop
  811f50:	e037883a 	mov	sp,fp
  811f54:	dfc00117 	ldw	ra,4(sp)
  811f58:	df000017 	ldw	fp,0(sp)
  811f5c:	dec00204 	addi	sp,sp,8
  811f60:	f800283a 	ret

00811f64 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  811f64:	defffd04 	addi	sp,sp,-12
  811f68:	dfc00215 	stw	ra,8(sp)
  811f6c:	df000115 	stw	fp,4(sp)
  811f70:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  811f74:	00802074 	movhi	r2,129
  811f78:	108b1f04 	addi	r2,r2,11388
  811f7c:	e0bfff15 	stw	r2,-4(fp)
  811f80:	00000606 	br	811f9c <_do_dtors+0x38>
        (*dtor) (); 
  811f84:	e0bfff17 	ldw	r2,-4(fp)
  811f88:	10800017 	ldw	r2,0(r2)
  811f8c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  811f90:	e0bfff17 	ldw	r2,-4(fp)
  811f94:	10bfff04 	addi	r2,r2,-4
  811f98:	e0bfff15 	stw	r2,-4(fp)
  811f9c:	e0ffff17 	ldw	r3,-4(fp)
  811fa0:	00802074 	movhi	r2,129
  811fa4:	108b2004 	addi	r2,r2,11392
  811fa8:	18bff62e 	bgeu	r3,r2,811f84 <__alt_mem_onchip_mem+0xff791f84>
        (*dtor) (); 
}
  811fac:	0001883a 	nop
  811fb0:	e037883a 	mov	sp,fp
  811fb4:	dfc00117 	ldw	ra,4(sp)
  811fb8:	df000017 	ldw	fp,0(sp)
  811fbc:	dec00204 	addi	sp,sp,8
  811fc0:	f800283a 	ret

00811fc4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  811fc4:	defffa04 	addi	sp,sp,-24
  811fc8:	dfc00515 	stw	ra,20(sp)
  811fcc:	df000415 	stw	fp,16(sp)
  811fd0:	df000404 	addi	fp,sp,16
  811fd4:	e13ffe15 	stw	r4,-8(fp)
  811fd8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  811fdc:	e0bfff17 	ldw	r2,-4(fp)
  811fe0:	10800017 	ldw	r2,0(r2)
  811fe4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  811fe8:	e13ffe17 	ldw	r4,-8(fp)
  811fec:	08035b80 	call	8035b8 <strlen>
  811ff0:	10800044 	addi	r2,r2,1
  811ff4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  811ff8:	00000d06 	br	812030 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  811ffc:	e0bffc17 	ldw	r2,-16(fp)
  812000:	10800217 	ldw	r2,8(r2)
  812004:	e0fffd17 	ldw	r3,-12(fp)
  812008:	180d883a 	mov	r6,r3
  81200c:	e17ffe17 	ldw	r5,-8(fp)
  812010:	1009883a 	mov	r4,r2
  812014:	08129380 	call	812938 <memcmp>
  812018:	1000021e 	bne	r2,zero,812024 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  81201c:	e0bffc17 	ldw	r2,-16(fp)
  812020:	00000706 	br	812040 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  812024:	e0bffc17 	ldw	r2,-16(fp)
  812028:	10800017 	ldw	r2,0(r2)
  81202c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  812030:	e0fffc17 	ldw	r3,-16(fp)
  812034:	e0bfff17 	ldw	r2,-4(fp)
  812038:	18bff01e 	bne	r3,r2,811ffc <__alt_mem_onchip_mem+0xff791ffc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  81203c:	0005883a 	mov	r2,zero
}
  812040:	e037883a 	mov	sp,fp
  812044:	dfc00117 	ldw	ra,4(sp)
  812048:	df000017 	ldw	fp,0(sp)
  81204c:	dec00204 	addi	sp,sp,8
  812050:	f800283a 	ret

00812054 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  812054:	defffb04 	addi	sp,sp,-20
  812058:	dfc00415 	stw	ra,16(sp)
  81205c:	df000315 	stw	fp,12(sp)
  812060:	df000304 	addi	fp,sp,12
  812064:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  812068:	d0a00917 	ldw	r2,-32732(gp)
  81206c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  812070:	00003106 	br	812138 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  812074:	e0bffd17 	ldw	r2,-12(fp)
  812078:	10800217 	ldw	r2,8(r2)
  81207c:	1009883a 	mov	r4,r2
  812080:	08035b80 	call	8035b8 <strlen>
  812084:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  812088:	e0bffd17 	ldw	r2,-12(fp)
  81208c:	10c00217 	ldw	r3,8(r2)
  812090:	e0bffe17 	ldw	r2,-8(fp)
  812094:	10bfffc4 	addi	r2,r2,-1
  812098:	1885883a 	add	r2,r3,r2
  81209c:	10800003 	ldbu	r2,0(r2)
  8120a0:	10803fcc 	andi	r2,r2,255
  8120a4:	1080201c 	xori	r2,r2,128
  8120a8:	10bfe004 	addi	r2,r2,-128
  8120ac:	10800bd8 	cmpnei	r2,r2,47
  8120b0:	1000031e 	bne	r2,zero,8120c0 <alt_find_file+0x6c>
    {
      len -= 1;
  8120b4:	e0bffe17 	ldw	r2,-8(fp)
  8120b8:	10bfffc4 	addi	r2,r2,-1
  8120bc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8120c0:	e0bffe17 	ldw	r2,-8(fp)
  8120c4:	e0ffff17 	ldw	r3,-4(fp)
  8120c8:	1885883a 	add	r2,r3,r2
  8120cc:	10800003 	ldbu	r2,0(r2)
  8120d0:	10803fcc 	andi	r2,r2,255
  8120d4:	1080201c 	xori	r2,r2,128
  8120d8:	10bfe004 	addi	r2,r2,-128
  8120dc:	10800be0 	cmpeqi	r2,r2,47
  8120e0:	1000081e 	bne	r2,zero,812104 <alt_find_file+0xb0>
  8120e4:	e0bffe17 	ldw	r2,-8(fp)
  8120e8:	e0ffff17 	ldw	r3,-4(fp)
  8120ec:	1885883a 	add	r2,r3,r2
  8120f0:	10800003 	ldbu	r2,0(r2)
  8120f4:	10803fcc 	andi	r2,r2,255
  8120f8:	1080201c 	xori	r2,r2,128
  8120fc:	10bfe004 	addi	r2,r2,-128
  812100:	10000a1e 	bne	r2,zero,81212c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  812104:	e0bffd17 	ldw	r2,-12(fp)
  812108:	10800217 	ldw	r2,8(r2)
  81210c:	e0fffe17 	ldw	r3,-8(fp)
  812110:	180d883a 	mov	r6,r3
  812114:	e17fff17 	ldw	r5,-4(fp)
  812118:	1009883a 	mov	r4,r2
  81211c:	08129380 	call	812938 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  812120:	1000021e 	bne	r2,zero,81212c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  812124:	e0bffd17 	ldw	r2,-12(fp)
  812128:	00000706 	br	812148 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  81212c:	e0bffd17 	ldw	r2,-12(fp)
  812130:	10800017 	ldw	r2,0(r2)
  812134:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  812138:	e0fffd17 	ldw	r3,-12(fp)
  81213c:	d0a00904 	addi	r2,gp,-32732
  812140:	18bfcc1e 	bne	r3,r2,812074 <__alt_mem_onchip_mem+0xff792074>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  812144:	0005883a 	mov	r2,zero
}
  812148:	e037883a 	mov	sp,fp
  81214c:	dfc00117 	ldw	ra,4(sp)
  812150:	df000017 	ldw	fp,0(sp)
  812154:	dec00204 	addi	sp,sp,8
  812158:	f800283a 	ret

0081215c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  81215c:	defffc04 	addi	sp,sp,-16
  812160:	df000315 	stw	fp,12(sp)
  812164:	df000304 	addi	fp,sp,12
  812168:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  81216c:	00bffa04 	movi	r2,-24
  812170:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  812174:	e03ffd15 	stw	zero,-12(fp)
  812178:	00001906 	br	8121e0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  81217c:	00802074 	movhi	r2,129
  812180:	108f3104 	addi	r2,r2,15556
  812184:	e0fffd17 	ldw	r3,-12(fp)
  812188:	18c00324 	muli	r3,r3,12
  81218c:	10c5883a 	add	r2,r2,r3
  812190:	10800017 	ldw	r2,0(r2)
  812194:	10000f1e 	bne	r2,zero,8121d4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  812198:	00802074 	movhi	r2,129
  81219c:	108f3104 	addi	r2,r2,15556
  8121a0:	e0fffd17 	ldw	r3,-12(fp)
  8121a4:	18c00324 	muli	r3,r3,12
  8121a8:	10c5883a 	add	r2,r2,r3
  8121ac:	e0ffff17 	ldw	r3,-4(fp)
  8121b0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  8121b4:	d0e00d17 	ldw	r3,-32716(gp)
  8121b8:	e0bffd17 	ldw	r2,-12(fp)
  8121bc:	1880020e 	bge	r3,r2,8121c8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  8121c0:	e0bffd17 	ldw	r2,-12(fp)
  8121c4:	d0a00d15 	stw	r2,-32716(gp)
      }
      rc = i;
  8121c8:	e0bffd17 	ldw	r2,-12(fp)
  8121cc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  8121d0:	00000606 	br	8121ec <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8121d4:	e0bffd17 	ldw	r2,-12(fp)
  8121d8:	10800044 	addi	r2,r2,1
  8121dc:	e0bffd15 	stw	r2,-12(fp)
  8121e0:	e0bffd17 	ldw	r2,-12(fp)
  8121e4:	10800810 	cmplti	r2,r2,32
  8121e8:	103fe41e 	bne	r2,zero,81217c <__alt_mem_onchip_mem+0xff79217c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8121ec:	e0bffe17 	ldw	r2,-8(fp)
}
  8121f0:	e037883a 	mov	sp,fp
  8121f4:	df000017 	ldw	fp,0(sp)
  8121f8:	dec00104 	addi	sp,sp,4
  8121fc:	f800283a 	ret

00812200 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  812200:	defffe04 	addi	sp,sp,-8
  812204:	dfc00115 	stw	ra,4(sp)
  812208:	df000015 	stw	fp,0(sp)
  81220c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  812210:	01440004 	movi	r5,4096
  812214:	0009883a 	mov	r4,zero
  812218:	08127c00 	call	8127c0 <alt_icache_flush>
#endif
}
  81221c:	0001883a 	nop
  812220:	e037883a 	mov	sp,fp
  812224:	dfc00117 	ldw	ra,4(sp)
  812228:	df000017 	ldw	fp,0(sp)
  81222c:	dec00204 	addi	sp,sp,8
  812230:	f800283a 	ret

00812234 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  812234:	defff904 	addi	sp,sp,-28
  812238:	dfc00615 	stw	ra,24(sp)
  81223c:	df000515 	stw	fp,20(sp)
  812240:	df000504 	addi	fp,sp,20
  812244:	e13ffc15 	stw	r4,-16(fp)
  812248:	e17ffd15 	stw	r5,-12(fp)
  81224c:	e1bffe15 	stw	r6,-8(fp)
  812250:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  812254:	e0800217 	ldw	r2,8(fp)
  812258:	d8800015 	stw	r2,0(sp)
  81225c:	e1ffff17 	ldw	r7,-4(fp)
  812260:	e1bffe17 	ldw	r6,-8(fp)
  812264:	e17ffd17 	ldw	r5,-12(fp)
  812268:	e13ffc17 	ldw	r4,-16(fp)
  81226c:	08123e40 	call	8123e4 <alt_iic_isr_register>
}  
  812270:	e037883a 	mov	sp,fp
  812274:	dfc00117 	ldw	ra,4(sp)
  812278:	df000017 	ldw	fp,0(sp)
  81227c:	dec00204 	addi	sp,sp,8
  812280:	f800283a 	ret

00812284 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  812284:	defff904 	addi	sp,sp,-28
  812288:	df000615 	stw	fp,24(sp)
  81228c:	df000604 	addi	fp,sp,24
  812290:	e13ffe15 	stw	r4,-8(fp)
  812294:	e17fff15 	stw	r5,-4(fp)
  812298:	e0bfff17 	ldw	r2,-4(fp)
  81229c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8122a0:	0005303a 	rdctl	r2,status
  8122a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8122a8:	e0fffb17 	ldw	r3,-20(fp)
  8122ac:	00bfff84 	movi	r2,-2
  8122b0:	1884703a 	and	r2,r3,r2
  8122b4:	1001703a 	wrctl	status,r2
  
  return context;
  8122b8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8122bc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  8122c0:	00c00044 	movi	r3,1
  8122c4:	e0bffa17 	ldw	r2,-24(fp)
  8122c8:	1884983a 	sll	r2,r3,r2
  8122cc:	1007883a 	mov	r3,r2
  8122d0:	d0a76c17 	ldw	r2,-25168(gp)
  8122d4:	1884b03a 	or	r2,r3,r2
  8122d8:	d0a76c15 	stw	r2,-25168(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8122dc:	d0a76c17 	ldw	r2,-25168(gp)
  8122e0:	100170fa 	wrctl	ienable,r2
  8122e4:	e0bffc17 	ldw	r2,-16(fp)
  8122e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8122ec:	e0bffd17 	ldw	r2,-12(fp)
  8122f0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8122f4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  8122f8:	0001883a 	nop
}
  8122fc:	e037883a 	mov	sp,fp
  812300:	df000017 	ldw	fp,0(sp)
  812304:	dec00104 	addi	sp,sp,4
  812308:	f800283a 	ret

0081230c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  81230c:	defff904 	addi	sp,sp,-28
  812310:	df000615 	stw	fp,24(sp)
  812314:	df000604 	addi	fp,sp,24
  812318:	e13ffe15 	stw	r4,-8(fp)
  81231c:	e17fff15 	stw	r5,-4(fp)
  812320:	e0bfff17 	ldw	r2,-4(fp)
  812324:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812328:	0005303a 	rdctl	r2,status
  81232c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812330:	e0fffb17 	ldw	r3,-20(fp)
  812334:	00bfff84 	movi	r2,-2
  812338:	1884703a 	and	r2,r3,r2
  81233c:	1001703a 	wrctl	status,r2
  
  return context;
  812340:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  812344:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  812348:	00c00044 	movi	r3,1
  81234c:	e0bffa17 	ldw	r2,-24(fp)
  812350:	1884983a 	sll	r2,r3,r2
  812354:	0084303a 	nor	r2,zero,r2
  812358:	1007883a 	mov	r3,r2
  81235c:	d0a76c17 	ldw	r2,-25168(gp)
  812360:	1884703a 	and	r2,r3,r2
  812364:	d0a76c15 	stw	r2,-25168(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  812368:	d0a76c17 	ldw	r2,-25168(gp)
  81236c:	100170fa 	wrctl	ienable,r2
  812370:	e0bffc17 	ldw	r2,-16(fp)
  812374:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812378:	e0bffd17 	ldw	r2,-12(fp)
  81237c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  812380:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  812384:	0001883a 	nop
}
  812388:	e037883a 	mov	sp,fp
  81238c:	df000017 	ldw	fp,0(sp)
  812390:	dec00104 	addi	sp,sp,4
  812394:	f800283a 	ret

00812398 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  812398:	defffc04 	addi	sp,sp,-16
  81239c:	df000315 	stw	fp,12(sp)
  8123a0:	df000304 	addi	fp,sp,12
  8123a4:	e13ffe15 	stw	r4,-8(fp)
  8123a8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  8123ac:	000530fa 	rdctl	r2,ienable
  8123b0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  8123b4:	00c00044 	movi	r3,1
  8123b8:	e0bfff17 	ldw	r2,-4(fp)
  8123bc:	1884983a 	sll	r2,r3,r2
  8123c0:	1007883a 	mov	r3,r2
  8123c4:	e0bffd17 	ldw	r2,-12(fp)
  8123c8:	1884703a 	and	r2,r3,r2
  8123cc:	1004c03a 	cmpne	r2,r2,zero
  8123d0:	10803fcc 	andi	r2,r2,255
}
  8123d4:	e037883a 	mov	sp,fp
  8123d8:	df000017 	ldw	fp,0(sp)
  8123dc:	dec00104 	addi	sp,sp,4
  8123e0:	f800283a 	ret

008123e4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8123e4:	defff504 	addi	sp,sp,-44
  8123e8:	dfc00a15 	stw	ra,40(sp)
  8123ec:	df000915 	stw	fp,36(sp)
  8123f0:	df000904 	addi	fp,sp,36
  8123f4:	e13ffc15 	stw	r4,-16(fp)
  8123f8:	e17ffd15 	stw	r5,-12(fp)
  8123fc:	e1bffe15 	stw	r6,-8(fp)
  812400:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  812404:	00bffa84 	movi	r2,-22
  812408:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  81240c:	e0bffd17 	ldw	r2,-12(fp)
  812410:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  812414:	e0bff817 	ldw	r2,-32(fp)
  812418:	10800808 	cmpgei	r2,r2,32
  81241c:	1000271e 	bne	r2,zero,8124bc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812420:	0005303a 	rdctl	r2,status
  812424:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812428:	e0fffb17 	ldw	r3,-20(fp)
  81242c:	00bfff84 	movi	r2,-2
  812430:	1884703a 	and	r2,r3,r2
  812434:	1001703a 	wrctl	status,r2
  
  return context;
  812438:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  81243c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  812440:	00802074 	movhi	r2,129
  812444:	109bb104 	addi	r2,r2,28356
  812448:	e0fff817 	ldw	r3,-32(fp)
  81244c:	180690fa 	slli	r3,r3,3
  812450:	10c5883a 	add	r2,r2,r3
  812454:	e0fffe17 	ldw	r3,-8(fp)
  812458:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  81245c:	00802074 	movhi	r2,129
  812460:	109bb104 	addi	r2,r2,28356
  812464:	e0fff817 	ldw	r3,-32(fp)
  812468:	180690fa 	slli	r3,r3,3
  81246c:	10c5883a 	add	r2,r2,r3
  812470:	10800104 	addi	r2,r2,4
  812474:	e0ffff17 	ldw	r3,-4(fp)
  812478:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  81247c:	e0bffe17 	ldw	r2,-8(fp)
  812480:	10000526 	beq	r2,zero,812498 <alt_iic_isr_register+0xb4>
  812484:	e0bff817 	ldw	r2,-32(fp)
  812488:	100b883a 	mov	r5,r2
  81248c:	e13ffc17 	ldw	r4,-16(fp)
  812490:	08122840 	call	812284 <alt_ic_irq_enable>
  812494:	00000406 	br	8124a8 <alt_iic_isr_register+0xc4>
  812498:	e0bff817 	ldw	r2,-32(fp)
  81249c:	100b883a 	mov	r5,r2
  8124a0:	e13ffc17 	ldw	r4,-16(fp)
  8124a4:	081230c0 	call	81230c <alt_ic_irq_disable>
  8124a8:	e0bff715 	stw	r2,-36(fp)
  8124ac:	e0bffa17 	ldw	r2,-24(fp)
  8124b0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8124b4:	e0bff917 	ldw	r2,-28(fp)
  8124b8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8124bc:	e0bff717 	ldw	r2,-36(fp)
}
  8124c0:	e037883a 	mov	sp,fp
  8124c4:	dfc00117 	ldw	ra,4(sp)
  8124c8:	df000017 	ldw	fp,0(sp)
  8124cc:	dec00204 	addi	sp,sp,8
  8124d0:	f800283a 	ret

008124d4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8124d4:	defff904 	addi	sp,sp,-28
  8124d8:	dfc00615 	stw	ra,24(sp)
  8124dc:	df000515 	stw	fp,20(sp)
  8124e0:	df000504 	addi	fp,sp,20
  8124e4:	e13ffc15 	stw	r4,-16(fp)
  8124e8:	e17ffd15 	stw	r5,-12(fp)
  8124ec:	e1bffe15 	stw	r6,-8(fp)
  8124f0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  8124f4:	e1bfff17 	ldw	r6,-4(fp)
  8124f8:	e17ffe17 	ldw	r5,-8(fp)
  8124fc:	e13ffd17 	ldw	r4,-12(fp)
  812500:	080f34c0 	call	80f34c <open>
  812504:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  812508:	e0bffb17 	ldw	r2,-20(fp)
  81250c:	10001c16 	blt	r2,zero,812580 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  812510:	00802074 	movhi	r2,129
  812514:	108f3104 	addi	r2,r2,15556
  812518:	e0fffb17 	ldw	r3,-20(fp)
  81251c:	18c00324 	muli	r3,r3,12
  812520:	10c5883a 	add	r2,r2,r3
  812524:	10c00017 	ldw	r3,0(r2)
  812528:	e0bffc17 	ldw	r2,-16(fp)
  81252c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  812530:	00802074 	movhi	r2,129
  812534:	108f3104 	addi	r2,r2,15556
  812538:	e0fffb17 	ldw	r3,-20(fp)
  81253c:	18c00324 	muli	r3,r3,12
  812540:	10c5883a 	add	r2,r2,r3
  812544:	10800104 	addi	r2,r2,4
  812548:	10c00017 	ldw	r3,0(r2)
  81254c:	e0bffc17 	ldw	r2,-16(fp)
  812550:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  812554:	00802074 	movhi	r2,129
  812558:	108f3104 	addi	r2,r2,15556
  81255c:	e0fffb17 	ldw	r3,-20(fp)
  812560:	18c00324 	muli	r3,r3,12
  812564:	10c5883a 	add	r2,r2,r3
  812568:	10800204 	addi	r2,r2,8
  81256c:	10c00017 	ldw	r3,0(r2)
  812570:	e0bffc17 	ldw	r2,-16(fp)
  812574:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  812578:	e13ffb17 	ldw	r4,-20(fp)
  81257c:	080f5d80 	call	80f5d8 <alt_release_fd>
  }
} 
  812580:	0001883a 	nop
  812584:	e037883a 	mov	sp,fp
  812588:	dfc00117 	ldw	ra,4(sp)
  81258c:	df000017 	ldw	fp,0(sp)
  812590:	dec00204 	addi	sp,sp,8
  812594:	f800283a 	ret

00812598 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  812598:	defffb04 	addi	sp,sp,-20
  81259c:	dfc00415 	stw	ra,16(sp)
  8125a0:	df000315 	stw	fp,12(sp)
  8125a4:	df000304 	addi	fp,sp,12
  8125a8:	e13ffd15 	stw	r4,-12(fp)
  8125ac:	e17ffe15 	stw	r5,-8(fp)
  8125b0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8125b4:	01c07fc4 	movi	r7,511
  8125b8:	01800044 	movi	r6,1
  8125bc:	e17ffd17 	ldw	r5,-12(fp)
  8125c0:	01002074 	movhi	r4,129
  8125c4:	210f3404 	addi	r4,r4,15568
  8125c8:	08124d40 	call	8124d4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8125cc:	01c07fc4 	movi	r7,511
  8125d0:	000d883a 	mov	r6,zero
  8125d4:	e17ffe17 	ldw	r5,-8(fp)
  8125d8:	01002074 	movhi	r4,129
  8125dc:	210f3104 	addi	r4,r4,15556
  8125e0:	08124d40 	call	8124d4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  8125e4:	01c07fc4 	movi	r7,511
  8125e8:	01800044 	movi	r6,1
  8125ec:	e17fff17 	ldw	r5,-4(fp)
  8125f0:	01002074 	movhi	r4,129
  8125f4:	210f3704 	addi	r4,r4,15580
  8125f8:	08124d40 	call	8124d4 <alt_open_fd>
}  
  8125fc:	0001883a 	nop
  812600:	e037883a 	mov	sp,fp
  812604:	dfc00117 	ldw	ra,4(sp)
  812608:	df000017 	ldw	fp,0(sp)
  81260c:	dec00204 	addi	sp,sp,8
  812610:	f800283a 	ret

00812614 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  812614:	defffd04 	addi	sp,sp,-12
  812618:	dfc00215 	stw	ra,8(sp)
  81261c:	df000115 	stw	fp,4(sp)
  812620:	df000104 	addi	fp,sp,4
  812624:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  812628:	e13fff17 	ldw	r4,-4(fp)
  81262c:	08126680 	call	812668 <alt_busy_sleep>
}
  812630:	e037883a 	mov	sp,fp
  812634:	dfc00117 	ldw	ra,4(sp)
  812638:	df000017 	ldw	fp,0(sp)
  81263c:	dec00204 	addi	sp,sp,8
  812640:	f800283a 	ret

00812644 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  812644:	deffff04 	addi	sp,sp,-4
  812648:	df000015 	stw	fp,0(sp)
  81264c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  812650:	000170fa 	wrctl	ienable,zero
}
  812654:	0001883a 	nop
  812658:	e037883a 	mov	sp,fp
  81265c:	df000017 	ldw	fp,0(sp)
  812660:	dec00104 	addi	sp,sp,4
  812664:	f800283a 	ret

00812668 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  812668:	defffa04 	addi	sp,sp,-24
  81266c:	dfc00515 	stw	ra,20(sp)
  812670:	df000415 	stw	fp,16(sp)
  812674:	df000404 	addi	fp,sp,16
  812678:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  81267c:	008000c4 	movi	r2,3
  812680:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  812684:	e0fffd17 	ldw	r3,-12(fp)
  812688:	008003f4 	movhi	r2,15
  81268c:	10909004 	addi	r2,r2,16960
  812690:	1885383a 	mul	r2,r3,r2
  812694:	100b883a 	mov	r5,r2
  812698:	0100bef4 	movhi	r4,763
  81269c:	213c2004 	addi	r4,r4,-3968
  8126a0:	080c2b80 	call	80c2b8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  8126a4:	100b883a 	mov	r5,r2
  8126a8:	01200034 	movhi	r4,32768
  8126ac:	213fffc4 	addi	r4,r4,-1
  8126b0:	080c2b80 	call	80c2b8 <__udivsi3>
  8126b4:	100b883a 	mov	r5,r2
  8126b8:	e13fff17 	ldw	r4,-4(fp)
  8126bc:	080c2b80 	call	80c2b8 <__udivsi3>
  8126c0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  8126c4:	e0bffe17 	ldw	r2,-8(fp)
  8126c8:	10002a26 	beq	r2,zero,812774 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  8126cc:	e03ffc15 	stw	zero,-16(fp)
  8126d0:	00001706 	br	812730 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  8126d4:	00a00034 	movhi	r2,32768
  8126d8:	10bfffc4 	addi	r2,r2,-1
  8126dc:	10bfffc4 	addi	r2,r2,-1
  8126e0:	103ffe1e 	bne	r2,zero,8126dc <__alt_mem_onchip_mem+0xff7926dc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  8126e4:	e0fffd17 	ldw	r3,-12(fp)
  8126e8:	008003f4 	movhi	r2,15
  8126ec:	10909004 	addi	r2,r2,16960
  8126f0:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  8126f4:	100b883a 	mov	r5,r2
  8126f8:	0100bef4 	movhi	r4,763
  8126fc:	213c2004 	addi	r4,r4,-3968
  812700:	080c2b80 	call	80c2b8 <__udivsi3>
  812704:	100b883a 	mov	r5,r2
  812708:	01200034 	movhi	r4,32768
  81270c:	213fffc4 	addi	r4,r4,-1
  812710:	080c2b80 	call	80c2b8 <__udivsi3>
  812714:	1007883a 	mov	r3,r2
  812718:	e0bfff17 	ldw	r2,-4(fp)
  81271c:	10c5c83a 	sub	r2,r2,r3
  812720:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  812724:	e0bffc17 	ldw	r2,-16(fp)
  812728:	10800044 	addi	r2,r2,1
  81272c:	e0bffc15 	stw	r2,-16(fp)
  812730:	e0fffc17 	ldw	r3,-16(fp)
  812734:	e0bffe17 	ldw	r2,-8(fp)
  812738:	18bfe616 	blt	r3,r2,8126d4 <__alt_mem_onchip_mem+0xff7926d4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  81273c:	e0fffd17 	ldw	r3,-12(fp)
  812740:	008003f4 	movhi	r2,15
  812744:	10909004 	addi	r2,r2,16960
  812748:	1885383a 	mul	r2,r3,r2
  81274c:	100b883a 	mov	r5,r2
  812750:	0100bef4 	movhi	r4,763
  812754:	213c2004 	addi	r4,r4,-3968
  812758:	080c2b80 	call	80c2b8 <__udivsi3>
  81275c:	1007883a 	mov	r3,r2
  812760:	e0bfff17 	ldw	r2,-4(fp)
  812764:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  812768:	10bfffc4 	addi	r2,r2,-1
  81276c:	103ffe1e 	bne	r2,zero,812768 <__alt_mem_onchip_mem+0xff792768>
  812770:	00000d06 	br	8127a8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  812774:	e0fffd17 	ldw	r3,-12(fp)
  812778:	008003f4 	movhi	r2,15
  81277c:	10909004 	addi	r2,r2,16960
  812780:	1885383a 	mul	r2,r3,r2
  812784:	100b883a 	mov	r5,r2
  812788:	0100bef4 	movhi	r4,763
  81278c:	213c2004 	addi	r4,r4,-3968
  812790:	080c2b80 	call	80c2b8 <__udivsi3>
  812794:	1007883a 	mov	r3,r2
  812798:	e0bfff17 	ldw	r2,-4(fp)
  81279c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8127a0:	10bfffc4 	addi	r2,r2,-1
  8127a4:	00bffe16 	blt	zero,r2,8127a0 <__alt_mem_onchip_mem+0xff7927a0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  8127a8:	0005883a 	mov	r2,zero
}
  8127ac:	e037883a 	mov	sp,fp
  8127b0:	dfc00117 	ldw	ra,4(sp)
  8127b4:	df000017 	ldw	fp,0(sp)
  8127b8:	dec00204 	addi	sp,sp,8
  8127bc:	f800283a 	ret

008127c0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8127c0:	defffb04 	addi	sp,sp,-20
  8127c4:	df000415 	stw	fp,16(sp)
  8127c8:	df000404 	addi	fp,sp,16
  8127cc:	e13ffe15 	stw	r4,-8(fp)
  8127d0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  8127d4:	e0bfff17 	ldw	r2,-4(fp)
  8127d8:	10840070 	cmpltui	r2,r2,4097
  8127dc:	1000021e 	bne	r2,zero,8127e8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  8127e0:	00840004 	movi	r2,4096
  8127e4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  8127e8:	e0fffe17 	ldw	r3,-8(fp)
  8127ec:	e0bfff17 	ldw	r2,-4(fp)
  8127f0:	1885883a 	add	r2,r3,r2
  8127f4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8127f8:	e0bffe17 	ldw	r2,-8(fp)
  8127fc:	e0bffc15 	stw	r2,-16(fp)
  812800:	00000506 	br	812818 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  812804:	e0bffc17 	ldw	r2,-16(fp)
  812808:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81280c:	e0bffc17 	ldw	r2,-16(fp)
  812810:	10800804 	addi	r2,r2,32
  812814:	e0bffc15 	stw	r2,-16(fp)
  812818:	e0fffc17 	ldw	r3,-16(fp)
  81281c:	e0bffd17 	ldw	r2,-12(fp)
  812820:	18bff836 	bltu	r3,r2,812804 <__alt_mem_onchip_mem+0xff792804>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  812824:	e0bffe17 	ldw	r2,-8(fp)
  812828:	108007cc 	andi	r2,r2,31
  81282c:	10000226 	beq	r2,zero,812838 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  812830:	e0bffc17 	ldw	r2,-16(fp)
  812834:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  812838:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  81283c:	0001883a 	nop
  812840:	e037883a 	mov	sp,fp
  812844:	df000017 	ldw	fp,0(sp)
  812848:	dec00104 	addi	sp,sp,4
  81284c:	f800283a 	ret

00812850 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  812850:	defffe04 	addi	sp,sp,-8
  812854:	df000115 	stw	fp,4(sp)
  812858:	df000104 	addi	fp,sp,4
  81285c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  812860:	e0bfff17 	ldw	r2,-4(fp)
  812864:	10bffe84 	addi	r2,r2,-6
  812868:	10c00428 	cmpgeui	r3,r2,16
  81286c:	18001a1e 	bne	r3,zero,8128d8 <alt_exception_cause_generated_bad_addr+0x88>
  812870:	100690ba 	slli	r3,r2,2
  812874:	00802074 	movhi	r2,129
  812878:	108a2204 	addi	r2,r2,10376
  81287c:	1885883a 	add	r2,r3,r2
  812880:	10800017 	ldw	r2,0(r2)
  812884:	1000683a 	jmp	r2
  812888:	008128c8 	cmpgei	r2,zero,1187
  81288c:	008128c8 	cmpgei	r2,zero,1187
  812890:	008128d8 	cmpnei	r2,zero,1187
  812894:	008128d8 	cmpnei	r2,zero,1187
  812898:	008128d8 	cmpnei	r2,zero,1187
  81289c:	008128c8 	cmpgei	r2,zero,1187
  8128a0:	008128d0 	cmplti	r2,zero,1187
  8128a4:	008128d8 	cmpnei	r2,zero,1187
  8128a8:	008128c8 	cmpgei	r2,zero,1187
  8128ac:	008128c8 	cmpgei	r2,zero,1187
  8128b0:	008128d8 	cmpnei	r2,zero,1187
  8128b4:	008128c8 	cmpgei	r2,zero,1187
  8128b8:	008128d0 	cmplti	r2,zero,1187
  8128bc:	008128d8 	cmpnei	r2,zero,1187
  8128c0:	008128d8 	cmpnei	r2,zero,1187
  8128c4:	008128c8 	cmpgei	r2,zero,1187
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  8128c8:	00800044 	movi	r2,1
  8128cc:	00000306 	br	8128dc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  8128d0:	0005883a 	mov	r2,zero
  8128d4:	00000106 	br	8128dc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  8128d8:	0005883a 	mov	r2,zero
  }
}
  8128dc:	e037883a 	mov	sp,fp
  8128e0:	df000017 	ldw	fp,0(sp)
  8128e4:	dec00104 	addi	sp,sp,4
  8128e8:	f800283a 	ret

008128ec <atexit>:
  8128ec:	200b883a 	mov	r5,r4
  8128f0:	000f883a 	mov	r7,zero
  8128f4:	000d883a 	mov	r6,zero
  8128f8:	0009883a 	mov	r4,zero
  8128fc:	08129b41 	jmpi	8129b4 <__register_exitproc>

00812900 <exit>:
  812900:	defffe04 	addi	sp,sp,-8
  812904:	000b883a 	mov	r5,zero
  812908:	dc000015 	stw	r16,0(sp)
  81290c:	dfc00115 	stw	ra,4(sp)
  812910:	2021883a 	mov	r16,r4
  812914:	0812acc0 	call	812acc <__call_exitprocs>
  812918:	00802074 	movhi	r2,129
  81291c:	10942404 	addi	r2,r2,20624
  812920:	11000017 	ldw	r4,0(r2)
  812924:	20800f17 	ldw	r2,60(r4)
  812928:	10000126 	beq	r2,zero,812930 <exit+0x30>
  81292c:	103ee83a 	callr	r2
  812930:	8009883a 	mov	r4,r16
  812934:	0812c4c0 	call	812c4c <_exit>

00812938 <memcmp>:
  812938:	01c000c4 	movi	r7,3
  81293c:	3980192e 	bgeu	r7,r6,8129a4 <memcmp+0x6c>
  812940:	2144b03a 	or	r2,r4,r5
  812944:	11c4703a 	and	r2,r2,r7
  812948:	10000f26 	beq	r2,zero,812988 <memcmp+0x50>
  81294c:	20800003 	ldbu	r2,0(r4)
  812950:	28c00003 	ldbu	r3,0(r5)
  812954:	10c0151e 	bne	r2,r3,8129ac <memcmp+0x74>
  812958:	31bfff84 	addi	r6,r6,-2
  81295c:	01ffffc4 	movi	r7,-1
  812960:	00000406 	br	812974 <memcmp+0x3c>
  812964:	20800003 	ldbu	r2,0(r4)
  812968:	28c00003 	ldbu	r3,0(r5)
  81296c:	31bfffc4 	addi	r6,r6,-1
  812970:	10c00e1e 	bne	r2,r3,8129ac <memcmp+0x74>
  812974:	21000044 	addi	r4,r4,1
  812978:	29400044 	addi	r5,r5,1
  81297c:	31fff91e 	bne	r6,r7,812964 <__alt_mem_onchip_mem+0xff792964>
  812980:	0005883a 	mov	r2,zero
  812984:	f800283a 	ret
  812988:	20c00017 	ldw	r3,0(r4)
  81298c:	28800017 	ldw	r2,0(r5)
  812990:	18bfee1e 	bne	r3,r2,81294c <__alt_mem_onchip_mem+0xff79294c>
  812994:	31bfff04 	addi	r6,r6,-4
  812998:	21000104 	addi	r4,r4,4
  81299c:	29400104 	addi	r5,r5,4
  8129a0:	39bff936 	bltu	r7,r6,812988 <__alt_mem_onchip_mem+0xff792988>
  8129a4:	303fe91e 	bne	r6,zero,81294c <__alt_mem_onchip_mem+0xff79294c>
  8129a8:	003ff506 	br	812980 <__alt_mem_onchip_mem+0xff792980>
  8129ac:	10c5c83a 	sub	r2,r2,r3
  8129b0:	f800283a 	ret

008129b4 <__register_exitproc>:
  8129b4:	defffa04 	addi	sp,sp,-24
  8129b8:	dc000315 	stw	r16,12(sp)
  8129bc:	04002074 	movhi	r16,129
  8129c0:	84142404 	addi	r16,r16,20624
  8129c4:	80c00017 	ldw	r3,0(r16)
  8129c8:	dc400415 	stw	r17,16(sp)
  8129cc:	dfc00515 	stw	ra,20(sp)
  8129d0:	18805217 	ldw	r2,328(r3)
  8129d4:	2023883a 	mov	r17,r4
  8129d8:	10003726 	beq	r2,zero,812ab8 <__register_exitproc+0x104>
  8129dc:	10c00117 	ldw	r3,4(r2)
  8129e0:	010007c4 	movi	r4,31
  8129e4:	20c00e16 	blt	r4,r3,812a20 <__register_exitproc+0x6c>
  8129e8:	1a000044 	addi	r8,r3,1
  8129ec:	8800221e 	bne	r17,zero,812a78 <__register_exitproc+0xc4>
  8129f0:	18c00084 	addi	r3,r3,2
  8129f4:	18c7883a 	add	r3,r3,r3
  8129f8:	18c7883a 	add	r3,r3,r3
  8129fc:	12000115 	stw	r8,4(r2)
  812a00:	10c7883a 	add	r3,r2,r3
  812a04:	19400015 	stw	r5,0(r3)
  812a08:	0005883a 	mov	r2,zero
  812a0c:	dfc00517 	ldw	ra,20(sp)
  812a10:	dc400417 	ldw	r17,16(sp)
  812a14:	dc000317 	ldw	r16,12(sp)
  812a18:	dec00604 	addi	sp,sp,24
  812a1c:	f800283a 	ret
  812a20:	00800034 	movhi	r2,0
  812a24:	10800004 	addi	r2,r2,0
  812a28:	10002626 	beq	r2,zero,812ac4 <__register_exitproc+0x110>
  812a2c:	01006404 	movi	r4,400
  812a30:	d9400015 	stw	r5,0(sp)
  812a34:	d9800115 	stw	r6,4(sp)
  812a38:	d9c00215 	stw	r7,8(sp)
  812a3c:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  812a40:	d9400017 	ldw	r5,0(sp)
  812a44:	d9800117 	ldw	r6,4(sp)
  812a48:	d9c00217 	ldw	r7,8(sp)
  812a4c:	10001d26 	beq	r2,zero,812ac4 <__register_exitproc+0x110>
  812a50:	81000017 	ldw	r4,0(r16)
  812a54:	10000115 	stw	zero,4(r2)
  812a58:	02000044 	movi	r8,1
  812a5c:	22405217 	ldw	r9,328(r4)
  812a60:	0007883a 	mov	r3,zero
  812a64:	12400015 	stw	r9,0(r2)
  812a68:	20805215 	stw	r2,328(r4)
  812a6c:	10006215 	stw	zero,392(r2)
  812a70:	10006315 	stw	zero,396(r2)
  812a74:	883fde26 	beq	r17,zero,8129f0 <__alt_mem_onchip_mem+0xff7929f0>
  812a78:	18c9883a 	add	r4,r3,r3
  812a7c:	2109883a 	add	r4,r4,r4
  812a80:	1109883a 	add	r4,r2,r4
  812a84:	21802215 	stw	r6,136(r4)
  812a88:	01800044 	movi	r6,1
  812a8c:	12406217 	ldw	r9,392(r2)
  812a90:	30cc983a 	sll	r6,r6,r3
  812a94:	4992b03a 	or	r9,r9,r6
  812a98:	12406215 	stw	r9,392(r2)
  812a9c:	21c04215 	stw	r7,264(r4)
  812aa0:	01000084 	movi	r4,2
  812aa4:	893fd21e 	bne	r17,r4,8129f0 <__alt_mem_onchip_mem+0xff7929f0>
  812aa8:	11006317 	ldw	r4,396(r2)
  812aac:	218cb03a 	or	r6,r4,r6
  812ab0:	11806315 	stw	r6,396(r2)
  812ab4:	003fce06 	br	8129f0 <__alt_mem_onchip_mem+0xff7929f0>
  812ab8:	18805304 	addi	r2,r3,332
  812abc:	18805215 	stw	r2,328(r3)
  812ac0:	003fc606 	br	8129dc <__alt_mem_onchip_mem+0xff7929dc>
  812ac4:	00bfffc4 	movi	r2,-1
  812ac8:	003fd006 	br	812a0c <__alt_mem_onchip_mem+0xff792a0c>

00812acc <__call_exitprocs>:
  812acc:	defff504 	addi	sp,sp,-44
  812ad0:	df000915 	stw	fp,36(sp)
  812ad4:	dd400615 	stw	r21,24(sp)
  812ad8:	dc800315 	stw	r18,12(sp)
  812adc:	dfc00a15 	stw	ra,40(sp)
  812ae0:	ddc00815 	stw	r23,32(sp)
  812ae4:	dd800715 	stw	r22,28(sp)
  812ae8:	dd000515 	stw	r20,20(sp)
  812aec:	dcc00415 	stw	r19,16(sp)
  812af0:	dc400215 	stw	r17,8(sp)
  812af4:	dc000115 	stw	r16,4(sp)
  812af8:	d9000015 	stw	r4,0(sp)
  812afc:	2839883a 	mov	fp,r5
  812b00:	04800044 	movi	r18,1
  812b04:	057fffc4 	movi	r21,-1
  812b08:	00802074 	movhi	r2,129
  812b0c:	10942404 	addi	r2,r2,20624
  812b10:	12000017 	ldw	r8,0(r2)
  812b14:	45005217 	ldw	r20,328(r8)
  812b18:	44c05204 	addi	r19,r8,328
  812b1c:	a0001c26 	beq	r20,zero,812b90 <__call_exitprocs+0xc4>
  812b20:	a0800117 	ldw	r2,4(r20)
  812b24:	15ffffc4 	addi	r23,r2,-1
  812b28:	b8000d16 	blt	r23,zero,812b60 <__call_exitprocs+0x94>
  812b2c:	14000044 	addi	r16,r2,1
  812b30:	8421883a 	add	r16,r16,r16
  812b34:	8421883a 	add	r16,r16,r16
  812b38:	84402004 	addi	r17,r16,128
  812b3c:	a463883a 	add	r17,r20,r17
  812b40:	a421883a 	add	r16,r20,r16
  812b44:	e0001e26 	beq	fp,zero,812bc0 <__call_exitprocs+0xf4>
  812b48:	80804017 	ldw	r2,256(r16)
  812b4c:	e0801c26 	beq	fp,r2,812bc0 <__call_exitprocs+0xf4>
  812b50:	bdffffc4 	addi	r23,r23,-1
  812b54:	843fff04 	addi	r16,r16,-4
  812b58:	8c7fff04 	addi	r17,r17,-4
  812b5c:	bd7ff91e 	bne	r23,r21,812b44 <__alt_mem_onchip_mem+0xff792b44>
  812b60:	00800034 	movhi	r2,0
  812b64:	10800004 	addi	r2,r2,0
  812b68:	10000926 	beq	r2,zero,812b90 <__call_exitprocs+0xc4>
  812b6c:	a0800117 	ldw	r2,4(r20)
  812b70:	1000301e 	bne	r2,zero,812c34 <__call_exitprocs+0x168>
  812b74:	a0800017 	ldw	r2,0(r20)
  812b78:	10003226 	beq	r2,zero,812c44 <__call_exitprocs+0x178>
  812b7c:	a009883a 	mov	r4,r20
  812b80:	98800015 	stw	r2,0(r19)
  812b84:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  812b88:	9d000017 	ldw	r20,0(r19)
  812b8c:	a03fe41e 	bne	r20,zero,812b20 <__alt_mem_onchip_mem+0xff792b20>
  812b90:	dfc00a17 	ldw	ra,40(sp)
  812b94:	df000917 	ldw	fp,36(sp)
  812b98:	ddc00817 	ldw	r23,32(sp)
  812b9c:	dd800717 	ldw	r22,28(sp)
  812ba0:	dd400617 	ldw	r21,24(sp)
  812ba4:	dd000517 	ldw	r20,20(sp)
  812ba8:	dcc00417 	ldw	r19,16(sp)
  812bac:	dc800317 	ldw	r18,12(sp)
  812bb0:	dc400217 	ldw	r17,8(sp)
  812bb4:	dc000117 	ldw	r16,4(sp)
  812bb8:	dec00b04 	addi	sp,sp,44
  812bbc:	f800283a 	ret
  812bc0:	a0800117 	ldw	r2,4(r20)
  812bc4:	80c00017 	ldw	r3,0(r16)
  812bc8:	10bfffc4 	addi	r2,r2,-1
  812bcc:	15c01426 	beq	r2,r23,812c20 <__call_exitprocs+0x154>
  812bd0:	80000015 	stw	zero,0(r16)
  812bd4:	183fde26 	beq	r3,zero,812b50 <__alt_mem_onchip_mem+0xff792b50>
  812bd8:	95c8983a 	sll	r4,r18,r23
  812bdc:	a0806217 	ldw	r2,392(r20)
  812be0:	a5800117 	ldw	r22,4(r20)
  812be4:	2084703a 	and	r2,r4,r2
  812be8:	10000b26 	beq	r2,zero,812c18 <__call_exitprocs+0x14c>
  812bec:	a0806317 	ldw	r2,396(r20)
  812bf0:	2088703a 	and	r4,r4,r2
  812bf4:	20000c1e 	bne	r4,zero,812c28 <__call_exitprocs+0x15c>
  812bf8:	89400017 	ldw	r5,0(r17)
  812bfc:	d9000017 	ldw	r4,0(sp)
  812c00:	183ee83a 	callr	r3
  812c04:	a0800117 	ldw	r2,4(r20)
  812c08:	15bfbf1e 	bne	r2,r22,812b08 <__alt_mem_onchip_mem+0xff792b08>
  812c0c:	98800017 	ldw	r2,0(r19)
  812c10:	153fcf26 	beq	r2,r20,812b50 <__alt_mem_onchip_mem+0xff792b50>
  812c14:	003fbc06 	br	812b08 <__alt_mem_onchip_mem+0xff792b08>
  812c18:	183ee83a 	callr	r3
  812c1c:	003ff906 	br	812c04 <__alt_mem_onchip_mem+0xff792c04>
  812c20:	a5c00115 	stw	r23,4(r20)
  812c24:	003feb06 	br	812bd4 <__alt_mem_onchip_mem+0xff792bd4>
  812c28:	89000017 	ldw	r4,0(r17)
  812c2c:	183ee83a 	callr	r3
  812c30:	003ff406 	br	812c04 <__alt_mem_onchip_mem+0xff792c04>
  812c34:	a0800017 	ldw	r2,0(r20)
  812c38:	a027883a 	mov	r19,r20
  812c3c:	1029883a 	mov	r20,r2
  812c40:	003fb606 	br	812b1c <__alt_mem_onchip_mem+0xff792b1c>
  812c44:	0005883a 	mov	r2,zero
  812c48:	003ffb06 	br	812c38 <__alt_mem_onchip_mem+0xff792c38>

00812c4c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  812c4c:	defffd04 	addi	sp,sp,-12
  812c50:	df000215 	stw	fp,8(sp)
  812c54:	df000204 	addi	fp,sp,8
  812c58:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  812c5c:	0001883a 	nop
  812c60:	e0bfff17 	ldw	r2,-4(fp)
  812c64:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  812c68:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  812c6c:	10000226 	beq	r2,zero,812c78 <_exit+0x2c>
    ALT_SIM_FAIL();
  812c70:	002af070 	cmpltui	zero,zero,43969
  812c74:	00000106 	br	812c7c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  812c78:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  812c7c:	003fff06 	br	812c7c <__alt_mem_onchip_mem+0xff792c7c>
